<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Ghcoder</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://ghcoder.com/"/>
  <updated>2017-05-09T07:43:29.000Z</updated>
  <id>http://ghcoder.com/</id>
  
  <author>
    <name>Ghcoder</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>用Python的Django框架搭建前后台</title>
    <link href="http://ghcoder.com/2017/05/09/20170509/"/>
    <id>http://ghcoder.com/2017/05/09/20170509/</id>
    <published>2017-05-09T07:36:12.000Z</published>
    <updated>2017-05-09T07:43:29.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="人生苦短，我用Python–不管你之前写过多少其他语言，当你有一天回来写python的时候，你就会觉得“世界是那么的美好！”"><a href="#人生苦短，我用Python–不管你之前写过多少其他语言，当你有一天回来写python的时候，你就会觉得“世界是那么的美好！”" class="headerlink" title="人生苦短，我用Python–不管你之前写过多少其他语言，当你有一天回来写python的时候，你就会觉得“世界是那么的美好！”"></a>人生苦短，我用Python–不管你之前写过多少其他语言，当你有一天回来写python的时候，你就会觉得“世界是那么的美好！”</h3><h4 id="今天我就来讲讲我是如何用Python的django-https-docs-djangoproject-com-来搭建后台的："><a href="#今天我就来讲讲我是如何用Python的django-https-docs-djangoproject-com-来搭建后台的：" class="headerlink" title="今天我就来讲讲我是如何用Python的django[https://docs.djangoproject.com] 来搭建后台的："></a>今天我就来讲讲我是如何用<code>Python</code>的<code>django</code>[<a href="https://docs.djangoproject.com" target="_blank" rel="external">https://docs.djangoproject.com</a>] 来搭建后台的：</h4><ol>
<li>我是在mac的环境下搭建的，linux也试过，其实搭建环境来说，都差不多,这里就以mac为例子</li>
<li>首先mac或者linux的话，应该是自带python的，如果是win系统的话，你可以自己去下载[<a href="https://www.python.org/" target="_blank" rel="external">https://www.python.org/</a>]</li>
<li>数据库（database）也是很重要的，因为我们想做的是一个健全的前后台系统、后期还需要给移动端提供数据来源，所以我这里选用mysql，我这里偷懒就用了<code>MAMP</code>一键安装，在linux下也有相应的叫<code>LAMP</code>,一步步点击下一步之后就完成了，这里我用的是<code>Apache+Mysql</code>。安装完成之后，你就可以看到mysql的端口、密码、用户名啥的（这里可能有些坑，需要自己去踩，这里就不说了，自行google),这里要弄好，因为我们后续在配置django的时候需要配置。</li>
<li>下面进入正式安装jdango，官方建议通过pip去安装。</li>
</ol>
<figure class="highlight cmake"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip <span class="keyword">install</span> -U pip</div></pre></td></tr></table></figure>
<h5 id="如果报错就执行下面的命令："><a href="#如果报错就执行下面的命令：" class="headerlink" title="如果报错就执行下面的命令："></a>如果报错就执行下面的命令：</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip <span class="keyword">install</span> <span class="comment">--upgrade pip</span></div></pre></td></tr></table></figure>
<h5 id="不出意外的话，此时你的pip，应该已经安装好了。下面来安装环境，这里环境，官方的意见是安装virtualenv或者virtualenvwrapper-这里其实我都试过，你也可以试试，这里就用virtualenv-https-virtualenv-pypa-io-en-stable-你也可以自己参考一下virtualenv的官方介绍-https-virtualenv-pypa-io-en-stable-installation"><a href="#不出意外的话，此时你的pip，应该已经安装好了。下面来安装环境，这里环境，官方的意见是安装virtualenv或者virtualenvwrapper-这里其实我都试过，你也可以试试，这里就用virtualenv-https-virtualenv-pypa-io-en-stable-你也可以自己参考一下virtualenv的官方介绍-https-virtualenv-pypa-io-en-stable-installation" class="headerlink" title="不出意外的话，此时你的pip，应该已经安装好了。下面来安装环境，这里环境，官方的意见是安装virtualenv或者virtualenvwrapper,这里其实我都试过，你也可以试试，这里就用virtualenv [https://virtualenv.pypa.io/en/stable/] , 你也可以自己参考一下virtualenv的官方介绍 [https://virtualenv.pypa.io/en/stable/installation/] :"></a>不出意外的话，此时你的pip，应该已经安装好了。下面来安装环境，这里环境，官方的意见是安装<code>virtualenv</code>或者<code>virtualenvwrapper</code>,这里其实我都试过，你也可以试试，这里就用<code>virtualenv</code> [<a href="https://virtualenv.pypa.io/en/stable/" target="_blank" rel="external">https://virtualenv.pypa.io/en/stable/</a>] , 你也可以自己参考一下virtualenv的官方介绍 [<a href="https://virtualenv.pypa.io/en/stable/installation/" target="_blank" rel="external">https://virtualenv.pypa.io/en/stable/installation/</a>] :</h5><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">[sudo]</span> pip install virtualenv</div></pre></td></tr></table></figure>
<h5 id="最后执行安装django的命令："><a href="#最后执行安装django的命令：" class="headerlink" title="最后执行安装django的命令："></a>最后执行安装<code>django</code>的命令：</h5><figure class="highlight cmake"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip <span class="keyword">install</span> Django</div></pre></td></tr></table></figure>
<h5 id="官方给出了严重你是否安装成功，以及安装的版本-当成功打印的时候，就代表已经成功安装了。"><a href="#官方给出了严重你是否安装成功，以及安装的版本-当成功打印的时候，就代表已经成功安装了。" class="headerlink" title="官方给出了严重你是否安装成功，以及安装的版本,当成功打印的时候，就代表已经成功安装了。"></a>官方给出了严重你是否安装成功，以及安装的版本,当成功打印的时候，就代表已经成功安装了。</h5><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;</span>&gt; import django</div><div class="line"><span class="meta">&gt;&gt;</span>&gt; print(django.get_version())</div><div class="line"><span class="number">1.11</span></div></pre></td></tr></table></figure>
<h5 id="也可以直接在终端输入"><a href="#也可以直接在终端输入" class="headerlink" title="也可以直接在终端输入"></a>也可以直接在终端输入</h5><figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">python</span> -<span class="keyword">m</span> django --<span class="keyword">version</span></div></pre></td></tr></table></figure>
<h4 id="直接开始项目："><a href="#直接开始项目：" class="headerlink" title="直接开始项目："></a>直接开始项目：</h4><ol>
<li>直接在终端输入：此时在当前路径下就会看到我们创建的<code>GhCoder_Site</code>文件夹：</li>
</ol>
<figure class="highlight nsis"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">django-<span class="literal">admin</span> startproject GhCoder_Site</div></pre></td></tr></table></figure>
<ol>
<li>文件夹的结构：</li>
</ol>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">├── GhCoder_Site</div><div class="line">│   ├── __init__<span class="selector-class">.py</span></div><div class="line">│   ├── settings<span class="selector-class">.py</span></div><div class="line">│   ├── urls<span class="selector-class">.py</span></div><div class="line">│   └── wsgi<span class="selector-class">.py</span></div><div class="line">└── manage.py</div></pre></td></tr></table></figure>
<h4 id="这里官方给了一些解释，我觉得很好，有助于我们的理解-其实我之前都是写php的，深有感触–note"><a href="#这里官方给了一些解释，我觉得很好，有助于我们的理解-其实我之前都是写php的，深有感触–note" class="headerlink" title="这里官方给了一些解释，我觉得很好，有助于我们的理解, 其实我之前都是写php的，深有感触–note:"></a>这里官方给了一些解释，我觉得很好，有助于我们的理解, 其实我之前都是写php的，深有感触–note:</h4><blockquote>
<p>If your background is in plain old PHP (with no use of modern frameworks), you’re probably used to putting code under the Web server’s document root (in a place such as /var/www). With Django, you don’t do that. It’s not a good idea to put any of this Python code within your Web server’s document root, because it risks the possibility that people may be able to view your code over the Web. That’s not good for security.<br>Put your code in some directory outside of the document root, such as /home/mycode.</p>
</blockquote>
<h4 id="官方对于每个文件夹以及文件的作用都做了一定的解释，这里我就不解释了很通俗易懂："><a href="#官方对于每个文件夹以及文件的作用都做了一定的解释，这里我就不解释了很通俗易懂：" class="headerlink" title="官方对于每个文件夹以及文件的作用都做了一定的解释，这里我就不解释了很通俗易懂："></a>官方对于每个文件夹以及文件的作用都做了一定的解释，这里我就不解释了很通俗易懂：</h4><ul>
<li>The outer GhCoder_Site/ root directory is just a container for your project. Its name doesn’t matter to Django; you can rename it to anything you like.</li>
<li>manage.py: A command-line utility that lets you interact with this Django project in various ways. You can read all the details about manage.py in django-admin and manage.py.</li>
<li>The inner GhCoder_Site/ directory is the actual Python package for your project. Its name is the Python package name you’ll need to use to import anything inside it (e.g. GhCoder_Site.urls).</li>
<li>GhCoder_Site/<strong>init</strong>.py: An empty file that tells Python that this directory should be considered a Python package. If you’re a Python beginner, read more about packages in the official Python docs.</li>
<li>GhCoder_Site/settings.py: Settings/configuration for this Django project. Django settings will tell you all about how settings work.</li>
<li>GhCoder_Site/urls.py: The URL declarations for this Django project; a “table of contents” of your Django-powered site. You can read more about URLs in URL dispatcher.</li>
<li>GhCoder_Site/wsgi.py: An entry-point for WSGI-compatible web servers to serve your project. See How to deploy with WSGI for more details.</li>
</ul>
<h4 id="下面直接运行下面的命令："><a href="#下面直接运行下面的命令：" class="headerlink" title="下面直接运行下面的命令："></a>下面直接运行下面的命令：</h4><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python manage<span class="selector-class">.py</span> runserver</div></pre></td></tr></table></figure>
<h4 id="你会得到这样的反馈："><a href="#你会得到这样的反馈：" class="headerlink" title="你会得到这样的反馈："></a>你会得到这样的反馈：</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">Performing system checks...</div><div class="line"></div><div class="line">System <span class="keyword">check</span> <span class="keyword">identified</span> <span class="keyword">no</span> issues (<span class="number">0</span> silenced).</div><div class="line"></div><div class="line">//请忽略这里</div><div class="line">You have <span class="number">13</span> unapplied <span class="keyword">migration</span>(s). Your <span class="keyword">project</span> may <span class="keyword">not</span> <span class="keyword">work</span> properly <span class="keyword">until</span> you <span class="keyword">apply</span> the migrations <span class="keyword">for</span> app(s): <span class="keyword">admin</span>, auth, contenttypes, sessions.</div><div class="line">Run <span class="string">'python manage.py migrate'</span> <span class="keyword">to</span> <span class="keyword">apply</span> them.</div><div class="line"></div><div class="line">May <span class="number">09</span>, <span class="number">2017</span> - <span class="number">07</span>:<span class="number">08</span>:<span class="number">16</span></div><div class="line">Django <span class="keyword">version</span> <span class="number">1.11</span>, <span class="keyword">using</span> <span class="keyword">settings</span> <span class="string">'GhCoder_Site.settings'</span></div><div class="line"><span class="keyword">Starting</span> development <span class="keyword">server</span> <span class="keyword">at</span> <span class="keyword">http</span>://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">8000</span>/</div><div class="line">Quit the <span class="keyword">server</span> <span class="keyword">with</span> CONTROL-C.</div></pre></td></tr></table></figure>
<h4 id="此时打开浏览器，输入http-127-0-0-1-8000-，你就会看到Welcome-to-Django”-page-in-pleasant-light-blue-pastel-It-worked-，就代表成功了。"><a href="#此时打开浏览器，输入http-127-0-0-1-8000-，你就会看到Welcome-to-Django”-page-in-pleasant-light-blue-pastel-It-worked-，就代表成功了。" class="headerlink" title="此时打开浏览器，输入http://127.0.0.1:8000/，你就会看到Welcome to Django” page, in pleasant, light-blue pastel. It worked!，就代表成功了。"></a>此时打开浏览器，输入<code>http://127.0.0.1:8000/</code>，你就会看到<code>Welcome to Django” page, in pleasant, light-blue pastel. It worked!</code>，就代表成功了。</h4><h4 id="切换端口："><a href="#切换端口：" class="headerlink" title="切换端口："></a>切换端口：</h4><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python manage<span class="selector-class">.py</span> runserver <span class="number">8080</span></div></pre></td></tr></table></figure>
<h4 id="切换ip、监听所有的ip"><a href="#切换ip、监听所有的ip" class="headerlink" title="切换ip、监听所有的ip"></a>切换ip、监听所有的ip</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">python</span> <span class="selector-tag">manage</span><span class="selector-class">.py</span> <span class="selector-tag">runserver</span> 0<span class="selector-pseudo">:8000</span></div></pre></td></tr></table></figure>
<h3 id="Django的开发模式都是依赖于一个个app，这一点我非常喜欢，后期就算项目很大，也不会很乱，创建第一个app"><a href="#Django的开发模式都是依赖于一个个app，这一点我非常喜欢，后期就算项目很大，也不会很乱，创建第一个app" class="headerlink" title="Django的开发模式都是依赖于一个个app，这一点我非常喜欢，后期就算项目很大，也不会很乱，创建第一个app:"></a>Django的开发模式都是依赖于一个个app，这一点我非常喜欢，后期就算项目很大，也不会很乱，创建第一个app:</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python manage<span class="selector-class">.py</span> startapp polls</div></pre></td></tr></table></figure>
<h3 id="结构如下："><a href="#结构如下：" class="headerlink" title="结构如下："></a>结构如下：</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">.</div><div class="line">├── db<span class="selector-class">.sqlite3</span></div><div class="line">├── GhCoder_Site</div><div class="line">│   ├── __init__<span class="selector-class">.py</span></div><div class="line">│   ├── __init__<span class="selector-class">.pyc</span></div><div class="line">│   ├── settings<span class="selector-class">.py</span></div><div class="line">│   ├── settings<span class="selector-class">.pyc</span></div><div class="line">│   ├── urls<span class="selector-class">.py</span></div><div class="line">│   ├── urls<span class="selector-class">.pyc</span></div><div class="line">│   ├── wsgi<span class="selector-class">.py</span></div><div class="line">│   └── wsgi<span class="selector-class">.pyc</span></div><div class="line">├── manage<span class="selector-class">.py</span></div><div class="line">└── polls</div><div class="line">    ├── admin<span class="selector-class">.py</span></div><div class="line">    ├── apps<span class="selector-class">.py</span></div><div class="line">    ├── __init__<span class="selector-class">.py</span></div><div class="line">    ├── migrations</div><div class="line">    │   └── __init__<span class="selector-class">.py</span></div><div class="line">    ├── models<span class="selector-class">.py</span></div><div class="line">    ├── tests<span class="selector-class">.py</span></div><div class="line">    └── views.py</div></pre></td></tr></table></figure>
<h4 id="创建第一个views-打开polls-views-py-输入："><a href="#创建第一个views-打开polls-views-py-输入：" class="headerlink" title="创建第一个views,打开polls/views.py,输入："></a>创建第一个views,打开<code>polls/views.py</code>,输入：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(resquest)</span>:</span></div><div class="line">      <span class="keyword">return</span> HttpResponse(<span class="string">"Hello, world, You are in polls app"</span>)</div></pre></td></tr></table></figure>
<h4 id="现在配置一下路由-到文件polls-创建一个名为urls-py的文件。将之前写的view和这个url对应上："><a href="#现在配置一下路由-到文件polls-创建一个名为urls-py的文件。将之前写的view和这个url对应上：" class="headerlink" title="现在配置一下路由,到文件polls,创建一个名为urls.py的文件。将之前写的view和这个url对应上："></a>现在配置一下路由,到文件<code>polls</code>,创建一个名为<code>urls.py</code>的文件。将之前写的view和这个url对应上：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> url                                                                                                                      </div><div class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</div><div class="line">   </div><div class="line">urlpatterns = [</div><div class="line">               url(<span class="string">r'^$'</span>, views.index, name=<span class="string">'index'</span>)</div><div class="line">           ]</div></pre></td></tr></table></figure>
<h4 id="最后将app的url，写到项目中的urls-py的文件里面去，到GhCoder-Site-urls-py文件里面，添加如下代码："><a href="#最后将app的url，写到项目中的urls-py的文件里面去，到GhCoder-Site-urls-py文件里面，添加如下代码：" class="headerlink" title="最后将app的url，写到项目中的urls.py的文件里面去，到GhCoder_Site/urls.py文件里面，添加如下代码："></a>最后将app的url，写到项目中的urls.py的文件里面去，到<code>GhCoder_Site/urls.py</code>文件里面，添加如下代码：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> include, url</div><div class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</div><div class="line"></div><div class="line">urlpatterns = [</div><div class="line">    url(<span class="string">r'^polls/'</span>, include(<span class="string">'polls.urls'</span>)),</div><div class="line">    url(<span class="string">r'^admin/'</span>, admin.site.urls),</div><div class="line">]</div></pre></td></tr></table></figure>
<h4 id="这里关于include的官方介绍："><a href="#这里关于include的官方介绍：" class="headerlink" title="这里关于include的官方介绍："></a>这里关于include的官方介绍：</h4><blockquote>
<p>The include() function allows referencing other URLconfs. Note that the regular expressions for the include() function doesn’t have a $ (end-of-string match character) but rather a trailing slash. Whenever Django encounters include(), it chops off whatever part of the URL matched up to that point and sends the remaining string to the included URLconf for further processing.</p>
<p>The idea behind include() is to make it easy to plug-and-play URLs. Since polls are in their own URLconf (polls/urls.py), they can be placed under “/polls/”, or under “/fun_polls/”, or under “/content/polls/”, or any other path root, and the app will still work.</p>
</blockquote>
<h4 id="此时你访问http-127-0-0-1-8000-polls-就看到你刚才写的view以及url"><a href="#此时你访问http-127-0-0-1-8000-polls-就看到你刚才写的view以及url" class="headerlink" title="此时你访问http://127.0.0.1:8000/polls/就看到你刚才写的view以及url"></a>此时你访问<code>http://127.0.0.1:8000/polls/</code>就看到你刚才写的view以及url</h4>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;人生苦短，我用Python–不管你之前写过多少其他语言，当你有一天回来写python的时候，你就会觉得“世界是那么的美好！”&quot;&gt;&lt;a href=&quot;#人生苦短，我用Python–不管你之前写过多少其他语言，当你有一天回来写python的时候，你就会觉得“世界是那么的
    
    </summary>
    
      <category term="日志" scheme="http://ghcoder.com/categories/%E6%97%A5%E5%BF%97/"/>
    
    
      <category term="Python、Django" scheme="http://ghcoder.com/tags/Python%E3%80%81Django/"/>
    
  </entry>
  
  <entry>
    <title>Object-C 网管、以及切换AppDelegate的RootViewCtroller</title>
    <link href="http://ghcoder.com/2017/05/05/20170505/"/>
    <id>http://ghcoder.com/2017/05/05/20170505/</id>
    <published>2017-05-05T07:04:12.000Z</published>
    <updated>2017-05-09T07:43:26.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>之前发布的版本，有一点很重的线程安全的问题，我没有考虑到，现在我已经做了响应的修改了。在关于能够修改字典、数组的方法中我都用到了NSRecursiveLock，从而能够保证线程是安全的。属性的相关安全性，我也查了些资料：[<a href="https://zhuanlan.zhihu.com/p/23998703" target="_blank" rel="external">https://zhuanlan.zhihu.com/p/23998703</a>]</strong></p>
<h2 id="昨天将最新版1-9-5发布上线。总结一下这一版本中踩过的坑。"><a href="#昨天将最新版1-9-5发布上线。总结一下这一版本中踩过的坑。" class="headerlink" title="昨天将最新版1.9.5发布上线。总结一下这一版本中踩过的坑。"></a>昨天将最新版1.9.5发布上线。总结一下这一版本中踩过的坑。</h2><h3 id="产品的需求："><a href="#产品的需求：" class="headerlink" title="产品的需求："></a>产品的需求：</h3><ol>
<li>app中默认是游客身份，随着不同身份的切换，可能需要切换不同的网管。(假如请求的url为: <code>http://www.siji.com/a.php</code>,那么随着身份的切换的话，可能 <code>http://www.siji.com</code>需要修改为<code>http://www.chengke.com</code>)，并且有些请求，是不需要依赖身份的：(比如登录部分请求就是<code>http://www.login.com/login.php</code>、支付部分的请求就是<code>http://www.pay.com/pay.php</code>)。</li>
<li>app中需要区分两种身份(例如 1.司机身份 2.乘客身份)，未来可能还需要更多身份去切换，伴随着身份切换，可能UI上会发生重大的改变，例如：司机身份是UITabBarController为rootViewController的，乘客身份只是(UIViewController+UISlideViewController)侧滑的样式。</li>
</ol>
<h3 id="解决第一个问题："><a href="#解决第一个问题：" class="headerlink" title="解决第一个问题："></a>解决第一个问题：</h3><ol>
<li>首先我这里希望我在app刚进来的时候，就配置好，并且我这里希望他是线程安全，并且方便get/set值。这里我选用<code>单例</code>。并且在系统刚进来的时候就配置, 我已经加入cocoapods了：[<a href="https://github.com/Ghstart/GateWayObject]：" target="_blank" rel="external">https://github.com/Ghstart/GateWayObject]：</a></li>
</ol>
<figure class="highlight mel"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions &#123;</div><div class="line">    self.<span class="keyword">window</span> = [[RootWindow alloc] initWithFrame:[[UIScreen mainScreen] bounds]];</div><div class="line"></div><div class="line">    <span class="comment">//1.设置默认URL，就是其中一种身份对应的URL</span></div><div class="line">    <span class="comment">//2.设置一些URL的映射，不会根据之前身份设置来修改</span></div><div class="line">    [GateWayObject sharedInstanceWithDefaultURL:@"https:<span class="comment">//cz.redlion56.com/gwcz/"</span></div><div class="line">                                    ReflectURLS:@&#123;</div><div class="line">                                                  @"user/login.<span class="keyword">do</span><span class="string">": @"</span>https:<span class="comment">//login.redlion56.com/gwlogin/user/login.do",</span></div><div class="line">                                                  @"uic/user/logout.<span class="keyword">do</span><span class="string">": @"</span>https:<span class="comment">//cz.redlion56.com/gwcz/uic/user/logout.do"</span></div><div class="line">                                                  &#125;];</div><div class="line">                                                  </div><div class="line">    <span class="comment">// 3. 设置乘客身份对应的网管                          </span></div><div class="line">    [[GateWayObject currentGateWay] setGateWayURL:@"https:<span class="comment">//cz.redlion56.com/gwcz/"</span></div><div class="line">                                     forKeyObject:carownerRole];</div><div class="line">     </div><div class="line">    <span class="comment">// 4.设置乘客对应的网管</span></div><div class="line">    [[GateWayObject currentGateWay] setGateWayURL:@"https:<span class="comment">//sj.redlion56.com/gwsj/"</span></div><div class="line">                                     forKeyObject:driverRole];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 5.并且还可以根据相应的条件来切换网管</span></div><div class="line">  <span class="selector-tag">if</span> (xxx) &#123;</div><div class="line">        </div><div class="line">        <span class="selector-attr">[[GateWayObject currentGateWay]</span> <span class="selector-tag">swichGateWayBaseOn</span><span class="selector-pseudo">:carownerRole</span>];</div><div class="line">        </div><div class="line">    &#125; <span class="selector-tag">else</span> &#123;</div><div class="line">        </div><div class="line">        <span class="selector-attr">[[GateWayObject currentGateWay]</span> <span class="selector-tag">swichGateWayBaseOn</span><span class="selector-pseudo">:driverRole</span>];</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 7.直接可以取得次环境下对应的正确URL</span></div><div class="line">[self GET:[[GateWayObject currentGateWay] currentURLBaseOnRelativeURL:url]</div><div class="line">   <span class="keyword">parameters</span>:<span class="keyword">parameters</span></div><div class="line">      success:^(NSURLSessionDataTask <span class="comment">*task, id responseObject) &#123;</span></div><div class="line">          &#125;</div><div class="line">      &#125; failure:^(NSURLSessionDataTask <span class="comment">*task, NSError *error) &#123;</span></div><div class="line">          if <span class="comment">(failure &amp;&amp; error.code != -999 &amp;&amp; ![error.localizedDescription isEqualToString:@</span><span class="comment">"已取消"</span><span class="comment">]) &#123;</span></div><div class="line">              failure(error);</div><div class="line">          &#125;</div><div class="line">      &#125;];</div></pre></td></tr></table></figure>
<h3 id="下面看一下我的-h文件："><a href="#下面看一下我的-h文件：" class="headerlink" title="下面看一下我的.h文件："></a>下面看一下我的.h文件：</h3><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">GateWayObject</span> : <span class="title">NSObject</span></span></div><div class="line"></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">readonly</span>) <span class="built_in">NSString</span>    *currentRelateURL;</div><div class="line"></div><div class="line"><span class="comment">///////////-init-//////////////</span></div><div class="line"><span class="comment">/*</span></div><div class="line"> ** 获得当前的网管</div><div class="line"> */</div><div class="line"></div><div class="line">+ (GateWayObject *)currentGateWay;</div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line"> ** 网管实例化方法</div><div class="line"> ** 默认网关</div><div class="line"> */</div><div class="line">+ (GateWayObject *)sharedInstanceWithDefaultURL:(<span class="built_in">NSString</span> *)url;</div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line"> ** 网关实例化</div><div class="line"> ** 可以配置一些默认的URL对应的一些网关</div><div class="line"> */</div><div class="line">+ (GateWayObject *)sharedInstanceWithDefaultURL:(<span class="built_in">NSString</span> *)url ReflectURLS:(<span class="built_in">NSDictionary</span> *)reflectURLS;</div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line"> ** 设置网关</div><div class="line"> */</div><div class="line">- (<span class="keyword">void</span>)setGateWayURL:(<span class="built_in">NSString</span> *)url forKeyObject:(<span class="keyword">id</span>)keyObject;</div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line"> ** 设置默认的一些网关，优先级仅次于http/https</div><div class="line"> */</div><div class="line">- (<span class="keyword">void</span>)setDefaultRelativeURL:(<span class="built_in">NSString</span> *)relativeURL fullURL:(<span class="built_in">NSString</span> *)fullURL;</div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line"> ** 根据之前的设置的身份切换网管</div><div class="line"> ** 返回值为true则切换成功 false失败</div><div class="line"> */</div><div class="line">- (<span class="built_in">BOOL</span>)swichGateWayBaseOn:(<span class="keyword">id</span>)keyObject;</div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line"> ** 取得当前URL</div><div class="line"> */</div><div class="line">- (<span class="built_in">NSString</span> *)currentURLBaseOnRelativeURL:(<span class="built_in">NSString</span> *)url;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<h3 id="第二个问题的解决方案，自定义RootWindow-让它集成于-UIWindow，并且覆写，然后自己写一套新的stroyboard，每次身份切换的时候，直接切换keyWindow的rootViewController"><a href="#第二个问题的解决方案，自定义RootWindow-让它集成于-UIWindow，并且覆写，然后自己写一套新的stroyboard，每次身份切换的时候，直接切换keyWindow的rootViewController" class="headerlink" title="第二个问题的解决方案，自定义RootWindow,让它集成于 UIWindow，并且覆写，然后自己写一套新的stroyboard，每次身份切换的时候，直接切换keyWindow的rootViewController"></a>第二个问题的解决方案，自定义<code>RootWindow</code>,让它集成于 <code>UIWindow</code>，并且覆写，然后自己写一套新的stroyboard，每次身份切换的时候，直接切换keyWindow的rootViewController</h3><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)setRootViewController:(<span class="built_in">UIViewController</span> *)rootViewController</div><div class="line">&#123;</div><div class="line">	<span class="comment">// 这里我发现在某些设备上由于push、present之后就不能够正常销毁,这里就需要你去判断，做相应的pop、dismiss之后，在去setRootViewController</span></div><div class="line">	<span class="comment">// 但是后来又发现系统的navigation的栈，栈的弹出需要时间才能弹出，不是立刻弹出啊的，这里就很鸡肋了，目前我还没想到啥解决方案。</span></div><div class="line">    [<span class="built_in">UIViewController</span> fastToRootVC];</div><div class="line">    </div><div class="line">    <span class="comment">//remove old rootViewController's sub views</span></div><div class="line">    <span class="keyword">for</span> (<span class="built_in">UIView</span>* subView <span class="keyword">in</span> <span class="keyword">self</span>.rootViewController.view.subviews)</div><div class="line">    &#123;</div><div class="line">        [subView removeFromSuperview];</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//remove old rootViewController's view</span></div><div class="line">    [<span class="keyword">self</span>.rootViewController.view removeFromSuperview];</div><div class="line">    </div><div class="line">    <span class="comment">//set new rootViewController</span></div><div class="line">    [<span class="keyword">super</span> setRootViewController:rootViewController];</div><div class="line">    </div><div class="line">    <span class="comment">//remove empty UILayoutContainerView(s) remaining on root window</span></div><div class="line">    <span class="keyword">for</span> (<span class="built_in">UIView</span> *subView <span class="keyword">in</span> <span class="keyword">self</span>.subviews)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span> (subView.subviews.count == <span class="number">0</span>)</div><div class="line">        &#123;</div><div class="line">            [subView removeFromSuperview];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;之前发布的版本，有一点很重的线程安全的问题，我没有考虑到，现在我已经做了响应的修改了。在关于能够修改字典、数组的方法中我都用到了NSRecursiveLock，从而能够保证线程是安全的。属性的相关安全性，我也查了些资料：[&lt;a href=&quot;https://z
    
    </summary>
    
      <category term="日志" scheme="http://ghcoder.com/categories/%E6%97%A5%E5%BF%97/"/>
    
    
      <category term="Object-c" scheme="http://ghcoder.com/tags/Object-c/"/>
    
  </entry>
  
  <entry>
    <title>关于PHP7的新坑</title>
    <link href="http://ghcoder.com/2017/03/27/20170327/"/>
    <id>http://ghcoder.com/2017/03/27/20170327/</id>
    <published>2017-03-27T09:27:12.000Z</published>
    <updated>2017-03-27T10:07:34.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="距离上次写PHP已经过了2、3年了，最近闲来无事，想再整整PHP。我是通过mac安装了虚拟机，Ubuntn16-04的版本，在安装PHP环境的时候，就发现很多坑，一些小问题google可以查到的我这里就不说了，在安装完Apache、PHP、Mysql的时候，并且安装完Phpmyadmin的时候，会报错："><a href="#距离上次写PHP已经过了2、3年了，最近闲来无事，想再整整PHP。我是通过mac安装了虚拟机，Ubuntn16-04的版本，在安装PHP环境的时候，就发现很多坑，一些小问题google可以查到的我这里就不说了，在安装完Apache、PHP、Mysql的时候，并且安装完Phpmyadmin的时候，会报错：" class="headerlink" title="距离上次写PHP已经过了2、3年了，最近闲来无事，想再整整PHP。我是通过mac安装了虚拟机，Ubuntn16.04的版本，在安装PHP环境的时候，就发现很多坑，一些小问题google可以查到的我这里就不说了，在安装完Apache、PHP、Mysql的时候，并且安装完Phpmyadmin的时候，会报错："></a>距离上次写PHP已经过了2、3年了，最近闲来无事，想再整整PHP。我是通过mac安装了虚拟机，Ubuntn16.04的版本，在安装PHP环境的时候，就发现很多坑，一些小问题google可以查到的我这里就不说了，在安装完Apache、PHP、Mysql的时候，并且安装完Phpmyadmin的时候，会报错：</h2><figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="title">The</span></span> mysqli extension is missing....</div></pre></td></tr></table></figure>
<h3 id="google一搜就会发现："><a href="#google一搜就会发现：" class="headerlink" title="google一搜就会发现："></a>google一搜就会发现：</h3><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-<span class="keyword">get</span> install php5-mysql</div></pre></td></tr></table></figure>
<h3 id="这里对应的php5的安装，那你这里是写php7-0-mysql还是写php7-1-mysql就需要看你安装php的版本号了。你可以通过-lt-php-echo-phpinfo-gt-、也可以通过php-version可以知道，你需要安装的是多少。"><a href="#这里对应的php5的安装，那你这里是写php7-0-mysql还是写php7-1-mysql就需要看你安装php的版本号了。你可以通过-lt-php-echo-phpinfo-gt-、也可以通过php-version可以知道，你需要安装的是多少。" class="headerlink" title="这里对应的php5的安装，那你这里是写php7.0-mysql还是写php7.1-mysql就需要看你安装php的版本号了。你可以通过&lt;?php echo phpinfo();?&gt;、也可以通过php --version可以知道，你需要安装的是多少。"></a>这里对应的php5的安装，那你这里是写<code>php7.0-mysql</code>还是写<code>php7.1-mysql</code>就需要看你安装php的版本号了。你可以通过<code>&lt;?php echo phpinfo();?&gt;</code>、也可以通过<code>php --version</code>可以知道，你需要安装的是多少。</h3><h2 id="在调用mysql的时候，之前我记得我很久之前就一直都在使用mysql-connect-这个函数来连接数据库，但是最近我发现我通过这个函数、没有任何的反馈，通过try-catch也没有任何error、这个问题一直纠结了好久，今天才发现原来在php7的版本的时候，已经完全废弃了这个函数了，而是已经使用mysqli-connect"><a href="#在调用mysql的时候，之前我记得我很久之前就一直都在使用mysql-connect-这个函数来连接数据库，但是最近我发现我通过这个函数、没有任何的反馈，通过try-catch也没有任何error、这个问题一直纠结了好久，今天才发现原来在php7的版本的时候，已经完全废弃了这个函数了，而是已经使用mysqli-connect" class="headerlink" title="在调用mysql的时候，之前我记得我很久之前就一直都在使用mysql_connect()这个函数来连接数据库，但是最近我发现我通过这个函数、没有任何的反馈，通过try/catch也没有任何error、这个问题一直纠结了好久，今天才发现原来在php7的版本的时候，已经完全废弃了这个函数了，而是已经使用mysqli_connect(),"></a>在调用mysql的时候，之前我记得我很久之前就一直都在使用<code>mysql_connect()</code>这个函数来连接数据库，但是最近我发现我通过这个函数、没有任何的反馈，通过try/catch也没有任何error、这个问题一直纠结了好久，今天才发现原来在<code>php7</code>的版本的时候，已经完全废弃了这个函数了，而是已经使用<code>mysqli_connect()</code>,</h2><h3 id="这里是PHP官方手册的说明："><a href="#这里是PHP官方手册的说明：" class="headerlink" title="这里是PHP官方手册的说明："></a>这里是PHP官方手册的说明：</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">Warning</span></div><div class="line">本扩展自 <span class="selector-tag">PHP</span> 5<span class="selector-class">.5</span><span class="selector-class">.0</span> 起已废弃，并在自 <span class="selector-tag">PHP</span> 7<span class="selector-class">.0</span><span class="selector-class">.0</span> 开始被移除。应使用 <span class="selector-tag">MySQLi</span> 或 <span class="selector-tag">PDO_MySQL</span> 扩展来替换之。参见 <span class="selector-tag">MySQL</span>：选择 <span class="selector-tag">API</span> 指南以及相关 <span class="selector-tag">FAQ</span> 来获取更多信息。用以替代本函数的有：</div><div class="line"><span class="selector-tag">mysqli_connect</span>()</div><div class="line"><span class="selector-tag">PDO</span><span class="selector-pseudo">::__construct()</span></div></pre></td></tr></table></figure>
<h3 id="所以我这里就用mysqli-connect-来替换，我这里建立一个video的库，并且建了一个test的表："><a href="#所以我这里就用mysqli-connect-来替换，我这里建立一个video的库，并且建了一个test的表：" class="headerlink" title="所以我这里就用mysqli_connect()来替换，我这里建立一个video的库，并且建了一个test的表："></a>所以我这里就用mysqli_connect()来替换，我这里建立一个video的库，并且建了一个test的表：</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">$servername = <span class="string">"localhost"</span>;</div><div class="line">$username = <span class="string">"root"</span>;</div><div class="line">$password = <span class="string">"123456789"</span>;</div><div class="line">$dbname = <span class="string">"video"</span>;</div><div class="line"></div><div class="line"><span class="comment">// Create connection</span></div><div class="line">$conn = <span class="keyword">new</span> mysqli($servername, $username, $password, $dbname);</div><div class="line"><span class="comment">// Check connection</span></div><div class="line"><span class="keyword">if</span> ($conn-&gt;connect_error) &#123;</div><div class="line">    <span class="keyword">die</span>(<span class="string">"Connection failed: "</span> . $conn-&gt;connect_error);</div><div class="line">&#125; </div><div class="line"></div><div class="line">$sql = <span class="string">"SELECT * FROM test"</span>;</div><div class="line">$result = $conn-&gt;query($sql);</div><div class="line"></div><div class="line"><span class="keyword">if</span>($result -&gt; num_rows &gt; <span class="number">0</span>) &#123;</div><div class="line">    <span class="keyword">while</span>($row = $result -&gt; fetch_assoc()) &#123;</div><div class="line">        <span class="keyword">echo</span> <span class="string">"Name: "</span>.$row[<span class="string">"name"</span>].<span class="string">"-Status: "</span>.$row[<span class="string">"status"</span>].<span class="string">"-Time:"</span>.$row[<span class="string">"time"</span>].<span class="string">"&lt;br&gt;"</span>;</div><div class="line">    &#125;</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="keyword">echo</span> <span class="string">'no datas'</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">$result-&gt;close();</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;距离上次写PHP已经过了2、3年了，最近闲来无事，想再整整PHP。我是通过mac安装了虚拟机，Ubuntn16-04的版本，在安装PHP环境的时候，就发现很多坑，一些小问题google可以查到的我这里就不说了，在安装完Apache、PHP、Mysql的时候，并且安
    
    </summary>
    
      <category term="日志" scheme="http://ghcoder.com/categories/%E6%97%A5%E5%BF%97/"/>
    
    
      <category term="PHP" scheme="http://ghcoder.com/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>更新Reveal2的一些问题</title>
    <link href="http://ghcoder.com/2017/03/15/20170315/"/>
    <id>http://ghcoder.com/2017/03/15/20170315/</id>
    <published>2017-03-15T01:27:12.000Z</published>
    <updated>2017-03-15T02:00:39.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="最近任务也不是很多，尽量逼自己把每天学的一些的东西都记录下来。"><a href="#最近任务也不是很多，尽量逼自己把每天学的一些的东西都记录下来。" class="headerlink" title="最近任务也不是很多，尽量逼自己把每天学的一些的东西都记录下来。"></a>最近任务也不是很多，尽量逼自己把每天学的一些的东西都记录下来。</h3><hr>
<img src="http://ohhvhrib5.bkt.clouddn.com/images/103.jpeg">
<blockquote>
<p>这张图来自<code>简书</code>APP，也是一个朋友闻起来来的，他说这是在无数据、无网络的状态下就会出现这样的界面，这个是怎么做到的呢？</p>
</blockquote>
<p>1 . 我当时想了一下，还是觉得要用collectionView来实现吧，其实<code>热门文章</code>的内容，其实自己看就会发现，他就一种cell格式，而<code>热门专题</code>应该就是用collectionview来做的吧。</p>
<p>2 .后来一拍脑子觉得不对啊，这tm得多烦啊，而且这个仅仅只是无数据的一种页面的展示啊，要我做，那就直接一张image遮罩着不就行了。</p>
<h3 id="猜想了半天还是用Reveal来看一下吧。"><a href="#猜想了半天还是用Reveal来看一下吧。" class="headerlink" title="猜想了半天还是用Reveal来看一下吧。"></a>猜想了半天还是用Reveal来看一下吧。</h3><p>1 .由于很长时间不用Reveal了，而且我之前的Reveal还是1.x的版本，然后用越狱机器一看，一直导入失败，一直在报这个错误(❌)</p>
<blockquote>
<p>The operation couldn’t be completed. The app is linked against an older version of the Reveal library. You may need to update the Reveal library in your app. </p>
</blockquote>
<p>2 .后来发现之前导入到机器中的一个<code>libReveal.dylib</code>的文件以及找不到了，这下，我tm傻眼了，我一直以为让我更新一下这个所谓的动态库呢！ 后来google了一下，发现了官方的回复：</p>
<blockquote>
<p>We no longer ship a dynamic library starting with Reveal 2, we include an iOS 8+ framework instead. The good news is that you should be able to make a copy of, and rename the framework’s binary (RevealServer.framework/ReveaServer) to libReveal.dylib and then follow the instructions as before</p>
</blockquote>
<h3 id="最后还发现几个好玩的东西："><a href="#最后还发现几个好玩的东西：" class="headerlink" title="最后还发现几个好玩的东西："></a>最后还发现几个好玩的东西：</h3><hr>
<img src="http://ohhvhrib5.bkt.clouddn.com/images/104.jpeg">
<hr>
<img src="http://ohhvhrib5.bkt.clouddn.com/images/105.jpeg">
<blockquote>
<p>可以发现真的就如我的猜想，他其实这些都是之前就定死的一个image，遮罩在上面的，其他也就不用说了。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;最近任务也不是很多，尽量逼自己把每天学的一些的东西都记录下来。&quot;&gt;&lt;a href=&quot;#最近任务也不是很多，尽量逼自己把每天学的一些的东西都记录下来。&quot; class=&quot;headerlink&quot; title=&quot;最近任务也不是很多，尽量逼自己把每天学的一些的东西都记录下来
    
    </summary>
    
      <category term="日志" scheme="http://ghcoder.com/categories/%E6%97%A5%E5%BF%97/"/>
    
    
      <category term="Reveal" scheme="http://ghcoder.com/tags/Reveal/"/>
    
  </entry>
  
  <entry>
    <title>尝试Swift搭建服务器-建立自己的网站</title>
    <link href="http://ghcoder.com/2017/02/25/20170225/"/>
    <id>http://ghcoder.com/2017/02/25/20170225/</id>
    <published>2017-02-25T03:20:12.000Z</published>
    <updated>2017-03-10T01:47:25.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="学习Paul大神的swift-server，我也尝试用Swift来搭建自己的网站。这里主要依赖的是IBM开源的Kitura框架。"><a href="#学习Paul大神的swift-server，我也尝试用Swift来搭建自己的网站。这里主要依赖的是IBM开源的Kitura框架。" class="headerlink" title="学习Paul大神的swift-server，我也尝试用Swift来搭建自己的网站。这里主要依赖的是IBM开源的Kitura框架。"></a>学习Paul大神的swift-server，我也尝试用Swift来搭建自己的网站。这里主要依赖的是IBM开源的Kitura框架。</h2><h3 id="环境搭建-（Mac下）"><a href="#环境搭建-（Mac下）" class="headerlink" title="环境搭建 （Mac下）"></a>环境搭建 （Mac下）</h3><ol>
<li>因为我们是在自己的mac上搭建环境，所以需要下载Docker[<a href="https://docs.docker.com/docker-for-mac/" target="_blank" rel="external">https://docs.docker.com/docker-for-mac/</a>] 这个软件，这个软件的作用就相当于一台看不见的虚拟机，能够在mac上运行Linux。</li>
<li>下载完成之后，建立根目录文件夹。</li>
</ol>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">cd ~/Desktop</div><div class="line">mkdir server</div><div class="line">cd server</div><div class="line">docker run -itv $(pwd):/projects --name projects -w /projects -<span class="selector-tag">p</span> <span class="number">8089</span>:<span class="number">8089</span> -<span class="selector-tag">p</span> <span class="number">8090</span>:<span class="number">8090</span> -<span class="selector-tag">p</span> <span class="number">5984</span>:<span class="number">5984</span> twostraws/server-side-swift /bin/bash</div></pre></td></tr></table></figure>
<p>3 . 这里docker开头的命令，是让doker软件来运行的，其中’/projects’ 指的是文件内建立以projects开头的文件默认指向的是当前的文件路径，并且建立的8090、5984这两个端口。</p>
<p>4 . 建立好之后你就会看到类似如下的返回值：</p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">root<span class="variable">@f2429f0045db</span><span class="symbol">:/projects</span><span class="comment">#</span></div></pre></td></tr></table></figure>
<h3 id="建立第一个文件"><a href="#建立第一个文件" class="headerlink" title="建立第一个文件"></a>建立第一个文件</h3><ol>
<li>运行如下命令：</li>
</ol>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">cd</span> ~/Desktop/server</div><div class="line"><span class="built_in">mkdir</span> project1</div><div class="line"><span class="keyword">cd</span> project1</div><div class="line">swift package init --<span class="built_in">type</span> <span class="built_in">executable</span></div></pre></td></tr></table></figure>
<h4 id="最后一行命令可能比较困惑，其实这行命令就是告诉swift-package（这里的swift-package相当于OC中的cocoapods、或者NodeJS中的npm一样）-我们需要建立一个新的项目，’–type-executable‘的意思是我们希望建立一个独立的部分。看到如下返回值就代表成功了："><a href="#最后一行命令可能比较困惑，其实这行命令就是告诉swift-package（这里的swift-package相当于OC中的cocoapods、或者NodeJS中的npm一样）-我们需要建立一个新的项目，’–type-executable‘的意思是我们希望建立一个独立的部分。看到如下返回值就代表成功了：" class="headerlink" title="最后一行命令可能比较困惑，其实这行命令就是告诉swift package（这里的swift package相当于OC中的cocoapods、或者NodeJS中的npm一样）,我们需要建立一个新的项目，’–type executable‘的意思是我们希望建立一个独立的部分。看到如下返回值就代表成功了："></a>最后一行命令可能比较困惑，其实这行命令就是告诉swift package（这里的swift package相当于OC中的cocoapods、或者NodeJS中的npm一样）,我们需要建立一个新的项目，’–type executable‘的意思是我们希望建立一个独立的部分。看到如下返回值就代表成功了：</h4><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Creating executable package: project1</div><div class="line">Creating Package<span class="selector-class">.swift</span></div><div class="line">Creating <span class="selector-class">.gitignore</span></div><div class="line">Creating Sources/</div><div class="line">Creating Sources/main<span class="selector-class">.swift</span></div><div class="line">Creating Tests/</div></pre></td></tr></table></figure>
<p>2 .运行：</p>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">swift </span><span class="keyword">build</span></div></pre></td></tr></table></figure>
<p>3 . 再运行</p>
<figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="title">.build/debug/project1</span></div></pre></td></tr></table></figure>
<p>当看到”Hello world!”就代表已经成功了。</p>
<p>4 .再运行</p>
<figure class="highlight verilog"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">swift <span class="keyword">package</span> <span class="keyword">generate</span>-xcodeproj</div></pre></td></tr></table></figure>
<p>此时用Xcode打开刚刚生成的project1.xcodeproj,切换project1&gt;Sources&gt;project1,当控制台中打印“Hello world!”</p>
<p>5 . 找到Main.swift文件，更换内容，我们引入路由模块，并且实例化，并且监听8090端口</p>
<figure class="highlight nix"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">import</span> Kitura</div><div class="line"></div><div class="line"><span class="keyword">let</span> <span class="attr">router</span> = Router()</div><div class="line"></div><div class="line">Kitura.addHTTPServer(onPort: <span class="number">8090</span>, <span class="keyword">with</span>: router)</div><div class="line">Kitura.run()</div></pre></td></tr></table></figure>
<p>此时打开浏览器”<a href="http://localhost:8090&quot;,大功告成！！！" target="_blank" rel="external">http://localhost:8090&quot;,大功告成！！！</a></p>
<h3 id="环境搭建-（Linux下）"><a href="#环境搭建-（Linux下）" class="headerlink" title="环境搭建 （Linux下）"></a>环境搭建 （Linux下）</h3><ol>
<li><p>先下载适合你Linux版本的Swift的版本[<a href="https://swift.org/download/" target="_blank" rel="external">https://swift.org/download/</a>]</p>
</li>
<li><p>其实这里Kitura的官网给出了教程，你也可以按照官方的教程走下去。[<a href="http://www.kitura.io/en/starter/settingup.html" target="_blank" rel="external">http://www.kitura.io/en/starter/settingup.html</a>]</p>
</li>
</ol>
<figure class="highlight q"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ sudo apt-<span class="built_in">get</span> <span class="keyword">update</span></div><div class="line">$ sudo apt-<span class="built_in">get</span> install clang libicu-<span class="built_in">dev</span> libcurl4-openssl-<span class="built_in">dev</span> libssl-<span class="built_in">dev</span></div></pre></td></tr></table></figure>
<figure class="highlight dos"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ export <span class="built_in">PATH</span>=&lt;<span class="built_in">path</span> to uncompressed tar contents&gt;/usr/bin:$<span class="built_in">PATH</span></div></pre></td></tr></table></figure>
<p>2 .这里已经介绍解释的很清楚了，就是将&lt;&gt;以及其中的内容替换成你刚才下载并解压下来的Swift包路径，假设我的路径为/home/gh/swift-3.0.2-release/, 那就可以在终端运行：</p>
<figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ <span class="keyword">export</span> PATH=/<span class="built_in">home</span>/gh/swift<span class="number">-3.0</span><span class="number">.2</span>-<span class="built_in">release</span>/usr/bin:$PATH</div></pre></td></tr></table></figure>
<p>3 .紧接着运行,看到正常的返回就代表已经安装正常。</p>
<figure class="highlight ada"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">swift <span class="comment">--version</span></div></pre></td></tr></table></figure>
<p>4 .下面的方法步骤就和之前在Mac上的配置是一样的了，你也可以参考Kitura的教程[<a href="http://www.kitura.io/en/starter/gettingstarted.html" target="_blank" rel="external">http://www.kitura.io/en/starter/gettingstarted.html</a>]</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;学习Paul大神的swift-server，我也尝试用Swift来搭建自己的网站。这里主要依赖的是IBM开源的Kitura框架。&quot;&gt;&lt;a href=&quot;#学习Paul大神的swift-server，我也尝试用Swift来搭建自己的网站。这里主要依赖的是IBM开源的K
    
    </summary>
    
      <category term="日志" scheme="http://ghcoder.com/categories/%E6%97%A5%E5%BF%97/"/>
    
    
      <category term="Swift" scheme="http://ghcoder.com/tags/Swift/"/>
    
  </entry>
  
  <entry>
    <title>学习阿里开源项目BeeHive(三)</title>
    <link href="http://ghcoder.com/2016/12/01/20161201/"/>
    <id>http://ghcoder.com/2016/12/01/20161201/</id>
    <published>2016-12-01T08:31:12.000Z</published>
    <updated>2017-03-15T01:47:47.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="最后总结一下整个BeeHive项目的搭建。以及我看完之后的一些质疑和想法，有些作者以及给出了回答，会在下一版本的更新中进行修改。"><a href="#最后总结一下整个BeeHive项目的搭建。以及我看完之后的一些质疑和想法，有些作者以及给出了回答，会在下一版本的更新中进行修改。" class="headerlink" title="最后总结一下整个BeeHive项目的搭建。以及我看完之后的一些质疑和想法，有些作者以及给出了回答，会在下一版本的更新中进行修改。"></a>最后总结一下整个BeeHive项目的搭建。以及我看完之后的一些质疑和想法，有些作者以及给出了回答，会在下一版本的更新中进行修改。</h3><hr>
<h4 id="先贴上我自己画的一个提纲"><a href="#先贴上我自己画的一个提纲" class="headerlink" title="先贴上我自己画的一个提纲"></a>先贴上我自己画的一个提纲</h4><h2 id=""><a href="#" class="headerlink" title="  "></a><img src="http://ohhvhrib5.bkt.clouddn.com/images/step1.png">  </h2><h2 id="-1"><a href="#-1" class="headerlink" title=""></a><img src="http://ohhvhrib5.bkt.clouddn.com/images/step3.png"></h2><h4 id="首先，为什么每个ViewController都需要配备一个配备一个Module的文件？"><a href="#首先，为什么每个ViewController都需要配备一个配备一个Module的文件？" class="headerlink" title="首先，为什么每个ViewController都需要配备一个配备一个Module的文件？"></a>首先，为什么每个ViewController都需要配备一个配备一个Module的文件？</h4><h2 id="因为他需要通过-void-load-的方法，动态的将moduleInfo的信息存储下来，这里是存储在BHModuleManager文件中的self-BHModules此时这里存储的都是字符串，还没有创建为实例对象。"><a href="#因为他需要通过-void-load-的方法，动态的将moduleInfo的信息存储下来，这里是存储在BHModuleManager文件中的self-BHModules此时这里存储的都是字符串，还没有创建为实例对象。" class="headerlink" title="因为他需要通过+(void)load{}的方法，动态的将moduleInfo的信息存储下来，这里是存储在BHModuleManager文件中的self.BHModules此时这里存储的都是字符串，还没有创建为实例对象。"></a>因为他需要通过<code>+(void)load{}</code>的方法，动态的将<code>moduleInfo</code>的信息存储下来，这里是存储在<code>BHModuleManager</code>文件中的<code>self.BHModules</code><em>此时这里存储的都是字符串，还没有创建为实例对象</em>。</h2><h4 id="为什么有些module的文件中没有load方法，但是他还是在启动之前也注册进去了呢？答：因为这里作者都是通过宏的的形式，来快速实现加载的信息，本质上和-void-load-是一样的。"><a href="#为什么有些module的文件中没有load方法，但是他还是在启动之前也注册进去了呢？答：因为这里作者都是通过宏的的形式，来快速实现加载的信息，本质上和-void-load-是一样的。" class="headerlink" title="为什么有些module的文件中没有load方法，但是他还是在启动之前也注册进去了呢？答：因为这里作者都是通过宏的的形式，来快速实现加载的信息，本质上和+(void)load{}是一样的。"></a>为什么有些<code>module</code>的文件中没有load方法，但是他还是在启动之前也注册进去了呢？答：因为这里作者都是通过<code>宏</code>的的形式，来快速实现加载的信息，本质上和<code>+(void)load{}</code>是一样的。</h4><h2 id="BH-EXPORT-MODULE-NO"><a href="#BH-EXPORT-MODULE-NO" class="headerlink" title="BH_EXPORT_MODULE(NO)  "></a><em>BH_EXPORT_MODULE(NO)</em>  </h2><h4 id="这里在官方的demo中看到TestAppDelegate进行了ModuleConfigName、ServiceConfigName的设置，不设置可以吗？答：可以！！这里在BHContext对象实例化的时候，已经默认设置了初始值了。"><a href="#这里在官方的demo中看到TestAppDelegate进行了ModuleConfigName、ServiceConfigName的设置，不设置可以吗？答：可以！！这里在BHContext对象实例化的时候，已经默认设置了初始值了。" class="headerlink" title="这里在官方的demo中看到TestAppDelegate进行了ModuleConfigName、ServiceConfigName的设置，不设置可以吗？答：可以！！这里在BHContext对象实例化的时候，已经默认设置了初始值了。"></a>这里在官方的demo中看到TestAppDelegate进行了ModuleConfigName、ServiceConfigName的设置，不设置可以吗？答：可以！！这里在<code>BHContext</code>对象实例化的时候，已经默认设置了初始值了。</h4><hr>
<h4 id="这里假如我有新的功能，我应该往哪里去添加呢？答：这里只是我的猜想-gt-应该在BHContext中去添加，因为在BHContext实例化的时候，就顺带实例化了一系列的对象：BHShortCutItem、BHOpenURLItem、BHNotificationItem、BHUserActivity、BHConfig-并且这些对象都是单例，这里我保持我的态度。这里的if调试时作者的笔误，他会在下一版本更新-if-BHInstance-isKindOfClass-BHContext-class"><a href="#这里假如我有新的功能，我应该往哪里去添加呢？答：这里只是我的猜想-gt-应该在BHContext中去添加，因为在BHContext实例化的时候，就顺带实例化了一系列的对象：BHShortCutItem、BHOpenURLItem、BHNotificationItem、BHUserActivity、BHConfig-并且这些对象都是单例，这里我保持我的态度。这里的if调试时作者的笔误，他会在下一版本更新-if-BHInstance-isKindOfClass-BHContext-class" class="headerlink" title="这里假如我有新的功能，我应该往哪里去添加呢？答：这里只是我的猜想-&gt;应该在BHContext中去添加，因为在BHContext实例化的时候，就顺带实例化了一系列的对象：BHShortCutItem、BHOpenURLItem、BHNotificationItem、BHUserActivity、BHConfig,并且这些对象都是单例，这里我保持我的态度。这里的if调试时作者的笔误，他会在下一版本更新 if ([BHInstance isKindOfClass:[BHContext class]]) {}"></a>这里假如我有新的功能，我应该往哪里去添加呢？答：<em>这里只是我的猜想</em>-&gt;应该在<code>BHContext</code>中去添加，因为在<code>BHContext</code>实例化的时候，就顺带实例化了一系列的对象：<code>BHShortCutItem</code>、<code>BHOpenURLItem</code>、<code>BHNotificationItem</code>、<code>BHUserActivity</code>、<code>BHConfig</code>,并且这些对象都是单例，这里我保持我的态度。<em>这里的if调试时作者的笔误，他会在下一版本更新 if ([BHInstance isKindOfClass:[BHContext class]]) {}</em></h4><figure class="highlight monkey"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">-(instancetype)init</div><div class="line">&#123;</div><div class="line">    <span class="built_in">self</span> = [<span class="built_in">super</span> init];</div><div class="line">    <span class="keyword">if</span> (<span class="built_in">self</span>) &#123;</div><div class="line">        <span class="built_in">self</span>.modulesByName  = [[NSMutableDictionary alloc] initWithCapacity:<span class="number">1</span>];</div><div class="line">        <span class="built_in">self</span>.servicesByName  = [[NSMutableDictionary alloc] initWithCapacity:<span class="number">1</span>];</div><div class="line">        <span class="built_in">self</span>.moduleConfigName = @<span class="string">"BeeHive.bundle/BeeHive"</span>;</div><div class="line">        <span class="built_in">self</span>.serviceConfigName = @<span class="string">"BeeHive.bundle/BHService"</span>;<span class="meta"></span></div><div class="line"></div><div class="line">#<span class="meta-keyword">if</span> __IPHONE_OS_VERSION_MAX_ALLOWED &gt; 80400</div><div class="line">        <span class="built_in">self</span>.touchShortcutItem = [BHShortcutItem <span class="keyword">new</span>];<span class="meta"></span></div><div class="line">#<span class="meta-keyword">endif</span></div><div class="line"></div><div class="line">        <span class="built_in">self</span>.openURLItem = [BHOpenURLItem <span class="keyword">new</span>];</div><div class="line">        <span class="built_in">self</span>.notificationsItem = [BHNotificationsItem <span class="keyword">new</span>];</div><div class="line">        <span class="built_in">self</span>.userActivityItem = [BHUserActivityItem <span class="keyword">new</span>];</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="built_in">self</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">+(<span class="keyword">instancetype) </span><span class="keyword">shareInstance</span></div><div class="line">&#123;</div><div class="line">    static <span class="keyword">dispatch_once_t </span>p<span class="comment">;</span></div><div class="line">    static id <span class="keyword">BHInstance </span>= nil<span class="comment">;</span></div><div class="line"></div><div class="line">    <span class="keyword">dispatch_once(&amp;p, </span>^&#123;</div><div class="line">        <span class="keyword">BHInstance </span>= [[[self class] alloc] init]<span class="comment">;</span></div><div class="line">        if ([<span class="keyword">BHInstance </span>isKindOfClass:[<span class="keyword">BHContext </span>class]]) &#123;</div><div class="line">            ((<span class="keyword">BHContext </span>*) <span class="keyword">BHInstance).config </span>= [<span class="keyword">BHConfig </span><span class="keyword">shareInstance];</span></div><div class="line">        &#125;</div><div class="line">    &#125;)<span class="comment">;</span></div><div class="line"></div><div class="line">    return <span class="keyword">BHInstance;</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<h4 id="系统是在什么时候载入本地的组件信息的呢？答：是在哎BeeHive调用setContext对象的时候，进行调用的。并且这里通过context中的文件名，进行拼接，返回plist文件的信息。-比起在这里将self-BHModules-文件信息换成了响应的实例对象"><a href="#系统是在什么时候载入本地的组件信息的呢？答：是在哎BeeHive调用setContext对象的时候，进行调用的。并且这里通过context中的文件名，进行拼接，返回plist文件的信息。-比起在这里将self-BHModules-文件信息换成了响应的实例对象" class="headerlink" title="系统是在什么时候载入本地的组件信息的呢？答：是在哎BeeHive调用setContext对象的时候，进行调用的。并且这里通过context中的文件名，进行拼接，返回plist文件的信息。 比起在这里将self.BHModules 文件信息换成了响应的实例对象"></a>系统是在什么时候载入本地的组件信息的呢？答：是在哎<code>BeeHive</code>调用<code>setContext</code>对象的时候，进行调用的。并且这里通过<code>context</code>中的文件名，进行拼接，返回plist文件的信息。 <em>比起在这里将self.BHModules 文件信息换成了响应的实例对象</em></h4><hr>
<h4 id="那看到各个Module都会调用modSetUp、modInit类似的方法，那这些方法是在什么时候调用的？答：是在调用父类的Appdelegate的方法的时候调用的，"><a href="#那看到各个Module都会调用modSetUp、modInit类似的方法，那这些方法是在什么时候调用的？答：是在调用父类的Appdelegate的方法的时候调用的，" class="headerlink" title="那看到各个Module都会调用modSetUp、modInit类似的方法，那这些方法是在什么时候调用的？答：是在调用父类的Appdelegate的方法的时候调用的，"></a>那看到各个<code>Module</code>都会调用<code>modSetUp</code>、<code>modInit</code>类似的方法，那这些方法是在什么时候调用的？答：是在调用父类的<code>Appdelegate</code>的方法的时候调用的，</h4><hr>
<h4 id="初了一些主动调用的上面这些方法，那什么时候才会调用系统的方法，类似进入后台、被挂起、进入前台。答：这是在appdelegate的响应方法调用的时候，也会调用。"><a href="#初了一些主动调用的上面这些方法，那什么时候才会调用系统的方法，类似进入后台、被挂起、进入前台。答：这是在appdelegate的响应方法调用的时候，也会调用。" class="headerlink" title="初了一些主动调用的上面这些方法，那什么时候才会调用系统的方法，类似进入后台、被挂起、进入前台。答：这是在appdelegate的响应方法调用的时候，也会调用。"></a>初了一些主动调用的上面这些方法，那什么时候才会调用系统的方法，类似进入后台、被挂起、进入前台。答：这是在appdelegate的响应方法调用的时候，也会调用。</h4>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;最后总结一下整个BeeHive项目的搭建。以及我看完之后的一些质疑和想法，有些作者以及给出了回答，会在下一版本的更新中进行修改。&quot;&gt;&lt;a href=&quot;#最后总结一下整个BeeHive项目的搭建。以及我看完之后的一些质疑和想法，有些作者以及给出了回答，会在下一版本的
    
    </summary>
    
      <category term="日志" scheme="http://ghcoder.com/categories/%E6%97%A5%E5%BF%97/"/>
    
    
      <category term="学习" scheme="http://ghcoder.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>学习阿里开源项目BeeHive(二)</title>
    <link href="http://ghcoder.com/2016/11/28/20161128/"/>
    <id>http://ghcoder.com/2016/11/28/20161128/</id>
    <published>2016-11-28T10:02:12.000Z</published>
    <updated>2016-12-01T08:05:19.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="紧接着前面那篇文章，回到BHAppDelegate-m的文件里面的"><a href="#紧接着前面那篇文章，回到BHAppDelegate-m的文件里面的" class="headerlink" title="紧接着前面那篇文章，回到BHAppDelegate.m的文件里面的"></a>紧接着前面那篇文章，回到<code>BHAppDelegate.m</code>的文件里面的</h3><figure class="highlight erlang"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">- <span class="params">(BOOL)</span>application:<span class="params">(UIApplication *)</span>application didFinishLaunchingWithOptions:<span class="params">(NSDictionary *)</span>launchOptions</div></pre></td></tr></table></figure>
<p>之前已经把所有的timeProdiler的这个类的作用，实例，已经public的方法都已经说了。在这个方法的实现中，作者还做了另外一件事情。</p>
<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[[<span class="keyword">BHModuleManager </span><span class="keyword">sharedManager] </span>tiggerEvent:<span class="keyword">BHMSetupEvent];</span></div><div class="line">[[<span class="keyword">BHModuleManager </span><span class="keyword">sharedManager] </span>tiggerEvent:<span class="keyword">BHMInitEvent];</span></div><div class="line"></div><div class="line"><span class="keyword">dispatch_async(dispatch_get_main_queue(), </span>^&#123;</div><div class="line">    [[<span class="keyword">BHModuleManager </span><span class="keyword">sharedManager] </span>tiggerEvent:<span class="keyword">BHMSplashEvent];</span></div><div class="line">&#125;)<span class="comment">;</span></div></pre></td></tr></table></figure>
<ol>
<li><code>BHModuleManager</code>从字面上理解应该就是管理模块之前调用逻辑的意思，并且在<code>BHModuleManager.m</code>中，我们可以看出来这个类也是个单例。</li>
<li>在init之后，紧接着就是调用<code>- (void)tiggerEvent:(BHModuleEventType)eventType;</code>的方法。</li>
<li>在这个方法的实现中可以看到一个很长的swich语句，遍历你传入的一个枚举类型，来做一系列的事情。</li>
<li>先看在<code>didFinishLaunch</code>中，第一次调用这个方法，传入的参数为<code>BHMSetupEvent</code>。</li>
</ol>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">case</span> <span class="string">BHMSetupEvent:</span></div><div class="line">[self <span class="string">handleModuleEvent:</span>kSetupSelector];</div><div class="line"><span class="keyword">break</span>;</div></pre></td></tr></table></figure>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)handleModuleEvent:(<span class="built_in">NSString</span> *)selectorStr</div><div class="line">&#123;</div><div class="line">    SEL seletor = <span class="built_in">NSSelectorFromString</span>(selectorStr);</div><div class="line">    [<span class="keyword">self</span>.BHModules enumerateObjectsUsingBlock:^(<span class="keyword">id</span>&lt;BHModuleProtocol&gt; moduleInstance, <span class="built_in">NSUInteger</span> idx, <span class="built_in">BOOL</span> * _Nonnull stop) &#123;</div><div class="line">        <span class="keyword">if</span> ([moduleInstance respondsToSelector:seletor]) &#123;</div><div class="line"><span class="meta">#pragma clang diagnostic push</span></div><div class="line"><span class="meta">#pragma clang diagnostic ignored <span class="meta-string">"-Warc-performSelector-leaks"</span></span></div><div class="line">            [moduleInstance performSelector:seletor withObject:<span class="keyword">self</span>.wholeContext];</div><div class="line"><span class="meta">#pragma clang diagnostic pop</span></div><div class="line"></div><div class="line">        [[BHTimeProfiler sharedTimeProfiler] recordEventTime:[<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%@ --- %@"</span>, [moduleInstance <span class="keyword">class</span>], <span class="built_in">NSStringFromSelector</span>(seletor)]];</div><div class="line"></div><div class="line">        &#125;</div><div class="line">    &#125;];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ol>
<li>可以看到传入了一个字符串作为入参，而这个参数写在这个文件的.m中。<code>static  NSString *kSetupSelector = @&quot;modSetUp:&quot;;</code>写死了。</li>
<li>紧接着在<code>handleModuleEvent</code>的实现中，通过runtime的NSSelectorFromString的方法将字符串转化为SEL的类型。</li>
<li>再枚举BHModules数组，从枚举中我们发现，不是所有的object对象都添加在BHModules的MutableArray中，这些object的对象必须要遵守<code>id&lt;BHModuleProtocol&gt;</code>的协议。</li>
<li>查询数组中有没有对象可以响应这个方法的，如果有的话，就调用这个方法，并且开始reordTime。</li>
<li>并且为了消除编译器所报的警告，可以通过添加<code>#pragma clang diagnostic ignored &quot;-Warc-performSelector-leaks&quot;</code>,来消除warning。</li>
</ol>
<h4 id="紧接着调用了同一个方法，却传入了不同的参数"><a href="#紧接着调用了同一个方法，却传入了不同的参数" class="headerlink" title="紧接着调用了同一个方法，却传入了不同的参数"></a>紧接着调用了同一个方法，却传入了不同的参数</h4><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">[[BHModuleManager sharedManager] <span class="string">tiggerEvent:</span>BHMInitEvent];</div><div class="line"></div><div class="line"></div><div class="line"> <span class="keyword">case</span> <span class="string">BHMInitEvent:</span></div><div class="line"> <span class="comment">//special</span></div><div class="line"> [self handleModulesInitEvent];</div><div class="line"> <span class="keyword">break</span>;</div></pre></td></tr></table></figure>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)handleModulesInitEvent</div><div class="line">&#123;</div><div class="line"></div><div class="line">    [<span class="keyword">self</span>.BHModules enumerateObjectsUsingBlock:^(<span class="keyword">id</span>&lt;BHModuleProtocol&gt; moduleInstance, <span class="built_in">NSUInteger</span> idx, <span class="built_in">BOOL</span> * _Nonnull stop) &#123;</div><div class="line">        __<span class="keyword">weak</span> <span class="keyword">typeof</span>(&amp;*<span class="keyword">self</span>) wself = <span class="keyword">self</span>;</div><div class="line">        <span class="keyword">void</span> ( ^ bk )();</div><div class="line">        bk = ^()&#123;</div><div class="line">            __<span class="keyword">strong</span> <span class="keyword">typeof</span>(&amp;*<span class="keyword">self</span>) sself = wself;</div><div class="line">            <span class="keyword">if</span> (sself) &#123;</div><div class="line">                <span class="keyword">if</span> ([moduleInstance respondsToSelector:<span class="keyword">@selector</span>(modInit:)]) &#123;</div><div class="line">                    [moduleInstance modInit:sself.wholeContext];</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line"></div><div class="line">        [[BHTimeProfiler sharedTimeProfiler] recordEventTime:[<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%@ --- modInit:"</span>, [moduleInstance <span class="keyword">class</span>]]];</div><div class="line"></div><div class="line">        <span class="keyword">if</span> ([moduleInstance respondsToSelector:<span class="keyword">@selector</span>(async)]) &#123;</div><div class="line">            <span class="built_in">BOOL</span> async = [moduleInstance async];</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (async) &#123;</div><div class="line">                <span class="built_in">dispatch_async</span>(dispatch_get_main_queue(), ^&#123;</div><div class="line">                    bk();</div><div class="line">                &#125;);</div><div class="line"></div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                bk();</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            bk();</div><div class="line">        &#125;</div><div class="line">    &#125;];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ol>
<li>首先循环遍历<code>self.BHModules</code>这个数组对象，先用Timer 开始记录下init方法的时间。</li>
<li>判断数组中的元素是否响应<code>async</code>的方法, 这个<code>- (BOOL)async;</code>的方法定义在<code>BHModuleProtocol</code>中，如果响应了这个方法，就取得这个方法的返回值,<code>从字面上判断这个变量记录了是否运行在多线程中，这里我只是个猜测</code>。</li>
<li>如果是在多线程中，就回到主线程中来执行上面所定义的block：<code>void ( ^ bk )();</code>，如果不是的话或者没有响应<code>async</code>,都直接运行这个block，应该默认状态下就是主线程了。</li>
<li>从代码上看来，就是不管在什么线程或者是否响应<code>async</code>的方法，上面的block是肯定要执行的。</li>
<li>block中所做的事情也很简单，就是判断这个元素对象是否响应<code>- (void)modInit:(BHContext *)context;</code>,这个protocol的代理方法，如果响应的话，就会执行这段代码，至于这里的<code>BHContext</code>的对象，我目前没看到在哪里传入进来，这里只看到了一个<code>Setter</code>的方法。</li>
</ol>
<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">- (void)setWholeContext:(<span class="keyword">BHContext </span>*)wholeContext</div><div class="line">&#123;</div><div class="line">    _wholeContext = wholeContext<span class="comment">;</span></div><div class="line">    self.modulesConfigFilename = _wholeContext.moduleConfigName<span class="comment">;</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="最后执行的一个方法"><a href="#最后执行的一个方法" class="headerlink" title="最后执行的一个方法"></a>最后执行的一个方法</h4><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">dispatch_async(dispatch_get_main_queue(), </span>^&#123;</div><div class="line">       [[<span class="keyword">BHModuleManager </span><span class="keyword">sharedManager] </span>tiggerEvent:<span class="keyword">BHMSplashEvent];</span></div><div class="line">   &#125;)<span class="comment">;</span></div></pre></td></tr></table></figure>
<ol>
<li>这个方法和<code>[self handleModuleEvent:kSetupSelector];</code>一样，除了传入的参数不同，响应的方法不同，其他都是一样。</li>
<li>这里还要强制要求这个方法的调用一定要在主线程中。</li>
</ol>
<h3 id="这样就已经把自定义的BHAppDelegate的主要几个实现已经介绍了一下，下面来看看demo中的实现。在TestAppDelegate的didFinishLaunchingWithOptions的方法中。"><a href="#这样就已经把自定义的BHAppDelegate的主要几个实现已经介绍了一下，下面来看看demo中的实现。在TestAppDelegate的didFinishLaunchingWithOptions的方法中。" class="headerlink" title="这样就已经把自定义的BHAppDelegate的主要几个实现已经介绍了一下，下面来看看demo中的实现。在TestAppDelegate的didFinishLaunchingWithOptions的方法中。"></a>这样就已经把自定义的<code>BHAppDelegate</code>的主要几个实现已经介绍了一下，下面来看看demo中的实现。在<code>TestAppDelegate</code>的<code>didFinishLaunchingWithOptions</code>的方法中。</h3><h4 id="这四行代码涉及到了同一个对象BHContext-从字面上判断应该是上下文对象，应该是对象之间的调用会需要用它来记录一下，这里是我的猜测"><a href="#这四行代码涉及到了同一个对象BHContext-从字面上判断应该是上下文对象，应该是对象之间的调用会需要用它来记录一下，这里是我的猜测" class="headerlink" title="这四行代码涉及到了同一个对象BHContext,从字面上判断应该是上下文对象，应该是对象之间的调用会需要用它来记录一下，这里是我的猜测"></a>这四行代码涉及到了同一个对象<code>BHContext</code>,从字面上判断应该是<code>上下文对象，应该是对象之间的调用会需要用它来记录一下，这里是我的猜测</code></h4><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[<span class="keyword">BHContext </span><span class="keyword">shareInstance].application </span>= application<span class="comment">;</span></div><div class="line">[<span class="keyword">BHContext </span><span class="keyword">shareInstance].launchOptions </span>= launchOptions<span class="comment">;</span></div><div class="line">[<span class="keyword">BHContext </span><span class="keyword">shareInstance].moduleConfigName </span>= @<span class="string">"BeeHive.bundle/BeeHive"</span><span class="comment">;//可选，默认为BeeHive.bundle/BeeHive.plist</span></div><div class="line">[<span class="keyword">BHContext </span><span class="keyword">shareInstance].serviceConfigName </span>= @<span class="string">"BeeHive.bundle/BHService"</span><span class="comment">;</span></div></pre></td></tr></table></figure>
<h4 id="在BHContext-m的代码中可以看出来，这个对象也是个单例，在这个单例的init方法中："><a href="#在BHContext-m的代码中可以看出来，这个对象也是个单例，在这个单例的init方法中：" class="headerlink" title="在BHContext.m的代码中可以看出来，这个对象也是个单例，在这个单例的init方法中："></a>在<code>BHContext.m</code>的代码中可以看出来，这个对象也是个单例，在这个单例的init方法中：</h4><figure class="highlight monkey"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">-(instancetype)init</div><div class="line">&#123;</div><div class="line">    <span class="built_in">self</span> = [<span class="built_in">super</span> init];</div><div class="line">    <span class="keyword">if</span> (<span class="built_in">self</span>) &#123;</div><div class="line">        <span class="built_in">self</span>.modulesByName  = [[NSMutableDictionary alloc] initWithCapacity:<span class="number">1</span>];</div><div class="line">        <span class="built_in">self</span>.servicesByName  = [[NSMutableDictionary alloc] initWithCapacity:<span class="number">1</span>];</div><div class="line">        <span class="built_in">self</span>.moduleConfigName = @<span class="string">"BeeHive.bundle/BeeHive"</span>;</div><div class="line">        <span class="built_in">self</span>.serviceConfigName = @<span class="string">"BeeHive.bundle/BHService"</span>;<span class="meta"></span></div><div class="line"></div><div class="line">#<span class="meta-keyword">if</span> __IPHONE_OS_VERSION_MAX_ALLOWED &gt; 80400</div><div class="line">        <span class="built_in">self</span>.touchShortcutItem = [BHShortcutItem <span class="keyword">new</span>];<span class="meta"></span></div><div class="line">#<span class="meta-keyword">endif</span></div><div class="line"></div><div class="line">        <span class="built_in">self</span>.openURLItem = [BHOpenURLItem <span class="keyword">new</span>];</div><div class="line">        <span class="built_in">self</span>.notificationsItem = [BHNotificationsItem <span class="keyword">new</span>];</div><div class="line">        <span class="built_in">self</span>.userActivityItem = [BHUserActivityItem <span class="keyword">new</span>];</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="built_in">self</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ol>
<li>定义了<code>modulesByName</code>、<code>servicesByName</code>为<code>NSMutableDictionary</code>的对象，只能容纳一个元素。</li>
<li>定义了<code>moduleConfigName</code>、<code>serviceConfigName</code>为String的对象。</li>
<li>在系统大于8.0.4的时候，支持3D touch的话，会额外设置一个对象，这个对象里面就两个对象，一个是<code>UIApplicationShortcutItem *shortcutItem;</code>, 一个是<code>typedef void (^shortcutItemCompletionHandler)(BOOL);</code>,都是在调用3D touch的时候会调用到。</li>
<li>涉及到了另一个对象<code>BHOpenURLItem</code>,这个对象含有三个变量<code>NSURL *openURL;</code>,<code>NSString *sourceApplication;</code>,<code>NSDictionary *options;</code>。</li>
<li>设计了通知的一个对象<code>BHNotificationsItem</code>,这个对象含有五个变量：<code>NSError *notificationsError;</code>,<code>NSData *deviceToken;</code>,<code>NSDictionary *userInfo;</code>,<code>typedef void (^notificationResultHandler)(UIBackgroundFetchResult);</code>,<code>UILocalNotification *localNotification;</code>。</li>
<li>还有一个涉及到用户信息的一个对象：<code>BHUserActivityItem</code>,含有四个变量：<code>NSString *userActivityType;</code>,<code>NSUserActivity *userActivity;</code>,<code>NSError *userActivityError;</code>, <code>typedef void (^restorationHandler)(NSArray *);</code>。</li>
<li>总体看来这个对象完成的功能很多，并且以后很多类似3D touch 这种针对某种系统的新功能都可以在这个类中来拓展，而且很方便使用。</li>
</ol>
<h4 id="在本类的shareInstance的方法中："><a href="#在本类的shareInstance的方法中：" class="headerlink" title="在本类的shareInstance的方法中："></a>在本类的<code>shareInstance</code>的方法中：</h4><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">dispatch_once(&amp;p, </span>^&#123;</div><div class="line">        <span class="keyword">BHInstance </span>= [[[self class] alloc] init]<span class="comment">;</span></div><div class="line">        if ([<span class="keyword">BHInstance </span>isKindOfClass:[<span class="keyword">BHContext </span>class]]) &#123;</div><div class="line">            ((<span class="keyword">BHContext </span>*) <span class="keyword">BHInstance).config </span>= [<span class="keyword">BHConfig </span><span class="keyword">shareInstance];</span></div><div class="line">        &#125;</div><div class="line">    &#125;)<span class="comment">;</span></div></pre></td></tr></table></figure>
<ol>
<li>这里在设置<code>config</code>的变量之前判断<code>if ([BHInstance isKindOfClass:[BHContext class]]) {}</code>这个说实话，我没太明白这么做的原因是什么，上面都已经<code>BHInstance = [[[self class] alloc] init];</code>调用了，那这个判断还有什么意思吗？并且这个对象是继承的<code>NSObject</code>的对象。</li>
<li>这里的<code>BHConfig</code>对象，从代码上看也是一个单例，并且定义了一系列存储，判断是否存在，在.m的文件中定义了一个<code>NSMutableDictionary *config;</code>的对象，统一存储在这个里面，可以是对象类型，也可以是一些基础的数据类型。</li>
</ol>
<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[<span class="keyword">BHContext </span><span class="keyword">shareInstance].application </span>= application<span class="comment">;</span></div><div class="line">[<span class="keyword">BHContext </span><span class="keyword">shareInstance].launchOptions </span>= launchOptions<span class="comment">;</span></div><div class="line">[<span class="keyword">BHContext </span><span class="keyword">shareInstance].moduleConfigName </span>= @<span class="string">"BeeHive.bundle/BeeHive"</span><span class="comment">;//可选，默认为BeeHive.bundle/BeeHive.plist</span></div><div class="line">[<span class="keyword">BHContext </span><span class="keyword">shareInstance].serviceConfigName </span>= @<span class="string">"BeeHive.bundle/BHService"</span><span class="comment">;</span></div></pre></td></tr></table></figure>
<ol>
<li>现在可以看出来，首先这4行代码就是简单的赋值的动作，有些类的值你可以不赋值，类似的有：<code>moduleConfigName</code>,<code>serviceConfigName</code>,因为在对象实例化的时候，就已经进行了赋值。</li>
</ol>
<h4 id="紧接着在下面的两行代码中涉及到了一个新的对象："><a href="#紧接着在下面的两行代码中涉及到了一个新的对象：" class="headerlink" title="紧接着在下面的两行代码中涉及到了一个新的对象："></a>紧接着在下面的两行代码中涉及到了一个新的对象：</h4><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[<span class="keyword">BeeHive </span><span class="keyword">shareInstance].enableExpection </span>= YES<span class="comment">;</span></div><div class="line">[[<span class="keyword">BeeHive </span><span class="keyword">shareInstance] </span>setContext:[<span class="keyword">BHContext </span><span class="keyword">shareInstance]];</span></div></pre></td></tr></table></figure>
<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#pragma mark - Private</span></div><div class="line"></div><div class="line">-(void)setContext:(<span class="keyword">BHContext </span>*)<span class="built_in">context</span></div><div class="line">&#123;</div><div class="line">    _<span class="built_in">context</span> = <span class="built_in">context</span><span class="comment">;</span></div><div class="line"></div><div class="line">    static <span class="keyword">dispatch_once_t </span>onceToken<span class="comment">;</span></div><div class="line">    <span class="keyword">dispatch_once(&amp;onceToken, </span>^&#123;</div><div class="line">        [self loadStaticServices]<span class="comment">;</span></div><div class="line">        [self loadStaticModules]<span class="comment">;</span></div><div class="line">    &#125;)<span class="comment">;</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ol>
<li>首先在<code>BeeHive.m</code>的文件中，可以看出来，这个对象也是个单例。</li>
<li>紧接着在public的属性中，设置了全局了<code>BHContext</code>的对象，并且将它保存下来，并且在这里复写了<code>Setter</code>的方法,并且在<code>Setter</code>方法的时候,又调用了两个新的方法，并且这两个方法有且仅调用一次。</li>
</ol>
<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">-(void)loadStaticServices</div><div class="line">&#123;</div><div class="line">    [<span class="keyword">BHServiceManager </span><span class="keyword">sharedManager].enableException </span>= self.enableExpection<span class="comment">;</span></div><div class="line"></div><div class="line">    [[<span class="keyword">BHServiceManager </span><span class="keyword">sharedManager] </span>setWholeContext:self.context]<span class="comment">;</span></div><div class="line"></div><div class="line">    [[<span class="keyword">BHServiceManager </span><span class="keyword">sharedManager] </span>registerLocalServices]<span class="comment">;</span></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ol>
<li>在<code>loadStaticServices</code>的方法中，又创建了一个<code>BHServiceManager</code>的单例对象。</li>
<li>在<code>BHServiceManager</code>中设计了<code>enableException</code>的属性。</li>
<li>在<code>BHServiceManager</code>中设置了<code>BHContext</code>的对象，将<code>BHContext</code>对象也能够在<code>BHServiceManager</code>中能够持有这个对象。</li>
<li>最后调用到了<code>loadStaticServices</code>中的<code>registerLocalServices</code>的方法。方法如下：</li>
</ol>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)registerLocalServices</div><div class="line">&#123;</div><div class="line">    <span class="built_in">NSString</span> *serviceConfigName = <span class="keyword">self</span>.wholeContext.serviceConfigName;</div><div class="line"></div><div class="line">    <span class="built_in">NSString</span> *plistPath = [[<span class="built_in">NSBundle</span> mainBundle] pathForResource:serviceConfigName  ofType:<span class="string">@"plist"</span>];</div><div class="line">    <span class="keyword">if</span> (!plistPath) &#123;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="built_in">NSArray</span> *serviceList = [[<span class="built_in">NSArray</span> alloc] initWithContentsOfFile:plistPath];</div><div class="line"></div><div class="line">    [<span class="keyword">self</span>.lock lock];</div><div class="line">    [<span class="keyword">self</span>.allServices addObjectsFromArray:serviceList];</div><div class="line">    [<span class="keyword">self</span>.lock unlock];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ol>
<li>通过传入的<code>context</code>找到<code>serviceConfigName</code>的变量，拼接成plist文件名，如果项目中确实存在的话，就打开这个文件的内容。</li>
<li>这里通过锁，来将plist文件中取到的变量NSArray，存储到<code>allServices</code>私有变量中去。</li>
</ol>
<h4 id="另一个方法："><a href="#另一个方法：" class="headerlink" title="另一个方法："></a>另一个方法：</h4><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">- (void)loadStaticModules</div><div class="line">&#123;</div><div class="line">    [[<span class="keyword">BHModuleManager </span><span class="keyword">sharedManager] </span>setWholeContext:self.context]<span class="comment">;</span></div><div class="line"></div><div class="line">    [[<span class="keyword">BHModuleManager </span><span class="keyword">sharedManager] </span>loadLocalModules]<span class="comment">;</span></div><div class="line"></div><div class="line">    [[<span class="keyword">BHModuleManager </span><span class="keyword">sharedManager] </span>registedAllModules]<span class="comment">;</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ol>
<li>上面已经分析过了，这个<code>BHModuleManager</code>也是一个单例。首先将全局的<code>context</code>的变量设置上去，并且将<code>context中的moduleConfigName</code>的变量赋值给<code>modulesConfigFilename</code>。</li>
<li>将刚才的变量<code>modulesConfigFilename</code>拼接成<code>plist</code>文件，然后将取得的数据放入到数组中。</li>
<li>在<code>registedAllModules</code>的方法中，听过比较字典中的<code>moduleLevel</code>的value值，进行比较、排序，然后通过枚举，挨个实例化对象之后，在存入<code>BHModules</code>的可变数组中。</li>
</ol>
<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">id&lt;HomeServiceProtocol&gt; homeVc = [[<span class="keyword">BeeHive </span><span class="keyword">shareInstance] </span>createService:@protocol(HomeServiceProtocol)]<span class="comment">;</span></div></pre></td></tr></table></figure>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">id</span>)createService:(Protocol *)service</div><div class="line">&#123;</div><div class="line">    <span class="keyword">id</span> implInstance = <span class="literal">nil</span>;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (![<span class="keyword">self</span> checkValidService:service] &amp;&amp; <span class="keyword">self</span>.enableException) &#123;</div><div class="line">        <span class="keyword">@throw</span> [<span class="built_in">NSException</span> exceptionWithName:<span class="built_in">NSInternalInconsistencyException</span> reason:[<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%@ protocol does not been registed"</span>, <span class="built_in">NSStringFromProtocol</span>(service)] userInfo:<span class="literal">nil</span>];</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    Class implClass = [<span class="keyword">self</span> serviceImplClass:service];</div><div class="line"></div><div class="line">    implInstance = [[implClass alloc] init];</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (![implInstance respondsToSelector:<span class="keyword">@selector</span>(singleton)]) &#123;</div><div class="line">        <span class="keyword">return</span> implInstance;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="built_in">NSString</span> *serviceStr = <span class="built_in">NSStringFromProtocol</span>(service);</div><div class="line"></div><div class="line">    <span class="keyword">if</span> ([implInstance singleton]) &#123;</div><div class="line">        <span class="keyword">id</span> protocol = [[BHContext shareInstance].servicesByName objectForKey:serviceStr];</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (protocol) &#123;</div><div class="line">            <span class="keyword">return</span> protocol;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            [[BHContext shareInstance].servicesByName setObject:implInstance forKey:serviceStr];</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        [[BHContext shareInstance].servicesByName setObject:implInstance forKey:serviceStr];</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> implInstance;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ol>
<li>紧接着调用了<code>BeeHive</code>的public的方法：<code>- (id)createService:(Protocol *)proto;</code>传入一个protocol，返回一个id类型的对象。</li>
<li>其实这里<code>self checkValidService:service</code>值是判断之前<code>registerLocalServices</code>这个里面有没有遵循这个protocol的，假如没有，并且开启<code>self.enableException</code>的话，他就会抛出一个<code>NSException</code>。</li>
<li>否则就会遵循这个protocol的类，并且返回。</li>
<li>判断这个类有没有遵循<code>BHServiceProtocol</code>这个协议的<code>singleton</code>,并且实现，假如没有实现的话，就直接返回这个对象，不再往下执行了。</li>
<li>根据这个protocol在<code>[BHContext shareInstance].servicesByName</code>字典中查找有没有对应value值，如果有的话，就直接放回这个对象，如果没有的话，放回对象的同时，将这个protocol存储到这个<code>[BHContext shareInstance].servicesByName</code>字典中。</li>
<li>最后讲个homeVC设置为Appdelegate的RootWindow。</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;紧接着前面那篇文章，回到BHAppDelegate-m的文件里面的&quot;&gt;&lt;a href=&quot;#紧接着前面那篇文章，回到BHAppDelegate-m的文件里面的&quot; class=&quot;headerlink&quot; title=&quot;紧接着前面那篇文章，回到BHAppDelegate.
    
    </summary>
    
      <category term="日志" scheme="http://ghcoder.com/categories/%E6%97%A5%E5%BF%97/"/>
    
    
      <category term="学习" scheme="http://ghcoder.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>学习阿里开源项目BeeHive(-)</title>
    <link href="http://ghcoder.com/2016/11/25/20161125/"/>
    <id>http://ghcoder.com/2016/11/25/20161125/</id>
    <published>2016-11-25T08:27:12.000Z</published>
    <updated>2016-11-25T08:28:53.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="学习阿里开源-BeeHive-每次学习别人写的框架，或者好东西都会让自己学到很多东西，废话不多说，直接扯代码。"><a href="#学习阿里开源-BeeHive-每次学习别人写的框架，或者好东西都会让自己学到很多东西，废话不多说，直接扯代码。" class="headerlink" title="学习阿里开源 BeeHive ,每次学习别人写的框架，或者好东西都会让自己学到很多东西，废话不多说，直接扯代码。"></a>学习阿里开源 <code>BeeHive</code> ,每次学习别人写的框架，或者好东西都会让自己学到很多东西，废话不多说，直接扯代码。</h2><h2 id="源码中的几个小问题："><a href="#源码中的几个小问题：" class="headerlink" title="源码中的几个小问题："></a>源码中的几个小问题：</h2><h3 id="1-在Example中，程序的入口文件TestAppDelegate-你就惊奇地发现，他不是继承了UIAppDelegate，也不是继承了UIAppDelegate的子类，而是自己写了一个-quot-AppDelegate-quot"><a href="#1-在Example中，程序的入口文件TestAppDelegate-你就惊奇地发现，他不是继承了UIAppDelegate，也不是继承了UIAppDelegate的子类，而是自己写了一个-quot-AppDelegate-quot" class="headerlink" title="1. 在Example中，程序的入口文件TestAppDelegate,你就惊奇地发现，他不是继承了UIAppDelegate，也不是继承了UIAppDelegate的子类，而是自己写了一个&quot;AppDelegate&quot;"></a>1. 在Example中，程序的入口文件<code>TestAppDelegate</code>,你就惊奇地发现，他不是继承了UIAppDelegate，也不是继承了UIAppDelegate的子类，而是自己写了一个<code>&quot;AppDelegate&quot;</code></h3><figure class="highlight ada"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">@<span class="keyword">interface</span> TestAppDelegate : <span class="type">BHAppDelegate</span> &lt;UIApplicationDelegate&gt;</div></pre></td></tr></table></figure>
<p>在 <code>BHAppDelegate.m</code>的文件中，我们发现这个类实现了很多appDelegae的很多代理方法</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">-</span> (void)<span class="selector-tag">applicationWillResignActive</span><span class="selector-pseudo">:(UIApplication</span> *)<span class="selector-tag">application</span></div><div class="line">&#123;</div><div class="line">    <span class="selector-attr">[[BHModuleManager sharedManager]</span> <span class="selector-tag">tiggerEvent</span><span class="selector-pseudo">:BHMWillResignActiveEvent</span>];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">-</span> (void)<span class="selector-tag">applicationDidEnterBackground</span><span class="selector-pseudo">:(UIApplication</span> *)<span class="selector-tag">application</span></div><div class="line">&#123;</div><div class="line">    <span class="selector-attr">[[BHModuleManager sharedManager]</span> <span class="selector-tag">tiggerEvent</span><span class="selector-pseudo">:BHMDidEnterBackgroundEvent</span>];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">-</span> (void)<span class="selector-tag">applicationWillEnterForeground</span><span class="selector-pseudo">:(UIApplication</span> *)<span class="selector-tag">application</span></div><div class="line">&#123;</div><div class="line">    <span class="selector-attr">[[BHModuleManager sharedManager]</span> <span class="selector-tag">tiggerEvent</span><span class="selector-pseudo">:BHMWillEnterForegroundEvent</span>];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">-</span> (void)<span class="selector-tag">applicationDidBecomeActive</span><span class="selector-pseudo">:(UIApplication</span> *)<span class="selector-tag">application</span></div><div class="line">&#123;</div><div class="line">    <span class="selector-attr">[[BHModuleManager sharedManager]</span> <span class="selector-tag">tiggerEvent</span><span class="selector-pseudo">:BHMDidBecomeActiveEvent</span>];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">-</span> (void)<span class="selector-tag">applicationWillTerminate</span><span class="selector-pseudo">:(UIApplication</span> *)<span class="selector-tag">application</span></div><div class="line">&#123;</div><div class="line">    <span class="selector-attr">[[BHModuleManager sharedManager]</span> <span class="selector-tag">tiggerEvent</span><span class="selector-pseudo">:BHMWillTerminateEvent</span>];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>####当然这里先忽略，我们一点点说：</p>
<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">BOOL)application:(UIApplication </span>*)application <span class="keyword">didFinishLaunchingWithOptions:(NSDictionary </span>*)launchOptions</div><div class="line">&#123;</div><div class="line"><span class="comment">#ifdef DEBUG</span></div><div class="line">    self.timeProdiler = [<span class="keyword">BHTimeProfiler </span><span class="keyword">sharedTimeProfiler];</span></div><div class="line"><span class="comment">#endif</span></div><div class="line"></div><div class="line">    [[<span class="keyword">BHModuleManager </span><span class="keyword">sharedManager] </span>tiggerEvent:<span class="keyword">BHMSetupEvent];</span></div><div class="line">    [[<span class="keyword">BHModuleManager </span><span class="keyword">sharedManager] </span>tiggerEvent:<span class="keyword">BHMInitEvent];</span></div><div class="line"></div><div class="line">    <span class="keyword">dispatch_async(dispatch_get_main_queue(), </span>^&#123;</div><div class="line">        [[<span class="keyword">BHModuleManager </span><span class="keyword">sharedManager] </span>tiggerEvent:<span class="keyword">BHMSplashEvent];</span></div><div class="line">    &#125;)<span class="comment">;</span></div><div class="line"></div><div class="line"><span class="comment">#ifdef DEBUG</span></div><div class="line">    [self.timeProdiler printOutTimeProfileResult]<span class="comment">;</span></div><div class="line">    [self.timeProdiler saveTimeProfileDataIntoFile:@<span class="string">"BeeHiveTimeProfiler"</span>]<span class="comment">;</span></div><div class="line"><span class="comment">#endif</span></div><div class="line"></div><div class="line">    return YES<span class="comment">;</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="在debug状态下，这个程序启动的方法创建了一个timeProdiler的实例，并且在return之前执行了timeProdiler的两个方法。"><a href="#在debug状态下，这个程序启动的方法创建了一个timeProdiler的实例，并且在return之前执行了timeProdiler的两个方法。" class="headerlink" title="在debug状态下，这个程序启动的方法创建了一个timeProdiler的实例，并且在return之前执行了timeProdiler的两个方法。"></a>在debug状态下，这个程序启动的方法创建了一个<code>timeProdiler</code>的实例，并且在return之前执行了<code>timeProdiler</code>的两个方法。</h4><h5 id="进入到-BHTimeProfiler-m的文件里面发现，这个类是一个单例。在这个类的init的方法中发现"><a href="#进入到-BHTimeProfiler-m的文件里面发现，这个类是一个单例。在这个类的init的方法中发现" class="headerlink" title="进入到 BHTimeProfiler.m的文件里面发现，这个类是一个单例。在这个类的init的方法中发现"></a>进入到 <code>BHTimeProfiler.m</code>的文件里面发现，这个类是一个单例。在这个类的init的方法中发现</h5><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">instancetype</span>)initTimeProfilerWithMainKey:(<span class="built_in">NSString</span> *)mainKey</div><div class="line">&#123;</div><div class="line">    <span class="keyword">self</span> = [<span class="keyword">super</span> init];</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>) &#123;</div><div class="line">        _mainIdentifier = [mainKey <span class="keyword">copy</span>];</div><div class="line">        _lastTime = <span class="built_in">CACurrentMediaTime</span>();</div><div class="line">        _recordStartTime = <span class="built_in">CACurrentMediaTime</span>();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ol>
<li>用一个字符串对私有的_mainIdentifier的字符串类型进行了赋值。</li>
<li>创建了一个时间的值赋给了_lastTime。</li>
<li>创建了一个时间的值赋给了_recordStartTime。<code>这里的时间类型并没有用NSDate去实例化，而是用了CACurrentMediaTime，这个时间在设备上所有进程都是全局的，并且在设备休眠的状态的时候，这个值会暂停</code></li>
</ol>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)recordEventTime:(<span class="built_in">NSString</span> *)eventName</div><div class="line">&#123;</div><div class="line"><span class="meta">#ifdef DEBUG</span></div><div class="line">    <span class="built_in">NSString</span> *keyName = [eventName <span class="keyword">copy</span>];</div><div class="line"></div><div class="line">    [<span class="keyword">self</span>.identifiers addObject:keyName];</div><div class="line">    [<span class="keyword">self</span>.timeDataDic setObject:@(<span class="built_in">CACurrentMediaTime</span>()) forKey:keyName];</div><div class="line"><span class="meta">#endif</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ol>
<li>只有在debug的状态下调用这个public的方法才有意义。这个方法很简单，其实就是用mutableArray来存储<code>keyName</code>,并且将时间的值作为value存储在MutableDictionary中。这其实没什么好说的，但是这里有一点却引起了我的注意：</li>
</ol>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">if</span> __has_feature(objc_generics)</span></div><div class="line"><span class="meta">#   <span class="meta-keyword">define</span> TM__GENERICS(class, ...)         class<span class="meta-string">&lt;__VA_ARGS__&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">else</span></span></div><div class="line"><span class="meta">#   <span class="meta-keyword">define</span> TM__GENERICS(class, ...)         class</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> TMMutableArrayWith(valueType)                   TM__GENERICS(NSMutableArray, valueType)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> TMMutableDictionaryWith(keyType, valueType)     TM__GENERICS(NSMutableDictionary, keyType, valueType)</span></div></pre></td></tr></table></figure>
<ol>
<li><code>__has_feature(objc_generics)</code>判断是否支持Obj-C泛型的特征。</li>
<li><code>...</code>表示，这个表示符里面可以接受0个，或者1个，或者多个参数。</li>
<li>除了第一个class的参数，其他的参数作为一个整体在<code>__VA_ARGS__</code>里面返回。</li>
</ol>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)printOutTimeProfileResult</div><div class="line">&#123;</div><div class="line"><span class="meta">#ifdef DEBUG</span></div><div class="line">    <span class="keyword">for</span> (<span class="built_in">NSString</span> *eventName <span class="keyword">in</span> <span class="keyword">self</span>.identifiers) &#123;</div><div class="line">        <span class="built_in">NSAssert</span>([<span class="keyword">self</span>.timeDataDic objectForKey:eventName] != <span class="literal">nil</span> &amp;&amp;</div><div class="line">                 [[<span class="keyword">self</span>.timeDataDic objectForKey:eventName] isKindOfClass:[<span class="built_in">NSNumber</span> <span class="keyword">class</span>]], <span class="string">@"Save Wrong Type TimeStamp"</span>);</div><div class="line"></div><div class="line">        <span class="built_in">CFTimeInterval</span> current = [[<span class="keyword">self</span>.timeDataDic objectForKey:eventName] doubleValue];</div><div class="line">        printf(<span class="string">"[%s] time stamp: %gms and execute for %gms -&gt; \n"</span>, [eventName UTF8String], (current - <span class="keyword">self</span>.recordStartTime) * <span class="number">1000</span>, (current - <span class="keyword">self</span>.lastTime) * <span class="number">1000</span>);</div><div class="line"></div><div class="line">        <span class="keyword">self</span>.lastTime = current;</div><div class="line">    &#125;</div><div class="line"><span class="meta">#endif</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ol>
<li>遍历keyName的数组，拿到每个keyName，先去字典中找对应的时间值，假如没有的话，就只会断点断住。</li>
<li>算出现在的时间值，与lastTime,recordTime的值得差值。</li>
<li>最后加lastTime的值重新设置为当前的值。</li>
</ol>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)saveTimeProfileDataIntoFile:(<span class="built_in">NSString</span> *)fileName</div><div class="line">&#123;</div><div class="line">    <span class="built_in">NSString</span> *documentPath = [<span class="built_in">NSSearchPathForDirectoriesInDomains</span>(<span class="built_in">NSDocumentDirectory</span>, <span class="built_in">NSUserDomainMask</span>, <span class="literal">YES</span>) firstObject];</div><div class="line">    <span class="built_in">NSString</span> *filePath =  [documentPath stringByAppendingPathComponent:[fileName stringByAppendingPathExtension:<span class="string">@"txt"</span>]];</div><div class="line"></div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"TMTimeProfiler::SaveFilePath is %@"</span>, filePath);</div><div class="line"></div><div class="line">    <span class="built_in">BOOL</span> res=[[<span class="built_in">NSFileManager</span> defaultManager] createFileAtPath:filePath contents:<span class="literal">nil</span> attributes:<span class="literal">nil</span>];</div><div class="line">    <span class="keyword">if</span> (!res) &#123;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="built_in">NSFileHandle</span> *handle = [<span class="built_in">NSFileHandle</span> fileHandleForWritingAtPath:filePath];</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="built_in">NSString</span> *eventName <span class="keyword">in</span> <span class="keyword">self</span>.identifiers)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">CFTimeInterval</span> current = [[<span class="keyword">self</span>.timeDataDic objectForKey:eventName] doubleValue];</div><div class="line"></div><div class="line">        <span class="built_in">NSString</span> *output = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%@ time stamp  %g and execute for  %g\n"</span>, eventName, current, (current - <span class="keyword">self</span>.lastTime) * <span class="number">1000</span>];</div><div class="line"></div><div class="line">        [handle writeData:[output dataUsingEncoding:<span class="built_in">NSUTF8StringEncoding</span>]];</div><div class="line"></div><div class="line">        <span class="keyword">self</span>.lastTime = current;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    [handle closeFile];</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ol>
<li>这个函数的作用就是传入一个文件的名字，然后将启动时间，record时间，记录下来，这个没什么好说的。</li>
</ol>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">- (<span class="keyword">void</span>)postTimeProfileResultNotification</div><div class="line">&#123;</div><div class="line">    <span class="built_in">NSMutableArray</span> *logArray  = [<span class="built_in">NSMutableArray</span> array];</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="built_in">NSString</span> *eventName <span class="keyword">in</span> <span class="keyword">self</span>.identifiers)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">CFTimeInterval</span> current = [[<span class="keyword">self</span>.timeDataDic objectForKey:eventName] doubleValue];</div><div class="line"></div><div class="line"></div><div class="line">        [logArray addObject: @&#123;<span class="string">@"eventName"</span>:eventName,<span class="string">@"costTime"</span>: @((current - <span class="keyword">self</span>.lastTime) * <span class="number">1000</span>)&#125;];</div><div class="line"></div><div class="line">        <span class="keyword">self</span>.lastTime = current;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    [[<span class="built_in">NSNotificationCenter</span> defaultCenter] postNotificationName:kTimeProfilerResultNotificationName object:<span class="literal">nil</span> userInfo:@&#123;kNotificationUserInfoKey:logArray&#125;];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>1.用NSNotificationCenter，将上次lastTime与现在时间的差值作为NSNotificationCenter中的userInfo的参数传输出去。这样只要监听这个NSNotificationCenter，你每次post就能接受到这个全局的通知。光这一个时间的统计功能，产品、技术上就能做好多文章。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;学习阿里开源-BeeHive-每次学习别人写的框架，或者好东西都会让自己学到很多东西，废话不多说，直接扯代码。&quot;&gt;&lt;a href=&quot;#学习阿里开源-BeeHive-每次学习别人写的框架，或者好东西都会让自己学到很多东西，废话不多说，直接扯代码。&quot; class=&quot;h
    
    </summary>
    
      <category term="日志" scheme="http://ghcoder.com/categories/%E6%97%A5%E5%BF%97/"/>
    
    
      <category term="学习" scheme="http://ghcoder.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>创建私有的Cocoapods</title>
    <link href="http://ghcoder.com/2016/10/28/20161028/"/>
    <id>http://ghcoder.com/2016/10/28/20161028/</id>
    <published>2016-10-28T03:53:12.000Z</published>
    <updated>2017-05-05T06:58:44.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="创建私有Cocoapods-最近一直想将自己的App模块化，就想就App拆成每个模块组件，比如：登录模块、网络模块、消息模块、用户中心模块…但是基于这些想法，我首先要先搞定私有化Cocoapods的问题，这样团队中新人，想调用的时候，就能够快速，便捷的调用了，只需要-pod-xxx"><a href="#创建私有Cocoapods-最近一直想将自己的App模块化，就想就App拆成每个模块组件，比如：登录模块、网络模块、消息模块、用户中心模块…但是基于这些想法，我首先要先搞定私有化Cocoapods的问题，这样团队中新人，想调用的时候，就能够快速，便捷的调用了，只需要-pod-xxx" class="headerlink" title="创建私有Cocoapods,最近一直想将自己的App模块化，就想就App拆成每个模块组件，比如：登录模块、网络模块、消息模块、用户中心模块…但是基于这些想法，我首先要先搞定私有化Cocoapods的问题，这样团队中新人，想调用的时候，就能够快速，便捷的调用了，只需要  pod xxx"></a>创建私有Cocoapods,最近一直想将自己的App模块化，就想就App拆成每个模块组件，比如：登录模块、网络模块、消息模块、用户中心模块…但是基于这些想法，我首先要先搞定私有化Cocoapods的问题，这样团队中新人，想调用的时候，就能够快速，便捷的调用了，只需要  <em>pod xxx</em></h3><blockquote>
<p>1.先到自己的git账号，创建一个新的仓库 ，我们取名字 <em>GH</em></p>
<p>2.开始终端，找到一个合适的位置：</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> ~/Desktop</div></pre></td></tr></table></figure>
<blockquote>
<p>3.初始化pod</p>
</blockquote>
<figure class="highlight crystal"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pod <span class="class"><span class="keyword">lib</span> <span class="title">create</span> <span class="title">GH</span></span></div></pre></td></tr></table></figure>
<blockquote>
<p>4.接着系统会问一下问题，你可以自己按照项目需求来回答，也可以参照我的</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">What language <span class="keyword">do</span> you want <span class="keyword">to</span> <span class="keyword">use</span>?? [ Swift / ObjC ]</div><div class="line"> &gt; ObjC</div><div class="line"></div><div class="line">Would you <span class="keyword">like</span> <span class="keyword">to</span> <span class="keyword">include</span> a demo application <span class="keyword">with</span> your <span class="keyword">library</span>? [ Yes / <span class="keyword">No</span> ]</div><div class="line"> &gt; Yes</div><div class="line"></div><div class="line">Which testing frameworks will you <span class="keyword">use</span>? [ Specta / Kiwi / <span class="keyword">None</span> ]</div><div class="line"> &gt; <span class="keyword">None</span></div><div class="line"></div><div class="line">Would you <span class="keyword">like</span> <span class="keyword">to</span> <span class="keyword">do</span> <span class="keyword">view</span> based testing? [ Yes / <span class="keyword">No</span> ]</div><div class="line"> &gt; <span class="keyword">No</span></div><div class="line"></div><div class="line">What <span class="keyword">is</span> your <span class="keyword">class</span> prefix?</div><div class="line"> &gt; GG</div></pre></td></tr></table></figure>
<blockquote>
<p>5.修改一下pod的配置文件,pod的配置文件应该都是一样的后缀名，我这里叫 <em>Gh.podspec</em></p>
</blockquote>
<h3 id="steps"><a href="#steps" class="headerlink" title="steps"></a>steps</h3><h4 id="1-这里我先讲description的描述内容注释掉"><a href="#1-这里我先讲description的描述内容注释掉" class="headerlink" title="1.这里我先讲description的描述内容注释掉"></a>1.这里我先讲description的描述内容注释掉</h4><figure class="highlight vala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#s.description      = &lt;&lt;-DESC</span></div><div class="line"><span class="meta">#TODO: Add long description of the pod here.</span></div><div class="line"><span class="meta">#                        DESC</span></div></pre></td></tr></table></figure>
<h4 id="2-修改homepage的路径，在第24行"><a href="#2-修改homepage的路径，在第24行" class="headerlink" title="2.修改homepage的路径，在第24行"></a>2.修改homepage的路径，在第24行</h4><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">s<span class="selector-class">.homepage</span>         = <span class="string">'https://github.com/Ghstart/Gh'</span></div></pre></td></tr></table></figure>
<h4 id="3-修改git的路径，在第28行"><a href="#3-修改git的路径，在第28行" class="headerlink" title="3.修改git的路径，在第28行"></a>3.修改git的路径，在第28行</h4><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">s<span class="selector-class">.source</span>           = &#123; :git =&gt; <span class="string">'https://github.com/Ghstart/Gh.gi    t'</span>, :tag =&gt; s<span class="selector-class">.version</span><span class="selector-class">.to_s</span> &#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>5.保存好退出，再次进入到那个文件夹中，将文件内容提交到github上,我这里选择的是命令的方式，你也可以用github客户端</p>
</blockquote>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">cd</span> Gh</div><div class="line">git init</div><div class="line">git remote <span class="built_in">add</span> origin http<span class="variable">s:</span>//github.<span class="keyword">com</span>/Ghstart/GH.git // 这个路径在你刚才新建仓库的那个页面就能找到</div><div class="line">git <span class="built_in">add</span> .</div><div class="line">git commit -<span class="keyword">m</span> <span class="string">'Gh first creats private own cocoapods'</span></div><div class="line">git <span class="keyword">tag</span> <span class="number">0.1</span>.<span class="number">0</span> // 这里的<span class="number">0.1</span>.<span class="number">0</span>在刚才的配置文件里有，对应起来就好了</div><div class="line">git push -<span class="keyword">u</span> origin master --<span class="keyword">tags</span></div></pre></td></tr></table></figure>
<blockquote>
<p>最后再去你刚才新建仓库的页面刷新一下，就会发现奇迹。。</p>
</blockquote>
<h3 id="现在开始添加自己的类"><a href="#现在开始添加自己的类" class="headerlink" title="现在开始添加自己的类"></a>现在开始添加自己的类</h3><blockquote>
<p>找到存放类的目录下，<em>/Users/</em>自己的mac名字<em>/Desktop/Gh/Gh/Classes</em>，在这个文件夹下面，你会发现一个名字叫做<em>ReplaceMe.m</em>，这个真是太贴心了，cocoapods都已经为我们想到了，在这里你先删除这个类，然后添加自己想要的类，然后在走一下下面的命令。</p>
<p>我觉得这里，你既然已经修改了内容，或者想发布第一版本，那么修改配置文件的tags修改为<em>0.1.1</em></p>
</blockquote>
<figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">git add .</div><div class="line">git commit -m<span class="string">"add files"</span></div><div class="line">git <span class="keyword">tag</span> <span class="title">0</span>.<span class="number">1.1</span></div><div class="line">git push -u origin <span class="keyword">master</span> <span class="title">--tags</span></div></pre></td></tr></table></figure>
<blockquote>
<p>现在到自己的github页面熟悉一下，就会发现自己创建的0.1.1的版本，以及新添加的文件。下面我们需要将我们自己创建的这个cocoapods提交给cocoapods审核，并且发布。</p>
</blockquote>
<figure class="highlight crystal"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">pod <span class="class"><span class="keyword">lib</span> <span class="title">lint</span> <span class="title">Gh</span>.<span class="title">podspec</span> // 认证通过</span></div><div class="line">pod trunk push    /<span class="regexp">/ 提交</span></div></pre></td></tr></table></figure>
<figure class="highlight livescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">在最后 pod trunk push 时候如果报错 如：</div><div class="line">[!] Authentication token <span class="keyword">is</span> invalid <span class="keyword">or</span> unverified. Either verify <span class="literal">it</span> <span class="keyword">with</span> the email <span class="literal">that</span> was sent <span class="keyword">or</span> register a <span class="keyword">new</span> session.</div><div class="line"></div><div class="line">这说明你之前的认证token已经失效了，重新注册一下就好了，输入以下命令：</div><div class="line">          pod trunk register gonghuan2020@gmail.com <span class="string">'gonghuan'</span></div><div class="line">然后在重新  pod trunk push 就可以了。</div></pre></td></tr></table></figure>
<figure class="highlight crystal"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">如果弹 [!] The spec did not pass validation, due to <span class="number">1</span> warning (but you can use <span class="string">`--allow-warnings`</span> to ignore it).</div><div class="line"></div><div class="line">pod trunk push --allow-warnings</div><div class="line"></div><div class="line">如果弹 You can use the <span class="string">`--no-clean`</span> option to inspect any issue.</div><div class="line">pod <span class="class"><span class="keyword">lib</span> <span class="title">lint</span> <span class="title">GateWayObject</span>.<span class="title">podspec</span> --<span class="title">allow</span>-<span class="title">warnings</span> --<span class="title">no</span>-<span class="title">clean</span></span></div></pre></td></tr></table></figure>
<p>大功告成！！<em>这里cocoapods是一个很关键的问题，尤其你刚跟新pod或者xcode，那问题会很多，建议出现一些奇葩的问题，可以先卸载cocoapods，然后再装最新的稳定版本。</em></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;创建私有Cocoapods-最近一直想将自己的App模块化，就想就App拆成每个模块组件，比如：登录模块、网络模块、消息模块、用户中心模块…但是基于这些想法，我首先要先搞定私有化Cocoapods的问题，这样团队中新人，想调用的时候，就能够快速，便捷的调用了，只需
    
    </summary>
    
      <category term="日志" scheme="http://ghcoder.com/categories/%E6%97%A5%E5%BF%97/"/>
    
    
      <category term="学习" scheme="http://ghcoder.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="Cocoapods" scheme="http://ghcoder.com/tags/Cocoapods/"/>
    
  </entry>
  
  <entry>
    <title>React-Native 实战(-)</title>
    <link href="http://ghcoder.com/2016/10/21/20161021/"/>
    <id>http://ghcoder.com/2016/10/21/20161021/</id>
    <published>2016-10-21T07:47:12.000Z</published>
    <updated>2016-10-21T07:47:13.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="实战-React-Native-重写红狮物流App的项目。下面的的几次博客我会以完成一个现有的项目，将它整体都用React重写。项目我已经上传到github-https-github-com-Ghstart-HongshiWuliuRN"><a href="#实战-React-Native-重写红狮物流App的项目。下面的的几次博客我会以完成一个现有的项目，将它整体都用React重写。项目我已经上传到github-https-github-com-Ghstart-HongshiWuliuRN" class="headerlink" title="实战(-) React-Native 重写红狮物流App的项目。下面的的几次博客我会以完成一个现有的项目，将它整体都用React重写。项目我已经上传到github[https://github.com/Ghstart/HongshiWuliuRN]"></a>实战(-) React-Native 重写红狮物流App的项目。下面的的几次博客我会以完成一个现有的项目，将它整体都用React重写。项目我已经上传到github[<a href="https://github.com/Ghstart/HongshiWuliuRN" target="_blank" rel="external">https://github.com/Ghstart/HongshiWuliuRN</a>]</h2><h3 id="首先找到index-ios-js文件，由于我们的app的架构就是主流的tab的这种，所以我这里用到了TabBarIOS的主件，代码如下："><a href="#首先找到index-ios-js文件，由于我们的app的架构就是主流的tab的这种，所以我这里用到了TabBarIOS的主件，代码如下：" class="headerlink" title="首先找到index.ios.js文件，由于我们的app的架构就是主流的tab的这种，所以我这里用到了TabBarIOS的主件，代码如下："></a>首先找到<code>index.ios.js</code>文件，由于我们的app的架构就是主流的tab的这种，所以我这里用到了TabBarIOS的主件，代码如下：</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> React, &#123; Component &#125; from <span class="string">'react'</span>;</div><div class="line"><span class="keyword">import</span> &#123;</div><div class="line">  AppRegistry,</div><div class="line">  StyleSheet,</div><div class="line">  Text,</div><div class="line">  View,</div><div class="line">  TabBarIOS</div><div class="line">&#125; from <span class="string">'react-native'</span>;</div><div class="line"></div><div class="line"><span class="keyword">import</span> Task     from <span class="string">'./ios_views/task'</span>;</div><div class="line"><span class="keyword">import</span> Goods    from <span class="string">'./ios_views/goods'</span></div><div class="line"><span class="keyword">import</span> Home     from <span class="string">'./ios_views/home'</span></div><div class="line"><span class="keyword">import</span> Message  from <span class="string">'./ios_views/message'</span></div><div class="line"><span class="keyword">import</span> Setting  from <span class="string">'./ios_views/setting'</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">HongshiWuLiuRN</span> <span class="title">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>() &#123;</div><div class="line">    <span class="keyword">super</span>();</div><div class="line"></div><div class="line">    <span class="keyword">this</span>.state = &#123;</div><div class="line">      selected: <span class="string">'home'</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  _renderView(moduleName) &#123;</div><div class="line">    switch (moduleName) &#123;</div><div class="line">      case <span class="string">'task'</span>:</div><div class="line">        <span class="keyword">return</span> (</div><div class="line">          &lt;Task/&gt;</div><div class="line">        );</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">      case <span class="string">'goods'</span>:</div><div class="line">        <span class="keyword">return</span> (</div><div class="line">          &lt;Goods/&gt;</div><div class="line">        );</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">      case <span class="string">'home'</span>:</div><div class="line">        <span class="keyword">return</span> (</div><div class="line">          &lt;Home/&gt;</div><div class="line">        );</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">      case <span class="string">'message'</span>:</div><div class="line">        <span class="keyword">return</span> (</div><div class="line">          &lt;Message/&gt;</div><div class="line">        );</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">      case <span class="string">'setting'</span>:</div><div class="line">        <span class="keyword">return</span> (</div><div class="line">          &lt;Setting/&gt;</div><div class="line">        );</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">      <span class="keyword">default</span>:</div><div class="line">        <span class="keyword">return</span> ( &lt;View&gt;&lt;/View&gt; );</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span>(</div><div class="line">      &lt;TabBarIOS</div><div class="line">        tintColor = <span class="string">'#e23f42'</span></div><div class="line">      &gt;</div><div class="line">        &lt;TabBarIOS.Item</div><div class="line">          title = <span class="string">"任务"</span></div><div class="line">          selected = &#123; <span class="keyword">this</span>.state.selected === <span class="string">'task'</span> &#125;</div><div class="line">          icon = &#123;require(<span class="string">'./images/mission@2x.png'</span>)&#125;</div><div class="line">          selectedIcon=&#123;require(<span class="string">'./images/mission-1@2x.png'</span>)&#125;</div><div class="line">          onPress = &#123;() =&gt; &#123;</div><div class="line">            <span class="keyword">this</span>.setState(&#123;</div><div class="line">              selected: <span class="string">'task'</span></div><div class="line">            &#125;)</div><div class="line">          &#125;&#125;&gt;</div><div class="line"></div><div class="line">          &#123;<span class="keyword">this</span>._renderView(<span class="keyword">this</span>.state.selected)&#125;</div><div class="line"></div><div class="line"></div><div class="line">        &lt;/TabBarIOS.Item&gt;</div><div class="line"></div><div class="line">        &lt;TabBarIOS.Item</div><div class="line">          title = <span class="string">"货源"</span></div><div class="line">          selected = &#123; <span class="keyword">this</span>.state.selected === <span class="string">'goods'</span> &#125;</div><div class="line">          icon = &#123;require(<span class="string">'./images/goods@2x.png'</span>)&#125;</div><div class="line">          selectedIcon=&#123;require(<span class="string">'./images/goods-1@2x.png'</span>)&#125;</div><div class="line">          onPress = &#123;() =&gt; &#123;</div><div class="line">            <span class="keyword">this</span>.setState(&#123;</div><div class="line">              selected: <span class="string">'goods'</span></div><div class="line">            &#125;)</div><div class="line">          &#125;&#125;&gt;</div><div class="line"></div><div class="line"></div><div class="line">          &#123;<span class="keyword">this</span>._renderView(<span class="keyword">this</span>.state.selected)&#125;</div><div class="line"></div><div class="line">        &lt;/TabBarIOS.Item&gt;</div><div class="line"></div><div class="line">        &lt;TabBarIOS.Item</div><div class="line">          title = <span class="string">"首页"</span></div><div class="line">          selected = &#123; <span class="keyword">this</span>.state.selected === <span class="string">'home'</span> &#125;</div><div class="line">          icon = &#123;require(<span class="string">'./images/home@2x.png'</span>)&#125;</div><div class="line">          selectedIcon=&#123;require(<span class="string">'./images/home-1@2x.png'</span>)&#125;</div><div class="line">          onPress = &#123;() =&gt; &#123;</div><div class="line">            <span class="keyword">this</span>.setState(&#123;</div><div class="line">              selected: <span class="string">'home'</span></div><div class="line">            &#125;)</div><div class="line">        &#125;&#125;&gt;</div><div class="line"></div><div class="line">          &#123;<span class="keyword">this</span>._renderView(<span class="keyword">this</span>.state.selected)&#125;</div><div class="line"></div><div class="line">        &lt;/TabBarIOS.Item&gt;</div><div class="line"></div><div class="line">        &lt;TabBarIOS.Item</div><div class="line">          title = <span class="string">"消息"</span></div><div class="line">          selected = &#123; <span class="keyword">this</span>.state.selected === <span class="string">'message'</span> &#125;</div><div class="line">          icon = &#123;require(<span class="string">'./images/news@2x.png'</span>)&#125;</div><div class="line">          selectedIcon=&#123;require(<span class="string">'./images/news-1@2x.png'</span>)&#125;</div><div class="line">          onPress = &#123;() =&gt; &#123;</div><div class="line">            <span class="keyword">this</span>.setState(&#123;</div><div class="line">              selected: <span class="string">'message'</span></div><div class="line">            &#125;)</div><div class="line">          &#125;&#125;&gt;</div><div class="line"></div><div class="line">          &#123;<span class="keyword">this</span>._renderView(<span class="keyword">this</span>.state.selected)&#125;</div><div class="line"></div><div class="line">        &lt;/TabBarIOS.Item&gt;</div><div class="line"></div><div class="line">        &lt;TabBarIOS.Item</div><div class="line">          title = <span class="string">"设置"</span></div><div class="line">          selected = &#123; <span class="keyword">this</span>.state.selected === <span class="string">'setting'</span> &#125;</div><div class="line">          icon = &#123;require(<span class="string">'./images/user@2x.png'</span>)&#125;</div><div class="line">          selectedIcon=&#123;require(<span class="string">'./images/user-1@2x.png'</span>)&#125;</div><div class="line">          onPress = &#123;() =&gt; &#123;</div><div class="line">            <span class="keyword">this</span>.setState(&#123;</div><div class="line">              selected: <span class="string">'setting'</span></div><div class="line">            &#125;)</div><div class="line">          &#125;&#125;&gt;</div><div class="line"></div><div class="line">          &#123;<span class="keyword">this</span>._renderView(<span class="keyword">this</span>.state.selected)&#125;</div><div class="line"></div><div class="line">        &lt;/TabBarIOS.Item&gt;</div><div class="line">      &lt;/TabBarIOS&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">const styles = StyleSheet.create(&#123;</div><div class="line"></div><div class="line">&#125;);</div><div class="line"></div><div class="line">AppRegistry.registerComponent(<span class="string">'HongshiWuLiuRN'</span>, () =&gt; HongshiWuLiuRN);</div></pre></td></tr></table></figure>
<h3 id="首先你先不要运行，我先解释一下几点比较重要的问题："><a href="#首先你先不要运行，我先解释一下几点比较重要的问题：" class="headerlink" title="首先你先不要运行，我先解释一下几点比较重要的问题："></a>首先你先不要运行，我先解释一下几点比较重要的问题：</h3><blockquote>
<p>引入系统主件(<strong>关于系统主件，你可以直接copy就好，这里我的意见就是官方建议那种写法，你就以这种写法为主</strong>)、第三方主件、以及自己定义的主件(<strong>这里一定要理清楚自己写的主件的路径</strong>)。</p>
</blockquote>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 引入系统主件</span></div><div class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">import</span> &#123;</div><div class="line">  AppRegistry,</div><div class="line">  StyleSheet,</div><div class="line">  Text,</div><div class="line">  View,</div><div class="line">  TabBarIOS</div><div class="line">&#125; <span class="keyword">from</span> <span class="string">'react-native'</span>;</div><div class="line"></div><div class="line"><span class="comment">// 引入自定义的主件</span></div><div class="line"><span class="keyword">import</span> <span class="keyword">Task</span>     <span class="keyword">from</span> <span class="string">'./ios_views/task'</span>;</div><div class="line"><span class="keyword">import</span> Goods    <span class="keyword">from</span> <span class="string">'./ios_views/goods'</span></div><div class="line"><span class="keyword">import</span> Home     <span class="keyword">from</span> <span class="string">'./ios_views/home'</span></div><div class="line"><span class="keyword">import</span> Message  <span class="keyword">from</span> <span class="string">'./ios_views/message'</span></div><div class="line"><span class="keyword">import</span> Setting  <span class="keyword">from</span> <span class="string">'./ios_views/setting'</span></div></pre></td></tr></table></figure>
<blockquote>
<p>如何定义主件,这里我目前写了两个方法，也是最常使用的两个方法：<strong>其中constructor是这个主件的实例化方法，而真正让视图渲染到屏幕上的是render的方法，你可以在这里添加想渲染上去的视图内容。</strong></p>
</blockquote>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">HongshiWuLiuRN</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">  constructor() &#123;</div><div class="line">    <span class="keyword">super</span>();</div><div class="line">  &#125;</div><div class="line"></div><div class="line">	render() &#123;</div><div class="line"></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>如何定义主件视图的样式，<strong>这里我们就需要用到stylesheet 所创创建的对象，在这里你就可以像写CSS样式一样，来定义视图了。</strong></p>
</blockquote>
<figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">const styles</span> = StyleSheet.create(&#123;</div><div class="line"></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<blockquote>
<p>如何定义应用的入口文件，<strong>就想C函数一样，需要一个main函数作为入口文件，在RN中，我需要使用AppRegistry来注册这个主件，同时也作为入口文件。</strong></p>
</blockquote>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">AppRegistry.registerComponent(<span class="string">'HongshiWuLiuRN'</span>, <span class="function"><span class="params">()</span> =&gt;</span> HongshiWuLiuRN);</div></pre></td></tr></table></figure>
<blockquote>
<p>如何添加图片，你可以发现这段代码 <strong>导入图片和自定义的主件是一样，需要写清楚图片所在的路径，这里为了调试，你可以先注释到</strong>：</p>
</blockquote>
<figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="attr">icon</span> = &#123;require(<span class="string">'./images/news@2x.png'</span>)&#125;</div><div class="line"><span class="attr">selectedIcon</span>=&#123;require(<span class="string">'./images/news-1@2x.png'</span>)&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>整个TabBar的功能，是由<strong>TabBarIOS</strong>来实现的，具体在这里，我们可以通过设置<strong>tintColor = ‘#e23f42’</strong>可以设置TabBar点选适合的颜色，而具体的图片的样式，文字，以及点击的方法就需要在<strong>TabBarIOS.Item</strong>来进行设置,重点说一下这个这段代码：这里定义一个私有方法，传入了一个字符串类型的参数，在拿到的参数的时候，我用<strong>swich</strong>的的方法，根据传入不同的参数，返回不同的<strong>自定义的主件</strong></p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">&#123;<span class="keyword">this</span>._renderView(<span class="keyword">this</span>.state.selected)&#125;</div><div class="line"></div><div class="line"> _renderView(moduleName) &#123;</div><div class="line">    <span class="keyword">switch</span> (moduleName) &#123;</div><div class="line">      <span class="keyword">case</span> <span class="string">'task'</span>:</div><div class="line">        <span class="keyword">return</span> (</div><div class="line">          <span class="xml"><span class="tag">&lt;<span class="name">Task</span>/&gt;</span></span></div><div class="line">        );</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">      <span class="keyword">case</span> <span class="string">'goods'</span>:</div><div class="line">        <span class="keyword">return</span> (</div><div class="line">          <span class="xml"><span class="tag">&lt;<span class="name">Goods</span>/&gt;</span></span></div><div class="line">        );</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">      <span class="keyword">case</span> <span class="string">'home'</span>:</div><div class="line">        <span class="keyword">return</span> (</div><div class="line">          <span class="xml"><span class="tag">&lt;<span class="name">Home</span>/&gt;</span></span></div><div class="line">        );</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">      <span class="keyword">case</span> <span class="string">'message'</span>:</div><div class="line">        <span class="keyword">return</span> (</div><div class="line">          <span class="xml"><span class="tag">&lt;<span class="name">Message</span>/&gt;</span></span></div><div class="line">        );</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">      <span class="keyword">case</span> <span class="string">'setting'</span>:</div><div class="line">        <span class="keyword">return</span> (</div><div class="line">          <span class="xml"><span class="tag">&lt;<span class="name">Setting</span>/&gt;</span></span></div><div class="line">        );</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">      <span class="keyword">default</span>:</div><div class="line">        <span class="keyword">return</span> ( <span class="xml"><span class="tag">&lt;<span class="name">View</span>&gt;</span><span class="tag">&lt;/<span class="name">View</span>&gt;</span></span> );</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>这里根据自定义主件的路径，可以猜到，我在同级目录下创建一个<strong>ios_views</strong>的文件夹，在<strong>ios_views</strong>的文件下我有创建了四个js文件： <strong>goods.js</strong>、<strong>home.js</strong>、<strong>message.js</strong>、<strong>setting.js</strong>、<strong>task.js</strong>,代码如下,这个五个文件，你目前可以一样的代码，只需要修改相应的名字，就可以了：</p>
</blockquote>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> <span class="type">React</span>, &#123; <span class="type">Component</span> &#125; from <span class="symbol">'reac</span>t';</div><div class="line"><span class="keyword">import</span> &#123;</div><div class="line">  <span class="type">StyleSheet</span>,</div><div class="line">  <span class="type">View</span>,</div><div class="line">  <span class="type">NavigatorIOS</span></div><div class="line">&#125; from <span class="symbol">'react</span>-native';</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">home_views</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      &lt;<span class="type">View</span>&gt;</div><div class="line"></div><div class="line">      &lt;/<span class="type">View</span>&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">home</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span>(</div><div class="line">      &lt;<span class="type">NavigatorIOS</span></div><div class="line">          initialRoute=&#123;&#123;</div><div class="line">          component: home_views,</div><div class="line">          title: <span class="string">"红狮物流"</span>,</div><div class="line">          titleTextColor: '#fff',</div><div class="line">          barTintColor: '#e23f42',</div><div class="line">        &#125;&#125;</div><div class="line">      /&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">const styles = <span class="type">StyleSheet</span>.create(&#123;</div><div class="line"></div><div class="line">&#125;);</div><div class="line"></div><div class="line">module.exports = home</div></pre></td></tr></table></figure>
<blockquote>
<p>这里用到了<strong>NavigatorIOS</strong>的主件，这个就是强大的路由主件。你可以看到，在里面必须要定义初始路由对应于哪个主件，以及nav的背景色，title，字体颜色等等。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;实战-React-Native-重写红狮物流App的项目。下面的的几次博客我会以完成一个现有的项目，将它整体都用React重写。项目我已经上传到github-https-github-com-Ghstart-HongshiWuliuRN&quot;&gt;&lt;a href=&quot;#实战
    
    </summary>
    
      <category term="日志" scheme="http://ghcoder.com/categories/%E6%97%A5%E5%BF%97/"/>
    
    
      <category term="学习" scheme="http://ghcoder.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="React Native" scheme="http://ghcoder.com/tags/React-Native/"/>
    
  </entry>
  
  <entry>
    <title>学习React Native中</title>
    <link href="http://ghcoder.com/2016/08/24/20160824/"/>
    <id>http://ghcoder.com/2016/08/24/20160824/</id>
    <published>2016-08-24T06:53:12.000Z</published>
    <updated>2016-08-24T06:53:43.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="其实从去年我就一直看学习并看React-Native-开始学习只是为了兴趣，现在项目中用到了有些更新的功能，我就是用React-native-来做的。其实还是蛮好的，但是我发现更新实在是太快了，现在官网的稳定版本是0-31版本"><a href="#其实从去年我就一直看学习并看React-Native-开始学习只是为了兴趣，现在项目中用到了有些更新的功能，我就是用React-native-来做的。其实还是蛮好的，但是我发现更新实在是太快了，现在官网的稳定版本是0-31版本" class="headerlink" title="其实从去年我就一直看学习并看React Native,开始学习只是为了兴趣，现在项目中用到了有些更新的功能，我就是用React native 来做的。其实还是蛮好的，但是我发现更新实在是太快了，现在官网的稳定版本是0.31版本"></a>其实从去年我就一直看学习并看React Native,开始学习只是为了兴趣，现在项目中用到了有些更新的功能，我就是用React native 来做的。其实还是蛮好的，但是我发现更新实在是太快了，现在官网的稳定版本是<a href="https://facebook.github.io/react-native/" target="_blank" rel="external">0.31版本</a></h2><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><blockquote>
<p>打开terminal, cd到某个路径下，执行命令 <code>react-native init helloworld</code>[^这里的helloword就是你创建的项目名字]<br>如果出现这样的代码就代码创建成功。</p>
</blockquote>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">To <span class="built_in">run</span> your app <span class="keyword">on</span> iOS:</div><div class="line">   cd /Users/gonghuan/Desktop/helloworld</div><div class="line">   react-native <span class="built_in">run</span>-ios</div><div class="line">   - <span class="keyword">or</span> -</div><div class="line">   Open /Users/gonghuan/Desktop/helloworld/ios/helloworld.xcodeproj <span class="keyword">in</span> Xcode</div><div class="line">   Hit <span class="keyword">the</span> Run button</div><div class="line">To <span class="built_in">run</span> your app <span class="keyword">on</span> Android:</div><div class="line">   Have an Android emulator <span class="built_in">running</span> (quickest way <span class="keyword">to</span> <span class="keyword">get</span> started), <span class="keyword">or</span> a device connected</div><div class="line">   cd /Users/gonghuan/Desktop/helloworld</div><div class="line">   react-native <span class="built_in">run</span>-android</div></pre></td></tr></table></figure>
<blockquote>
<p>此时你可以通过类似<code>react-native run-ios</code>可以直接调起iOS模拟器，此时你可以看到你的终端不断在解析，然后就可以成功运行了。</p>
<h2 id="说到这里，应该你已经可以运行你的app了，至于之前要安装-brew-node等等，我这里就不再多说了，你可以去官网上走一遍，很简单。"><a href="#说到这里，应该你已经可以运行你的app了，至于之前要安装-brew-node等等，我这里就不再多说了，你可以去官网上走一遍，很简单。" class="headerlink" title="说到这里，应该你已经可以运行你的app了，至于之前要安装 brew node等等，我这里就不再多说了，你可以去官网上走一遍，很简单。"></a>说到这里，应该你已经可以运行你的app了，至于之前要安装 brew node等等，我这里就不再多说了，你可以去官网上走一遍，很简单。</h2></blockquote>
<h3 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h3><blockquote>
<p>我这里我选用的是atom，这里说一个我遇到的小问题，也许你也会遇到，在我们使用atom的时候，需要安装一些插件来帮助我们能够更加高效的写代码，就比如facebook开发的<a href="https://nuclide.io/docs/editor/setup/#quick-install" target="_blank" rel="external">Nuclide</a></p>
</blockquote>
<ol>
<li>按照官方install的说明，我们可以知道有两种安装的方式，一种就是通过直接在终端输入<code>apm install nuclide</code>,但是说实话，我就成功过一次，而且还是要挂vpn，之后就一直没有成功过了，这我就呵呵了。</li>
<li>官方建议第二种方式：直接在atom-&gt;Setting Views-&gt;Manage Packages,搜索Nuclide，直接安装。</li>
<li><p>第三种：通过这种方式你可以安装Themes、packages</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"> <span class="built_in">cd</span> ~/.atom/packages</div><div class="line">git <span class="built_in">clone</span> [packgae-url] <span class="comment"># git clone https://github.com/facebook/nuclide</span></div><div class="line"><span class="built_in">cd</span> [package] <span class="comment">#nuclide</span></div><div class="line">npm install</div></pre></td></tr></table></figure>
</li>
</ol>
<hr>
<p>###好了，到目前为止，你已经可以，我们已经可以开始运行，并且可以安装自己喜欢的插件，已经修改自己喜欢的主题了。下面我们开始coding,我们先通过atom打开我们之前创建的helloworld的项目，并且找到<code>index.ios.js</code>,删除里面所有的代码，不要着急，我们会慢慢的添加进去所有的代码。</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">firstRN</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span>(</div><div class="line">      &lt;<span class="type">Text</span>&gt;</div><div class="line">        <span class="type">Hello</span> world</div><div class="line">      &lt;/<span class="type">Text</span>&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="type">AppRegistry</span>.registerComponent(<span class="symbol">'helloworl</span>d', ()=&gt;firstRN);</div></pre></td></tr></table></figure>
<ol>
<li>这里我们先创建一个firstRN的类，继承自Component对象，这里你先不要管，我们后面都会解释的。</li>
<li>第二步，我们用AppRegistry这个注册一个对象，这个对象的名字是我们应用的名字‘helloworld’，第二个参数指向的是我们刚才创建的firstRN类。</li>
<li>我们点击模拟器，发现报错，<code>Unhandled JS Exception:xxxx: Can&#39;t find variable: Component</code>,在文件头部添加</li>
</ol>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">import</span> &#123; AppRegistry, Text &#125; <span class="keyword">from</span> <span class="string">'react-native'</span>;</div></pre></td></tr></table></figure>
<blockquote>
<p>The AppRegistry just tells React Native which component is the root one for the whole application. You won’t be thinking about AppRegistry a lot - there will probably just be one call to AppRegistry.registerComponent in your whole app. It’s included in these examples so you can paste the whole thing into your index.ios.js or index.android.js file and get it running.—-这里是官方给的AppRegistry，其实AppRegistry只做了一件事情，就是告诉这个应用，谁是整个应用的根控制器，这样你可以通过修改index.ios.js来修改iOS的根控制器是啥？安卓也是一样，修改的index.android.js<br>再次刷新模拟器，就会发现左上角会出现我们写的Hello world的文字。<br>这里我们觉得样式好丑，那该怎么办，没事，RN也是可以做到修改的。</p>
</blockquote>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> <span class="type">React</span>, &#123; <span class="type">Component</span> &#125; from <span class="symbol">'reac</span>t';</div><div class="line"><span class="keyword">import</span> &#123; <span class="type">AppRegistry</span>, <span class="type">Text</span> , <span class="type">StyleSheet</span> &#125; from <span class="symbol">'react</span>-native';</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">firstRN</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span>(</div><div class="line">      &lt;<span class="type">Text</span> style = &#123;styles.helloWorldStyle&#125;&gt;</div><div class="line">        <span class="type">Hello</span> world</div><div class="line">      &lt;/<span class="type">Text</span>&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">const styles = <span class="type">StyleSheet</span>.create(&#123;</div><div class="line">  helloWorldStyle: &#123;</div><div class="line">    color:<span class="symbol">'re</span>d',</div><div class="line">    fontSize:<span class="number">30</span>,</div><div class="line">    fontWeight:<span class="symbol">'bol</span>d'</div><div class="line">  &#125;</div><div class="line">&#125;)</div><div class="line"></div><div class="line"></div><div class="line"><span class="type">AppRegistry</span>.registerComponent(<span class="symbol">'helloworl</span>d', ()=&gt;firstRN);</div></pre></td></tr></table></figure>
<blockquote>
<p>这里我们需要在import中导读 StyleSheet,因为我们需要在后面的设置样式的时候，用到这个类。<br>直接在text后面添加style的样式熟悉<br>直接在后面创建styles的属性，通过StyleSheet来创建。<br>再次刷新模拟器，你就可以看到效果了。</p>
</blockquote>
<hr>
<h3 id="先说这么多，后期我们还会说到很多在app开发中遇到的各种问题，导航栏，网络请求，传值等等。"><a href="#先说这么多，后期我们还会说到很多在app开发中遇到的各种问题，导航栏，网络请求，传值等等。" class="headerlink" title="先说这么多，后期我们还会说到很多在app开发中遇到的各种问题，导航栏，网络请求，传值等等。"></a>先说这么多，后期我们还会说到很多在app开发中遇到的各种问题，导航栏，网络请求，传值等等。</h3>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;其实从去年我就一直看学习并看React-Native-开始学习只是为了兴趣，现在项目中用到了有些更新的功能，我就是用React-native-来做的。其实还是蛮好的，但是我发现更新实在是太快了，现在官网的稳定版本是0-31版本&quot;&gt;&lt;a href=&quot;#其实从去年我就
    
    </summary>
    
      <category term="日志" scheme="http://ghcoder.com/categories/%E6%97%A5%E5%BF%97/"/>
    
    
      <category term="学习" scheme="http://ghcoder.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="React Native" scheme="http://ghcoder.com/tags/React-Native/"/>
    
  </entry>
  
  <entry>
    <title>因为我不想打卡，不要问我为什么？？</title>
    <link href="http://ghcoder.com/2016/08/15/20160815/"/>
    <id>http://ghcoder.com/2016/08/15/20160815/</id>
    <published>2016-08-15T06:28:12.000Z</published>
    <updated>2016-12-01T08:05:30.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="最近一直没啥时间来整理一些学习资料以及学习的内容，感觉这样不是很好。又由于公司要打卡了，所以我就写写我是怎么不打卡的吧！O-∩-∩-O"><a href="#最近一直没啥时间来整理一些学习资料以及学习的内容，感觉这样不是很好。又由于公司要打卡了，所以我就写写我是怎么不打卡的吧！O-∩-∩-O" class="headerlink" title="最近一直没啥时间来整理一些学习资料以及学习的内容，感觉这样不是很好。又由于公司要打卡了，所以我就写写我是怎么不打卡的吧！O(∩_∩)O~~~"></a>最近一直没啥时间来整理一些学习资料以及学习的内容，感觉这样不是很好。又由于公司要打卡了，所以我就写写我是怎么不打卡的吧！O(∩_∩)O~~~</h3><ol>
<li>mac电脑先安装抓包神器：Charles (网上有很多这个使用教程，我就不多说了，毕竟是工具，没啥难度)</li>
<li>点击Help-&gt;Local IP Address,将本机的IP打印出来，然后在手机里面设置代理为相应的IP，端口为：8888</li>
<li>此时你就可以开始看到数据的返回、和请求了。</li>
</ol>
<pre><code>![1.pi](media/14712518179704/1.pic.jpg)
</code></pre><ol>
<li>然后你就可以看到你想要的代码请求了，其实这个Android和iOS,还有点不同，Android返回的代码不是text/json,而是text/html,我在我代码中加入了代码格式的转换。</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">__block NSDictionary *par = @&#123;@&quot;employeeNo&quot;:pp.employeeNo,@&quot;coord&quot;:@&quot;30.249812,120.211494&quot;,@&quot;img_ids&quot;:@&quot;&quot;,@&quot;identifier&quot;: pp.identifier,@&quot;type&quot;: @&quot;0&quot;&#125;&#125;;</div><div class="line"></div><div class="line">   AFHTTPRequestOperationManager *manager = [AFHTTPRequestOperationManager manager];</div><div class="line">          [manager POST:@&quot;http://xxxx/HSSCM/appmail/employeeRecordManage/sign.do&quot; parameters:par success:^(AFHTTPRequestOperation * _Nonnull operation, id  _Nonnull responseObject) &#123;</div><div class="line">              NSLog(@&quot;%@&quot;,operation);</div><div class="line">              NSLog(@&quot;%@&quot;,responseObject);</div><div class="line">          &#125; failure:^(AFHTTPRequestOperation * _Nullable operation, NSError * _Nonnull error) &#123;</div><div class="line">              NSLog(@&quot;%@&quot;,operation);</div><div class="line">              NSLog(@&quot;%@&quot;,error);</div><div class="line">          &#125;];</div></pre></td></tr></table></figure>
<ol>
<li>你或许已经发现了参数的规律了，这里的employeeNO就是我们之前抓包的用户唯一标示符（安卓这边还耍了个心眼，取了一个很怪的名字，视图误导我们）</li>
<li>coord就是经纬度，用逗号链接起来的一个字符串</li>
<li>img_ids我不知道是个什么东西，反正可有可无</li>
<li>identifior是手机的udid（iOS中这样称呼吧）,这里我猜想他的employeeNO与手机identifior是一一对应的，<strong>所以这也就解释了为什么我在换手机的时候，会报错</strong></li>
<li>type:0–就是签出，1–就是签到</li>
</ol>
<hr>
<p>##现在问题都已经分析完了，我们该用什么对策来自动帮我们打卡呢。</p>
<p>####由于必须需要内网才能打卡，我们不能外网或者4G的条件下打卡，折让我们很蛋疼，这里我想到几个解决方案：</p>
<ol>
<li>安卓的手机，可以借用一款叫做&lt;按键精灵&gt;的app,但是有个条件就是你必须拿到root权限，这样就可以录制你按键的动作，你可以指定时间执行。</li>
<li>公司的电脑、或者测试机，安装一个teamViewer，这样你就可以在家里远程操控他。</li>
<li>公司的测试机充当服务器的功能、一直在跑，这样我需要关心的只有一件事：手机有电。</li>
</ol>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">	- (<span class="built_in">NSArray</span> *)setUPDatas:(TypeStatus)typeStatus &#123;</div><div class="line">     <span class="built_in">NSMutableArray</span> *datas = [<span class="built_in">NSMutableArray</span> new];</div><div class="line"></div><div class="line">     <span class="built_in">NSArray</span> *employeeNos = @[<span class="string">@"31330034"</span>, <span class="string">@"31330040"</span>, <span class="string">@"31330035"</span>];</div><div class="line">     <span class="built_in">NSArray</span> *identifiers = @[<span class="string">@"05B7A575-2D2A-4006-890A-D0994EFF3DAC"</span>, <span class="string">@"a000004f73cb94"</span>, <span class="string">@"1B65EB63-487B-49BF-B751-F2D544175BE7"</span>];</div><div class="line">     <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; employeeNos.count ; i++) &#123;</div><div class="line">         People *people = [[People alloc] init];</div><div class="line">         people.employeeNo = employeeNos[i];</div><div class="line">         people.coord = <span class="string">@"30.249812,120.211494"</span>;</div><div class="line">         people.img_ids = <span class="string">@""</span>;</div><div class="line">         people.identifier = identifiers[i];</div><div class="line">         <span class="keyword">if</span> (typeStatus == LogIn) &#123;</div><div class="line">             people.type = <span class="string">@"1"</span>;</div><div class="line">         &#125; <span class="keyword">else</span> &#123;</div><div class="line">             people.type = <span class="string">@"0"</span>;</div><div class="line">         &#125;</div><div class="line"></div><div class="line">         people.random_signInMin = [<span class="keyword">self</span> getRandomNumber:<span class="number">5</span> to:<span class="number">25</span>];</div><div class="line">         people.random_signInSec = [<span class="keyword">self</span> getRandomNumber:<span class="number">1</span> to:<span class="number">59</span>];</div><div class="line">         people.random_signOutMin = [<span class="keyword">self</span> getRandomNumber:<span class="number">5</span> to:<span class="number">25</span>];</div><div class="line">         people.random_signOutSec = [<span class="keyword">self</span> getRandomNumber:<span class="number">1</span> to:<span class="number">59</span>];</div><div class="line"></div><div class="line">         [datas addObject:people];</div><div class="line">     &#125;</div><div class="line"></div><div class="line">     <span class="keyword">return</span> [datas <span class="keyword">copy</span>];</div><div class="line"> 	&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"> 	- (<span class="keyword">int</span>)getRandomNumber:(<span class="keyword">int</span>)from to:(<span class="keyword">int</span>)to &#123;</div><div class="line">     <span class="keyword">return</span> (<span class="keyword">int</span>)(from + (arc4random() % (to - from + <span class="number">1</span>)));</div><div class="line"> 	&#125;</div><div class="line"></div><div class="line"><span class="meta">#### 我在这里实例化了用户的对象，在这个对象生成的同事，就已经确定这个对象签到的时间，和签出的时间（在某个数范围内随机生成）。</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> (hour == signOutHour) &#123; <span class="comment">// 签出--0</span></div><div class="line"></div><div class="line">             <span class="keyword">if</span> (<span class="keyword">self</span>.needSignOut.count == <span class="number">0</span>) <span class="keyword">return</span>;</div><div class="line"></div><div class="line">             <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; <span class="keyword">self</span>.needSignOut.count; i++) &#123;</div><div class="line">                 People *pp = <span class="keyword">self</span>.needSignOut[i];</div><div class="line"></div><div class="line">                 <span class="keyword">if</span> (pp.random_signOutMin &lt; min || (pp.random_signOutMin == min &amp;&amp; pp.random_signOutSec &lt;= sec)) &#123;</div><div class="line">                     par = @&#123;</div><div class="line">                             <span class="string">@"employeeNo"</span>:pp.employeeNo,</div><div class="line">                             <span class="string">@"coord"</span>: <span class="string">@"30.249812,120.211494"</span>,</div><div class="line">                             <span class="string">@"img_ids"</span>:<span class="string">@""</span>,</div><div class="line">                             <span class="string">@"identifier"</span>: pp.identifier,</div><div class="line">                             <span class="string">@"type"</span>: pp.type&#125;;</div><div class="line"></div><div class="line">                     [<span class="keyword">self</span> SignOrSignOut:par week:week time:[<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%ld:%ld:%ld"</span>,(<span class="keyword">long</span>)hour,(<span class="keyword">long</span>)min,(<span class="keyword">long</span>)sec]];</div><div class="line">                 &#125;</div><div class="line">             &#125;</div><div class="line">            &#125;</div></pre></td></tr></table></figure>
<hr>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)<span class="string">needToRemove:</span>(TypeStatus)status <span class="string">identifior:</span>(NSString *)identifior <span class="string">realtime:</span>(NSString *)realtime&#123;</div><div class="line"> <span class="keyword">if</span> (status == LogIn) &#123;</div><div class="line">     <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; self.needSignIn.count; i++) &#123;</div><div class="line">         NSMutableDictionary *tempDic = [NSMutableDictionary <span class="keyword">new</span>];</div><div class="line">         People *pp = self.needSignIn[i];</div><div class="line">         <span class="keyword">if</span> ([pp.identifier <span class="string">isEqualToString:</span>identifior] &amp;&amp; ![identifior <span class="string">isEqualToString:</span>@<span class="string">""</span>]) &#123;</div><div class="line">             NSLog(@<span class="string">"移除people:%@---loginMin:%ld----loginSec:%ld"</span>,pp.identifier,(<span class="keyword">long</span>)pp.random_signInMin, (<span class="keyword">long</span>)pp.random_signInSec);</div><div class="line"></div><div class="line">             [self.needSignIn <span class="string">removeObject:</span>pp];</div><div class="line"></div><div class="line"></div><div class="line">             <span class="keyword">if</span> (pp.identifier != nil) [tempDic <span class="string">setObject:</span>pp.identifier <span class="string">forKey:</span>@<span class="string">"iden"</span>];</div><div class="line">             [tempDic <span class="string">setObject:</span>[NSString <span class="string">stringWithFormat:</span>@<span class="string">"签到时间:%ld:%ld:%ld"</span>, signInHour, pp.random_signInMin, pp.random_signInSec] <span class="string">forKey:</span>@<span class="string">"time"</span>];</div><div class="line">             <span class="keyword">if</span> (realtime != nil) [tempDic <span class="string">setObject:</span>realtime <span class="string">forKey:</span>@<span class="string">"realtime"</span>];</div><div class="line"></div><div class="line">             <span class="keyword">if</span> (tempDic != nil) [self.tableViewDatas <span class="string">addObject:</span>tempDic];</div><div class="line"></div><div class="line">         &#125;</div><div class="line">     &#125;</div></pre></td></tr></table></figure>
<ol>
<li>这里你会发现我在遍历的同事，又对mutableArray对象进行的操作，开始一直crash，会报这个错：<strong>collection __nsarraym was mutated while being enumerated</strong></li>
<li>意思就是说，你在遍历这个对象的同事，又对这个对象进行了添加、删除的操作。这里给你三种解决的思路。</li>
</ol>
<blockquote>
<p>1</p>
</blockquote>
<figure class="highlight matlab"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (int <span class="built_in">i</span> = <span class="number">0</span> ; <span class="built_in">i</span> &lt; self.needSignIn.count; <span class="built_in">i</span>++) &#123;&#125;</div></pre></td></tr></table></figure>
<p>替换</p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (People *pp <span class="keyword">in</span> <span class="keyword">self</span>.needSignIn) &#123;&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>2</p>
</blockquote>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">NSSortDescriptor</span> *sd1 = [<span class="built_in">NSSortDescriptor</span> sortDescriptorWithKey:<span class="literal">nil</span> ascending:<span class="literal">NO</span>];<span class="comment">//yes升序排列，no,降序排列</span></div><div class="line"><span class="built_in">NSArray</span> *myary = [ary sortedArrayUsingDescriptors:[<span class="built_in">NSArray</span> arrayWithObjects:sd1, <span class="literal">nil</span>]];<span class="comment">//注意这里的ary进行排序后会生产一个新的数组指针，myary，不能在用ary,ary还是保持不变的。</span></div><div class="line"><span class="keyword">for</span> (People *pp <span class="keyword">in</span> myary) &#123;&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>3</p>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">生成一个零时的数组，用来遍历，之前的数据用来操作。</div></pre></td></tr></table></figure>
<p><strong>其实这里有个问题，想了好久才想明白：为什么正序排列不行，倒序就可以呢？？,为什么for不行，但是forin的可以呢？</strong></p>
<p>####其实for的语句可以等同于：假如说我有10个元素，在第一个的时候，我就remove了，那是不是到了第九个的时候就越界了呢？？</p>
<figure class="highlight axapta"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> <span class="keyword">count</span> =  arr.<span class="keyword">count</span>; <span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;<span class="keyword">count</span>;i++) &#123;&#125;</div></pre></td></tr></table></figure>
<p><strong>倒序同样的道理：</strong></p>
<figure class="highlight axapta"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> <span class="keyword">count</span> =  arr.<span class="keyword">count</span>;</div><div class="line"><span class="keyword">for</span> (i = <span class="keyword">count</span> - <span class="number">1</span>;i&gt;=<span class="number">0</span> ;i—) &#123;&#125;</div></pre></td></tr></table></figure>
<h4 id="当我移除当前这个的时候，其实比不影响我其他的元素布局。"><a href="#当我移除当前这个的时候，其实比不影响我其他的元素布局。" class="headerlink" title="当我移除当前这个的时候，其实比不影响我其他的元素布局。"></a>当我移除当前这个的时候，其实比不影响我其他的元素布局。</h4><p><strong>但是这两种情况，假如你使用for的语句格式，就不会有问题了</strong></p>
<figure class="highlight matlab"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (int <span class="built_in">i</span> = <span class="number">0</span> ; <span class="built_in">i</span> &lt; self.needSignIn.count; <span class="built_in">i</span>++) &#123;&#125;</div></pre></td></tr></table></figure>
<p>###总结一句话：</p>
<ol>
<li>当我们正序遍历时,如果删除了一个,那么没有遍历到的元素位置都会往前移动一位,这样系统就无法确定接下来遍历是从删除位置开始呢,还是从删除位置下一位开始呢</li>
<li>对于逆序遍历就不会,因为我们逆序遍历时,遇到匹配的元素删除后,位置改变的是遍历过得元素,而没有遍历到的元素位置却没有改变,所以遍历能够正常进行.</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;最近一直没啥时间来整理一些学习资料以及学习的内容，感觉这样不是很好。又由于公司要打卡了，所以我就写写我是怎么不打卡的吧！O-∩-∩-O&quot;&gt;&lt;a href=&quot;#最近一直没啥时间来整理一些学习资料以及学习的内容，感觉这样不是很好。又由于公司要打卡了，所以我就写写我是怎
    
    </summary>
    
      <category term="日志" scheme="http://ghcoder.com/categories/%E6%97%A5%E5%BF%97/"/>
    
    
      <category term="学习" scheme="http://ghcoder.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="Obeject-c" scheme="http://ghcoder.com/tags/Obeject-c/"/>
    
  </entry>
  
  <entry>
    <title>搭建SDK中所遇到的坑</title>
    <link href="http://ghcoder.com/2016/05/10/20160510/"/>
    <id>http://ghcoder.com/2016/05/10/20160510/</id>
    <published>2016-05-10T01:41:12.000Z</published>
    <updated>2016-05-10T01:44:35.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="其实开始之前，我找到一篇很不错的文章，想翻译的，但是google了一下，发现已经有好多人翻译过这篇文章了，这里我就不再多说什么了，把原文的链接贴出来。https-www-raywenderlich-com-65964-create-a-framework-for-ios-这里我就说一下，我在搭建sdk的时候，遇到的坑吧。"><a href="#其实开始之前，我找到一篇很不错的文章，想翻译的，但是google了一下，发现已经有好多人翻译过这篇文章了，这里我就不再多说什么了，把原文的链接贴出来。https-www-raywenderlich-com-65964-create-a-framework-for-ios-这里我就说一下，我在搭建sdk的时候，遇到的坑吧。" class="headerlink" title="其实开始之前，我找到一篇很不错的文章，想翻译的，但是google了一下，发现已经有好多人翻译过这篇文章了，这里我就不再多说什么了，把原文的链接贴出来。https://www.raywenderlich.com/65964/create-a-framework-for-ios,这里我就说一下，我在搭建sdk的时候，遇到的坑吧。"></a>其实开始之前，我找到一篇很不错的文章，想翻译的，但是google了一下，发现已经有好多人翻译过这篇文章了，这里我就不再多说什么了，把原文的链接贴出来。<a href="https://www.raywenderlich.com/65964/create-a-framework-for-ios" target="_blank" rel="external">https://www.raywenderlich.com/65964/create-a-framework-for-ios</a>,这里我就说一下，我在搭建sdk的时候，遇到的坑吧。</h2><ol>
<li>其实你要是能够走完上面的流程，你基本上已经完成了80%了，剩下的就是发现问题，再去打包。</li>
</ol>
<h3 id="第一个错误"><a href="#第一个错误" class="headerlink" title="第一个错误"></a>第一个错误</h3><p><code>*** Terminating app due to uncaught exception &#39;NSInvalidArgumentException&#39;, reason: &#39;Could not find a storyboard named &#39;XXXXname&#39; in bundle NSBundle</code></p>
<ul>
<li>这个错误可能直接就会导致app起不来，一启动就会crash，这里需要将所有你用到xib，storyboard的文件都统一作出修改。<code>其实这个问题在遇到用xib/SB创建的cell的时候、在xib/SB中添加图片的时候需要将[UIImage imageNamed:@&quot;&quot;] =======&gt; 修改为 [UIImage imageNamed:@&quot;xxxx.bundle/xxxxName&quot;]</code></li>
</ul>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">UIStoryboard</span> *main = [<span class="built_in">UIStoryboard</span> storyboardWithName:<span class="string">@"xxxxName"</span> bundle:[<span class="built_in">NSBundle</span> mainBundle]];</div><div class="line"></div><div class="line">修改为===============================</div><div class="line"></div><div class="line"><span class="built_in">UIStoryboard</span> *main = [<span class="built_in">UIStoryboard</span> storyboardWithName:<span class="string">@"xxxx.bundle/xxxxName"</span> bundle:[<span class="built_in">NSBundle</span> mainBundle]];</div></pre></td></tr></table></figure>
<h3 id="第二个错误"><a href="#第二个错误" class="headerlink" title="第二个错误"></a>第二个错误</h3><p><code>可能会在Iphone4的时候，直接无法build,直接报这个错： dyld: Symbol not found: ___NSDictionary0__</code></p>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">需要将项目中的<span class="keyword">build </span>Phases 中的core foundation的stastu的状态 从Required修改为Optional</div></pre></td></tr></table></figure>
<p><code>后续如果还有其他的bug，我再贴出来吧！</code></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;其实开始之前，我找到一篇很不错的文章，想翻译的，但是google了一下，发现已经有好多人翻译过这篇文章了，这里我就不再多说什么了，把原文的链接贴出来。https-www-raywenderlich-com-65964-create-a-framework-for-
    
    </summary>
    
      <category term="日志" scheme="http://ghcoder.com/categories/%E6%97%A5%E5%BF%97/"/>
    
    
      <category term="Obeject-c" scheme="http://ghcoder.com/tags/Obeject-c/"/>
    
      <category term="项目" scheme="http://ghcoder.com/tags/%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>关于学习UITableViewCell的高度计算的框架-UITableView-FDTemplateLayoutCell。</title>
    <link href="http://ghcoder.com/2016/05/05/20160505/"/>
    <id>http://ghcoder.com/2016/05/05/20160505/</id>
    <published>2016-05-05T09:06:12.000Z</published>
    <updated>2016-05-06T06:39:23.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="学习UITableView的高度计算的框架"><a href="#学习UITableView的高度计算的框架" class="headerlink" title="学习UITableView的高度计算的框架"></a>学习UITableView的高度计算的框架</h2><h2 id="这里学习的是UITableView-FDTemplateLayoutCellhttps-github-com-forkingdog-UITableView-FDTemplateLayoutCell你也可以自己去下载并且学习。"><a href="#这里学习的是UITableView-FDTemplateLayoutCellhttps-github-com-forkingdog-UITableView-FDTemplateLayoutCell你也可以自己去下载并且学习。" class="headerlink" title="这里学习的是UITableView-FDTemplateLayoutCellhttps://github.com/forkingdog/UITableView-FDTemplateLayoutCell你也可以自己去下载并且学习。"></a>这里学习的是UITableView-FDTemplateLayoutCell<a href="https://github.com/forkingdog/UITableView-FDTemplateLayoutCell" target="_blank" rel="external">https://github.com/forkingdog/UITableView-FDTemplateLayoutCell</a>你也可以自己去下载并且学习。</h2><ul>
<li>他的文件很简单，直接在UITableView的高度放回中去调用方法：直接调用UITableView 中(FDTemplateLayoutCell)的category的方法,其实他的category里面一共写了三种可以计算高度的方法，这是其中的一种：</li>
</ul>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div></pre></td><td class="code"><pre><div class="line">- (<span class="built_in">CGFloat</span>)fd_heightForCellWithIdentifier:(<span class="built_in">NSString</span> *)identifier configuration:(<span class="keyword">void</span> (^)(<span class="keyword">id</span> cell))configuration &#123;</div><div class="line">		<span class="comment">//1.</span></div><div class="line">	    <span class="keyword">if</span> (!identifier) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//2.</span></div><div class="line">    <span class="built_in">UITableViewCell</span> *templateLayoutCell = [<span class="keyword">self</span> fd_templateCellForReuseIdentifier:identifier];</div><div class="line"></div><div class="line">    <span class="comment">// Manually calls to ensure consistent behavior with actual cells. (that are displayed on screen)</span></div><div class="line">    [templateLayoutCell prepareForReuse];</div><div class="line"></div><div class="line">    <span class="comment">//8.</span></div><div class="line">    <span class="comment">// Customize and provide content for our template cell.</span></div><div class="line">    <span class="keyword">if</span> (configuration) &#123;</div><div class="line">        configuration(templateLayoutCell);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> [<span class="keyword">self</span> fd_systemFittingHeightForConfiguratedCell:templateLayoutCell];</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//2.</span></div><div class="line">- (__kindof <span class="built_in">UITableViewCell</span> *)fd_templateCellForReuseIdentifier:(<span class="built_in">NSString</span> *)identifier &#123;</div><div class="line">	<span class="comment">//....</span></div><div class="line">		<span class="comment">//4.</span></div><div class="line">	    <span class="keyword">if</span> (!templateCellsByIdentifiers) &#123;</div><div class="line">        templateCellsByIdentifiers = @&#123;&#125;.mutableCopy;</div><div class="line">        objc_setAssociatedObject(<span class="keyword">self</span>, _cmd, templateCellsByIdentifiers, OBJC_ASSOCIATION_RETAIN_NONATOMIC);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    	<span class="comment">//5.</span></div><div class="line">        <span class="keyword">if</span> (!templateCell) &#123;</div><div class="line">        templateCell = [<span class="keyword">self</span> dequeueReusableCellWithIdentifier:identifier];</div><div class="line">        <span class="built_in">NSAssert</span>(templateCell != <span class="literal">nil</span>, <span class="string">@"Cell must be registered to table view for identifier - %@"</span>, identifier);</div><div class="line">        <span class="comment">//6.</span></div><div class="line">        templateCell.fd_isTemplateLayoutCell = <span class="literal">YES</span>;</div><div class="line">        templateCell.contentView.translatesAutoresizingMaskIntoConstraints = <span class="literal">NO</span>;</div><div class="line">        templateCellsByIdentifiers[identifier] = templateCell;</div><div class="line">        [<span class="keyword">self</span> fd_debugLog:[<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"layout cell created - %@"</span>, identifier]];</div><div class="line">    &#125;</div><div class="line"></div><div class="line">	<span class="comment">//....</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="comment">//3.</span></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Returns the value associated with a given object for a given key.</div><div class="line"> *</div><div class="line"> * @param object The source object for the association.</div><div class="line"> * @param key The key for the association.</div><div class="line"> *</div><div class="line"> * @return The value associated with the key \e key for \e object.</div><div class="line"> *</div><div class="line"> * @see objc_setAssociatedObject</div><div class="line"> */</div><div class="line">OBJC_EXPORT <span class="keyword">id</span> objc_getAssociatedObject(<span class="keyword">id</span> object, <span class="keyword">const</span> <span class="keyword">void</span> *key)</div><div class="line"></div><div class="line"><span class="comment">//6.</span></div><div class="line"><span class="comment">/// Indicate this is a template layout cell for calculation only.</span></div><div class="line"><span class="comment">/// You may need this when there are non-UI side effects when configure a cell.</span></div><div class="line"><span class="comment">/// Like:</span></div><div class="line"><span class="comment">///   - (void)configureCell:(FooCell *)cell atIndexPath:(NSIndexPath *)indexPath &#123;</span></div><div class="line"><span class="comment">///       cell.entity = [self entityAtIndexPath:indexPath];</span></div><div class="line"><span class="comment">///       if (!cell.fd_isTemplateLayoutCell) &#123;</span></div><div class="line"><span class="comment">///           [self notifySomething]; // non-UI side effects</span></div><div class="line"><span class="comment">///       &#125;</span></div><div class="line"><span class="comment">///   &#125;</span></div><div class="line"><span class="comment">///</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) <span class="built_in">BOOL</span> fd_isTemplateLayoutCell;</div><div class="line"></div><div class="line"><span class="comment">//7.</span></div><div class="line">- (<span class="built_in">BOOL</span>)fd_isTemplateLayoutCell &#123;</div><div class="line">    <span class="keyword">return</span> [objc_getAssociatedObject(<span class="keyword">self</span>, _cmd) boolValue];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)setFd_isTemplateLayoutCell:(<span class="built_in">BOOL</span>)isTemplateLayoutCell &#123;</div><div class="line">    objc_setAssociatedObject(<span class="keyword">self</span>, <span class="keyword">@selector</span>(fd_isTemplateLayoutCell), @(isTemplateLayoutCell), OBJC_ASSOCIATION_RETAIN);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ol>
<li>这里假如不传入identifior的值得话，他就直接直接返回0，表示不计算高度了。</li>
<li>这里根据传入的identifior的值，来找到相应的UITableViewCell</li>
<li>这里是runtime源码中所申明的，可以看到这个是根据给的Object以及给的Key来返回一个对象</li>
<li>第一次申明的话，它就会创建一个空的可变字典对象,字典的对象是{<nsstring *,="" uitableviewcell="" *="">},key是String, value是UITableViewCell。</nsstring></li>
<li>当第一次没有UITableViewCell的对象的时候，就开始在重用池中，找UITableViewCell的对象,并将UITableViewCell对象塞进之前的字典对象。</li>
<li>这边在塞入UITableViewCell对象的时候，通过category(7.)来这是这个UITableViewCell的属性，这个作者的用意就是表明这个只是用计算高度的。</li>
<li>如果需要在cell中设置cell元素中的值，就在这里设置。最后拿到UITableViewCell的对象。</li>
</ol>
<h2 id="最后将拿到的UITableViewCell的对象丢到这个函数中计算"><a href="#最后将拿到的UITableViewCell的对象丢到这个函数中计算" class="headerlink" title="最后将拿到的UITableViewCell的对象丢到这个函数中计算"></a>最后将拿到的UITableViewCell的对象丢到这个函数中计算</h2><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">- (CGFloat)<span class="string">fd_systemFittingHeightForConfiguratedCell:</span>(UITableViewCell *)cell &#123;</div><div class="line">	  <span class="comment">// Auto layout engine does its math</span></div><div class="line">	  <span class="comment">// 6.</span></div><div class="line">        fittingHeight = [cell.contentView <span class="string">systemLayoutSizeFittingSize:</span>UILayoutFittingCompressedSize].height;</div><div class="line">        [cell.contentView <span class="string">removeConstraint:</span>widthFenceConstraint];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ol>
<li>这里首先获得这个UITableViewCell的宽度，赋值给contentViewWidth的对象。</li>
<li>下面判断这个cell中有没有设置accessoryView的这个view，如果设置了accessoryView的话，这个cell的宽度按会稍微小一点（16 + CGRectGetWidth(cell.accessoryView.frame)）</li>
<li>否则会根据accessoryView的类型不同，需要减去不同的宽度。</li>
<li>fd_enforceFrameLayout是用autolayout的、还是使用的frame的布局。</li>
<li>通过NSLayoutConstraint，将cell.contentView的宽度设置为contentViewWidth。</li>
<li><code>直接返回高度，并将约束移除掉。这里我不是很明白，为什么要这样做。</code></li>
<li>如果这里的UITableview的格式如果不是UITableViewCellSeparatorStyleNone，高度可能会有点偏差，加上这个偏差（1.0 / [UIScreen mainScreen].scale）</li>
</ol>
<p>##Demo中第二种方法，其他参数都是一样的，就是多了一个cacheByIndexPath,就是根据IndexPath的对象来存储刚才计算的高度。<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/// This method does what "-fd_heightForCellWithIdentifier:configuration" does, and</span></div><div class="line"><span class="comment">/// calculated height will be cached by its index path, returns a cached height</span></div><div class="line"><span class="comment">/// when needed. Therefore lots of extra height calculations could be saved.</span></div><div class="line"><span class="comment">///</span></div><div class="line"><span class="comment">/// No need to worry about invalidating cached heights when data source changes, it</span></div><div class="line"><span class="comment">/// will be done automatically when you call "-reloadData" or any method that triggers</span></div><div class="line"><span class="comment">/// UITableView's reloading.</span></div><div class="line"><span class="comment">///</span></div><div class="line"><span class="comment">/// @param indexPath where this cell's height cache belongs.</span></div><div class="line"><span class="comment">///</span></div><div class="line">- (<span class="built_in">CGFloat</span>)fd_heightForCellWithIdentifier:(<span class="built_in">NSString</span> *)identifier cacheByIndexPath:(<span class="built_in">NSIndexPath</span> *)indexPath configuration:(<span class="keyword">void</span> (^)(<span class="keyword">id</span> cell))configuration &#123;</div><div class="line"></div><div class="line">	    <span class="comment">// Hit cache</span></div><div class="line">	    <span class="comment">//1.</span></div><div class="line">    <span class="keyword">if</span> ([<span class="keyword">self</span>.fd_indexPathHeightCache existsHeightAtIndexPath:indexPath]) &#123;</div><div class="line">        [<span class="keyword">self</span> fd_debugLog:[<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"hit cache by index path[%@:%@] - %@"</span>, @(indexPath.section), @(indexPath.row), @([<span class="keyword">self</span>.fd_indexPathHeightCache heightForIndexPath:indexPath])]];</div><div class="line">        <span class="keyword">return</span> [<span class="keyword">self</span>.fd_indexPathHeightCache heightForIndexPath:indexPath];</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//9.</span></div><div class="line">     <span class="built_in">CGFloat</span> height = [<span class="keyword">self</span> fd_heightForCellWithIdentifier:identifier configuration:configuration];</div><div class="line">    [<span class="keyword">self</span>.fd_indexPathHeightCache cacheHeight:height byIndexPath:indexPath];</div><div class="line">    [<span class="keyword">self</span> fd_debugLog:[<span class="built_in">NSString</span> stringWithFormat: <span class="string">@"cached by index path[%@:%@] - %@"</span>, @(indexPath.section), @(indexPath.row), @(height)]];</div><div class="line"></div><div class="line">    <span class="keyword">return</span> height;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//2.</span></div><div class="line">- (<span class="built_in">BOOL</span>)existsHeightAtIndexPath:(<span class="built_in">NSIndexPath</span> *)indexPath &#123;</div><div class="line">	<span class="comment">//6.</span></div><div class="line">	 <span class="built_in">NSNumber</span> *number = <span class="keyword">self</span>.heightsBySectionForCurrentOrientation[indexPath.section][indexPath.row];</div><div class="line">    <span class="keyword">return</span> ![number isEqualToNumber:@<span class="number">-1</span>];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//3.</span></div><div class="line">- (<span class="keyword">void</span>)buildCachesAtIndexPathsIfNeeded:(<span class="built_in">NSArray</span> *)indexPaths &#123;</div><div class="line">	  [indexPaths enumerateObjectsUsingBlock:^(<span class="built_in">NSIndexPath</span> *indexPath, <span class="built_in">NSUInteger</span> idx, <span class="built_in">BOOL</span> *stop) &#123;</div><div class="line">	  <span class="comment">//4.</span></div><div class="line">        [<span class="keyword">self</span> buildSectionsIfNeeded:indexPath.section];</div><div class="line">      <span class="comment">//5.</span></div><div class="line">        [<span class="keyword">self</span> buildRowsIfNeeded:indexPath.row inExistSection:indexPath.section];</div><div class="line">    &#125;];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)buildSectionsIfNeeded:(<span class="built_in">NSInteger</span>)targetSection &#123;</div><div class="line">    [<span class="keyword">self</span> enumerateAllOrientationsUsingBlock:^(FDIndexPathHeightsBySection *heightsBySection) &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="built_in">NSInteger</span> section = <span class="number">0</span>; section &lt;= targetSection; ++section) &#123;</div><div class="line">            <span class="keyword">if</span> (section &gt;= heightsBySection.count) &#123;</div><div class="line">                heightsBySection[section] = [<span class="built_in">NSMutableArray</span> array];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)buildRowsIfNeeded:(<span class="built_in">NSInteger</span>)targetRow inExistSection:(<span class="built_in">NSInteger</span>)section &#123;</div><div class="line">    [<span class="keyword">self</span> enumerateAllOrientationsUsingBlock:^(FDIndexPathHeightsBySection *heightsBySection) &#123;</div><div class="line">        <span class="built_in">NSMutableArray</span>&lt;<span class="built_in">NSNumber</span> *&gt; *heightsByRow = heightsBySection[section];</div><div class="line">        <span class="keyword">for</span> (<span class="built_in">NSInteger</span> row = <span class="number">0</span>; row &lt;= targetRow; ++row) &#123;</div><div class="line">            <span class="keyword">if</span> (row &gt;= heightsByRow.count) &#123;</div><div class="line">                heightsByRow[row] = @<span class="number">-1</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//6.</span></div><div class="line"><span class="keyword">typedef</span> <span class="built_in">NSMutableArray</span>&lt;<span class="built_in">NSMutableArray</span>&lt;<span class="built_in">NSNumber</span> *&gt; *&gt; FDIndexPathHeightsBySection;</div><div class="line"></div><div class="line"><span class="comment">//7.</span></div><div class="line">- (<span class="built_in">CGFloat</span>)heightForIndexPath:(<span class="built_in">NSIndexPath</span> *)indexPath &#123;</div><div class="line">    [<span class="keyword">self</span> buildCachesAtIndexPathsIfNeeded:@[indexPath]];</div><div class="line">    <span class="built_in">NSNumber</span> *number = <span class="keyword">self</span>.heightsBySectionForCurrentOrientation[indexPath.section][indexPath.row];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//8.</span></div><div class="line">- (FDIndexPathHeightsBySection *)heightsBySectionForCurrentOrientation &#123;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">UIDeviceOrientationIsPortrait</span>([<span class="built_in">UIDevice</span> currentDevice].orientation) ? <span class="keyword">self</span>.heightsBySectionForPortrait: <span class="keyword">self</span>.heightsBySectionForLandscape;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<ol>
<li>和上面方法一样的我就不说了，这里的高度缓存部分还是蛮有意思的，这里新建了一个fd_indexPathHeightCache的对象，这个对象就是用来管理缓存的部分，对象继承的是NSObject</li>
<li>通过传入的indexPath来返回这个对象是否已经缓存进去了。</li>
<li>在将indexPath的对象打包成NSArray的对象，对到下一个函数中</li>
<li>将indexPath.section,如果数组中不含有这个section的话，那就新建一个，通过6.可以知道，这个是个二位数组，最外层数组的index的数目就是section</li>
<li>下一个方法就是根据section，找到里面一层的数组，这个数组放的就是对应的rows的对象，如果没有就会默认塞入一个-1的值。</li>
<li>再根据同样的方法，到二维数组中查找对象，如果不是我们之前塞入的-1,那就是true，否则就是false。</li>
<li><code>这里我没看懂，已经知道在缓存中存在了，为什么还要再掉一遍[self buildCachesAtIndexPathsIfNeeded:@[indexPath]];</code></li>
<li>这里可以知道，作者根据横竖屏设置了两个不同的数据，就是为了分别存储、提取。</li>
<li>如果之前没有缓存的话，它会先去调用一遍之前计算高度的方法，然后将计算出来的高度，丢到之前的二维数组中去。</li>
</ol>
<p>###第三种的计算方式，就是根据每个model设置不同key值来存储高度。<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/// This method caches height by your model entity's identifier.</span></div><div class="line"><span class="comment">/// If your model's changed, call "-invalidateHeightForKey:(id &lt;NSCopying&gt;)key" to</span></div><div class="line"><span class="comment">/// invalidate cache and re-calculate, it's much cheaper and effective than "cacheByIndexPath".</span></div><div class="line"><span class="comment">///</span></div><div class="line"><span class="comment">/// @param key model entity's identifier whose data configures a cell.</span></div><div class="line"><span class="comment">///</span></div><div class="line">- (<span class="built_in">CGFloat</span>)fd_heightForCellWithIdentifier:(<span class="built_in">NSString</span> *)identifier cacheByKey:(<span class="keyword">id</span>&lt;<span class="built_in">NSCopying</span>&gt;)key configuration:(<span class="keyword">void</span> (^)(<span class="keyword">id</span> cell))configuration &#123;</div><div class="line">	<span class="comment">//1.</span></div><div class="line">	   <span class="comment">// Hit cache</span></div><div class="line">    <span class="keyword">if</span> ([<span class="keyword">self</span>.fd_keyedHeightCache existsHeightForKey:key]) &#123;</div><div class="line">        <span class="built_in">CGFloat</span> cachedHeight = [<span class="keyword">self</span>.fd_keyedHeightCache heightForKey:key];</div><div class="line">        [<span class="keyword">self</span> fd_debugLog:[<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"hit cache by key[%@] - %@"</span>, key, @(cachedHeight)]];</div><div class="line">        <span class="keyword">return</span> cachedHeight;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//2.</span></div><div class="line">    <span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">NSMutableDictionary</span>&lt;<span class="keyword">id</span>&lt;<span class="built_in">NSCopying</span>&gt;, <span class="built_in">NSNumber</span> *&gt; *mutableHeightsByKeyForPortrait;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<ol>
<li>作者也说了，这个效率会比之前按照indexPath的计算效率要高。</li>
<li>通过这个，我们大概就知道，作者所谓的效率高，应该就是这个意思，这里不是什么二维数组，而是一个NSMutableDictionary对象。其他基本上类似。</li>
</ol>
<p><code>最后说一下自己的一个疑问：第二种方法中，作者为什么不将key和value经过简单的运算，作为key，来用NSDictionary来存储数据呢？作者的解释是：里面要配合 section row 的insert remove的话，会比较麻烦。所以作者最后还是选择的二维数组。</code></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;学习UITableView的高度计算的框架&quot;&gt;&lt;a href=&quot;#学习UITableView的高度计算的框架&quot; class=&quot;headerlink&quot; title=&quot;学习UITableView的高度计算的框架&quot;&gt;&lt;/a&gt;学习UITableView的高度计算的框架&lt;/
    
    </summary>
    
      <category term="日志" scheme="http://ghcoder.com/categories/%E6%97%A5%E5%BF%97/"/>
    
    
      <category term="学习" scheme="http://ghcoder.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="Obeject-c" scheme="http://ghcoder.com/tags/Obeject-c/"/>
    
  </entry>
  
  <entry>
    <title>关于图片圆角的功能学习。</title>
    <link href="http://ghcoder.com/2016/04/19/20160418/"/>
    <id>http://ghcoder.com/2016/04/19/20160418/</id>
    <published>2016-04-19T03:12:12.000Z</published>
    <updated>2016-12-01T08:05:36.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="图片的性能问题，基本上面试的时候，都会被问到，现在在自己的app中，我也是为了解决的性能的问题，所以了解了一些关于图片性能的库，看一下源码-现在应该有很多这种库了。我看的是这个：https-github-com-CoderJackyHuang-HYBImageCliped"><a href="#图片的性能问题，基本上面试的时候，都会被问到，现在在自己的app中，我也是为了解决的性能的问题，所以了解了一些关于图片性能的库，看一下源码-现在应该有很多这种库了。我看的是这个：https-github-com-CoderJackyHuang-HYBImageCliped" class="headerlink" title="图片的性能问题，基本上面试的时候，都会被问到，现在在自己的app中，我也是为了解决的性能的问题，所以了解了一些关于图片性能的库，看一下源码, 现在应该有很多这种库了。我看的是这个：https://github.com/CoderJackyHuang/HYBImageCliped"></a>图片的性能问题，基本上面试的时候，都会被问到，现在在自己的app中，我也是为了解决的性能的问题，所以了解了一些关于图片性能的库，看一下源码, 现在应该有很多这种库了。我看的是这个：<a href="https://github.com/CoderJackyHuang/HYBImageCliped" target="_blank" rel="external">https://github.com/CoderJackyHuang/HYBImageCliped</a></h3><ul>
<li>这个库是通过Category来分别实现这些功能，首先看看UIView的Category,是怎么实现的UIView的圆角。</li>
</ul>
<figure class="highlight zephir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> *	使用指定的图片来填充，但是生成的是圆形图片，背景颜色为白色。</div><div class="line"> *</div><div class="line"> *	<span class="doctag">@param</span> image			图片名称或者图片对象，甚至支持NSData</div><div class="line"> *	<span class="doctag">@param</span> targetSize	生成指定大小的图片</div><div class="line"> *	<span class="doctag">@param</span> isEqualScale	是否等比例缩放图片</div><div class="line"> *  <span class="doctag">@param</span> backgroundColor 默认取最顶层父视图的背景色，若为透明，则取本身背景色，若也为透明，则取白色</div><div class="line"> *  <span class="doctag">@parma</span> callback   只有当图片真正被裁剪成功后，才会回调，返回裁剪后的图片</div><div class="line"> *</div><div class="line"> *	<span class="doctag">@return</span> 裁剪前的图片</div><div class="line"> */</div><div class="line"></div><div class="line">- (UIImage *)hyb_setCircleImage:(id)image</div><div class="line">                           size:(CGSize)targetSize</div><div class="line">                   isEqualScale:(<span class="keyword">BOOL</span>)isEqualScale</div><div class="line">                 backgrounColor:(UIColor *)backgroundColor</div><div class="line">                       onCliped:(HYBClipedCallback)callback;</div></pre></td></tr></table></figure>
<ul>
<li>这只是其中一种Public的方法，我是按照Demo来看的。但是无论哪一种Public的方法，最终调用的都是统一的一个Private 的方法。</li>
</ul>
<figure class="highlight erlang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">- <span class="params">(UIImage *)</span>hyb_private_setImage:<span class="params">(id)</span>image</div><div class="line">                             size:<span class="params">(CGSize)</span>targetSize</div><div class="line">                     cornerRadius:<span class="params">(CGFloat)</span>cornerRadius</div><div class="line">                      rectCorener:<span class="params">(UIRectCorner)</span>rectCorner</div><div class="line">                  backgroundColor:<span class="params">(UIColor *)</span>bgColor</div><div class="line">                     isEqualScale:<span class="params">(BOOL)</span>isEqualScale</div><div class="line">                         isCircle:<span class="params">(BOOL)</span>isCircle</div><div class="line">                         onCliped:<span class="params">(HYBClipedCallback)</span>callback</div></pre></td></tr></table></figure>
<ul>
<li><p>里面有个这个方法：可以看出来，假如你不设置bgColor这个属性的话，他会遍历循环，一直会找到最顶层的父类，去除父类的颜色。<code>所以我觉得你要是没事话，还是自己设置一下颜色吧！这边假如层级很复杂，并且元素很多的话，这个性能可能会让你哭吧...</code></p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">if</span> (bgColor == <span class="literal">nil</span> || <span class="built_in">CGColorEqualToColor</span>(bgColor.CGColor, [<span class="built_in">UIColor</span> clearColor].CGColor)) &#123;</div><div class="line">  <span class="built_in">UIView</span> *superview = <span class="keyword">self</span>.superview;</div><div class="line">  <span class="keyword">while</span> (superview.backgroundColor == <span class="literal">nil</span> || <span class="built_in">CGColorEqualToColor</span>(superview.backgroundColor.CGColor, [<span class="built_in">UIColor</span> clearColor].CGColor)) &#123;</div><div class="line">    <span class="keyword">if</span> (!superview) &#123;</div><div class="line">      <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    superview = [superview superview];</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  bgColor = superview.backgroundColor;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>好吧，下面这段代码又要提到面试宝典中啥经典话题了，<code>如何在category中给现有的类添加属性呢？</code><br><a href="http://nshipster.com/associated-objects/" target="_blank" rel="external">http://nshipster.com/associated-objects/</a>Matt 大神曾经写过，你可以看一下。</p>
</li>
</ul>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">__block <span class="built_in">UIImage</span> *clipedImage = <span class="literal">nil</span>;</div><div class="line">	<span class="comment">//1.</span></div><div class="line">  <span class="built_in">dispatch_async</span>(dispatch_get_global_queue(<span class="number">0</span>, <span class="number">0</span>), ^&#123;</div><div class="line">  <span class="comment">//2.</span></div><div class="line">    willBeClipedImage.hyb_pathColor = <span class="keyword">self</span>.hyb_pathColor;</div><div class="line">    willBeClipedImage.hyb_pathWidth = <span class="keyword">self</span>.hyb_pathWidth;</div><div class="line">    willBeClipedImage.hyb_borderColor = <span class="keyword">self</span>.hyb_borderColor;</div><div class="line">    willBeClipedImage.hyb_borderWidth = <span class="keyword">self</span>.hyb_borderWidth;</div><div class="line">  &#125;);</div></pre></td></tr></table></figure>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">这里涉及到的pathColor,pathWidth,borderColor,borderWidth,都是通过在runtime的特性，在已有的类中添加属性的方式来存储和使用的。</div><div class="line">- (<span class="built_in">UIColor</span> *)hyb_pathColor &#123;</div><div class="line">  <span class="built_in">UIColor</span> *color = objc_getAssociatedObject(<span class="keyword">self</span>, s_hyb_image_pathColorKey);</div><div class="line"></div><div class="line">  <span class="keyword">if</span> (color) &#123;</div><div class="line">    <span class="keyword">return</span> color;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> [<span class="built_in">UIColor</span> whiteColor];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//...下面都是换汤不换药的。</span></div></pre></td></tr></table></figure>
<p><code>下面涉及到真正的画图部分了</code></p>
<ol>
<li>这里另起一个线程来绘制圆角。这里我有个问题：<code>每个图片都创建一个线程，这个是不是有点问题。而且这个dispatch_get_global_queue也有问题，Global Dispatch Queue创建的队列,其线程数目是不定的,是根据XNU内核决定的。我觉得这一点，源码中没有解释。</code></li>
</ol>
<ul>
<li>绘制圆角的核心函数是这个。</li>
</ul>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//1.</span></div><div class="line">- (<span class="built_in">UIImage</span> *)hyb_private_clipImageToSize:(<span class="built_in">CGSize</span>)targetSize</div><div class="line">                            cornerRadius:(<span class="built_in">CGFloat</span>)cornerRadius</div><div class="line">                                 corners:(<span class="built_in">UIRectCorner</span>)corners</div><div class="line">                         backgroundColor:(<span class="built_in">UIColor</span> *)backgroundColor</div><div class="line">                            isEqualScale:(<span class="built_in">BOOL</span>)isEqualScale</div><div class="line">                                isCircle:(<span class="built_in">BOOL</span>)isCircle &#123;&#125;</div><div class="line"></div><div class="line">                                <span class="built_in">CGContextRef</span> ctx = <span class="built_in">UIGraphicsGetCurrentContext</span>();</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">//2.</span></div><div class="line">    <span class="keyword">if</span> (isCircle) &#123;</div><div class="line">      <span class="built_in">CGContextAddEllipseInRect</span>(ctx, rect);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      <span class="built_in">CGContextAddRect</span>(ctx, rect);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="built_in">CGContextClip</span>(ctx);</div><div class="line">    [<span class="keyword">self</span> drawInRect:rectImage];</div><div class="line"></div><div class="line">    <span class="comment">//3.</span></div><div class="line"></div><div class="line">        <span class="built_in">CGContextSetStrokeColorWithColor</span>(ctx, [borderColor <span class="built_in">CGColor</span>]);</div><div class="line">    <span class="built_in">CGContextSetLineWidth</span>(ctx, borderWidth);</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (isCircle) &#123;</div><div class="line">      <span class="built_in">CGContextStrokeEllipseInRect</span>(ctx, rectImage);</div><div class="line">      <span class="built_in">CGContextStrokeEllipseInRect</span>(ctx, rect);</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (cornerRadius == <span class="number">0</span>) &#123;</div><div class="line">      <span class="built_in">CGContextStrokeRect</span>(ctx, rectImage);</div><div class="line">      <span class="built_in">CGContextStrokeRect</span>(ctx, rect);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//4.</span></div><div class="line">     <span class="built_in">UIBezierPath</span> *path2 = [<span class="built_in">UIBezierPath</span> bezierPathWithRoundedRect:rect</div><div class="line">                                                byRoundingCorners:corners</div><div class="line">                                                      cornerRadii:<span class="built_in">CGSizeMake</span>(cornerRadius + minusPath1 ,cornerRadius + minusPath1)];</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">//5.</span></div><div class="line">    <span class="built_in">UIImage</span> *finalImage = <span class="built_in">UIGraphicsGetImageFromCurrentImageContext</span>();</div><div class="line"></div><div class="line">    <span class="keyword">return</span> finalImage;</div></pre></td></tr></table></figure>
<ol>
<li>里面更新size做了一些文章。是到底要做截成一个正圆，还是只截在哪个角的圆。</li>
<li>如果是正圆、并且不带圆角的话，就用core graphic来画。</li>
<li>内线和外线的绘制、以及粗细、颜色。</li>
<li><p>如果不是正圆、带圆角的多边形的图形，用UIBezierPath 曲线来绘制。关键是第二个参数，是一个枚举类型，代表哪一个或者哪一些圆角需要绘制、苹果官方的文档为<code>corners:
A bitmask value that identifies the corners that you want rounded. You can use this parameter to round only a subset of the corners of the rectangle.</code></p>
</li>
<li><p>最后直接将绘制的图形返回出来。</p>
</li>
<li>最后说一点、无论是UIbutton、UIImage、还是什么、笔者的思路都是先在UIView中添加方法、再在UIImage添加方法、并且进行调用、绘制图形，并且返回。</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;图片的性能问题，基本上面试的时候，都会被问到，现在在自己的app中，我也是为了解决的性能的问题，所以了解了一些关于图片性能的库，看一下源码-现在应该有很多这种库了。我看的是这个：https-github-com-CoderJackyHuang-HYBImageCl
    
    </summary>
    
      <category term="日志" scheme="http://ghcoder.com/categories/%E6%97%A5%E5%BF%97/"/>
    
    
      <category term="学习" scheme="http://ghcoder.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="Obeject-c" scheme="http://ghcoder.com/tags/Obeject-c/"/>
    
  </entry>
  
  <entry>
    <title>学习YYModel</title>
    <link href="http://ghcoder.com/2016/04/01/20160401/"/>
    <id>http://ghcoder.com/2016/04/01/20160401/</id>
    <published>2016-04-01T06:28:12.000Z</published>
    <updated>2016-12-01T08:05:44.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="以YYModel的例子，它以类的方式调用"><a href="#以YYModel的例子，它以类的方式调用" class="headerlink" title="以YYModel的例子，它以类的方式调用"></a>以YYModel的例子，它以类的方式调用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">+ (instancetype)yy_modelWithJSON:(id)json &#123;</div><div class="line">    NSDictionary *dic = [self _yy_dictionaryWithJSON:json];</div><div class="line">    return [self yy_modelWithDictionary:dic];</div><div class="line">&#125;</div><div class="line"></div><div class="line">&lt;!-- 1. 直接将json的格式丢给这个函数 --&gt;</div><div class="line">&lt;!-- 2. 然后调用下面的这个函数，主要是讲这个json转化为NSDictionary的格式，如果是字符串会将字符串转化为NSData,然后再转化为NSDictionary --&gt;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">+ (NSDictionary *)_yy_dictionaryWithJSON:(id)json &#123;</div></pre></td></tr></table></figure>
<ul>
<li>现在开始进入最重要的函数部分了</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">//这个函数里获取model元是通过调用下面的方法，cls是获取本类而得到的Class类型</div><div class="line">+ (instancetype)yy_modelWithDictionary:(NSDictionary *)dictionary &#123;&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[_YYModelMeta metaWithClass:cls]</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">+ (instancetype)metaWithClass:(Class)cls &#123;</div><div class="line">    if (!cls) return nil;</div><div class="line">    static CFMutableDictionaryRef cache;</div><div class="line">    static dispatch_once_t onceToken;</div><div class="line">    //1..</div><div class="line">    static dispatch_semaphore_t lock;</div><div class="line">    dispatch_once(&amp;onceToken, ^&#123;</div><div class="line">        cache = CFDictionaryCreateMutable(CFAllocatorGetDefault(), 0, &amp;kCFTypeDictionaryKeyCallBacks, &amp;kCFTypeDictionaryValueCallBacks);</div><div class="line">        lock = dispatch_semaphore_create(1);</div><div class="line">    &#125;);</div><div class="line">    dispatch_semaphore_wait(lock, DISPATCH_TIME_FOREVER);</div><div class="line">    _YYModelMeta *meta = CFDictionaryGetValue(cache, (__bridge const void *)(cls));</div><div class="line">    dispatch_semaphore_signal(lock);</div><div class="line">    if (!meta || meta-&gt;_classInfo.needUpdate) &#123;</div><div class="line">        meta = [[_YYModelMeta alloc] initWithClass:cls];</div><div class="line">        if (meta) &#123;</div><div class="line">            dispatch_semaphore_wait(lock, DISPATCH_TIME_FOREVER);</div><div class="line">            CFDictionarySetValue(cache, (__bridge const void *)(cls), (__bridge const void *)(meta));</div><div class="line">            dispatch_semaphore_signal(lock);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    return meta;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;!-- //以信号量的方式保持同步，作用是为了从cache的内存中获取meta的数据是同步的。 --&gt;</div><div class="line">dispatch_semaphore_wait(lock, DISPATCH_TIME_FOREVER);</div><div class="line">   _YYModelMeta *meta = CFDictionaryGetValue(cache, (__bridge const void *)(cls));</div><div class="line">   dispatch_semaphore_signal(lock);</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;!-- //或者在讲meta的值塞入内存中保持同步 --&gt;</div><div class="line">	    if (!meta || meta-&gt;_classInfo.needUpdate) &#123;</div><div class="line">       meta = [[_YYModelMeta alloc] initWithClass:cls];</div><div class="line">       if (meta) &#123;</div><div class="line">           dispatch_semaphore_wait(lock, DISPATCH_TIME_FOREVER);</div><div class="line">           CFDictionarySetValue(cache, (__bridge const void *)(cls), (__bridge const void *)(meta));</div><div class="line">           dispatch_semaphore_signal(lock);</div><div class="line">       &#125;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;!-- 其中创建meta的时候回调用 --&gt;</div><div class="line">meta = [[_YYModelMeta alloc] initWithClass:cls];</div><div class="line"></div><div class="line">- (instancetype)initWithClass:(Class)cls &#123;</div><div class="line">   YYClassInfo *classInfo = [YYClassInfo classInfoWithClass:cls];</div><div class="line"> 	.....  </div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"> &lt;!-- 这里涉及到YYClassInfo的实例化方法,通过runtime的一些方法，找到本类，父类，元类。 --&gt;</div><div class="line"> - (instancetype)initWithClass:(Class)cls &#123;</div><div class="line">    if (!cls) return nil;</div><div class="line">    self = [super init];</div><div class="line">    _cls = cls;</div><div class="line">    _superCls = class_getSuperclass(cls);</div><div class="line">    _isMeta = class_isMetaClass(cls);</div><div class="line">    if (!_isMeta) &#123;</div><div class="line">        _metaCls = objc_getMetaClass(class_getName(cls));</div><div class="line">    &#125;</div><div class="line">    _name = NSStringFromClass(cls);</div><div class="line">    [self _update];</div><div class="line"></div><div class="line">    _superClassInfo = [self.class classInfoWithClass:_superCls];</div><div class="line">    return self;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>然后在_update的方法中</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">&lt;!-- 这里讲model中的方法、属性，ivar以key-value的形式存放在字典中。本类调用完后会在父类中调用再调用一遍。 --&gt;</div><div class="line">  Class cls = self.cls;</div><div class="line">    unsigned int methodCount = 0;</div><div class="line">    Method *methods = class_copyMethodList(cls, &amp;methodCount);</div><div class="line">    if (methods) &#123;</div><div class="line">        NSMutableDictionary *methodInfos = [NSMutableDictionary new];</div><div class="line">        _methodInfos = methodInfos;</div><div class="line">        for (unsigned int i = 0; i &lt; methodCount; i++) &#123;</div><div class="line">            YYClassMethodInfo *info = [[YYClassMethodInfo alloc] initWithMethod:methods[i]];</div><div class="line">            if (info.name) methodInfos[info.name] = info;</div><div class="line">        &#125;</div><div class="line">        free(methods);</div><div class="line">    &#125;</div><div class="line">    unsigned int propertyCount = 0;</div><div class="line">    objc_property_t *properties = class_copyPropertyList(cls, &amp;propertyCount);</div><div class="line">    if (properties) &#123;</div><div class="line">        NSMutableDictionary *propertyInfos = [NSMutableDictionary new];</div><div class="line">        _propertyInfos = propertyInfos;</div><div class="line">        for (unsigned int i = 0; i &lt; propertyCount; i++) &#123;</div><div class="line">            YYClassPropertyInfo *info = [[YYClassPropertyInfo alloc] initWithProperty:properties[i]];</div><div class="line">            if (info.name) propertyInfos[info.name] = info;</div><div class="line">        &#125;</div><div class="line">        free(properties);</div><div class="line">    &#125;</div><div class="line">....</div></pre></td></tr></table></figure>
<hr>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line">&lt;!-- * 最最关键的映射来了，YYModel把这个功能用一个递归函数来实现了。 --&gt;</div><div class="line">// create mapper</div><div class="line">   NSMutableDictionary *mapper = [NSMutableDictionary new];</div><div class="line">   NSMutableArray *keyPathPropertyMetas = [NSMutableArray new];</div><div class="line">   NSMutableArray *multiKeysPropertyMetas = [NSMutableArray new];</div><div class="line"></div><div class="line">   if ([cls respondsToSelector:@selector(modelCustomPropertyMapper)]) &#123;</div><div class="line">       NSDictionary *customMapper = [(id &lt;YYModel&gt;)cls modelCustomPropertyMapper];</div><div class="line">       [customMapper enumerateKeysAndObjectsUsingBlock:^(NSString *propertyName, NSString *mappedToKey, BOOL *stop) &#123;</div><div class="line">           _YYModelPropertyMeta *propertyMeta = allPropertyMetas[propertyName];</div><div class="line">           if (!propertyMeta) return;</div><div class="line">           [allPropertyMetas removeObjectForKey:propertyName];</div><div class="line"></div><div class="line">           if ([mappedToKey isKindOfClass:[NSString class]]) &#123;</div><div class="line">               if (mappedToKey.length == 0) return;</div><div class="line"></div><div class="line">               propertyMeta-&gt;_mappedToKey = mappedToKey;</div><div class="line">               NSArray *keyPath = [mappedToKey componentsSeparatedByString:@&quot;.&quot;];</div><div class="line">               if (keyPath.count &gt; 1) &#123;</div><div class="line">                   propertyMeta-&gt;_mappedToKeyPath = keyPath;</div><div class="line">                   [keyPathPropertyMetas addObject:propertyMeta];</div><div class="line">               &#125;</div><div class="line">               propertyMeta-&gt;_next = mapper[mappedToKey] ?: nil;</div><div class="line">               mapper[mappedToKey] = propertyMeta;</div><div class="line"></div><div class="line">           &#125; else if ([mappedToKey isKindOfClass:[NSArray class]]) &#123;</div><div class="line"></div><div class="line">               NSMutableArray *mappedToKeyArray = [NSMutableArray new];</div><div class="line">               for (NSString *oneKey in ((NSArray *)mappedToKey)) &#123;</div><div class="line">                   if (![oneKey isKindOfClass:[NSString class]]) continue;</div><div class="line">                   if (oneKey.length == 0) continue;</div><div class="line"></div><div class="line">                   NSArray *keyPath = [oneKey componentsSeparatedByString:@&quot;.&quot;];</div><div class="line">                   if (keyPath.count &gt; 1) &#123;</div><div class="line">                       [mappedToKeyArray addObject:keyPath];</div><div class="line">                   &#125; else &#123;</div><div class="line">                       [mappedToKeyArray addObject:oneKey];</div><div class="line">                   &#125;</div><div class="line"></div><div class="line">                   if (!propertyMeta-&gt;_mappedToKey) &#123;</div><div class="line">                       propertyMeta-&gt;_mappedToKey = oneKey;</div><div class="line">                       propertyMeta-&gt;_mappedToKeyPath = keyPath.count &gt; 1 ? keyPath : nil;</div><div class="line">                   &#125;</div><div class="line">               &#125;</div><div class="line">               if (!propertyMeta-&gt;_mappedToKey) return;</div><div class="line"></div><div class="line">               propertyMeta-&gt;_mappedToKeyArray = mappedToKeyArray;</div><div class="line">               [multiKeysPropertyMetas addObject:propertyMeta];</div><div class="line"></div><div class="line">               propertyMeta-&gt;_next = mapper[mappedToKey] ?: nil;</div><div class="line">               mapper[mappedToKey] = propertyMeta;</div><div class="line">           &#125;</div><div class="line">       &#125;];</div><div class="line">   &#125;</div><div class="line"></div><div class="line"></div><div class="line">   &lt;!-- * 源码中就可以看出，这个映射的函数，你需要复写modelCustomPropertyMapper 这个函数</div><div class="line">   * 映射这个函数，你可以定义一个NSString的字符串，假如你得字符串中含有“.”这个的话，他就会将这个字符串以“.”分隔成NSArray,然后存入到_mappedToKeyPath 这个变量中。</div><div class="line">   * 映射也可以是一个NSArray,这样就可以实现同一个model映射到不同的key上了。 --&gt;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;以YYModel的例子，它以类的方式调用&quot;&gt;&lt;a href=&quot;#以YYModel的例子，它以类的方式调用&quot; class=&quot;headerlink&quot; title=&quot;以YYModel的例子，它以类的方式调用&quot;&gt;&lt;/a&gt;以YYModel的例子，它以类的方式调用&lt;/h3&gt;&lt;
    
    </summary>
    
      <category term="日志" scheme="http://ghcoder.com/categories/%E6%97%A5%E5%BF%97/"/>
    
    
      <category term="学习" scheme="http://ghcoder.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="Obeject-c" scheme="http://ghcoder.com/tags/Obeject-c/"/>
    
  </entry>
  
  <entry>
    <title>新的开始</title>
    <link href="http://ghcoder.com/2016/03/28/20160328/"/>
    <id>http://ghcoder.com/2016/03/28/20160328/</id>
    <published>2016-03-28T06:28:12.000Z</published>
    <updated>2016-10-13T02:53:14.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近身边发生了太多太多事情，让我认识到了生命是多么的脆弱。满怀期望等待着一个什么的到来、可惜Ta却悄悄地离开了我们。我现在只想好好爱着我身边肉丝，一辈子都呵护在她身边，一直保护她，爱护她，不要让她收到一点点的伤害。 为了Rose、我了这个家、为了TA到来。我要好好鼓励工作，给你们最好的未来。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">while(!isSuccess)&#123;</div><div class="line">    func keepMoving()</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近身边发生了太多太多事情，让我认识到了生命是多么的脆弱。满怀期望等待着一个什么的到来、可惜Ta却悄悄地离开了我们。我现在只想好好爱着我身边肉丝，一辈子都呵护在她身边，一直保护她，爱护她，不要让她收到一点点的伤害。 为了Rose、我了这个家、为了TA到来。我要好好鼓励工作，
    
    </summary>
    
      <category term="日志" scheme="http://ghcoder.com/categories/%E6%97%A5%E5%BF%97/"/>
    
    
      <category term="学习" scheme="http://ghcoder.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="我" scheme="http://ghcoder.com/tags/%E6%88%91/"/>
    
  </entry>
  
</feed>
