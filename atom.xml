<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Ghcoder</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.ghcoder.com/"/>
  <updated>2017-05-31T09:59:51.000Z</updated>
  <id>http://www.ghcoder.com/</id>
  
  <author>
    <name>Ghcoder</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>学习Android开发基础笔记Tips</title>
    <link href="http://www.ghcoder.com/2017/05/31/20170531/"/>
    <id>http://www.ghcoder.com/2017/05/31/20170531/</id>
    <published>2017-05-31T09:55:12.000Z</published>
    <updated>2017-05-31T09:59:51.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="学习Android-最近正好有时间，可以系统的看看Android的系统开发，记录下学习的笔记，供今后参考。"><a href="#学习Android-最近正好有时间，可以系统的看看Android的系统开发，记录下学习的笔记，供今后参考。" class="headerlink" title="学习Android, 最近正好有时间，可以系统的看看Android的系统开发，记录下学习的笔记，供今后参考。"></a>学习Android, 最近正好有时间，可以系统的看看Android的系统开发，记录下学习的笔记，供今后参考。</h3><h4 id="1-1-基础环境："><a href="#1-1-基础环境：" class="headerlink" title="1.1 基础环境："></a>1.1 基础环境：</h4><ol>
<li>使用的IDE为：Android Studio.</li>
<li>SDK 最低的版本为：Android 4.1.</li>
</ol>
<ul>
<li><code>LinearLayout</code>是布局组件，可以从继承关系上看出关系, 继承自View的子类<code>ViewGroup</code>，并且<code>FrameLayout</code>,<code>TableLayout</code>,<code>RelativeLayout</code>他们都是继承自<code>ViewGroup</code></li>
</ul>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 继承关系</span></div><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">LinearLayout</span> <span class="keyword">extends</span> <span class="title">ViewGroup</span></span></div><div class="line"></div><div class="line">public <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">ViewGroup</span> <span class="keyword">extends</span> <span class="title">View</span> <span class="title">implements</span> <span class="title">ViewParent</span>, <span class="title">ViewManager</span></span></div></pre></td></tr></table></figure>
<a id="more"></a>
<h4 id="1-2-UI属性"><a href="#1-2-UI属性" class="headerlink" title="1.2 UI属性:"></a>1.2 UI属性:</h4><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="string">match_parent:</span> 视图与其父视图大小相同</div><div class="line"><span class="string">wrap_content:</span> 视图将根据展示的内容自动调整大小</div><div class="line"><span class="string">android:</span><span class="string">orientation:</span> LinearLayout 具有的属性，决定子组件是“水平”还是“垂直”排列</div></pre></td></tr></table></figure>
<ul>
<li>字符串，对某个组件setString的时候，你会发现是这样写的：<code>@string/xxxx</code>, 这里需要注意一下：<code>android:text属性值不是字符串值，而是对字符串资源的应用</code>，其实这时候你setString的时候，实际上是去<code>app/res/values</code>的文件夹中查找<code>strings.xml</code>。</li>
</ul>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;<span class="built_in">string</span> <span class="built_in">name</span>=<span class="string">"xxxx"</span>&gt;YYYYYY&lt;/<span class="built_in">string</span>&gt;</div></pre></td></tr></table></figure>
<ul>
<li>随意创建一个文件，系统会默认给我们创建一些代码：</li>
<li>这里的<code>R.java</code>文件是在代码编译的时候创建的:</li>
</ul>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">QuizActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line">		</div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="keyword">protected</span> void onCreate(<span class="type">Bundle</span> savedInstanceState) &#123;</div><div class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">    setContentView(<span class="type">R</span>.layout.activity_quiz);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><code>AppCompatActivity</code>是<code>Activity</code>的子类</li>
<li><code>activity</code>创建完后，需要获取自己的界面：</li>
</ul>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">public</span> <span class="selector-tag">void</span> <span class="selector-tag">setContentView</span>(<span class="variable">@LayoutRes</span> int layoutResID) &#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>这里的<code>layoutResID</code>就是要在资源中来寻找相应的资源。资源文件需要从<code>app/res</code>目录下寻找，和<code>TextView</code>中获取字符串的方法是一样的，需要去<code>app/res/values</code>中的<code>strings.xml</code>中去寻找：</li>
</ul>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">public</span> <span class="selector-tag">final</span> <span class="selector-tag">void</span> <span class="selector-tag">setText</span>(<span class="variable">@StringRes</span> int resid) &#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="1-3-按钮的点击："><a href="#1-3-按钮的点击：" class="headerlink" title="1.3 按钮的点击："></a>1.3 按钮的点击：</h4><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">mNextButton = (Button) findViewById(R.id.next_button);</div><div class="line">     mNextButton.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</div><div class="line">         <span class="meta">@Override</span></div><div class="line">         <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">          </div><div class="line">         &#125;</div><div class="line">     &#125;);</div></pre></td></tr></table></figure>
<h4 id="1-4-Toast的提示信息："><a href="#1-4-Toast的提示信息：" class="headerlink" title="1.4 Toast的提示信息："></a>1.4 Toast的提示信息：</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">Toast</span><span class="selector-class">.makeText</span>(<span class="selector-tag">CurrentActivity</span><span class="selector-class">.this</span>, <span class="selector-tag">R</span><span class="selector-class">.string</span><span class="selector-class">.xxx</span>, <span class="selector-tag">Toast</span><span class="selector-class">.LENGTH_SHORT</span>)<span class="selector-class">.show</span>();</div></pre></td></tr></table></figure>
<h4 id="1-5-生命周期"><a href="#1-5-生命周期" class="headerlink" title="1.5 生命周期"></a>1.5 生命周期</h4><ol>
<li>不存在 -&gt;(onCreate)-&gt; 停止（不可见）-&gt;(onStart)-&gt;暂停（可见）-&gt; (onResume) 运行（可见 &amp; 在前台）</li>
<li>运行（可见 &amp; 在前台）-&gt;(onPause)-&gt; 暂停（可见 -&gt;(onStop)-&gt; 停止（不可见 -&gt;(onDestory)-&gt; 不存在</li>
</ol>
<ul>
<li><p>在创建了Activity之后，并且此实例出现在屏幕之前会调用<code>onCreate</code>的方法</p>
</li>
<li><p>转屏幕的时候，生命周期的改变：</p>
</li>
</ul>
<ol>
<li>当屏幕发生转动的时候，Activity的生命周期会从新再走一遍，也就是 上面的会先按照 2 -&gt; 1,每次转屏都会这样。</li>
</ol>
<ul>
<li>想要在转屏的时候，保存数据，可以调用下面<code>onSaveInstanceState</code>的方法来保存数据，下次在需要的时候，可以获取数据：</li>
</ul>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">void</span> <span class="title">onSaveInstanceState</span><span class="params">(Bundle outState)</span> </span>&#123;</div><div class="line">     <span class="keyword">super</span>.onSaveInstanceState(outState);</div><div class="line">     outState.putInt(KEY_INDEX, mCurrentIndex);</div><div class="line">&#125;</div><div class="line">   </div><div class="line">   </div><div class="line">  <span class="meta">@Override</span></div><div class="line">   <span class="keyword">protected</span> <span class="function"><span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">       <span class="keyword">super</span>.onCreate(savedInstanceState); </div><div class="line">   	   <span class="keyword">if</span> (savedInstanceState != <span class="keyword">null</span>) &#123;</div><div class="line">           mCurrentIndex = savedInstanceState.getInt(KEY_INDEX);</div><div class="line">       &#125;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<ul>
<li>但是转屏并且保存数据的生命周期方法的调用顺序为：</li>
</ul>
<ol>
<li><code>onPause()</code> -&gt; <code>onSaveInstanceState()</code> -&gt; <code>onStop()</code> -&gt; <code>onDestory()</code></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;学习Android-最近正好有时间，可以系统的看看Android的系统开发，记录下学习的笔记，供今后参考。&quot;&gt;&lt;a href=&quot;#学习Android-最近正好有时间，可以系统的看看Android的系统开发，记录下学习的笔记，供今后参考。&quot; class=&quot;headerlink&quot; title=&quot;学习Android, 最近正好有时间，可以系统的看看Android的系统开发，记录下学习的笔记，供今后参考。&quot;&gt;&lt;/a&gt;学习Android, 最近正好有时间，可以系统的看看Android的系统开发，记录下学习的笔记，供今后参考。&lt;/h3&gt;&lt;h4 id=&quot;1-1-基础环境：&quot;&gt;&lt;a href=&quot;#1-1-基础环境：&quot; class=&quot;headerlink&quot; title=&quot;1.1 基础环境：&quot;&gt;&lt;/a&gt;1.1 基础环境：&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;使用的IDE为：Android Studio.&lt;/li&gt;
&lt;li&gt;SDK 最低的版本为：Android 4.1.&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;LinearLayout&lt;/code&gt;是布局组件，可以从继承关系上看出关系, 继承自View的子类&lt;code&gt;ViewGroup&lt;/code&gt;，并且&lt;code&gt;FrameLayout&lt;/code&gt;,&lt;code&gt;TableLayout&lt;/code&gt;,&lt;code&gt;RelativeLayout&lt;/code&gt;他们都是继承自&lt;code&gt;ViewGroup&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight scala&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 继承关系&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;public &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;LinearLayout&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ViewGroup&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;public &lt;span class=&quot;keyword&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ViewGroup&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ViewParent&lt;/span&gt;, &lt;span class=&quot;title&quot;&gt;ViewManager&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="日志" scheme="http://www.ghcoder.com/categories/%E6%97%A5%E5%BF%97/"/>
    
    
      <category term="Android" scheme="http://www.ghcoder.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>学习爬虫Scrapy[官网教程]</title>
    <link href="http://www.ghcoder.com/2017/05/25/20170525/"/>
    <id>http://www.ghcoder.com/2017/05/25/20170525/</id>
    <published>2017-05-25T02:37:12.000Z</published>
    <updated>2017-05-25T02:55:42.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-学习爬虫框架-Scrapy"><a href="#1-学习爬虫框架-Scrapy" class="headerlink" title="1.学习爬虫框架 Scrapy"></a>1.学习爬虫框架 Scrapy</h4><ul>
<li>前几天一直在正Django的框架，现在基本上已经ok了，如果我们需要自己创建属于自己的网站、需要前台展示数据，后台可以编辑数据，可以插入到数据库，可以建立自己的数据类型，使用Django已经够了，那么现在有一个很重要的难题：数据从哪里来？怎么获取？如何存取？-&gt; <code>Scrapy</code>能够很好满足我们这些需求。</li>
<li>目前文档是线上最新的版本:<code>Scrapy 1.3</code>[<a href="https://docs.scrapy.org/en/latest/" target="_blank" rel="external">https://docs.scrapy.org/en/latest/</a>]</li>
</ul>
<h4 id="1-1-什么是Scrapy"><a href="#1-1-什么是Scrapy" class="headerlink" title="1.1 什么是Scrapy"></a>1.1 什么是Scrapy</h4><ul>
<li><code>scrapy</code>是一个web端抓取网站数据的框架，可以用来数据挖掘，信息处理等等</li>
</ul>
<a id="more"></a>
<h4 id="1-2-安装Scrapy"><a href="#1-2-安装Scrapy" class="headerlink" title="1.2 安装Scrapy"></a>1.2 安装Scrapy</h4><ul>
<li>安装scrapy官网建议两种途径：</li>
</ul>
<p>1.使用<code>conda</code>:<br><figure class="highlight cmake"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">conda <span class="keyword">install</span> -c conda-forge scrapy</div></pre></td></tr></table></figure></p>
<p>2.使用<code>pip</code>: </p>
<figure class="highlight cmake"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">pip <span class="keyword">install</span> Scrapy</div></pre></td></tr></table></figure>
<ul>
<li>官方建议，我们在安装<code>Scrapy</code>的时候，最好安装自己创建的虚拟环境中<code>a dedicated virtualenv</code>，这样至少不会与系统的包产生冲突。</li>
<li><code>virtualenv</code>的安装网址为：[<a href="http://sourabhbajaj.com/mac-setup/Python/virtualenv.html" target="_blank" rel="external">http://sourabhbajaj.com/mac-setup/Python/virtualenv.html</a>]</li>
</ul>
<figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//1.</span></div><div class="line">cd myproject/</div><div class="line"><span class="comment">//2.</span></div><div class="line">virtualenv venv </div><div class="line"><span class="comment">// 如果你的系统已经安装了python2已经python3，但是你现在想建立一个python3的环境</span></div><div class="line"><span class="comment">// virtualenv -p python3 envname</span></div><div class="line"><span class="comment">//3.</span></div><div class="line">source venv<span class="meta-keyword">/bin/</span>activate</div><div class="line"><span class="comment">//4.</span></div><div class="line">pip install Scrapy</div></pre></td></tr></table></figure>
<ul>
<li>执行完上面的4行命令，此时应该就可以安装好了<code>Scrapy</code>了。</li>
<li>执行一下<code>pip list</code>，看一下安装<code>scrapy</code>系统默认给我们安装了什么：</li>
</ul>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">(<span class="selector-tag">venv</span>) ➜  <span class="selector-tag">venv</span> <span class="selector-tag">pip</span> <span class="selector-tag">list</span></div><div class="line"><span class="selector-tag">Package</span>          <span class="selector-tag">Version</span></div><div class="line"><span class="selector-tag">----------------</span> <span class="selector-tag">-------</span></div><div class="line"><span class="selector-tag">appdirs</span>          1<span class="selector-class">.4</span><span class="selector-class">.3</span></div><div class="line"><span class="selector-tag">asn1crypto</span>       0<span class="selector-class">.22</span><span class="selector-class">.0</span></div><div class="line"><span class="selector-tag">attrs</span>            17<span class="selector-class">.1</span><span class="selector-class">.0</span></div><div class="line"><span class="selector-tag">Automat</span>          0<span class="selector-class">.6</span><span class="selector-class">.0</span></div><div class="line"><span class="selector-tag">cffi</span>             1<span class="selector-class">.10</span><span class="selector-class">.0</span></div><div class="line"><span class="selector-tag">constantly</span>       15<span class="selector-class">.1</span><span class="selector-class">.0</span></div><div class="line"><span class="selector-tag">cryptography</span>     1<span class="selector-class">.8</span><span class="selector-class">.1</span></div><div class="line"><span class="selector-tag">cssselect</span>        1<span class="selector-class">.0</span><span class="selector-class">.1</span></div><div class="line"><span class="selector-tag">enum34</span>           1<span class="selector-class">.1</span><span class="selector-class">.6</span></div><div class="line"><span class="selector-tag">idna</span>             2<span class="selector-class">.5</span></div><div class="line"><span class="selector-tag">incremental</span>      16<span class="selector-class">.10</span><span class="selector-class">.1</span></div><div class="line"><span class="selector-tag">ipaddress</span>        1<span class="selector-class">.0</span><span class="selector-class">.18</span></div><div class="line"><span class="selector-tag">lxml</span>             3<span class="selector-class">.7</span><span class="selector-class">.3</span></div><div class="line"><span class="selector-tag">packaging</span>        16<span class="selector-class">.8</span></div><div class="line"><span class="selector-tag">parsel</span>           1<span class="selector-class">.2</span><span class="selector-class">.0</span></div><div class="line"><span class="selector-tag">pip</span>              9<span class="selector-class">.0</span><span class="selector-class">.1</span></div><div class="line"><span class="selector-tag">pyasn1</span>           0<span class="selector-class">.2</span><span class="selector-class">.3</span></div><div class="line"><span class="selector-tag">pyasn1-modules</span>   0<span class="selector-class">.0</span><span class="selector-class">.8</span></div><div class="line"><span class="selector-tag">pycparser</span>        2<span class="selector-class">.17</span></div><div class="line"><span class="selector-tag">PyDispatcher</span>     2<span class="selector-class">.0</span><span class="selector-class">.5</span></div><div class="line"><span class="selector-tag">pyOpenSSL</span>        17<span class="selector-class">.0</span><span class="selector-class">.0</span></div><div class="line"><span class="selector-tag">pyparsing</span>        2<span class="selector-class">.2</span><span class="selector-class">.0</span></div><div class="line"><span class="selector-tag">queuelib</span>         1<span class="selector-class">.4</span><span class="selector-class">.2</span></div><div class="line"><span class="selector-tag">Scrapy</span>           1<span class="selector-class">.3</span><span class="selector-class">.3</span></div><div class="line"><span class="selector-tag">service-identity</span> 16<span class="selector-class">.0</span><span class="selector-class">.0</span></div><div class="line"><span class="selector-tag">setuptools</span>       35<span class="selector-class">.0</span><span class="selector-class">.2</span></div><div class="line"><span class="selector-tag">six</span>              1<span class="selector-class">.10</span><span class="selector-class">.0</span></div><div class="line"><span class="selector-tag">Twisted</span>          17<span class="selector-class">.1</span><span class="selector-class">.0</span></div><div class="line"><span class="selector-tag">w3lib</span>            1<span class="selector-class">.17</span><span class="selector-class">.0</span></div><div class="line"><span class="selector-tag">wheel</span>            0<span class="selector-class">.29</span><span class="selector-class">.0</span></div><div class="line"><span class="selector-tag">zope</span><span class="selector-class">.interface</span>   4<span class="selector-class">.4</span><span class="selector-class">.1</span></div></pre></td></tr></table></figure>
<ul>
<li><code>lxml</code>[<a href="http://lxml.de/" target="_blank" rel="external">http://lxml.de/</a>], 高效的<code>xml</code>和<code>html</code>的解析框架，最低版本为<code>3.4</code></li>
<li><code>parsel</code>[<a href="https://pypi.python.org/pypi/parsel" target="_blank" rel="external">https://pypi.python.org/pypi/parsel</a>] ,在lxml的封装，解析<code>html/xml</code>的数据</li>
<li><code>w3lib</code>[<a href="https://pypi.python.org/pypi/w3lib" target="_blank" rel="external">https://pypi.python.org/pypi/w3lib</a>], 处理页面的url以及encodings</li>
<li><code>twisted</code>[<a href="https://twistedmatrix.com/trac/" target="_blank" rel="external">https://twistedmatrix.com/trac/</a>], 异步的网络请求框架。最低版本为：<code>14.0</code></li>
<li><code>cryptography</code>和<code>pyOpenSSL</code>(最低版本为<code>0.14</code>) 多重网络安全</li>
</ul>
<h4 id="1-3-开始抓取数据："><a href="#1-3-开始抓取数据：" class="headerlink" title="1.3 开始抓取数据："></a>1.3 开始抓取数据：</h4><ul>
<li>现在我们开始爬取页面，这里就爬取一下这个页面：<code>http://quotes.toscrape.com/</code>，这个网站列举了很多著名的导演，这个抓取的目的有下面几个：</li>
</ul>
<ol>
<li>创建一个新的<code>Scrapy</code>对象.</li>
<li>写一个<code>spider</code>对象抓取网站，并且解析数据</li>
<li>用命令行导出抓取的数据</li>
<li>改变规则，递归的抓取数据</li>
<li>运用<code>spider</code>的参数</li>
</ol>
<h4 id="1-3-1-新建scrapy项目"><a href="#1-3-1-新建scrapy项目" class="headerlink" title="1.3.1 新建scrapy项目"></a>1.3.1 新建scrapy项目</h4><figure class="highlight crystal"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">/<span class="regexp">/1.</span></div><div class="line">scrapy startproject tutorial</div><div class="line"></div><div class="line">/<span class="regexp">/2.</span></div><div class="line">New Scrapy project 'tutorial', using template directory '/Users/gonghuan/Desktop/myproject/venv/<span class="class"><span class="keyword">lib</span>/<span class="title">python2</span>.7/<span class="title">site</span>-<span class="title">packages</span>/<span class="title">scrapy</span>/<span class="title">templates</span>/<span class="title">project</span>', <span class="title">created</span> <span class="title">in</span>:</span></div><div class="line">    /Users/gonghuan/Desktop/myproject/venv/tutorial</div><div class="line"></div><div class="line">You can start your first spider <span class="symbol">with:</span></div><div class="line">    cd tutorial</div><div class="line">    scrapy genspider example example.com</div></pre></td></tr></table></figure>
<h4 id="1-3-2-创建我们第一个spider"><a href="#1-3-2-创建我们第一个spider" class="headerlink" title="1.3.2 创建我们第一个spider"></a>1.3.2 创建我们第一个spider</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> scrapy</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">QuotesSpider</span><span class="params">(scrapy.Spider)</span>:</span></div><div class="line">    name = <span class="string">"quotes"</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">start_requests</span><span class="params">(self)</span>:</span></div><div class="line">        urls = [</div><div class="line">            <span class="string">'http://quotes.toscrape.com/page/1/'</span>,</div><div class="line">            <span class="string">'http://quotes.toscrape.com/page/2/'</span>,</div><div class="line">        ]</div><div class="line">        <span class="keyword">for</span> url <span class="keyword">in</span> urls:</div><div class="line">            <span class="keyword">yield</span> scrapy.Request(url=url, callback=self.parse)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span></div><div class="line">        page = response.url.split(<span class="string">"/"</span>)[<span class="number">-2</span>]</div><div class="line">        filename = <span class="string">'quotes-%s.html'</span> % page</div><div class="line">        <span class="keyword">with</span> open(filename, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</div><div class="line">            f.write(response.body)</div><div class="line">        self.log(<span class="string">'Saved file %s'</span> % filename)</div></pre></td></tr></table></figure>
<ul>
<li><code>spider</code>是<code>Scrapy</code>用来抓取数据的类</li>
<li>必须要继承<code>scrapy.Spider</code>，并且要初始化请求，抓取规则，解析数据的规则等等</li>
<li><code>name</code>被赋值为<code>quotes</code>,这是作为项目的唯一标示符，必须唯一的。</li>
<li><code>start_requests</code>的方法，必须要返回一个可以递归的<code>request</code>请求。</li>
<li><code>parse</code>的方法，用来处理下载下来的<code>response</code>，<code>response</code>的参数保存在<code>TextResponse</code>的实例中。</li>
<li><code>parse</code>的作用：1: 解析<code>response</code>,并将爬去下来的<code>dics</code>解析成我们需要的数据，2: 并且找到新的url数据，并且创建新的<code>request</code></li>
<li>最后执行<code>scrapy crawl quotes</code>,这个命令<code>quotes</code>就是我们刚才定义的name,然后他们将会向<code>quotes.toscrape.com</code>这个域名发起请求,终端也会出现下面的返回：</li>
</ul>
<figure class="highlight subunit"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">... (omitted for brevity)</div><div class="line">2016<span class="string">-12</span><span class="string">-16</span> 21:24:05 [scrapy.core.engine] INFO: Spider opened</div><div class="line">2016<span class="string">-12</span><span class="string">-16</span> 21:24:05 [scrapy.extensions.logstats] INFO: Crawled 0 pages (at 0 pages/min), scraped 0 items (at 0 items/min)</div><div class="line">2016<span class="string">-12</span><span class="string">-16</span> 21:24:05 [scrapy.extensions.telnet] DEBUG: Telnet console listening on 127.0.0.1:6023</div><div class="line">2016<span class="string">-12</span><span class="string">-16</span> 21:24:05 [scrapy.core.engine] DEBUG: Crawled (404) &lt;GET http://quotes.toscrape.com/robots.txt&gt; (referer: None)</div><div class="line">2016<span class="string">-12</span><span class="string">-16</span> 21:24:05 [scrapy.core.engine] DEBUG: Crawled (200) &lt;GET http://quotes.toscrape.com/page/1/&gt; (referer: None)</div><div class="line">2016<span class="string">-12</span><span class="string">-16</span> 21:24:05 [scrapy.core.engine] DEBUG: Crawled (200) &lt;GET http://quotes.toscrape.com/page/2/&gt; (referer: None)</div><div class="line">2016<span class="string">-12</span><span class="string">-16</span> 21:24:05 [quotes] DEBUG: Saved file quotes<span class="string">-1</span>.html</div><div class="line">2016<span class="string">-12</span><span class="string">-16</span> 21:24:05 [quotes] DEBUG: Saved file quotes<span class="string">-2</span>.html</div><div class="line">2016<span class="string">-12</span><span class="string">-16</span> 21:24:05 [scrapy.core.engine] INFO: Closing spider (finished)</div><div class="line">...</div></pre></td></tr></table></figure>
<ul>
<li>此时检查项目的文件夹，会出现<code>quotes-1.html、quotes-2.html</code>这样的两个文件，就代表已经成功抓取下来了。</li>
<li>刚才在<code>start_requests</code>的函数中，我们返回了<code>scrapy.Request</code>的对象，当这些请求一旦接受到服务器返回的<code>response</code>的时候，就会立刻调用callback的方法，也就是<code>parse</code>的方法，这个方法会包含刚才我们的请求的<code>url</code>以及相应的参数。</li>
</ul>
<h4 id="1-3-3-简写代码"><a href="#1-3-3-简写代码" class="headerlink" title="1.3.3 简写代码"></a>1.3.3 简写代码</h4><ul>
<li>其实我们发现<code>start_requests</code>其实就是通过对于的<code>url</code>生成相应的<code>scrapy.Request</code>的对象，但其实我们可以不用实现<code>start_requests</code>的方法，我们可以直接定义一个<code>start_urls</code>的列表，里面的元素就是相应的请求<code>url</code>,一旦你定义了这个对象，<code>start_requests</code>会默认从<code>start_urls</code>来获取<code>url</code></li>
<li>即使在你的代码中没有指定的callback函数，<code>parse</code>的函数也会默认来处理每个url发起的请求，主要也是因为<code>parse</code>是系统默认的方法（当你没有准确的指定callback）</li>
<li>修改为如下的代码：</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> scrapy</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">QuotesSpider</span><span class="params">(scrapy.Spider)</span>:</span></div><div class="line">    name = <span class="string">"quotes"</span></div><div class="line">    start_urls = [</div><div class="line">        <span class="string">'http://quotes.toscrape.com/page/1/'</span>,</div><div class="line">        <span class="string">'http://quotes.toscrape.com/page/2/'</span>,</div><div class="line">    ]</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span></div><div class="line">        page = response.url.split(<span class="string">"/"</span>)[<span class="number">-2</span>]</div><div class="line">        filename = <span class="string">'quotes-%s.html'</span> % page</div><div class="line">        <span class="keyword">with</span> open(filename, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</div><div class="line">            f.write(response.body)</div></pre></td></tr></table></figure>
<h4 id="1-3-4-解析数据"><a href="#1-3-4-解析数据" class="headerlink" title="1.3.4 解析数据"></a>1.3.4 解析数据</h4><ul>
<li>官方的建议，最好的解析是在<code>shell</code> [<a href="https://docs.scrapy.org/en/latest/topics/shell.html#topics-shell" target="_blank" rel="external">https://docs.scrapy.org/en/latest/topics/shell.html#topics-shell</a>] 的操作下，在我们刚才创建的虚拟环境下执行如下的脚本<code>scrapy shell &quot;http://quotes.toscrape.com/page/1/&quot;</code></li>
<li>看到如下的终端返回：</li>
</ul>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">[ ... Scrapy log here ... ]</div><div class="line"><span class="number">2016</span><span class="number">-09</span><span class="number">-19</span> <span class="number">12</span>:09:27 [<span class="name">scrapy.core.engine</span>] DEBUG: Crawled (<span class="name">200</span>) &lt;GET http://quotes.toscrape.com/page/1/&gt; (<span class="name">referer:</span> None)</div><div class="line">[<span class="name">s</span>] Available Scrapy objects:</div><div class="line">[<span class="name">s</span>]   scrapy     scrapy module (<span class="name">contains</span> scrapy.Request, scrapy.Selector, etc)</div><div class="line">[<span class="name">s</span>]   crawler    &lt;scrapy.crawler.Crawler object at <span class="number">0</span>x7fa91d888c90&gt;</div><div class="line">[<span class="name">s</span>]   item       &#123;&#125;</div><div class="line">[<span class="name">s</span>]   request    &lt;GET http://quotes.toscrape.com/page/1/&gt;</div><div class="line">[<span class="name">s</span>]   response   &lt;200 http://quotes.toscrape.com/page/1/&gt;</div><div class="line">[<span class="name">s</span>]   settings   &lt;scrapy.settings.Settings object at <span class="number">0</span>x7fa91d888c10&gt;</div><div class="line">[<span class="name">s</span>]   spider     &lt;DefaultSpider <span class="symbol">'default</span>' at <span class="number">0</span>x7fa91c8af990&gt;</div><div class="line">[<span class="name">s</span>] Useful shortcuts:</div><div class="line">[<span class="name">s</span>]   shelp()           Shell help (<span class="name">print</span> this help)</div><div class="line">[<span class="name">s</span>]   fetch(<span class="name">req_or_url</span>) Fetch request (<span class="name"><span class="builtin-name">or</span></span> URL) and update local objects</div><div class="line">[<span class="name">s</span>]   view(<span class="name">response</span>)    View response in a browser</div><div class="line">&gt;&gt;&gt;</div></pre></td></tr></table></figure>
<ul>
<li>我们如何获取<code>response</code>里面的元素呢？可以通过<code>css</code> [<a href="https://www.w3.org/TR/selectors/" target="_blank" rel="external">https://www.w3.org/TR/selectors/</a>]</li>
<li>执行<code>response.css(&#39;title&#39;)</code>,就可以在终端看到如下的返回：</li>
</ul>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">[&lt;Selector xpath='descendant-or-self::title' data='&lt;title&gt;Quotes to Scrape&lt;/title&gt;'&gt;]</span></div></pre></td></tr></table></figure>
<ul>
<li>执行<code>response.css(&#39;title&#39;)</code>返回的是一个类似列表的一个东西，这个东西叫做<code>SelectorList</code>,这个列表里面就是搜索的对象，这些对象是<code>Selector</code>,这些<code>Selector</code>就是包装这些<code>XML/HTML</code>的外壳。你可以直接通过<code>Selector</code>直接获得里面的值：</li>
</ul>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;</span>&gt; response.css(<span class="string">'title'</span>).extract()</div><div class="line">[<span class="string">'&lt;title&gt;Quotes to Scrape&lt;/title&gt;'</span>]</div></pre></td></tr></table></figure>
<ul>
<li>你会发现还是一个列表，不是我们想要的值，这时我们就需要对css进行过滤，添加<code>::text</code>，就表示我们想要的只是<code>&lt;title&gt;</code>标签中对应的值</li>
</ul>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;</span>&gt; response.css(<span class="string">'title::text'</span>).extract()</div><div class="line">[<span class="string">'Quotes to Scrape'</span>]</div></pre></td></tr></table></figure>
<ul>
<li>返回的还是一个列表，但是你确定你需要的是第一个元素的话，可以这样直接使用<code>extract_first</code>取得列表中的元素,这样为了避免产生<code>IndexError</code>：</li>
</ul>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;</span>&gt; response.css(<span class="string">'title::text'</span>).extract_first()</div><div class="line"><span class="string">'Quotes to Scrape'</span></div></pre></td></tr></table></figure>
<ul>
<li>除了使用<code>extract()</code>以及<code>extract_first()</code>,还是可以使用<code>re()</code>，就是通过正则来筛选解析的数据</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>response.css(<span class="string">'title::text'</span>).re(<span class="string">r'Quotes.*'</span>)</div><div class="line">[<span class="string">'Quotes to Scrape'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>response.css(<span class="string">'title::text'</span>).re(<span class="string">r'Q\w+'</span>)</div><div class="line">[<span class="string">'Quotes'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>response.css(<span class="string">'title::text'</span>).re(<span class="string">r'(\w+) to (\w+)'</span>)</div><div class="line">[<span class="string">'Quotes'</span>, <span class="string">'Scrape'</span>]</div></pre></td></tr></table></figure>
<h4 id="1-3-4-除了使用CSS，你也可以使用XPath来查找元素"><a href="#1-3-4-除了使用CSS，你也可以使用XPath来查找元素" class="headerlink" title="1.3.4 除了使用CSS，你也可以使用XPath来查找元素"></a>1.3.4 除了使用<code>CSS</code>，你也可以使用<code>XPath</code>来查找元素</h4><ul>
<li>例如：</li>
</ul>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; response.xpath('<span class="comment">//title')</span></div><div class="line"><span class="meta">[&lt;Selector xpath='//title' data='&lt;title&gt;Quotes to Scrape&lt;/title&gt;'&gt;]</span></div><div class="line">&gt;&gt;&gt; response.xpath('<span class="comment">//title/text()').extract_first()</span></div><div class="line">'Quotes <span class="keyword">to</span> Scrape'</div></pre></td></tr></table></figure>
<ul>
<li><code>XPath</code>是非常形象具体，并且功能强大的，<code>CSS</code>的选择器也是通过一些接口来转化为<code>XPath</code>的，虽然<code>XPath</code>没有<code>CSS</code>那么出名，但是它还是非常强大的，官方也是建议学习使用<code>XPath</code>，给出相关的链接：</li>
</ul>
<ol>
<li>[<a href="https://docs.scrapy.org/en/latest/topics/selectors.html#topics-selectors" target="_blank" rel="external">https://docs.scrapy.org/en/latest/topics/selectors.html#topics-selectors</a>]</li>
<li>[<a href="http://zvon.org/comp/r/tut-XPath_1.html" target="_blank" rel="external">http://zvon.org/comp/r/tut-XPath_1.html</a>]</li>
<li>[<a href="http://plasmasturm.org/log/xpath101/" target="_blank" rel="external">http://plasmasturm.org/log/xpath101/</a>]</li>
</ol>
<h4 id="1-3-5-解析数据"><a href="#1-3-5-解析数据" class="headerlink" title="1.3.5 解析数据"></a>1.3.5 解析数据</h4><ul>
<li>现在你已经知道了一些关于选择器，获取数据的方法，现在就可以完善我们之前的爬虫了</li>
<li>刚才我们爬去的的页面中，你会发现每个<code>http://quotes.toscrape.com</code>都含有一下的<code>html</code>：</li>
</ul>
<figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&lt;<span class="keyword">div</span> class=<span class="string">"quote"</span>&gt;</div><div class="line">    &lt;span class=<span class="string">"text"</span>&gt;“The world <span class="keyword">as</span> we have created <span class="keyword">it</span> is <span class="keyword">a</span> <span class="built_in">process</span> <span class="keyword">of</span> our</div><div class="line">    thinking. It cannot be changed <span class="keyword">without</span> changing our thinking.”&lt;/span&gt;</div><div class="line">    &lt;span&gt;</div><div class="line">        <span class="keyword">by</span> &lt;small class=<span class="string">"author"</span>&gt;Albert Einstein&lt;/small&gt;</div><div class="line">        &lt;<span class="keyword">a</span> href=<span class="string">"/author/Albert-Einstein"</span>&gt;(about)&lt;/<span class="keyword">a</span>&gt;</div><div class="line">    &lt;/span&gt;</div><div class="line">    &lt;<span class="keyword">div</span> class=<span class="string">"tags"</span>&gt;</div><div class="line">        Tags:</div><div class="line">        &lt;<span class="keyword">a</span> class=<span class="string">"tag"</span> href=<span class="string">"/tag/change/page/1/"</span>&gt;change&lt;/<span class="keyword">a</span>&gt;</div><div class="line">        &lt;<span class="keyword">a</span> class=<span class="string">"tag"</span> href=<span class="string">"/tag/deep-thoughts/page/1/"</span>&gt;deep-thoughts&lt;/<span class="keyword">a</span>&gt;</div><div class="line">        &lt;<span class="keyword">a</span> class=<span class="string">"tag"</span> href=<span class="string">"/tag/thinking/page/1/"</span>&gt;thinking&lt;/<span class="keyword">a</span>&gt;</div><div class="line">        &lt;<span class="keyword">a</span> class=<span class="string">"tag"</span> href=<span class="string">"/tag/world/page/1/"</span>&gt;world&lt;/<span class="keyword">a</span>&gt;</div><div class="line">    &lt;/<span class="keyword">div</span>&gt;</div><div class="line">&lt;/<span class="keyword">div</span>&gt;</div></pre></td></tr></table></figure>
<ul>
<li>还是通过<code>shell</code>的方法来测试，执行下面的代码:</li>
</ul>
<figure class="highlight gauss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//1.</span></div><div class="line">scrapy <span class="built_in">shell</span> 'http:<span class="comment">//quotes.toscrape.com</span></div><div class="line"><span class="comment">//2.</span></div><div class="line">response.css(<span class="string">"div.quote"</span>)</div></pre></td></tr></table></figure>
<ul>
<li>当然也可以把筛选后的数据，复制给每个变量：</li>
</ul>
<figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attr">quote</span> = response.css(<span class="string">"div.quote"</span>)[<span class="number">0</span>]</div></pre></td></tr></table></figure>
<ul>
<li>现在也可以通过解析<code>quote</code>来获得下面的值：<code>title</code>/<code>author</code>/<code>tag</code></li>
</ul>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;</span>&gt; title = quote.css(<span class="string">"span.text::text"</span>).extract_first()</div><div class="line"><span class="meta">&gt;&gt;</span>&gt; title</div><div class="line"><span class="string">'“The world as we have created it is a process of our thinking. It cannot be changed without changing our thinking.”'</span></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; author = quote.css(<span class="string">"small.author::text"</span>).extract_first()</div><div class="line"><span class="meta">&gt;&gt;</span>&gt; author</div><div class="line"><span class="string">'Albert Einstein'</span></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; tags = quote.css(<span class="string">"div.tags a.tag::text"</span>).extract()</div><div class="line"><span class="meta">&gt;&gt;</span>&gt; tags</div><div class="line">[<span class="string">'change'</span>, <span class="string">'deep-thoughts'</span>, <span class="string">'thinking'</span>, <span class="string">'world'</span>]</div></pre></td></tr></table></figure>
<ul>
<li>已经可以知道我们是如何来获取数据的了，现在我们就可以遍历循环，并且将爬去下来的数据插入到我们的Python的字典数据结构中：</li>
</ul>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; <span class="keyword">for</span> <span class="selector-tag">quote</span> <span class="keyword">in</span> response.css(<span class="string">"div.quote"</span>):</div><div class="line">...     text = <span class="selector-tag">quote</span>.css(<span class="string">"span.text::text"</span>).extract_first()</div><div class="line">...     author = <span class="selector-tag">quote</span>.css(<span class="string">"small.author::text"</span>).extract_first()</div><div class="line">...     tags = <span class="selector-tag">quote</span>.css(<span class="string">"div.tags a.tag::text"</span>).extract()</div><div class="line">...     print(dict(text=text, author=author, tags=tags))</div><div class="line">&#123;<span class="string">'tags'</span>: [<span class="string">'change'</span>, <span class="string">'deep-thoughts'</span>, <span class="string">'thinking'</span>, <span class="string">'world'</span>], <span class="string">'author'</span>: <span class="string">'Albert Einstein'</span>, <span class="string">'text'</span>: <span class="string">'“The world as we have created it is a process of our thinking. It cannot be changed without changing our thinking.”'</span>&#125;</div><div class="line">&#123;<span class="string">'tags'</span>: [<span class="string">'abilities'</span>, <span class="string">'choices'</span>], <span class="string">'author'</span>: <span class="string">'J.K. Rowling'</span>, <span class="string">'text'</span>: <span class="string">'“It is our choices, Harry, that show what we truly are, far more than our abilities.”'</span>&#125;</div><div class="line">    ... <span class="selector-tag">a</span> few more of these, omitted <span class="keyword">for</span> brevity</div><div class="line">&gt;&gt;&gt;</div></pre></td></tr></table></figure>
<h4 id="1-3-5-更新我们的spide代码："><a href="#1-3-5-更新我们的spide代码：" class="headerlink" title="1.3.5 更新我们的spide代码："></a>1.3.5 更新我们的spide代码：</h4><ul>
<li>现在回到我们之前新建的<code>spider</code>的项目中去，到目前为止，我们还真正去获取任何的数据，我们只是做了一件事情，就是讲页面的<code>html</code>的代码保存在本地，我们可以将每个页面的数据，爬去下来，并且将这些数据放下Python的字典的数据结构中，并且返回回去。代码如下：</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> scrapy</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">QuotesSpider</span><span class="params">(scrapy.Spider)</span>:</span></div><div class="line">    name = <span class="string">"quotes"</span></div><div class="line">    start_urls = [</div><div class="line">        <span class="string">'http://quotes.toscrape.com/page/1/'</span>,</div><div class="line">        <span class="string">'http://quotes.toscrape.com/page/2/'</span>,</div><div class="line">    ]</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span></div><div class="line">        <span class="keyword">for</span> quote <span class="keyword">in</span> response.css(<span class="string">'div.quote'</span>):</div><div class="line">            <span class="keyword">yield</span> &#123;</div><div class="line">                <span class="string">'text'</span>: quote.css(<span class="string">'span.text::text'</span>).extract_first(),</div><div class="line">                <span class="string">'author'</span>: quote.css(<span class="string">'small.author::text'</span>).extract_first(),</div><div class="line">                <span class="string">'tags'</span>: quote.css(<span class="string">'div.tags a.tag::text'</span>).extract(),</div><div class="line">            &#125;</div></pre></td></tr></table></figure>
<ul>
<li>运行之后看到如下的返回：</li>
</ul>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="number">2016</span>-<span class="number">09</span>-<span class="number">19</span> <span class="number">18</span>:<span class="number">57</span>:<span class="number">19</span> [scrapy<span class="selector-class">.core</span><span class="selector-class">.scraper</span>] DEBUG: Scraped from &lt;<span class="number">200</span> http:<span class="comment">//quotes.toscrape.com/page/1/&gt;</span></div><div class="line">&#123;<span class="string">'tags'</span>: [<span class="string">'life'</span>, <span class="string">'love'</span>], <span class="string">'author'</span>: <span class="string">'André Gide'</span>, <span class="string">'text'</span>: <span class="string">'“It is better to be hated for what you are than to be loved for what you are not.”'</span>&#125;</div><div class="line"><span class="number">2016</span>-<span class="number">09</span>-<span class="number">19</span> <span class="number">18</span>:<span class="number">57</span>:<span class="number">19</span> [scrapy<span class="selector-class">.core</span><span class="selector-class">.scraper</span>] DEBUG: Scraped from &lt;<span class="number">200</span> http:<span class="comment">//quotes.toscrape.com/page/1/&gt;</span></div><div class="line">&#123;<span class="string">'tags'</span>: [<span class="string">'edison'</span>, <span class="string">'failure'</span>, <span class="string">'inspirational'</span>, <span class="string">'paraphrased'</span>], <span class="string">'author'</span>: <span class="string">'Thomas A. Edison'</span>, <span class="string">'text'</span>: <span class="string">"“I have not failed. I've just found 10,000 ways that won't work.”"</span>&#125;</div></pre></td></tr></table></figure>
<h4 id="1-3-6-保存数据"><a href="#1-3-6-保存数据" class="headerlink" title="1.3.6 保存数据"></a>1.3.6 保存数据</h4><ul>
<li>最简单的保存形式就是通过<code>Feed exports</code> [<a href="https://docs.scrapy.org/en/latest/topics/feed-exports.html#topics-feed-exports" target="_blank" rel="external">https://docs.scrapy.org/en/latest/topics/feed-exports.html#topics-feed-exports</a>]</li>
<li>这里我们可以执行下面的代码保存为<code>json</code>的格式：</li>
</ul>
<figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">scrapy crawl <span class="attribute">quotes</span> -o <span class="attribute">quotes</span><span class="selector-class">.json</span></div></pre></td></tr></table></figure>
<ul>
<li>此时在文件中就会出现一个名叫<code>quotes.json</code>的文件，其实就是我们刚才爬去下来的数据。</li>
<li>其实在一些简单的爬虫项目中，这样写，其实已经足够了，但是在一些复杂的大型项目中，可以写<code>Item Pipeline</code>[<a href="https://docs.scrapy.org/en/latest/topics/item-pipeline.html#topics-item-pipeline" target="_blank" rel="external">https://docs.scrapy.org/en/latest/topics/item-pipeline.html#topics-item-pipeline</a>], 其实这个功能就是对应的项目的中<code>tutorial/pipelines.py</code>, <code>scrapy</code>项目默认会帮你创建的。</li>
</ul>
<h4 id="1-3-7-获取更多的url"><a href="#1-3-7-获取更多的url" class="headerlink" title="1.3.7 获取更多的url"></a>1.3.7 获取更多的url</h4><ul>
<li>其实刚才在项目中，我们只是爬去了两个url，并且也知道如何去解析他们，但是可能我们需要的是爬去整个网站的url，比如我们在爬去一个页面的时候，遇到这样的<code>html</code>,我们就需要计算并且获取对应的<code>url</code>:</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;ul <span class="class"><span class="keyword">class</span></span>=<span class="string">"pager"</span>&gt;</div><div class="line">    <span class="xml"><span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"next"</span>&gt;</span></span></div><div class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/page/2/"</span>&gt;</span>Next <span class="tag">&lt;<span class="name">span</span> <span class="attr">aria-hidden</span>=<span class="string">"true"</span>&gt;</span>&amp;rarr;<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">&lt;<span class="regexp">/ul&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>此时你可能需要获取的是<code>a</code>里面对应的<code>href</code>的值：</li>
</ul>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;</span>&gt; response.css(<span class="string">'li.next a::attr(href)'</span>).extract_first()</div><div class="line"><span class="string">'/page/2/'</span></div></pre></td></tr></table></figure>
<ul>
<li>现在我们可以修改我们的spider的代码了，并且不需要指定几个url了，我们需要将这些逻辑都放到<code>parse</code>的函数中去：</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> scrapy</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">QuotesSpider</span><span class="params">(scrapy.Spider)</span>:</span></div><div class="line">    name = <span class="string">"quotes"</span></div><div class="line">    start_urls = [</div><div class="line">        <span class="string">'http://quotes.toscrape.com/page/1/'</span>,</div><div class="line">    ]</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span></div><div class="line">        <span class="keyword">for</span> quote <span class="keyword">in</span> response.css(<span class="string">'div.quote'</span>):</div><div class="line">            <span class="keyword">yield</span> &#123;</div><div class="line">                <span class="string">'text'</span>: quote.css(<span class="string">'span.text::text'</span>).extract_first(),</div><div class="line">                <span class="string">'author'</span>: quote.css(<span class="string">'small.author::text'</span>).extract_first(),</div><div class="line">                <span class="string">'tags'</span>: quote.css(<span class="string">'div.tags a.tag::text'</span>).extract(),</div><div class="line">            &#125;</div><div class="line"></div><div class="line">        next_page = response.css(<span class="string">'li.next a::attr(href)'</span>).extract_first()</div><div class="line">        <span class="keyword">if</span> next_page <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</div><div class="line">            next_page = response.urljoin(next_page)</div><div class="line">            <span class="keyword">yield</span> scrapy.Request(next_page, callback=self.parse)</div></pre></td></tr></table></figure>
<ul>
<li>上面的代码很容易看出，当解析完数据之后，我们就会寻找<code>下一页</code>的<code>url</code>,并且发现这里写的是一个相对的url，这里可以通过<code>urljoin()</code>这个函数来拼接url，并且<code>yields</code>回去一个新的request，当拿到的<code>respsonse</code>又会回到<code>parse</code>的函数中来解析</li>
<li>scrapy的下载机制：当你<code>yields</code>一个新的请求，scrapy会发送改请求，并注册一个回调方法，以便在完成的时候能够解析他。</li>
</ul>
<h4 id="1-3-8-简化发送的请求"><a href="#1-3-8-简化发送的请求" class="headerlink" title="1.3.8 简化发送的请求"></a>1.3.8 简化发送的请求</h4><ul>
<li>为了简化发送的请求，我们可以用<code>response.follow</code>, 而不是新建一个新的<code>Request</code></li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> scrapy</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">QuotesSpider</span><span class="params">(scrapy.Spider)</span>:</span></div><div class="line">    name = <span class="string">"quotes"</span></div><div class="line">    start_urls = [</div><div class="line">        <span class="string">'http://quotes.toscrape.com/page/1/'</span>,</div><div class="line">    ]</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span></div><div class="line">        <span class="keyword">for</span> quote <span class="keyword">in</span> response.css(<span class="string">'div.quote'</span>):</div><div class="line">            <span class="keyword">yield</span> &#123;</div><div class="line">                <span class="string">'text'</span>: quote.css(<span class="string">'span.text::text'</span>).extract_first(),</div><div class="line">                <span class="string">'author'</span>: quote.css(<span class="string">'span small::text'</span>).extract_first(),</div><div class="line">                <span class="string">'tags'</span>: quote.css(<span class="string">'div.tags a.tag::text'</span>).extract(),</div><div class="line">            &#125;</div><div class="line"></div><div class="line">        next_page = response.css(<span class="string">'li.next a::attr(href)'</span>).extract_first()</div><div class="line">        <span class="keyword">if</span> next_page <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</div><div class="line">            <span class="keyword">yield</span> response.follow(next_page, callback=self.parse)</div></pre></td></tr></table></figure>
<ul>
<li>与<code>scrapy.Request</code>不同，<code>response.follow</code>是支持相对路径，其实就是这个<code>follow</code>它会替我们做<code>response.urljoin</code>,并且<code>response.follow</code>返回是一个<code>Request</code>的实例。</li>
<li>之前的代码，取的是列表中的第一项元素，但是我们也可以枚举这个列表，来调用<code>response.follow</code></li>
</ul>
<figure class="highlight rust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> href <span class="keyword">in</span> response.css(<span class="symbol">'li</span>.next a::attr(href)'):</div><div class="line">    <span class="keyword">yield</span> response.follow(href, callback=<span class="keyword">self</span>.parse)</div><div class="line">    </div><div class="line"><span class="comment">// 也可以进行简写</span></div><div class="line"><span class="keyword">for</span> a <span class="keyword">in</span> response.css(<span class="symbol">'li</span>.next a'):</div><div class="line">    <span class="keyword">yield</span> response.follow(a, callback=<span class="keyword">self</span>.parse)</div></pre></td></tr></table></figure>
<ul>
<li>对于抓取作者信息，我们可以自定义自己的回调函数</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> scrapy</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">AuthorSpider</span><span class="params">(scrapy.Spider)</span>:</span></div><div class="line">    name = <span class="string">'author'</span></div><div class="line"></div><div class="line">    start_urls = [<span class="string">'http://quotes.toscrape.com/'</span>]</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span></div><div class="line">        <span class="comment"># follow links to author pages</span></div><div class="line">        <span class="keyword">for</span> href <span class="keyword">in</span> response.css(<span class="string">'.author + a::attr(href)'</span>):</div><div class="line">            <span class="keyword">yield</span> response.follow(href, self.parse_author)</div><div class="line"></div><div class="line">        <span class="comment"># follow pagination links</span></div><div class="line">        <span class="keyword">for</span> href <span class="keyword">in</span> response.css(<span class="string">'li.next a::attr(href)'</span>):</div><div class="line">            <span class="keyword">yield</span> response.follow(href, self.parse)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse_author</span><span class="params">(self, response)</span>:</span></div><div class="line">        <span class="function"><span class="keyword">def</span> <span class="title">extract_with_css</span><span class="params">(query)</span>:</span></div><div class="line">            <span class="keyword">return</span> response.css(query).extract_first().strip()</div><div class="line"></div><div class="line">        <span class="keyword">yield</span> &#123;</div><div class="line">            <span class="string">'name'</span>: extract_with_css(<span class="string">'h3.author-title::text'</span>),</div><div class="line">            <span class="string">'birthdate'</span>: extract_with_css(<span class="string">'.author-born-date::text'</span>),</div><div class="line">            <span class="string">'bio'</span>: extract_with_css(<span class="string">'.author-description::text'</span>),</div><div class="line">        &#125;</div></pre></td></tr></table></figure>
<ul>
<li>这里当找到<code>author</code>相关的链接，我们会回调我们自定义的函数<code>parse_author</code>,在这个函数里，我们顶一个帮助函数，帮助我们具体还获取里面的值，在<code>parse</code>函数中，我们会找到下一页的请求，然后继续发送请求，回调函数还是我们的<code>parse</code>的函数.</li>
<li>这里有个关键的问题，我们不需要担心同一个<code>url</code>发送多次，易导致进入死循环，<code>Scrapy</code>默认是能够过滤已经请求过的url，并且你还可以通过在<code>settings.py</code>的文件中设置<code>DUPEFILTER_CLASS</code> [<a href="https://docs.scrapy.org/en/latest/topics/settings.html#std:setting-DUPEFILTER_CLASS]。" target="_blank" rel="external">https://docs.scrapy.org/en/latest/topics/settings.html#std:setting-DUPEFILTER_CLASS]。</a></li>
</ul>
<h4 id="1-3-9-在spider中传递参数"><a href="#1-3-9-在spider中传递参数" class="headerlink" title="1.3.9 在spider中传递参数"></a>1.3.9 在spider中传递参数</h4><ul>
<li>我们可以通过下面的<code>-a</code>来传递参数，这些参数默认是传递到Spider中的<code>__init__</code>函数中去，并且能够成为spider的属性值</li>
</ul>
<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">scrapy </span>crawl quotes -o quotes-humor.<span class="keyword">json </span>-a tag=humor</div></pre></td></tr></table></figure>
<ul>
<li>例如上面的命令，我传递了<code>tag</code>的值，这样我就可以在我的spider项目中能够通过<code>self.tag</code>来获取传进来的值，也可以通过这样的值来请求准确url,其实就是请求的是这样的url: <code>http://quotes.toscrape.com/tag/humor</code></li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> scrapy</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">QuotesSpider</span><span class="params">(scrapy.Spider)</span>:</span></div><div class="line">    name = <span class="string">"quotes"</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">start_requests</span><span class="params">(self)</span>:</span></div><div class="line">        url = <span class="string">'http://quotes.toscrape.com/'</span></div><div class="line">        tag = getattr(self, <span class="string">'tag'</span>, <span class="keyword">None</span>)</div><div class="line">        <span class="keyword">if</span> tag <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</div><div class="line">            url = url + <span class="string">'tag/'</span> + tag</div><div class="line">        <span class="keyword">yield</span> scrapy.Request(url, self.parse)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span></div><div class="line">        <span class="keyword">for</span> quote <span class="keyword">in</span> response.css(<span class="string">'div.quote'</span>):</div><div class="line">            <span class="keyword">yield</span> &#123;</div><div class="line">                <span class="string">'text'</span>: quote.css(<span class="string">'span.text::text'</span>).extract_first(),</div><div class="line">                <span class="string">'author'</span>: quote.css(<span class="string">'small.author::text'</span>).extract_first(),</div><div class="line">            &#125;</div><div class="line"></div><div class="line">        next_page = response.css(<span class="string">'li.next a::attr(href)'</span>).extract_first()</div><div class="line">        <span class="keyword">if</span> next_page <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;1-学习爬虫框架-Scrapy&quot;&gt;&lt;a href=&quot;#1-学习爬虫框架-Scrapy&quot; class=&quot;headerlink&quot; title=&quot;1.学习爬虫框架 Scrapy&quot;&gt;&lt;/a&gt;1.学习爬虫框架 Scrapy&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;前几天一直在正Django的框架，现在基本上已经ok了，如果我们需要自己创建属于自己的网站、需要前台展示数据，后台可以编辑数据，可以插入到数据库，可以建立自己的数据类型，使用Django已经够了，那么现在有一个很重要的难题：数据从哪里来？怎么获取？如何存取？-&amp;gt; &lt;code&gt;Scrapy&lt;/code&gt;能够很好满足我们这些需求。&lt;/li&gt;
&lt;li&gt;目前文档是线上最新的版本:&lt;code&gt;Scrapy 1.3&lt;/code&gt;[&lt;a href=&quot;https://docs.scrapy.org/en/latest/&quot;&gt;https://docs.scrapy.org/en/latest/&lt;/a&gt;]&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;1-1-什么是Scrapy&quot;&gt;&lt;a href=&quot;#1-1-什么是Scrapy&quot; class=&quot;headerlink&quot; title=&quot;1.1 什么是Scrapy&quot;&gt;&lt;/a&gt;1.1 什么是Scrapy&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;scrapy&lt;/code&gt;是一个web端抓取网站数据的框架，可以用来数据挖掘，信息处理等等&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="日志" scheme="http://www.ghcoder.com/categories/%E6%97%A5%E5%BF%97/"/>
    
    
      <category term="Python、Scrapy" scheme="http://www.ghcoder.com/tags/Python%E3%80%81Scrapy/"/>
    
  </entry>
  
  <entry>
    <title>学习Django第五/六部分，基本的测试用例[官网教程]</title>
    <link href="http://www.ghcoder.com/2017/05/17/20170517/"/>
    <id>http://www.ghcoder.com/2017/05/17/20170517/</id>
    <published>2017-05-17T10:37:12.000Z</published>
    <updated>2017-05-18T02:39:18.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="经过前四部分的学习，此时我们已经创建了我们第一个app：polls-并且根据我们自己的需求，修改了url，修改了对应的view函数，连接数据库，插入数据库相应的数据，并将数据库里的数据捞出来，显示在模板上，这似乎就是我们在前四部分做的事情，说起来简单，但是做好、做精细却不容易。下面我们会为我们的app提供测试的功能。"><a href="#经过前四部分的学习，此时我们已经创建了我们第一个app：polls-并且根据我们自己的需求，修改了url，修改了对应的view函数，连接数据库，插入数据库相应的数据，并将数据库里的数据捞出来，显示在模板上，这似乎就是我们在前四部分做的事情，说起来简单，但是做好、做精细却不容易。下面我们会为我们的app提供测试的功能。" class="headerlink" title="经过前四部分的学习，此时我们已经创建了我们第一个app：polls, 并且根据我们自己的需求，修改了url，修改了对应的view函数，连接数据库，插入数据库相应的数据，并将数据库里的数据捞出来，显示在模板上，这似乎就是我们在前四部分做的事情，说起来简单，但是做好、做精细却不容易。下面我们会为我们的app提供测试的功能。"></a>经过前四部分的学习，此时我们已经创建了我们第一个app：polls, 并且根据我们自己的需求，修改了url，修改了对应的view函数，连接数据库，插入数据库相应的数据，并将数据库里的数据捞出来，显示在模板上，这似乎就是我们在前四部分做的事情，说起来简单，但是做好、做精细却不容易。下面我们会为我们的app提供测试的功能。</h3><h4 id="1-1-什么是自动测试"><a href="#1-1-什么是自动测试" class="headerlink" title="1.1 什么是自动测试"></a>1.1 什么是自动测试</h4><ul>
<li>测试是对代码对好检测，测试能够针对不同层面进行测试(1.对某个特定的方法是否按照预期返回都能够进行测试。2.有的人会对整个项目的整体操作做相应的测试<code>用户输入具体的某些值，得到预期的一些值</code>)，其实这里的测试与第二部分运用<code>shell</code>的操作是差不多的。</li>
<li>而自动化测试区别在于，一旦你的自动化测试生成了之后，当你修改了代码之后，你不需要再花时间人工去测试，自动可以测试你的代码。</li>
</ul>
<a id="more"></a>
<h4 id="1-2-写第一个测试用例"><a href="#1-2-写第一个测试用例" class="headerlink" title="1.2 写第一个测试用例"></a>1.2 写第一个测试用例</h4><ul>
<li><code>polls</code>的应用存在一些小bug，在<code>Question</code>的Model中定义了这样一个方法，这个方法能够判断我们发布的时间是不是在一天之内的，如果在一天之内就会返回<code>True</code>，否则就是<code>False</code>：</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">was_published_recently</span><span class="params">(self)</span>:</span>                                                                                          </div><div class="line">         <span class="keyword">return</span> self.pub_date &gt;= timezone.now() - datetime.timedelta(days=<span class="number">1</span>)</div></pre></td></tr></table></figure>
<ul>
<li>运用<code>shell</code>,在终端输入<code>python manager.py shell</code>，然后再输入下面的代码：</li>
</ul>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;</span>&gt; import datetime</div><div class="line"><span class="meta">&gt;&gt;</span>&gt; from django.utils import timezone</div><div class="line"><span class="meta">&gt;&gt;</span>&gt; from polls.models import Question</div><div class="line"><span class="meta">&gt;&gt;</span>&gt; <span class="comment"># create a Question instance with pub_date 30 days in the future</span></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; future_question = Question(pub_date=timezone.now() + datetime.timedelta(days=<span class="number">30</span>))</div><div class="line"><span class="meta">&gt;&gt;</span>&gt; <span class="comment"># was it published recently?</span></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; future_question.was_published_recently()</div><div class="line">True</div></pre></td></tr></table></figure>
<ul>
<li>这个显然是错误的，距离我发布的时间30天，应该返回<code>false</code></li>
<li>开始写自动化测试来发现暴露这个bug，至少在今后，不会再出现类似的问题了。</li>
<li>打开<code>polls/tests.py</code>的文件，添加如下的代码：</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> datetime</div><div class="line"></div><div class="line"><span class="keyword">from</span> django.utils <span class="keyword">import</span> timezone</div><div class="line"><span class="keyword">from</span> django.test <span class="keyword">import</span> TestCase</div><div class="line"></div><div class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Question</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">QuestionMethodTests</span><span class="params">(TestCase)</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_was_published_recently_with_future_question</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        was_published_recently() should return False for questions whose</div><div class="line">        pub_date is in the future.</div><div class="line">        """</div><div class="line">        time = timezone.now() + datetime.timedelta(days=<span class="number">30</span>)</div><div class="line">        future_question = Question(pub_date=time)</div><div class="line">        self.assertIs(future_question.was_published_recently(), <span class="keyword">False</span>)</div></pre></td></tr></table></figure>
<ul>
<li>这里创建了一个<code>django.test.TestCase</code>的子类，实例化了一个<code>Question</code>的对象，通过传入一个<code>time</code>的参数，然后断言<code>question</code>的<code>was_published_recently()</code>返回的为<code>false</code></li>
<li>执行<code>python manage.py test polls</code></li>
</ul>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">Creating test database for alias 'default'...</div><div class="line">System <span class="keyword">check</span> <span class="keyword">identified</span> <span class="keyword">no</span> issues (<span class="number">0</span> silenced).</div><div class="line">F</div><div class="line">======================================================================</div><div class="line">FAIL: test_was_published_recently_with_future_question (polls.tests.QuestionMethodTests)</div><div class="line"><span class="comment">----------------------------------------------------------------------</span></div><div class="line">Traceback (most recent <span class="keyword">call</span> <span class="keyword">last</span>):</div><div class="line">  <span class="keyword">File</span> <span class="string">"/path/to/mysite/polls/tests.py"</span>, line <span class="number">16</span>, <span class="keyword">in</span> test_was_published_recently_with_future_question</div><div class="line">    self.assertIs(future_question.was_published_recently(), <span class="literal">False</span>)</div><div class="line">AssertionError: <span class="literal">True</span> <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">False</span></div><div class="line"></div><div class="line"><span class="comment">----------------------------------------------------------------------</span></div><div class="line">Ran <span class="number">1</span> <span class="keyword">test</span> <span class="keyword">in</span> <span class="number">0.001</span>s</div><div class="line"></div><div class="line"><span class="keyword">FAILED</span> (failures=<span class="number">1</span>)</div><div class="line">Destroying <span class="keyword">test</span> <span class="keyword">database</span> <span class="keyword">for</span> <span class="keyword">alias</span> <span class="string">'default'</span>...</div></pre></td></tr></table></figure>
<ul>
<li>执行<code>python manage.py test polls</code>是让Django去在<code>polls</code>这个app 应用中查找<code>你写的测试用例</code>，当<code>Django</code>查找到<code>django.test.TestCase</code>的子类，Django将会为这个测试创建一些数据，Django接着去寻找以<code>test</code>开头的测试方法,在刚才我们创建的<code>test_was_published_recently_with_future_question</code>这个函数，第二行中，传入了一个<code>pub_date</code>创建了一个<code>Question</code>的实例对象，接着就断言<code>question</code>的<code>was_published_recently()</code>返回为<code>False</code>, 但是实际上返回的是<code>True</code>,这也就是导致我们断言失败的原因所在。</li>
</ul>
<h4 id="1-3-修改bug"><a href="#1-3-修改bug" class="headerlink" title="1.3 修改bug"></a>1.3 修改bug</h4><ul>
<li>此时我们已经知道了如果我们设置的<code>pub_date</code>是将来的时间的话，<code>Question.was_published_recently()</code>就应该返回的是<code>False</code>,所以打开<code>polls/models.py</code>修改为：</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">was_published_recently</span><span class="params">(self)</span>:</span></div><div class="line">    now = timezone.now()</div><div class="line">    <span class="keyword">return</span> now - datetime.timedelta(days=<span class="number">1</span>) &lt;= self.pub_date &lt;= now</div></pre></td></tr></table></figure>
<ul>
<li>再次执行<code>python manage.py test polls</code>就会得到下面的正确反馈：</li>
</ul>
<figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">GhCoder_Site python manage.py test polls</div><div class="line"><span class="function"><span class="title">Creating</span></span> test database <span class="keyword">for</span> <span class="keyword">alias</span> <span class="string">'default'</span>...</div><div class="line"><span class="keyword">System</span> check identified <span class="keyword">no</span> issues (<span class="number">0</span> silenced).</div><div class="line">.</div><div class="line">----------------------------------------------------------------------</div><div class="line">Ran <span class="number">1</span> test in <span class="number">0.002</span>s</div><div class="line"></div><div class="line">OK</div><div class="line"><span class="function"><span class="title">Destroying</span></span> test database <span class="keyword">for</span> <span class="keyword">alias</span> <span class="string">'default'</span>...</div></pre></td></tr></table></figure>
<h4 id="1-4-更全面的测试"><a href="#1-4-更全面的测试" class="headerlink" title="1.4 更全面的测试"></a>1.4 更全面的测试</h4><ul>
<li>依旧测试<code>was_published_recently()</code>这个函数，让我们的测试更加全面，添加如下的两个方法：</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_was_published_recently_with_old_question</span><span class="params">(self)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    was_published_recently() should return False for questions whose</div><div class="line">    pub_date is older than 1 day.</div><div class="line">    """</div><div class="line">    time = timezone.now() - datetime.timedelta(days=<span class="number">30</span>)</div><div class="line">    old_question = Question(pub_date=time)</div><div class="line">    self.assertIs(old_question.was_published_recently(), <span class="keyword">False</span>)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_was_published_recently_with_recent_question</span><span class="params">(self)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    was_published_recently() should return True for questions whose</div><div class="line">    pub_date is within the last day.</div><div class="line">    """</div><div class="line">    time = timezone.now() - datetime.timedelta(hours=<span class="number">1</span>)</div><div class="line">    recent_question = Question(pub_date=time)</div><div class="line">    self.assertIs(recent_question.was_published_recently(), <span class="keyword">True</span>)</div></pre></td></tr></table></figure>
<ul>
<li>这里我们添加了超过一天的数据，以及一天之内的数据，测试返回回来都和我们的断言是一样的，这样我就能更加保证我们的代码没有问题了。</li>
</ul>
<h4 id="1-5-测试View"><a href="#1-5-测试View" class="headerlink" title="1.5 测试View"></a>1.5 测试View</h4><ul>
<li>之前我们的测试都是测试驱动的标准来写测试的，但是这也并不能涵盖我们所有的代码，<code>测试驱动</code>我们重点去关心具体的代码实现，但是<code>测试view</code>的话，我们重点是通过浏览器来模拟用户进行测试。</li>
</ul>
<h5 id="1-5-1-Django测试客户端"><a href="#1-5-1-Django测试客户端" class="headerlink" title="1.5.1 Django测试客户端"></a>1.5.1 Django测试客户端</h5><ul>
<li>Django是提供测试客户端来模拟用户来具体与<code>view</code>进行交互，我们可以在<code>tests.py</code>文件中写代码，也可以通过<code>shell</code>来完成。</li>
<li>其实说白了就是看不到界面，完全是通过<code>shell</code>脚本来模拟请求，能够正常解析到<code>response</code>、<code>response_code</code>、<code>response.content</code>、<code>response.context</code>等等</li>
<li>我们先通过<code>shell</code>来完成<code>测试环境</code>的设置:</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">//<span class="number">1.</span></div><div class="line">python manager.py shell</div><div class="line"></div><div class="line">//<span class="number">2.</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> django.test.utils <span class="keyword">import</span> setup_test_environment</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>setup_test_environment()</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> django.test <span class="keyword">import</span> Client</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># create an instance of the client for our use</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>client = Client()</div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># get a response from '/'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>response = client.get(<span class="string">'/'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># we should expect a 404 from that address; if you instead see an</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># "Invalid HTTP_HOST header" error and a 400 response, you probably</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># omitted the setup_test_environment() call described earlier.</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>response.status_code</div><div class="line"><span class="number">404</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># on the other hand we should expect to find something at '/polls/'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># we'll use 'reverse()' rather than a hardcoded URL</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> django.urls <span class="keyword">import</span> reverse</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>response = client.get(reverse(<span class="string">'polls:index'</span>))</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>response.status_code</div><div class="line"><span class="number">200</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>response.content</div><div class="line"><span class="string">b'\n    &lt;ul&gt;\n    \n        &lt;li&gt;&lt;a href="/polls/1/"&gt;What&amp;#39;s up?&lt;/a&gt;&lt;/li&gt;\n    \n    &lt;/ul&gt;\n\n'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>response.context[<span class="string">'latest_question_list'</span>]</div><div class="line">&lt;QuerySet [&lt;Question: What<span class="string">'s up?&gt;]&gt;</span></div></pre></td></tr></table></figure>
<h5 id="1-5-2-改善我们的View"><a href="#1-5-2-改善我们的View" class="headerlink" title="1.5.2 改善我们的View"></a>1.5.2 改善我们的View</h5><ul>
<li>在第四部分的时候，我们依据类的形式来创建了view,在<code>polls/views.py</code>的文件中：</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">IndexView</span><span class="params">(generic.ListView)</span>:</span></div><div class="line">    template_name = <span class="string">'polls/index.html'</span></div><div class="line">    context_object_name = <span class="string">'latest_question_list'</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_queryset</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="string">"""Return the last five published questions."""</span></div><div class="line">        <span class="keyword">return</span> Question.objects.order_by(<span class="string">'-pub_date'</span>)[:<span class="number">5</span>]</div></pre></td></tr></table></figure>
<ul>
<li>这是之前的代码，我们现在想修改<code>get_queryset</code>这个方法，之前是返回最后的5条数据，现在我们希望通过时间来过滤：</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">//<span class="number">1.</span></div><div class="line"><span class="keyword">from</span> django.utils <span class="keyword">import</span> timezone</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_queryset</span><span class="params">(self)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    Return the last five published questions (not including those set to be</div><div class="line">    published in the future).</div><div class="line">    """</div><div class="line">    <span class="keyword">return</span> Question.objects.filter(</div><div class="line">        pub_date__lte=timezone.now()</div><div class="line">    ).order_by(<span class="string">'-pub_date'</span>)[:<span class="number">5</span>]</div></pre></td></tr></table></figure>
<ul>
<li><code>Question.objects.filter(pub_date__lte=timezone.now())</code>意思是：<code>查找Question,并且他们的pub_date&lt;=现在的时候</code>。</li>
</ul>
<h5 id="1-5-3-测试我们新的页面"><a href="#1-5-3-测试我们新的页面" class="headerlink" title="1.5.3 测试我们新的页面"></a>1.5.3 测试我们新的页面</h5><ul>
<li>在<code>polls/tests.py</code>的文件中添加如下的代码：</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div></pre></td><td class="code"><pre><div class="line">//<span class="number">1.</span></div><div class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> reverse</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_question</span><span class="params">(question_text, days)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    Creates a question with the given `question_text` and published the</div><div class="line">    given number of `days` offset to now (negative for questions published</div><div class="line">    in the past, positive for questions that have yet to be published).</div><div class="line">    """</div><div class="line">    time = timezone.now() + datetime.timedelta(days=days)</div><div class="line">    <span class="keyword">return</span> Question.objects.create(question_text=question_text, pub_date=time)</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">QuestionViewTests</span><span class="params">(TestCase)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_index_view_with_no_questions</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        If no questions exist, an appropriate message should be displayed.</div><div class="line">        """</div><div class="line">        response = self.client.get(reverse(<span class="string">'polls:index'</span>))</div><div class="line">        self.assertEqual(response.status_code, <span class="number">200</span>)</div><div class="line">        self.assertContains(response, <span class="string">"No polls are available."</span>)</div><div class="line">        self.assertQuerysetEqual(response.context[<span class="string">'latest_question_list'</span>], [])</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_index_view_with_a_past_question</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        Questions with a pub_date in the past should be displayed on the</div><div class="line">        index page.</div><div class="line">        """</div><div class="line">        create_question(question_text=<span class="string">"Past question."</span>, days=<span class="number">-30</span>)</div><div class="line">        response = self.client.get(reverse(<span class="string">'polls:index'</span>))</div><div class="line">        self.assertQuerysetEqual(</div><div class="line">            response.context[<span class="string">'latest_question_list'</span>],</div><div class="line">            [<span class="string">'&lt;Question: Past question.&gt;'</span>]</div><div class="line">        )</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_index_view_with_a_future_question</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        Questions with a pub_date in the future should not be displayed on</div><div class="line">        the index page.</div><div class="line">        """</div><div class="line">        create_question(question_text=<span class="string">"Future question."</span>, days=<span class="number">30</span>)</div><div class="line">        response = self.client.get(reverse(<span class="string">'polls:index'</span>))</div><div class="line">        self.assertContains(response, <span class="string">"No polls are available."</span>)</div><div class="line">        self.assertQuerysetEqual(response.context[<span class="string">'latest_question_list'</span>], [])</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_index_view_with_future_question_and_past_question</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        Even if both past and future questions exist, only past questions</div><div class="line">        should be displayed.</div><div class="line">        """</div><div class="line">        create_question(question_text=<span class="string">"Past question."</span>, days=<span class="number">-30</span>)</div><div class="line">        create_question(question_text=<span class="string">"Future question."</span>, days=<span class="number">30</span>)</div><div class="line">        response = self.client.get(reverse(<span class="string">'polls:index'</span>))</div><div class="line">        self.assertQuerysetEqual(</div><div class="line">            response.context[<span class="string">'latest_question_list'</span>],</div><div class="line">            [<span class="string">'&lt;Question: Past question.&gt;'</span>]</div><div class="line">        )</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_index_view_with_two_past_questions</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        The questions index page may display multiple questions.</div><div class="line">        """</div><div class="line">        create_question(question_text=<span class="string">"Past question 1."</span>, days=<span class="number">-30</span>)</div><div class="line">        create_question(question_text=<span class="string">"Past question 2."</span>, days=<span class="number">-5</span>)</div><div class="line">        response = self.client.get(reverse(<span class="string">'polls:index'</span>))</div><div class="line">        self.assertQuerysetEqual(</div><div class="line">            response.context[<span class="string">'latest_question_list'</span>],</div><div class="line">            [<span class="string">'&lt;Question: Past question 2.&gt;'</span>, <span class="string">'&lt;Question: Past question 1.&gt;'</span>]</div><div class="line">        )</div></pre></td></tr></table></figure>
<ul>
<li>仔细看一下你就会发现：</li>
</ul>
<ol>
<li>这里<code>create_question</code>是一个快生产<code>question</code>的函数。</li>
<li><code>test_index_view_with_a_past_question</code>我们不创建任何的<code>question</code>对象，我们的的一些断言，这个测试就素在测试<code>如果数据库里面没有我们需要的数据</code>，我们该如何处理，检测了<code>response</code>以及<code>response.context</code>。这里用到了<code>assertContains()</code> and <code>assertQuerysetEqual()</code></li>
<li>在下面的测试同样。</li>
</ol>
<h5 id="1-5-4-测试详情页面"><a href="#1-5-4-测试详情页面" class="headerlink" title="1.5.4 测试详情页面"></a>1.5.4 测试详情页面</h5><ul>
<li>打开<code>polls/views.py</code>修改为,详情页面也要过滤掉将来的时间点的数据：</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">DetailView</span><span class="params">(generic.DetailView)</span>:</span></div><div class="line">    ...</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_queryset</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        Excludes any questions that aren't published yet.</div><div class="line">        """</div><div class="line">        <span class="keyword">return</span> Question.objects.filter(pub_date__lte=timezone.now())</div></pre></td></tr></table></figure>
<ul>
<li>此时再添加一下测试数据，打开<code>polls/tests.py</code>：</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">QuestionIndexDetailTests</span><span class="params">(TestCase)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_detail_view_with_a_future_question</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        The detail view of a question with a pub_date in the future should</div><div class="line">        return a 404 not found.</div><div class="line">        """</div><div class="line">        future_question = create_question(question_text=<span class="string">'Future question.'</span>, days=<span class="number">5</span>)</div><div class="line">        url = reverse(<span class="string">'polls:detail'</span>, args=(future_question.id,))</div><div class="line">        response = self.client.get(url)</div><div class="line">        self.assertEqual(response.status_code, <span class="number">404</span>)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_detail_view_with_a_past_question</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        The detail view of a question with a pub_date in the past should</div><div class="line">        display the question's text.</div><div class="line">        """</div><div class="line">        past_question = create_question(question_text=<span class="string">'Past Question.'</span>, days=<span class="number">-5</span>)</div><div class="line">        url = reverse(<span class="string">'polls:detail'</span>, args=(past_question.id,))</div><div class="line">        response = self.client.get(url)</div><div class="line">        self.assertContains(response, past_question.question_text)</div></pre></td></tr></table></figure>
<figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">GhCoder_Site python manage.py test polls</div><div class="line"><span class="function"><span class="title">Creating</span></span> test database <span class="keyword">for</span> <span class="keyword">alias</span> <span class="string">'default'</span>...</div><div class="line"><span class="keyword">System</span> check identified <span class="keyword">no</span> issues (<span class="number">0</span> silenced).</div><div class="line">..........</div><div class="line">----------------------------------------------------------------------</div><div class="line">Ran <span class="number">10</span> tests in <span class="number">0.058</span>s</div><div class="line"></div><div class="line">OK</div><div class="line"><span class="function"><span class="title">Destroying</span></span> test database <span class="keyword">for</span> <span class="keyword">alias</span> <span class="string">'default'</span>...</div></pre></td></tr></table></figure>
<ul>
<li>还有一些进阶的测试工具：</li>
</ul>
<ol>
<li><code>Selenium</code>[<a href="http://seleniumhq.org/" target="_blank" rel="external">http://seleniumhq.org/</a>]</li>
<li><code>LiveServerTestCase</code> [<a href="https://docs.djangoproject.com/en/1.11/topics/testing/tools/#django.test.LiveServerTestCase" target="_blank" rel="external">https://docs.djangoproject.com/en/1.11/topics/testing/tools/#django.test.LiveServerTestCase</a>]</li>
</ol>
<h5 id="1-5-5-自定义项目app"><a href="#1-5-5-自定义项目app" class="headerlink" title="1.5.5 自定义项目app"></a>1.5.5 自定义项目app</h5><p>1.添加<code>css</code>样式：</p>
<ul>
<li>在创建项目的时候，项目中的<code>HTML</code>/<code>JavaScript</code>/<code>CSS</code>都是用来呈现页面以及布局的时候需要用到，我们应该把这些文件统一放到<code>static files</code>的文件里面去。这里<code>django.contrib.staticfiles</code>替我们都做好了。</li>
<li>首先在<code>polls</code>的目录中添加<code>static</code>的文件夹，Django将会自动去找<code>static</code>文件夹中的文件。</li>
<li>在<code>static</code>下面在添加<code>polls</code>文件夹，再在<code>polls</code>文件夹里面再添加<code>style.css</code>,里面添加如下的操作：</li>
</ul>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">li</span> <span class="selector-tag">a</span> &#123;</div><div class="line">    <span class="attribute">color</span>: green;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>然后在<code>polls/templates/polls/index.html</code>文件里面添加如下的代码：</li>
</ul>
<figure class="highlight dust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="xml"></span><span class="template-variable">&#123; % load static % &#125;</span><span class="xml"></span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"</span></span><span class="template-variable">&#123; % static 'polls/style.css' % &#125;</span><span class="xml"><span class="tag"><span class="string">"</span> /&gt;</span></span></div></pre></td></tr></table></figure>
<ul>
<li><code>{ % static % }</code>tag能够生成static文件夹的绝对url。</li>
</ul>
<p>2.添加图片的样式</p>
<ul>
<li>创建一个<code>images</code>文件夹，路径为<code>polls/static/polls/images/xxx.png</code>,然后就可以在<code>css</code>的文件中添加如下的代码</li>
</ul>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">body</span> &#123;</div><div class="line">    <span class="attribute">background</span>: white <span class="built_in">url</span>(<span class="string">"images/xxx.png"</span>) no-repeat right bottom;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;经过前四部分的学习，此时我们已经创建了我们第一个app：polls-并且根据我们自己的需求，修改了url，修改了对应的view函数，连接数据库，插入数据库相应的数据，并将数据库里的数据捞出来，显示在模板上，这似乎就是我们在前四部分做的事情，说起来简单，但是做好、做精细却不容易。下面我们会为我们的app提供测试的功能。&quot;&gt;&lt;a href=&quot;#经过前四部分的学习，此时我们已经创建了我们第一个app：polls-并且根据我们自己的需求，修改了url，修改了对应的view函数，连接数据库，插入数据库相应的数据，并将数据库里的数据捞出来，显示在模板上，这似乎就是我们在前四部分做的事情，说起来简单，但是做好、做精细却不容易。下面我们会为我们的app提供测试的功能。&quot; class=&quot;headerlink&quot; title=&quot;经过前四部分的学习，此时我们已经创建了我们第一个app：polls, 并且根据我们自己的需求，修改了url，修改了对应的view函数，连接数据库，插入数据库相应的数据，并将数据库里的数据捞出来，显示在模板上，这似乎就是我们在前四部分做的事情，说起来简单，但是做好、做精细却不容易。下面我们会为我们的app提供测试的功能。&quot;&gt;&lt;/a&gt;经过前四部分的学习，此时我们已经创建了我们第一个app：polls, 并且根据我们自己的需求，修改了url，修改了对应的view函数，连接数据库，插入数据库相应的数据，并将数据库里的数据捞出来，显示在模板上，这似乎就是我们在前四部分做的事情，说起来简单，但是做好、做精细却不容易。下面我们会为我们的app提供测试的功能。&lt;/h3&gt;&lt;h4 id=&quot;1-1-什么是自动测试&quot;&gt;&lt;a href=&quot;#1-1-什么是自动测试&quot; class=&quot;headerlink&quot; title=&quot;1.1 什么是自动测试&quot;&gt;&lt;/a&gt;1.1 什么是自动测试&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;测试是对代码对好检测，测试能够针对不同层面进行测试(1.对某个特定的方法是否按照预期返回都能够进行测试。2.有的人会对整个项目的整体操作做相应的测试&lt;code&gt;用户输入具体的某些值，得到预期的一些值&lt;/code&gt;)，其实这里的测试与第二部分运用&lt;code&gt;shell&lt;/code&gt;的操作是差不多的。&lt;/li&gt;
&lt;li&gt;而自动化测试区别在于，一旦你的自动化测试生成了之后，当你修改了代码之后，你不需要再花时间人工去测试，自动可以测试你的代码。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="日志" scheme="http://www.ghcoder.com/categories/%E6%97%A5%E5%BF%97/"/>
    
    
      <category term="Python、Django" scheme="http://www.ghcoder.com/tags/Python%E3%80%81Django/"/>
    
  </entry>
  
  <entry>
    <title>学习Django第四部分，细化系统模板[官网教程]</title>
    <link href="http://www.ghcoder.com/2017/05/16/20170516/"/>
    <id>http://www.ghcoder.com/2017/05/16/20170516/</id>
    <published>2017-05-16T04:05:12.000Z</published>
    <updated>2017-05-16T04:06:21.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-8：细化views页面的功能"><a href="#1-8：细化views页面的功能" class="headerlink" title="1.8：细化views页面的功能"></a>1.8：细化views页面的功能</h4><ul>
<li>打开<code>polls/detail.html</code>的文件，将其中的代码修改一下：</li>
</ul>
<figure class="highlight dust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><span class="template-variable">&#123; &#123; question.question_text &#125;</span><span class="xml"> &#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></div><div class="line"></div><div class="line"><span class="template-variable">&#123; % <span class="keyword">if</span> error_message % &#125;</span><span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">strong</span>&gt;</span></span><span class="template-variable">&#123; &#123; error_message &#125;</span><span class="xml"> &#125;<span class="tag">&lt;/<span class="name">strong</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><span class="template-variable">&#123; % endif % &#125;</span><span class="xml"></span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"</span></span><span class="template-variable">&#123; % url 'polls:vote' question.id % &#125;</span><span class="xml"><span class="tag"><span class="string">"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span></div><div class="line"><span class="template-variable">&#123; % csrf_token % &#125;</span><span class="xml"></span></div><div class="line"><span class="template-variable">&#123; % for choice in question.choice_set.all % &#125;</span><span class="xml"></span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"choice"</span> <span class="attr">id</span>=<span class="string">"choice</span></span><span class="template-variable">&#123; &#123; forloop.counter &#125;</span><span class="xml"><span class="tag"><span class="string"> &#125;"</span> <span class="attr">value</span>=<span class="string">"</span></span></span><span class="template-variable">&#123; &#123; choice.id &#125;</span><span class="xml"><span class="tag"><span class="string"> &#125;"</span> /&gt;</span></span></div><div class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"choice</span></span><span class="template-variable">&#123; &#123; forloop.counter &#125;</span><span class="xml"><span class="tag"><span class="string"> &#125;"</span>&gt;</span></span><span class="template-variable">&#123; &#123; choice.choice_text &#125;</span><span class="xml"> &#125;<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span></div><div class="line"><span class="template-variable">&#123; % endfor % &#125;</span><span class="xml"></span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"Vote"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div></pre></td></tr></table></figure>
<a id="more"></a>
<ul>
<li>这里的改动比较大,在页面上显示了勾选按钮，<code>value</code>与<code>question.id</code>类型关联起来了，<code>name</code>的值写死为<code>choice</code>,当某人勾选了一个，并且点击的提交的按钮，那么就会post的数据为：<code>choice=#</code>。</li>
<li>定义了一个<code>form</code>, 并且<code>method=post</code></li>
<li><code>forloop.counter</code>就指明了多少次循环</li>
<li>因为我们运用了<code>post</code>的请求，所以我们需要防止他们跨域请求，并且篡改数据，这里我们需要感谢Django,他给我们定义了{ % csrf_token % }这个标记，就是为了防止被篡改数据</li>
<li>现在来处理post过来的请求，并且做出相应的处理。打开<code>polls/urls.py</code></li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> get_object_or_404, render</div><div class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponseRedirect, HttpResponse</div><div class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> reverse</div><div class="line"></div><div class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Choice, Question</div><div class="line"><span class="comment"># ...</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">vote</span><span class="params">(request, question_id)</span>:</span></div><div class="line">    question = get_object_or_404(Question, pk=question_id)</div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        selected_choice = question.choice_set.get(pk=request.POST[<span class="string">'choice'</span>])</div><div class="line">    <span class="keyword">except</span> (KeyError, Choice.DoesNotExist):</div><div class="line">        <span class="comment"># Redisplay the question voting form.</span></div><div class="line">        <span class="keyword">return</span> render(request, <span class="string">'polls/detail.html'</span>, &#123;</div><div class="line">            <span class="string">'question'</span>: question,</div><div class="line">            <span class="string">'error_message'</span>: <span class="string">"You didn't select a choice."</span>,</div><div class="line">        &#125;)</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        selected_choice.votes += <span class="number">1</span></div><div class="line">        selected_choice.save()</div><div class="line">        <span class="comment"># Always return an HttpResponseRedirect after successfully dealing</span></div><div class="line">        <span class="comment"># with POST data. This prevents data from being posted twice if a</span></div><div class="line">        <span class="comment"># user hits the Back button.</span></div><div class="line">        <span class="keyword">return</span> HttpResponseRedirect(reverse(<span class="string">'polls:results'</span>, args=(question.id,)))</div></pre></td></tr></table></figure>
<ul>
<li>这里的<code>request.POST</code>就是个字典类型的数据，通过取<code>request.POST[&#39;choice&#39;]</code>得到的是选中的id，并且以字符串的形式返回。</li>
<li>在<code>request.POST</code>中，提供了<code>KeyError</code>的错误，当你要去的key不在post的字段里面，就会拿到这样的错误。</li>
<li>注意到当成功之后，相应的votes加1之后，我们返回的不是<code>HttpResponse</code>,而是<code>HttpResponseRedirect</code>,接受一个参数，这个参数就是成功之后调教的url。并且官网提出了，当成功完成post之后，就是应该跳转页面，这不仅仅是Django要求的，而是作为web开发所必须要养成的好习惯。</li>
<li>最后注意到我们在<code>HttpResponseRedirect</code>里面用到了<code>reverse()</code>，其实他的作用就是为了解决硬编码的问题，其实<code>reverse(&#39;polls:results&#39;, args=(question.id,)</code> = <code>/polls/3/results/</code></li>
<li>看到成功返回的页面为<code>results</code>的函数：</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> get_object_or_404, render</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">results</span><span class="params">(request, question_id)</span>:</span></div><div class="line">    question = get_object_or_404(Question, pk=question_id)</div><div class="line">    <span class="keyword">return</span> render(request, <span class="string">'polls/results.html'</span>, &#123;<span class="string">'question'</span>: question&#125;)</div></pre></td></tr></table></figure>
<ul>
<li>在这里需要创建<code>polls/results.html</code>的模板页面</li>
</ul>
<figure class="highlight dust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><span class="template-variable">&#123; &#123; question.question_text &#125;</span><span class="xml"> &#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line"><span class="template-variable">&#123; % for choice in question.choice_set.all % &#125;</span><span class="xml"></span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="template-variable">&#123; &#123; choice.choice_text &#125;</span><span class="xml"> &#125; -- </span><span class="template-variable">&#123; &#123; choice.votes &#125;</span><span class="xml"> &#125; vote</span><span class="template-variable">&#123; &#123; choice.votes|pluralize &#125;</span><span class="xml"> &#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></div><div class="line"><span class="template-variable">&#123; % endfor % &#125;</span><span class="xml"></span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"</span></span><span class="template-variable">&#123; % url 'polls:detail' question.id % &#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span>Vote again?<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></div></pre></td></tr></table></figure>
<ul>
<li>此时选中之后的结果页面就可以正常显示的了：</li>
</ul>
<figure class="highlight ada"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">What<span class="symbol">'s</span> up?</div><div class="line"></div><div class="line">    <span class="keyword">Not</span> much <span class="comment">-- 4 vote s</span></div><div class="line">    The sky <span class="comment">-- 1 vote</span></div><div class="line">    Just hacking again <span class="comment">-- 0 vote s</span></div><div class="line">    Just kidding <span class="comment">-- 0 vote s</span></div></pre></td></tr></table></figure>
<ul>
<li>这里官网提了一个意见，就是<code>selected_choice = question.choice_set.get(pk=request.POST[&#39;choice&#39;])</code>,这个数据是从数据库中取出来的，但是如果两个用户同一时间做次操作，并且进行投票的话，这里会存在一个竞争的关系，这里官网给出的意见是用函数<code>F()</code>来避免这种情况 [<a href="https://docs.djangoproject.com/en/1.11/ref/models/expressions/#avoiding-race-conditions-using-f" target="_blank" rel="external">https://docs.djangoproject.com/en/1.11/ref/models/expressions/#avoiding-race-conditions-using-f</a>]</li>
</ul>
<h4 id="1-9：使用通用视图让代码少点"><a href="#1-9：使用通用视图让代码少点" class="headerlink" title="1.9：使用通用视图让代码少点"></a>1.9：使用通用视图让代码少点</h4><ul>
<li>可能你已经发现了，<code>detail</code>和<code>results</code>的页面非常的相近，这里我们会做出改变</li>
<li>这些<code>views</code>页面都做了一些类似的事情，<code>根据URL从数据库中得到数据</code>,<code>加载模板，并且显示出来</code>，这些操作都是雷同的，此时我们可以通过<code>通用视图</code>来减少我们的代码量</li>
</ul>
<h5 id="1-9-1-修改URLconf"><a href="#1-9-1-修改URLconf" class="headerlink" title="1.9.1 修改URLconf"></a>1.9.1 修改URLconf</h5><ul>
<li>打开<code>polls/urls.py</code>文件修改为：</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> url</div><div class="line"></div><div class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</div><div class="line"></div><div class="line">app_name = <span class="string">'polls'</span></div><div class="line">urlpatterns = [</div><div class="line">    url(<span class="string">r'^$'</span>, views.IndexView.as_view(), name=<span class="string">'index'</span>),</div><div class="line">    url(<span class="string">r'^(?P&lt;pk&gt;[0-9]+)/$'</span>, views.DetailView.as_view(), name=<span class="string">'detail'</span>),</div><div class="line">    url(<span class="string">r'^(?P&lt;pk&gt;[0-9]+)/results/$'</span>, views.ResultsView.as_view(), name=<span class="string">'results'</span>),</div><div class="line">    url(<span class="string">r'^(?P&lt;question_id&gt;[0-9]+)/vote/$'</span>, views.vote, name=<span class="string">'vote'</span>),</div><div class="line">]</div></pre></td></tr></table></figure>
<ul>
<li>这里做了两个改变1：一个是讲参数的名字丢该为了<code>pk</code>, 2:将views只想的函数方式修改了，只是是在同一个类中调用不同的属性是使用方法，现在是调用不同类的方式，或许是类是更好的条件继承、重用代码的吧。</li>
</ul>
<h5 id="1-9-2-修改views"><a href="#1-9-2-修改views" class="headerlink" title="1.9.2 修改views"></a>1.9.2 修改views</h5><ul>
<li>打开<code>polls/views.py</code>文件修改为：</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> get_object_or_404, render</div><div class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponseRedirect</div><div class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> reverse</div><div class="line"><span class="keyword">from</span> django.views <span class="keyword">import</span> generic</div><div class="line"></div><div class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Choice, Question</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">IndexView</span><span class="params">(generic.ListView)</span>:</span></div><div class="line">    template_name = <span class="string">'polls/index.html'</span></div><div class="line">    context_object_name = <span class="string">'latest_question_list'</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_queryset</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="string">"""Return the last five published questions."""</span></div><div class="line">        <span class="keyword">return</span> Question.objects.order_by(<span class="string">'-pub_date'</span>)[:<span class="number">5</span>]</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">DetailView</span><span class="params">(generic.DetailView)</span>:</span></div><div class="line">    model = Question</div><div class="line">    template_name = <span class="string">'polls/detail.html'</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ResultsView</span><span class="params">(generic.DetailView)</span>:</span></div><div class="line">    model = Question</div><div class="line">    template_name = <span class="string">'polls/results.html'</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">vote</span><span class="params">(request, question_id)</span>:</span></div><div class="line">    ... <span class="comment"># same as above, no changes needed.</span></div></pre></td></tr></table></figure>
<ul>
<li>这里用到了<code>ListView</code>和<code>DetailView</code>，分别需要去去继承他们，他们其实都是一些抽象的概念。</li>
<li>每个通用视图都需要一个model的字段，因此你需要丢一个Model字段。</li>
<li><code>DetailView</code>显示需要从URL中获取<code>pk</code>的字段，所以我们在写url的时候，将<code>quesiton_id</code>的参数名字修改为了<code>pk</code>。</li>
<li><code>DetailView</code>需要使用的模板名字为：<code>&lt;app name&gt;/&lt;module name&gt;_detail.name</code>，在我们现在的项目中，模板的名字为：<code>polls/question_detail.html</code>,这里模板名字的存在是为告诉Django需要使用特定名称的模板，而不是使用默认生成的模板，这里你就会发现<code>detail</code>和<code>result</code>虽然继承的都是<code>DetailView</code>,但是他们指定了不同模板名字，这就让显示不同的模板名字。</li>
<li>类似的<code>ListView</code>也是一样的，默认Django会去找<code>&lt;app name&gt;/&lt;model name&gt;_list.html</code>，但是由于我们定义了<code>template_name</code>,因此他只会找<code>polls/index.html</code></li>
<li>在之前我们都是通过丢一个名叫<code>question</code>以及<code>latest_question_list</code>的值给模板的，对<code>DetailView</code>而言：<code>question</code>的值是默认会被生成的，因为我们运用了Django model(Question),Django 是能够通过名字自动检测的。</li>
<li>而在<code>ListView</code>中，我们用到了<code>latest_question_list</code>,Django默认会生成<code>question_list</code>,但是我们需要的是<code>latest_question_list</code>,因此我们需要覆写这个属性<code>context_object_name</code>，将它准确定义为我们需要的名字<code>latest_question_list</code></li>
<li>模板这部分 确实还是挺复杂的，主要是我们不太熟悉一些字段的用法、含义，可以自行参考 [<a href="https://docs.djangoproject.com/en/1.11/topics/class-based-views/" target="_blank" rel="external">https://docs.djangoproject.com/en/1.11/topics/class-based-views/</a>]</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;1-8：细化views页面的功能&quot;&gt;&lt;a href=&quot;#1-8：细化views页面的功能&quot; class=&quot;headerlink&quot; title=&quot;1.8：细化views页面的功能&quot;&gt;&lt;/a&gt;1.8：细化views页面的功能&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;打开&lt;code&gt;polls/detail.html&lt;/code&gt;的文件，将其中的代码修改一下：&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight dust&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;h1&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;template-variable&quot;&gt;&amp;#123; &amp;#123; question.question_text &amp;#125;&lt;/span&gt;&lt;span class=&quot;xml&quot;&gt; &amp;#125;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;h1&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/span&gt;&lt;span class=&quot;template-variable&quot;&gt;&amp;#123; % &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; error_message % &amp;#125;&lt;/span&gt;&lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;strong&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;template-variable&quot;&gt;&amp;#123; &amp;#123; error_message &amp;#125;&lt;/span&gt;&lt;span class=&quot;xml&quot;&gt; &amp;#125;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;strong&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;template-variable&quot;&gt;&amp;#123; % endif % &amp;#125;&lt;/span&gt;&lt;span class=&quot;xml&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;form&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;action&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;template-variable&quot;&gt;&amp;#123; % url &#39;polls:vote&#39; question.id % &amp;#125;&lt;/span&gt;&lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;method&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;post&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/span&gt;&lt;span class=&quot;template-variable&quot;&gt;&amp;#123; % csrf_token % &amp;#125;&lt;/span&gt;&lt;span class=&quot;xml&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/span&gt;&lt;span class=&quot;template-variable&quot;&gt;&amp;#123; % for choice in question.choice_set.all % &amp;#125;&lt;/span&gt;&lt;span class=&quot;xml&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;radio&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;choice&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;choice&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;template-variable&quot;&gt;&amp;#123; &amp;#123; forloop.counter &amp;#125;&lt;/span&gt;&lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&lt;span class=&quot;string&quot;&gt; &amp;#125;&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;template-variable&quot;&gt;&amp;#123; &amp;#123; choice.id &amp;#125;&lt;/span&gt;&lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&lt;span class=&quot;string&quot;&gt; &amp;#125;&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;label&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;for&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;choice&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;template-variable&quot;&gt;&amp;#123; &amp;#123; forloop.counter &amp;#125;&lt;/span&gt;&lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&lt;span class=&quot;string&quot;&gt; &amp;#125;&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;template-variable&quot;&gt;&amp;#123; &amp;#123; choice.choice_text &amp;#125;&lt;/span&gt;&lt;span class=&quot;xml&quot;&gt; &amp;#125;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;label&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;br&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/span&gt;&lt;span class=&quot;template-variable&quot;&gt;&amp;#123; % endfor % &amp;#125;&lt;/span&gt;&lt;span class=&quot;xml&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;submit&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;Vote&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;form&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="日志" scheme="http://www.ghcoder.com/categories/%E6%97%A5%E5%BF%97/"/>
    
    
      <category term="Python、Django" scheme="http://www.ghcoder.com/tags/Python%E3%80%81Django/"/>
    
  </entry>
  
  <entry>
    <title>学习Django第三部分，重点关注如何运用系统模板,并且自定义URL[官网教程]</title>
    <link href="http://www.ghcoder.com/2017/05/15/20170515/"/>
    <id>http://www.ghcoder.com/2017/05/15/20170515/</id>
    <published>2017-05-15T06:15:12.000Z</published>
    <updated>2017-05-15T07:09:21.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-开始写新的Views"><a href="#1-开始写新的Views" class="headerlink" title="1.开始写新的Views"></a>1.开始写新的Views</h3><ul>
<li>打开<code>polls/views.py</code>文件，写views的函数和写其他的函数略有不同，因为他们可以接受参数，写入下面的代码：</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">detail</span><span class="params">(request, question_id)</span>:</span></div><div class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">"You're looking at question %s."</span> % question_id)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">results</span><span class="params">(request, question_id)</span>:</span></div><div class="line">    response = <span class="string">"You're looking at the results of question %s."</span></div><div class="line">    <span class="keyword">return</span> HttpResponse(response % question_id)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">vote</span><span class="params">(request, question_id)</span>:</span></div><div class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">"You're voting on question %s."</span> % question_id)</div></pre></td></tr></table></figure>
<a id="more"></a>
<ul>
<li>写完了views的这些函数，其实这些函数只是简单的返回一些字符串，下面来出来一些关于url的函数处理<code>polls/urls.py</code>：</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> url</div><div class="line"></div><div class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</div><div class="line"></div><div class="line">urlpatterns = [</div><div class="line">    <span class="comment"># ex: /polls/</span></div><div class="line">    url(<span class="string">r'^$'</span>, views.index, name=<span class="string">'index'</span>),</div><div class="line">    <span class="comment"># ex: /polls/5/</span></div><div class="line">    url(<span class="string">r'^(?P&lt;question_id&gt;[0-9]+)/$'</span>, views.detail, name=<span class="string">'detail'</span>),</div><div class="line">    <span class="comment"># ex: /polls/5/results/</span></div><div class="line">    url(<span class="string">r'^(?P&lt;question_id&gt;[0-9]+)/results/$'</span>, views.results, name=<span class="string">'results'</span>),</div><div class="line">    <span class="comment"># ex: /polls/5/vote/</span></div><div class="line">    url(<span class="string">r'^(?P&lt;question_id&gt;[0-9]+)/vote/$'</span>, views.vote, name=<span class="string">'vote'</span>),</div><div class="line">]</div></pre></td></tr></table></figure>
<ul>
<li>现在当你再去访问<code>/polls/34</code>、<code>/polls/34/results/</code>、<code>/polls/34/vote/</code>你就可以看到，这些能够对应到刚才你写的几个函数了。</li>
<li>当你访问的url为<code>/polls/34/</code>的时候，此时Django将先找到项目中的<code>urls</code>模块，（其实就是加载项目中的urls.py的文件），它将会找到名为<code>urlpatterns</code>这个列表，看看在你的列表的项目中，有没有出现你访问的url的条目，当系统找到<code>^polls/</code>之后，就会去掉<code>^polls/</code>,然后将剩下的<code>34/</code>发送给<code>polls.urls</code>进行更深的解析，终于在<code>polls/urls.py的urlpatterns</code>列表中找到了这行代码<code>url(r&#39;^(?P&lt;question_id&gt;[0-9]+)/$&#39;, views.detail, name=&#39;detail&#39;)</code>,因为这行代码的第二个参数是指向的<code>views.detail</code>函数句柄，这里其实执行的是下面的代码：</li>
</ul>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="title">detail</span><span class="params">(request=&lt;HttpRequest object&gt;, question_id=<span class="string">'34'</span>)</span></span></div></pre></td></tr></table></figure>
<ul>
<li>而这里的<code>question_id=&#39;34&#39;</code>,部分是因为我们写的这部分正则:<code>(?P&lt;question_id&gt;[0-9]+)</code>,括号所包含的内容将作为一个参数传给对应的函数, <code>?P&lt;question_id&gt;</code>定义了传给函数的形参名</li>
</ul>
<h4 id="1-1-具体处理一些页面的请求"><a href="#1-1-具体处理一些页面的请求" class="headerlink" title="1.1:具体处理一些页面的请求"></a>1.1:具体处理一些页面的请求</h4><ul>
<li>每个页面应该可以做1-2件事情，返回http的请求，可以通过HttpResponse[<a href="https://docs.djangoproject.com/en/1.11/ref/request-response/#django.http.HttpResponse" target="_blank" rel="external">https://docs.djangoproject.com/en/1.11/ref/request-response/#django.http.HttpResponse</a>], 还有些未找到页面Django也给了响应的便利返回Http404[<a href="https://docs.djangoproject.com/en/1.11/topics/http/views/#django.http.Http404" target="_blank" rel="external">https://docs.djangoproject.com/en/1.11/topics/http/views/#django.http.Http404</a>], 其实说白了每个页面它希望得到的是HttpResponse能够处理正常的逻辑，要不然就是<code>exception</code>，打开polls/views.py</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</div><div class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Question</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(request)</span>:</span></div><div class="line">    latest_question_list = Question.objects.order_by(<span class="string">'-pub_date'</span>)[:<span class="number">5</span>]</div><div class="line">    output = <span class="string">', '</span>.join([q.question_text <span class="keyword">for</span> q <span class="keyword">in</span> latest_question_list])</div><div class="line">    <span class="keyword">return</span> HttpResponse(output)</div></pre></td></tr></table></figure>
<ul>
<li>这里当你再次访问<code>/polls/</code>的时候，你就可以看到在第二部分数据库操作插入的数据了，但是我们如何让我们的界面显示的好看一点呢，这里就需要引入<code>template</code>模板，现在我们<code>polls</code>的文件夹中创建<code>templates</code>文件夹，Django将会自动去这个文件夹中去寻找模板。</li>
<li>这里还要说一下，如果在<code>settings.py</code>文件中<code>APP_DIRS</code>设置的是<code>TRUE</code>的话，Django的模板默认就会去INSTALL_APPS去寻找对应的<code>templates</code>的文件夹。</li>
<li>系统给我们的意见是，让我们在<code>templates</code>文件夹下面再创建一个<code>polls</code>的文件夹，在<code>polls</code>的文件夹内再创建<code>index.html</code>,总的路径应该是这样的：<code>polls/templates/polls/index.html</code>，这样创建的是为了方便我们在调用模板的时候方便、易读<code>polls/index.html</code></li>
<li>下面再刚创建的<code>index.html</code>中添加如下的代码：</li>
</ul>
<figure class="highlight dust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="xml"></span><span class="template-variable">&#123; % <span class="keyword">if</span> latest_question_list % &#125;</span><span class="xml"></span></div><div class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">    <span class="template-variable">&#123; % for question in latest_question_list % &#125;</span><span class="xml"></span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/polls/</span></span><span class="template-variable">&#123; &#123; question.id &#125;</span><span class="xml"><span class="tag"><span class="string"> &#125;/"</span>&gt;</span></span><span class="template-variable">&#123; &#123; question.question_text &#125;</span><span class="xml"> &#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></div><div class="line">    <span class="template-variable">&#123; % endfor % &#125;</span><span class="xml"></span></div><div class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"><span class="template-variable">&#123; % else % &#125;</span><span class="xml"></span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>No polls are available.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="template-variable">&#123; % endif % &#125;</span><span class="xml"></span></div></pre></td></tr></table></figure>
<ul>
<li>显示的模板已经写完了，下面再将之前的<code>views.py</code>的函数修改一下：</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</div><div class="line"><span class="keyword">from</span> django.template <span class="keyword">import</span> loader</div><div class="line"></div><div class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Question</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(request)</span>:</span></div><div class="line">    latest_question_list = Question.objects.order_by(<span class="string">'-pub_date'</span>)[:<span class="number">5</span>]</div><div class="line">    template = loader.get_template(<span class="string">'polls/index.html'</span>)</div><div class="line">    context = &#123;</div><div class="line">        <span class="string">'latest_question_list'</span>: latest_question_list,</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> HttpResponse(template.render(context, request))</div></pre></td></tr></table></figure>
<h4 id="1-2：render-函数"><a href="#1-2：render-函数" class="headerlink" title="1.2：render()函数"></a>1.2：render()函数</h4><ul>
<li>这里我们可以通过<code>render()</code>函数来简写我们的模板，直接可以通过<code>render函数</code>,并且也不需要放回<code>HttpResponse</code>,也不需要<code>loader</code>函数来载入我们的模板了</li>
<li><code>render()</code>函数将<code>request</code>作为第一个参数，模板的名字作为第二个参数，第三个参数为可选参数，返回的是<code>HttpResponse</code>的对象。</li>
<li>用render之后，代码改变为：</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</div><div class="line"></div><div class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Question</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(request)</span>:</span></div><div class="line">    latest_question_list = Question.objects.order_by(<span class="string">'-pub_date'</span>)[:<span class="number">5</span>]</div><div class="line">    context = &#123;<span class="string">'latest_question_list'</span>: latest_question_list&#125;</div><div class="line">    <span class="keyword">return</span> render(request, <span class="string">'polls/index.html'</span>, context)</div></pre></td></tr></table></figure>
<h4 id="1-3：下面来处理一下404的错误页面"><a href="#1-3：下面来处理一下404的错误页面" class="headerlink" title="1.3：下面来处理一下404的错误页面"></a>1.3：下面来处理一下404的错误页面</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> Http404</div><div class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</div><div class="line"></div><div class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Question</div><div class="line"><span class="comment"># ...</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">detail</span><span class="params">(request, question_id)</span>:</span></div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        question = Question.objects.get(pk=question_id)</div><div class="line">    <span class="keyword">except</span> Question.DoesNotExist:</div><div class="line">        <span class="keyword">raise</span> Http404(<span class="string">"Question does not exist"</span>)</div><div class="line">    <span class="keyword">return</span> render(request, <span class="string">'polls/detail.html'</span>, &#123;<span class="string">'question'</span>: question&#125;)</div></pre></td></tr></table></figure>
<ul>
<li>这里的在详情页面的时候，如果访问主键不存在的话，我们应该抛出404的错误，让我们能够捕捉到错误。</li>
<li>同时在<code>polls/detail.html</code>的文件中添加如在下代码：</li>
</ul>
<figure class="highlight clojure"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123; &#123; question &#125; &#125;</div></pre></td></tr></table></figure>
<h4 id="1-4：404函数的缩写get-object-or-404"><a href="#1-4：404函数的缩写get-object-or-404" class="headerlink" title="1.4：404函数的缩写get_object_or_404()"></a>1.4：404函数的缩写get_object_or_404()</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> get_object_or_404, render</div><div class="line"></div><div class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Question</div><div class="line"><span class="comment"># ...</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">detail</span><span class="params">(request, question_id)</span>:</span></div><div class="line">    question = get_object_or_404(Question, pk=question_id)</div><div class="line">    <span class="keyword">return</span> render(request, <span class="string">'polls/detail.html'</span>, &#123;<span class="string">'question'</span>: question&#125;)</div></pre></td></tr></table></figure>
<ul>
<li><code>get_object_or_404()</code>函数第一个参数为：Django的Model, 第二个参数，是一个列表，是任意数量参数的列表,当get不到任何东西的时候，就会返回Http404的对象。</li>
</ul>
<h4 id="1-5-使用系统模板"><a href="#1-5-使用系统模板" class="headerlink" title="1.5:使用系统模板"></a>1.5:使用系统模板</h4><ul>
<li>回到我们之前写的<code>polls/detail.html</code>，改为这样：</li>
</ul>
<figure class="highlight dust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><span class="template-variable">&#123; &#123; question.question_text &#125;</span><span class="xml"> &#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></div><div class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line"><span class="template-variable">&#123; % for choice in question.choice_set.all % &#125;</span><span class="xml"></span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="template-variable">&#123; &#123; choice.choice_text &#125;</span><span class="xml"> &#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></div><div class="line"><span class="template-variable">&#123; % endfor % &#125;</span><span class="xml"></span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>当我们运用系统的模板的时候，可以看到系统是用的<code>点语法</code>,例如<code>{ { question.question_text } }</code>，Django 先去寻找<code>question</code>这个对象是否存在，然后再去寻找<code>question</code>是否存在<code>question_text</code>的这个属性值。</li>
<li><code>{ % for % }</code>这是一个for循环，<code>question.choice_set.all</code>=<code>question.choice_set.all()</code>这个返回的是一个包含<code>Choice</code>，可迭代的集合。</li>
<li>系统模板更多信息[<a href="https://docs.djangoproject.com/en/1.11/topics/templates/" target="_blank" rel="external">https://docs.djangoproject.com/en/1.11/topics/templates/</a>]</li>
</ul>
<h4 id="1-6：去除系统模板中的硬编码"><a href="#1-6：去除系统模板中的硬编码" class="headerlink" title="1.6：去除系统模板中的硬编码"></a>1.6：去除系统模板中的硬编码</h4><ul>
<li>我们在写<code>index.html</code>模板的时候，我们写到这样一段代码<code>&lt;li&gt;&lt;a href=&quot;/polls/{ { question.id } }/&quot;&gt;{ { question.question_text } }&lt;/a&gt;&lt;/li&gt;</code>，通过我们在<code>views.py</code>的函数中将<code>question</code>的数据中传递到模板上，并且在模板上这样使用，道理上来说是没毛病的。</li>
<li>这样写的问题，在于模板和数据，紧密耦合在一起，在很多模板中，假如我一旦修改了URL，我们就得去一堆的模板中修改这个写死的url。</li>
<li>因为我们在<code>polls/urls.py</code>中已经用到了<code>url</code>的模块,那么我们就能够通过之前定义的url,并且知道下面将要跳转url。</li>
</ul>
<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">urlpatterns = [</div><div class="line">               url(<span class="string">r'^(?P&lt;question_id&gt;[0-9]+)/$'</span>, views.detail, name=<span class="string">'detail'</span>),</div><div class="line">          ]</div></pre></td></tr></table></figure>
<ul>
<li>因此可以修改为：</li>
</ul>
<figure class="highlight dust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="xml">//修改前</span></div><div class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/polls/</span></span><span class="template-variable">&#123; &#123; question.id &#125;</span><span class="xml"><span class="tag"><span class="string"> &#125;/"</span>&gt;</span></span><span class="template-variable">&#123; &#123; question.question_text &#125;</span><span class="xml"> &#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></div><div class="line">//修改后</div><div class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"</span></span><span class="template-variable">&#123; % url 'detail' question.id % &#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span></span><span class="template-variable">&#123; &#123; question.question_text &#125;</span><span class="xml"> &#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></div></pre></td></tr></table></figure>
<ul>
<li>如果你想要修改详情页面的url，假如现在的url不是之前的<code>polls/12</code>,而是最新的url：<code>polls/specifics/12</code>,此时你只需要在你的url中加一个一个url，例如：</li>
</ul>
<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line">url(<span class="string">r'^specifics/(?P&lt;question_id&gt;[0-9]+)/$'</span>, views.detail, name=<span class="string">'detail'</span>),</div><div class="line">...</div></pre></td></tr></table></figure>
<h4 id="1-7-URL的命名空间"><a href="#1-7-URL的命名空间" class="headerlink" title="1.7:URL的命名空间"></a>1.7:URL的命名空间</h4><ul>
<li>在这个项目中，我们仅仅只是创建了一个app，叫做<code>polls</code>,但是在实际的Django的项目中，其实会有10、20几个app, 那么我们在使用之前提到的<code>{ % url % }</code>,Django如何区分url呢？比如我<code>polls</code>下面有一个<code>detail</code>，假如我还有个新的app，下面也有一个<code>detail</code>,我改怎么区分呢？</li>
<li>官方的意思是去定义<code>app_name</code>,打开<code>polls/url.py</code></li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> url</div><div class="line"></div><div class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</div><div class="line"></div><div class="line">app_name = <span class="string">'polls'</span></div><div class="line">urlpatterns = [</div><div class="line">    url(<span class="string">r'^$'</span>, views.index, name=<span class="string">'index'</span>),</div><div class="line">    url(<span class="string">r'^(?P&lt;question_id&gt;[0-9]+)/$'</span>, views.detail, name=<span class="string">'detail'</span>),</div><div class="line">    url(<span class="string">r'^(?P&lt;question_id&gt;[0-9]+)/results/$'</span>, views.results, name=<span class="string">'results'</span>),</div><div class="line">    url(<span class="string">r'^(?P&lt;question_id&gt;[0-9]+)/vote/$'</span>, views.vote, name=<span class="string">'vote'</span>),</div><div class="line">]</div></pre></td></tr></table></figure>
<ul>
<li>并且家模板里面的代码也做一下修改：</li>
</ul>
<figure class="highlight dust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="xml">//未使用app_name</span></div><div class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"</span></span><span class="template-variable">&#123; % url 'detail' question.id % &#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span></span><span class="template-variable">&#123; &#123; question.question_text &#125;</span><span class="xml"> &#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></div><div class="line"></div><div class="line">//使用app_name = 'polls'</div><div class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"</span></span><span class="template-variable">&#123; % url 'polls:detail' question.id % &#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span></span><span class="template-variable">&#123; &#123; question.question_text &#125;</span><span class="xml"> &#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></div></pre></td></tr></table></figure>
<h4 id="ps-最后说一下，hexo好坑呐！在markdown格式中不能出现”-“-以及-“-”-必须要在中间添加个空格。哎！无语。。。"><a href="#ps-最后说一下，hexo好坑呐！在markdown格式中不能出现”-“-以及-“-”-必须要在中间添加个空格。哎！无语。。。" class="headerlink" title="ps: 最后说一下，hexo好坑呐！在markdown格式中不能出现”{ {“ 以及 “{ %”,必须要在中间添加个空格。哎！无语。。。"></a>ps: 最后说一下，hexo好坑呐！在markdown格式中不能出现”{ {“ 以及 “{ %”,必须要在中间添加个空格。哎！无语。。。</h4>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-开始写新的Views&quot;&gt;&lt;a href=&quot;#1-开始写新的Views&quot; class=&quot;headerlink&quot; title=&quot;1.开始写新的Views&quot;&gt;&lt;/a&gt;1.开始写新的Views&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;打开&lt;code&gt;polls/views.py&lt;/code&gt;文件，写views的函数和写其他的函数略有不同，因为他们可以接受参数，写入下面的代码：&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;detail&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(request, question_id)&lt;/span&gt;:&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; HttpResponse(&lt;span class=&quot;string&quot;&gt;&quot;You&#39;re looking at question %s.&quot;&lt;/span&gt; % question_id)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;results&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(request, question_id)&lt;/span&gt;:&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    response = &lt;span class=&quot;string&quot;&gt;&quot;You&#39;re looking at the results of question %s.&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; HttpResponse(response % question_id)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;vote&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(request, question_id)&lt;/span&gt;:&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; HttpResponse(&lt;span class=&quot;string&quot;&gt;&quot;You&#39;re voting on question %s.&quot;&lt;/span&gt; % question_id)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="日志" scheme="http://www.ghcoder.com/categories/%E6%97%A5%E5%BF%97/"/>
    
    
      <category term="Python、Django" scheme="http://www.ghcoder.com/tags/Python%E3%80%81Django/"/>
    
  </entry>
  
  <entry>
    <title>学习Django第二部分[官网教程]</title>
    <link href="http://www.ghcoder.com/2017/05/14/20170514/"/>
    <id>http://www.ghcoder.com/2017/05/14/20170514/</id>
    <published>2017-05-14T03:32:12.000Z</published>
    <updated>2017-05-15T06:18:07.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="学习Django的第二部分-对官网Demo教程的翻译，以及自己的一些认识"><a href="#学习Django的第二部分-对官网Demo教程的翻译，以及自己的一些认识" class="headerlink" title="学习Django的第二部分[对官网Demo教程的翻译，以及自己的一些认识]"></a>学习Django的第二部分[对官网Demo教程的翻译，以及自己的一些认识]</h3><h4 id="第一部分，已经使用了Django写了一个简单View，并且配置了我们的url，是的我们能够正常访问到我们新建的View页面。今天开始第二部分："><a href="#第一部分，已经使用了Django写了一个简单View，并且配置了我们的url，是的我们能够正常访问到我们新建的View页面。今天开始第二部分：" class="headerlink" title="第一部分，已经使用了Django写了一个简单View，并且配置了我们的url，是的我们能够正常访问到我们新建的View页面。今天开始第二部分："></a>第一部分，已经使用了Django写了一个简单View，并且配置了我们的url，是的我们能够正常访问到我们新建的View页面。今天开始第二部分：</h4><a id="more"></a>
<ol>
<li>我们需要到<code>xxxProject/settings.py</code>文件去修改配置，我们这里主要讲的是数据库的配置。</li>
<li>Django默认是安装了SQLite，这里不需要额外下载什么。</li>
<li>如果需要用到别的数据库，可以去<code>settings</code>文件去修改。默认是这样的：</li>
</ol>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">DATABASES = &#123;</div><div class="line">      <span class="string">'default'</span>: &#123;</div><div class="line">          <span class="string">'ENGINE'</span>: <span class="string">'django.db.backends.sqlite3'</span>,</div><div class="line">          <span class="string">'NAME'</span>: os<span class="selector-class">.path</span><span class="selector-class">.join</span>(BASE_DIR, <span class="string">'db.sqlite3'</span>),</div><div class="line">      &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<h4 id="这里解释一下："><a href="#这里解释一下：" class="headerlink" title="这里解释一下："></a>这里解释一下：</h4><ul>
<li><code>ENGINE</code>字段根据选用数据库的不同，Django已经给我们做好了数据的枚举：<code>django.db.backends.sqlite3</code>,<code>django.db.backends.postgresql</code>,<code>django.db.backends.mysql</code>,<code>django.db.backends.oracle</code></li>
<li><code>NAME</code>数据库的名字</li>
<li>如果你和我一样，不是选用的Django默认的使用的sqlite的话，除此之外，还需要配置<code>USER</code>,<code>PASSWORD</code>,<code>HOST</code>,我用的mysql,这里如果需要正常使用mysql的话，可能还需要安装其他的一些依赖库，这里可以参考 [<a href="https://docs.djangoproject.com/en/1.11/topics/install/#database-installation" target="_blank" rel="external">https://docs.djangoproject.com/en/1.11/topics/install/#database-installation</a>]</li>
<li><p>官方给出了demo，可以根据自己的需求进行修改</p>
<figure class="highlight xquery"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"> DATABASES = &#123;</div><div class="line">    <span class="string">'default'</span>: &#123;</div><div class="line">        <span class="string">'ENGINE'</span>: <span class="string">'django.db.backends.postgresql'</span>,</div><div class="line">        <span class="string">'NAME'</span>: <span class="string">'mydatabase'</span>,</div><div class="line">        <span class="string">'USER'</span>: <span class="string">'mydatabaseuser'</span>,</div><div class="line">        <span class="string">'PASSWORD'</span>: <span class="string">'mypassword'</span>,</div><div class="line">        <span class="string">'HOST'</span>: <span class="string">'127.0.0.1'</span>,</div><div class="line">        <span class="string">'PORT'</span>: <span class="string">'5432'</span>,</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="数据库配置好之后，然后我们开始配置TIME-ZONE-默认值为America-Chicago-如果在中国的话，应该是Asia-Shanghai北京时间吧，至于时区的列表：-https-en-wikipedia-org-wiki-List-of-tz-database-time-zones-。"><a href="#数据库配置好之后，然后我们开始配置TIME-ZONE-默认值为America-Chicago-如果在中国的话，应该是Asia-Shanghai北京时间吧，至于时区的列表：-https-en-wikipedia-org-wiki-List-of-tz-database-time-zones-。" class="headerlink" title="数据库配置好之后，然后我们开始配置TIME_ZONE,默认值为America/Chicago,如果在中国的话，应该是Asia/Shanghai北京时间吧，至于时区的列表： [https://en.wikipedia.org/wiki/List_of_tz_database_time_zones]。"></a>数据库配置好之后，然后我们开始配置<code>TIME_ZONE</code>,默认值为<code>America/Chicago</code>,如果在中国的话，应该是<code>Asia/Shanghai</code>北京时间吧，至于时区的列表： [<a href="https://en.wikipedia.org/wiki/List_of_tz_database_time_zones]。" target="_blank" rel="external">https://en.wikipedia.org/wiki/List_of_tz_database_time_zones]。</a></h4><h4 id="这里重点说一下INSTALLED-APPS的配置，放在这个选项中的列表的字符串，代表运行Django同事需要激活这些对应的Django应用，app能够在不同的project中使用，并且你也能够打包、分发给别人来使用。"><a href="#这里重点说一下INSTALLED-APPS的配置，放在这个选项中的列表的字符串，代表运行Django同事需要激活这些对应的Django应用，app能够在不同的project中使用，并且你也能够打包、分发给别人来使用。" class="headerlink" title="这里重点说一下INSTALLED_APPS的配置，放在这个选项中的列表的字符串，代表运行Django同事需要激活这些对应的Django应用，app能够在不同的project中使用，并且你也能够打包、分发给别人来使用。"></a>这里重点说一下<code>INSTALLED_APPS</code>的配置，放在这个选项中的列表的字符串，代表运行Django同事需要激活这些对应的Django应用，app能够在不同的project中使用，并且你也能够打包、分发给别人来使用。</h4><figure class="highlight vala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># Application definition</span></div><div class="line">  </div><div class="line">  INSTALLED_APPS = [                                                                                                                                                                                      </div><div class="line">      <span class="string">'django.contrib.admin'</span>,<span class="comment">//Django 的默认后台系统</span></div><div class="line">      <span class="string">'django.contrib.auth'</span>, <span class="comment">//Django 的认证系统</span></div><div class="line">      <span class="string">'django.contrib.contenttypes'</span>, <span class="comment">// 管理内容类型</span></div><div class="line">      <span class="string">'django.contrib.sessions'</span>, <span class="comment">// 管理sessions</span></div><div class="line">      <span class="string">'django.contrib.messages'</span>, <span class="comment">// 管理消息</span></div><div class="line">      <span class="string">'django.contrib.staticfiles'</span>, <span class="comment">// 管理静态文件</span></div><div class="line">  ]</div></pre></td></tr></table></figure>
<ul>
<li>这些已经安装的，默认的app，至少会在后台建立1的表（现在还没有建立表呢），在执行了<code>python manage.py migrate</code>才会在我们的数据库里建立这里app的表。</li>
<li>这里我在linux环境下安装的时候，遇到点问题：包了很多奇葩的错误，这里我就说几个，我遇到的，其他我没有列出来的，可能你直接google就能找到了：</li>
</ul>
<ol>
<li>通过<code>sudo pip install MySQL-python</code>来安装mysql的时候包这个错</li>
</ol>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Command <span class="string">"python setup.py egg_info"</span> failed <span class="keyword">with</span> <span class="keyword">error</span> code <span class="number">1</span> <span class="keyword">in</span> /tmp/pip-build<span class="number">-7696</span>Ic/MySQL-python/</div></pre></td></tr></table></figure>
<h4 id="直接在命令行运行"><a href="#直接在命令行运行" class="headerlink" title="直接在命令行运行:"></a>直接在命令行运行:</h4><figure class="highlight cmake"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo apt <span class="keyword">install</span> libmysqlclient-dev</div><div class="line">pip <span class="keyword">install</span> mysql</div></pre></td></tr></table></figure>
<h4 id="还有其他的一些小问题：-http-stackoverflow-com-questions-35991403-python-pip-install-gives-command-python-setup-py-egg-info-failed-with-error-c"><a href="#还有其他的一些小问题：-http-stackoverflow-com-questions-35991403-python-pip-install-gives-command-python-setup-py-egg-info-failed-with-error-c" class="headerlink" title="还有其他的一些小问题： [http://stackoverflow.com/questions/35991403/python-pip-install-gives-command-python-setup-py-egg-info-failed-with-error-c]"></a>还有其他的一些小问题： [<a href="http://stackoverflow.com/questions/35991403/python-pip-install-gives-command-python-setup-py-egg-info-failed-with-error-c" target="_blank" rel="external">http://stackoverflow.com/questions/35991403/python-pip-install-gives-command-python-setup-py-egg-info-failed-with-error-c</a>]</h4><h4 id="执行完-python-manage-py-migrate-就会看到终端出现这些字样，就代表你的表已经成功生成了-如果不信，你也可以打开自己mysql数据库，就会发现Django已经为我生成好了表了。"><a href="#执行完-python-manage-py-migrate-就会看到终端出现这些字样，就代表你的表已经成功生成了-如果不信，你也可以打开自己mysql数据库，就会发现Django已经为我生成好了表了。" class="headerlink" title="执行完 python manage.py migrate 就会看到终端出现这些字样，就代表你的表已经成功生成了, 如果不信，你也可以打开自己mysql数据库，就会发现Django已经为我生成好了表了。"></a>执行完 <code>python manage.py migrate</code> 就会看到终端出现这些字样，就代表你的表已经成功生成了, 如果不信，你也可以打开自己mysql数据库，就会发现Django已经为我生成好了表了。</h4><figure class="highlight lasso"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">Operations <span class="keyword">to</span> perform:</div><div class="line">  Apply <span class="literal">all</span> migrations: admin, auth, contenttypes, sessions</div><div class="line">Running migrations:</div><div class="line">  Applying contenttypes<span class="number">.0001</span>_initial<span class="params">...</span> OK</div><div class="line">  Applying auth<span class="number">.0001</span>_initial<span class="params">...</span> OK</div><div class="line">  Applying admin<span class="number">.0001</span>_initial<span class="params">...</span> OK</div><div class="line">  Applying admin<span class="number">.0002</span>_logentry_remove_auto_add<span class="params">...</span> OK</div><div class="line">  Applying contenttypes<span class="number">.0002</span>_remove_content_type_name<span class="params">...</span> OK</div><div class="line">  Applying auth<span class="number">.0002</span>_alter_permission_name_max_length<span class="params">...</span> OK</div><div class="line">  Applying auth<span class="number">.0003</span>_alter_user_email_max_length<span class="params">...</span> OK</div><div class="line">  Applying auth<span class="number">.0004</span>_alter_user_username_opts<span class="params">...</span> OK</div><div class="line">  Applying auth<span class="number">.0005</span>_alter_user_last_login_null<span class="params">...</span> OK</div><div class="line">  Applying auth<span class="number">.0006</span>_require_contenttypes_0002<span class="params">...</span> OK</div><div class="line">  Applying auth<span class="number">.0007</span>_alter_validators_add_error_messages<span class="params">...</span> OK</div><div class="line">  Applying auth<span class="number">.0008</span>_alter_user_username_max_length<span class="params">...</span> OK</div><div class="line">  Applying sessions<span class="number">.0001</span>_initial<span class="params">...</span> OK</div></pre></td></tr></table></figure>
<h4 id="官方给出了关于migrate命令的作用，Django会去project中找我的settings-py文件，并且找到INSTALL-APPS，为这些安装的app创建必要的表-并且官方也说了，这些默认的INSTALL-APPS并不是每个人都需要他，当不需要的时候，删除掉xxxProject-settings-py文件中对应的app，然后执行migrate就可以了。"><a href="#官方给出了关于migrate命令的作用，Django会去project中找我的settings-py文件，并且找到INSTALL-APPS，为这些安装的app创建必要的表-并且官方也说了，这些默认的INSTALL-APPS并不是每个人都需要他，当不需要的时候，删除掉xxxProject-settings-py文件中对应的app，然后执行migrate就可以了。" class="headerlink" title="官方给出了关于migrate命令的作用，Django会去project中找我的settings.py文件，并且找到INSTALL_APPS，为这些安装的app创建必要的表, 并且官方也说了，这些默认的INSTALL_APPS并不是每个人都需要他，当不需要的时候，删除掉xxxProject/settings.py文件中对应的app，然后执行migrate就可以了。"></a>官方给出了关于<code>migrate</code>命令的作用，Django会去project中找我的settings.py文件，并且找到INSTALL_APPS，为这些安装的app创建必要的表, 并且官方也说了，这些默认的INSTALL_APPS并不是每个人都需要他，当不需要的时候，删除掉xxxProject/settings.py文件中对应的app，然后执行<code>migrate</code>就可以了。</h4><h3 id="创建Model"><a href="#创建Model" class="headerlink" title="创建Model"></a>创建Model</h3><h4 id="好了，现在开始我们需要创建Model了，这也是我为什么喜欢Django的最最根本的原因，Django中的Model不同于其他语言中的Model对象，而是实质性的涉及到数据库的数据。"><a href="#好了，现在开始我们需要创建Model了，这也是我为什么喜欢Django的最最根本的原因，Django中的Model不同于其他语言中的Model对象，而是实质性的涉及到数据库的数据。" class="headerlink" title="好了，现在开始我们需要创建Model了，这也是我为什么喜欢Django的最最根本的原因，Django中的Model不同于其他语言中的Model对象，而是实质性的涉及到数据库的数据。"></a>好了，现在开始我们需要创建Model了，这也是我为什么喜欢Django的最最根本的原因，Django中的Model不同于其他语言中的Model对象，而是实质性的涉及到数据库的数据。</h4><ol>
<li>之前在第一章的时候，我们创建了一个属于我们自己的app，名字叫做<code>polls</code>的app,我们现在围绕这个app创建属于这个app的Model，我们创建两个Model，一个叫做<code>Question</code>,一个叫<code>Choice</code>,<code>Question</code>含有一个问题字段和发布时间的字段，<code>Choice</code>含有两个字段一个choice的Text的字段、一个vote的字段，<strong>并且一个choice会关联一个question字段</strong>，现在开始编辑<code>polls/models.py</code>文件：</li>
</ol>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="title">from</span> django.db <span class="keyword">import</span> models</div><div class="line"><span class="class"></span></div><div class="line"></div><div class="line"><span class="keyword">class</span> <span class="type">Question</span>(<span class="title">models</span>.<span class="type">Model</span>):</div><div class="line">    question_text = models.<span class="type">CharField</span>(<span class="title">max_length</span>=200)</div><div class="line">    pub_date = models.<span class="type">DateTimeField</span>('<span class="title">date</span> <span class="title">published'</span>)</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">class</span> <span class="type">Choice</span>(<span class="title">models</span>.<span class="type">Model</span>):</div><div class="line">    question = models.<span class="type">ForeignKey</span>(<span class="type">Question</span>, <span class="title">on_delete</span>=<span class="title">models</span>.<span class="type">CASCADE</span>)</div><div class="line">    choice_text = models.<span class="type">CharField</span>(<span class="title">max_length</span>=200)</div><div class="line">    votes = models.<span class="type">IntegerField</span>(<span class="title">default</span>=0)</div></pre></td></tr></table></figure>
<ul>
<li>这些model的类都是<code>django.db.models.Model</code>的子类。</li>
<li>这里的每个字段对应的就是数据库中的每个字段。</li>
<li>一些字段是需要必须的参数的，比如<code>CharField</code>必须有参数<code>max_length</code>的存在。</li>
<li>一些字段也可以传入一些可选的参数: 比如：<code>IntegerField</code>的<code>default</code>的字段。</li>
<li><p><code>ForeignKey</code>可以通过外键的形式，将<code>choice</code>的类型关联到<code>Question</code>的类型上去，在Django的model数据中，是支持一对多，一对一，多对多的。</p>
<h3 id="激活Model"><a href="#激活Model" class="headerlink" title="激活Model"></a>激活Model</h3><h4 id="上面虽然外面已经创建了这两个Model，但是目前为止，还没有和我现在有Django项目关联上，在此之前，我们必须要先激活Model-并且根据我们的model代码创建出对应的数据库表的信息。"><a href="#上面虽然外面已经创建了这两个Model，但是目前为止，还没有和我现在有Django项目关联上，在此之前，我们必须要先激活Model-并且根据我们的model代码创建出对应的数据库表的信息。" class="headerlink" title="上面虽然外面已经创建了这两个Model，但是目前为止，还没有和我现在有Django项目关联上，在此之前，我们必须要先激活Model,并且根据我们的model代码创建出对应的数据库表的信息。"></a>上面虽然外面已经创建了这两个Model，但是目前为止，还没有和我现在有Django项目关联上，在此之前，我们必须要先激活Model,并且根据我们的model代码创建出对应的数据库表的信息。</h4><ul>
<li>首先我们先要将我们的<code>polls</code>的app安装上。去<code>settings.py</code>的INSTALL_APPS的列表中，将我们的<code>polls</code>app添加进去。</li>
</ul>
<figure class="highlight sml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">  <span class="type">INSTALLED_APPS</span> = [</div><div class="line">  </div><div class="line">    <span class="symbol">'polls</span>.apps.<span class="type">PollsConfig'</span>,</div><div class="line">    </div><div class="line">    <span class="symbol">'django</span>.contrib.admin',</div><div class="line">    <span class="symbol">'django</span>.contrib.auth',</div><div class="line">    <span class="symbol">'django</span>.contrib.contenttypes',</div><div class="line">    <span class="symbol">'django</span>.contrib.sessions',</div><div class="line">    <span class="symbol">'django</span>.contrib.messages',</div><div class="line">    <span class="symbol">'django</span>.contrib.staticfiles',</div><div class="line">]</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li>现在执行<code>python manage.py makemigrations polls</code>得到下面的信息：</li>
</ul>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">polls/migrations/0001_initial.py</div><div class="line">   - <span class="keyword">Create</span> <span class="keyword">model</span> Choice</div><div class="line">   - <span class="keyword">Create</span> <span class="keyword">model</span> Question</div><div class="line">   - <span class="keyword">Add</span> <span class="keyword">field</span> question <span class="keyword">to</span> choice</div></pre></td></tr></table></figure>
<ul>
<li>执行<code>makemigrations</code>的目的是告诉Django，你已经对你Model对了一些改变，你希望Django能够保存你的这些改变。</li>
<li><code>Migrations</code>对你Model的变化仅仅只是将这些变化以文件的形式保存在磁盘中，这些文件，你都是可以看到的<code>polls/migrations/0001_initial.py</code></li>
<li>下面要执行<code>migrate</code>,将你之前Model的改变同步到数据库表中去。我们为了能够看到具体做了那些<code>SQL</code>上的改变，可以运行<code>sqlmigrate</code>,这个命令会返回对应SQL语句。执行之后，你会看到下面的返回：</li>
</ul>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">GhCoder_Site python manage.py sqlmigrate polls 0001</div><div class="line"><span class="keyword">BEGIN</span>;</div><div class="line"><span class="comment">--</span></div><div class="line"><span class="comment">-- Create model Choice</span></div><div class="line"><span class="comment">--</span></div><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`polls_choice`</span> (<span class="string">`id`</span> <span class="built_in">integer</span> AUTO_INCREMENT <span class="keyword">NOT</span> <span class="literal">NULL</span> PRIMARY <span class="keyword">KEY</span>, <span class="string">`choice_text`</span> <span class="built_in">varchar</span>(<span class="number">200</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>, <span class="string">`votes`</span> <span class="built_in">integer</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>);</div><div class="line"><span class="comment">--</span></div><div class="line"><span class="comment">-- Create model Question</span></div><div class="line"><span class="comment">--</span></div><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`polls_question`</span> (<span class="string">`id`</span> <span class="built_in">integer</span> AUTO_INCREMENT <span class="keyword">NOT</span> <span class="literal">NULL</span> PRIMARY <span class="keyword">KEY</span>, <span class="string">`question_text`</span> <span class="built_in">varchar</span>(<span class="number">200</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>, <span class="string">`pub_date`</span> datetime(<span class="number">6</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>);</div><div class="line"><span class="comment">--</span></div><div class="line"><span class="comment">-- Add field question to choice</span></div><div class="line"><span class="comment">--</span></div><div class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="string">`polls_choice`</span> <span class="keyword">ADD</span> <span class="keyword">COLUMN</span> <span class="string">`question_id`</span> <span class="built_in">integer</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>;</div><div class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="string">`polls_choice`</span> <span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> <span class="string">`polls_choice_question_id_c5b4b260_fk_polls_question_id`</span> FOREIGN <span class="keyword">KEY</span> (<span class="string">`question_id`</span>) <span class="keyword">REFERENCES</span> <span class="string">`polls_question`</span> (<span class="string">`id`</span>);</div><div class="line"><span class="keyword">COMMIT</span>;</div></pre></td></tr></table></figure>
<h4 id="注意到下面一些关键的点："><a href="#注意到下面一些关键的点：" class="headerlink" title="注意到下面一些关键的点："></a>注意到下面一些关键的点：</h4><ul>
<li>首先表的名字是 <code>AppName_ModelName</code>。</li>
<li>每个表中为我们自动创建了主键：<code>id</code>类型，并且默认不为空，且自增。</li>
<li>外键的添加是<code>ModelName_id</code>。</li>
<li><code>sqlmigrate</code>其实并没有对数据库做出相应的操作，他只是告诉你这是他将要对数据库所做出的操作，并且能够让你检查是否正确。</li>
</ul>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">//执行下面的命令</div><div class="line"><span class="keyword">python</span> manage.<span class="keyword">py</span> migrate</div><div class="line"></div><div class="line">//得到下面的信息</div><div class="line">GhCoder_Site <span class="keyword">python</span> manage.<span class="keyword">py</span> migrate </div><div class="line">Operations <span class="keyword">to</span> perform:</div><div class="line">  Apply <span class="keyword">all</span> migration<span class="variable">s:</span> admin, auth, contenttypes, polls, sessions</div><div class="line">Running migration<span class="variable">s:</span></div><div class="line">  Applying polls.<span class="number">0001</span>_initial... OK</div></pre></td></tr></table></figure>
<h4 id="现在你也可以通过phpmyadmin，可以看到数据库中的表都已经如我们之前model定义的那样，创建好了，这就是migragte的魅力所在，可能你在以后的开发中，你根本不需要时不时的去修改数据库，增加修改某个字段，通过migrate就能够实现，只要三个步骤，你就可以显示了了。"><a href="#现在你也可以通过phpmyadmin，可以看到数据库中的表都已经如我们之前model定义的那样，创建好了，这就是migragte的魅力所在，可能你在以后的开发中，你根本不需要时不时的去修改数据库，增加修改某个字段，通过migrate就能够实现，只要三个步骤，你就可以显示了了。" class="headerlink" title="现在你也可以通过phpmyadmin，可以看到数据库中的表都已经如我们之前model定义的那样，创建好了，这就是migragte的魅力所在，可能你在以后的开发中，你根本不需要时不时的去修改数据库，增加修改某个字段，通过migrate就能够实现，只要三个步骤，你就可以显示了了。"></a>现在你也可以通过<code>phpmyadmin</code>，可以看到数据库中的表都已经如我们之前model定义的那样，创建好了，这就是<code>migragte</code>的魅力所在，可能你在以后的开发中，你根本不需要时不时的去修改数据库，增加修改某个字段，通过<code>migrate</code>就能够实现，只要三个步骤，你就可以显示了了。</h4><ol>
<li>改变Model，增加修改字段都可以。</li>
<li>执行<code>python manage.py makemigrations</code>来为这些变化创建<code>migrations</code>。</li>
<li>执行<code>python manage.py migrate</code>来修改数据库表。</li>
</ol>
<h3 id="运用API来操作Model"><a href="#运用API来操作Model" class="headerlink" title="运用API来操作Model"></a>运用API来操作Model</h3><h4 id="Django非常贴心地为我们提供shell的命令来操作数据。"><a href="#Django非常贴心地为我们提供shell的命令来操作数据。" class="headerlink" title="Django非常贴心地为我们提供shell的命令来操作数据。"></a>Django非常贴心地为我们提供shell的命令来操作数据。</h4><ol>
<li>在操作shell之前，我们首先要运行<code>python manage.py shell</code>。</li>
<li>然后我们就进入到了python的运行环境。下面这段代码是官网给我的，我觉得很详细，也很具体，我只是翻译了一下：</li>
</ol>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line">// 从polls.models文件中导入Question、Choice</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> polls.models <span class="keyword">import</span> Question, Choice   <span class="comment"># Import the model classes we just wrote.</span></div><div class="line"></div><div class="line">// 在系统的内存中是否存在Question类型的数据</div><div class="line"><span class="comment"># No questions are in the system yet.</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>Question.objects.all()</div><div class="line">&lt;QuerySet []&gt;</div><div class="line"></div><div class="line"><span class="comment"># Create a new Question.</span></div><div class="line"><span class="comment"># Support for time zones is enabled in the default settings file, so</span></div><div class="line"><span class="comment"># Django expects a datetime with tzinfo for pub_date. Use timezone.now()</span></div><div class="line"><span class="comment"># instead of datetime.datetime.now() and it will do the right thing.</span></div><div class="line"></div><div class="line">// 这里创建了Question的数据结构，这个数据结构需要两个字段，一个是字符串，一个date的数据类型，date的数据类型，我这里用timezone来创建，因此这里导入了timezone的模块</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> django.utils <span class="keyword">import</span> timezone</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>q = Question(question_text=<span class="string">"What's new?"</span>, pub_date=timezone.now())</div><div class="line"></div><div class="line">// q的实例执行保存的方法</div><div class="line"><span class="comment"># Save the object into the database. You have to call save() explicitly.</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>q.save()</div><div class="line"></div><div class="line">// 直接返回里q的id，这里返回的是int，还是long，是根据你选择的数据库来定的。</div><div class="line"><span class="comment"># Now it has an ID. Note that this might say "1L" instead of "1", depending</span></div><div class="line"><span class="comment"># on which database you're using. That's no biggie; it just means your</span></div><div class="line"><span class="comment"># database backend prefers to return integers as Python long integer</span></div><div class="line"><span class="comment"># objects.</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>q.id</div><div class="line"><span class="number">1</span></div><div class="line"></div><div class="line">// 返回question的实例的属性值</div><div class="line"><span class="comment"># Access model field values via Python attributes.</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>q.question_text</div><div class="line"><span class="string">"What's new?"</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>q.pub_date</div><div class="line">datetime.datetime(<span class="number">2012</span>, <span class="number">2</span>, <span class="number">26</span>, <span class="number">13</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">775217</span>, tzinfo=&lt;UTC&gt;)</div><div class="line"></div><div class="line">// 同时也可以修改question实例的属性值，但是要记住保存</div><div class="line"><span class="comment"># Change values by changing the attributes, then calling save().</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>q.question_text = <span class="string">"What's up?"</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>q.save()</div><div class="line"></div><div class="line">// 返回内存中所有的Question类型的数据</div><div class="line"><span class="comment"># objects.all() displays all the questions in the database.</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>Question.objects.all()</div><div class="line">&lt;QuerySet [&lt;Question: Question object&gt;]&gt;</div></pre></td></tr></table></figure>
<h4 id="这里在执行Question-objects-all-，返回是-lt-QuerySet-lt-Question-Question-object-gt-gt-，这样可读性不是很好，官方的意思说：只要分别在model文件中覆写def-str-self-方法就可以了。"><a href="#这里在执行Question-objects-all-，返回是-lt-QuerySet-lt-Question-Question-object-gt-gt-，这样可读性不是很好，官方的意思说：只要分别在model文件中覆写def-str-self-方法就可以了。" class="headerlink" title="这里在执行Question.objects.all()，返回是&lt;QuerySet [&lt;Question: Question object&gt;]&gt;，这样可读性不是很好，官方的意思说：只要分别在model文件中覆写def __str__(self):方法就可以了。"></a>这里在执行<code>Question.objects.all()</code>，返回是<code>&lt;QuerySet [&lt;Question: Question object&gt;]&gt;</code>，这样可读性不是很好，官方的意思说：只要分别在model文件中覆写<code>def __str__(self):</code>方法就可以了。</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</div><div class="line"><span class="keyword">from</span> django.utils.encoding <span class="keyword">import</span> python_2_unicode_compatible</div><div class="line"></div><div class="line"><span class="meta">@python_2_unicode_compatible  # only if you need to support Python 2</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Question</span><span class="params">(models.Model)</span>:</span></div><div class="line">    <span class="comment"># ...</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> self.question_text</div><div class="line"></div><div class="line"><span class="meta">@python_2_unicode_compatible  # only if you need to support Python 2</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Choice</span><span class="params">(models.Model)</span>:</span></div><div class="line">    <span class="comment"># ...</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> self.choice_text</div></pre></td></tr></table></figure>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; from polls.models import Question, Choice</div><div class="line"></div><div class="line"># Make sure our __str__() addition worked.</div><div class="line"><span class="comment">// 从这里就可以看到我们刚才覆写“def __str__(self):”的作用了</span></div><div class="line">&gt;&gt;&gt; Question.objects.all()</div><div class="line">&lt;QuerySet <span class="meta">[&lt;Question: What's up?&gt;]</span>&gt;</div><div class="line"></div><div class="line"># Django provides a rich database lookup API that's entirely driven by</div><div class="line"># keyword arguments.</div><div class="line"><span class="comment">// Django 可以通过filter字段来过滤</span></div><div class="line"><span class="comment">// 也可以通过双下划线来自定义过滤条件</span></div><div class="line">&gt;&gt;&gt; Question.objects.filter(id=<span class="number">1</span>)</div><div class="line">&lt;QuerySet <span class="meta">[&lt;Question: What's up?&gt;]</span>&gt;</div><div class="line">&gt;&gt;&gt; Question.objects.filter(question_text__startswith='What')</div><div class="line">&lt;QuerySet <span class="meta">[&lt;Question: What's up?&gt;]</span>&gt;</div><div class="line"></div><div class="line"># Get the question that was published this year.</div><div class="line"><span class="comment">// 导入一些自定义的模块</span></div><div class="line"><span class="comment">// 生成响应的实例对象，并且用来过滤</span></div><div class="line">&gt;&gt;&gt; from django.utils import timezone</div><div class="line">&gt;&gt;&gt; current_year = timezone.now().year</div><div class="line">&gt;&gt;&gt; Question.objects.get(pub_date__year=current_year)</div><div class="line">&lt;Question: What's up?&gt;</div><div class="line"></div><div class="line"># Request an ID that doesn't exist, this will raise an <span class="keyword">exception</span>.</div><div class="line"><span class="comment">// 如果直接通过get的方式来获取某些对象的话，如果对象不存在的话，就会抛出异常</span></div><div class="line">&gt;&gt;&gt; Question.objects.get(id=<span class="number">2</span>)</div><div class="line">Traceback (most recent call last):</div><div class="line">    ...</div><div class="line">DoesNotExist: Question matching query does not exist.</div><div class="line"></div><div class="line"># Lookup by a primary key is the most common case, so Django provides a</div><div class="line"># shortcut <span class="keyword">for</span> primary-key exact lookups.</div><div class="line"># The following is identical <span class="keyword">to</span> Question.objects.get(id=<span class="number">1</span>).</div><div class="line"><span class="comment">// 查询主键</span></div><div class="line">&gt;&gt;&gt; Question.objects.get(pk=<span class="number">1</span>)</div><div class="line">&lt;Question: What's up?&gt;</div><div class="line"></div><div class="line"># Make sure our custom method worked.</div><div class="line">&gt;&gt;&gt; q = Question.objects.get(pk=<span class="number">1</span>)</div><div class="line"><span class="comment">// 调用自定义的方法</span></div><div class="line">&gt;&gt;&gt; q.was_published_recently()</div><div class="line">True</div><div class="line"></div><div class="line"># Give the Question a couple <span class="keyword">of</span> Choices. The create call constructs a <span class="keyword">new</span></div><div class="line"># Choice object, does the INSERT statement, adds the choice <span class="keyword">to</span> the set</div><div class="line"># <span class="keyword">of</span> available choices <span class="keyword">and</span> returns the <span class="keyword">new</span> Choice object. Django creates</div><div class="line"># a set <span class="keyword">to</span> hold the <span class="string">"other side"</span> <span class="keyword">of</span> a ForeignKey relation</div><div class="line"># (e.g. a question's choice) which can be accessed via the API.</div><div class="line">&gt;&gt;&gt; q = Question.objects.get(pk=<span class="number">1</span>)</div><div class="line"></div><div class="line"># Display any choices from the related object set -- none so far.</div><div class="line"><span class="comment">// 通过set能过找到有没有对应的外键对象存在</span></div><div class="line">&gt;&gt;&gt; q.choice_set.all()</div><div class="line">&lt;QuerySet []&gt;</div><div class="line"></div><div class="line"># Create three choices.</div><div class="line"><span class="comment">// 通过create能够创建关联的对象，创建的方法其实就是就可以把它看做是简单的实例化方法，传入对应的字段就可以了。</span></div><div class="line">&gt;&gt;&gt; q.choice_set.create(choice_text='Not much', votes=<span class="number">0</span>)</div><div class="line">&lt;Choice: Not much&gt;</div><div class="line">&gt;&gt;&gt; q.choice_set.create(choice_text='The sky', votes=<span class="number">0</span>)</div><div class="line">&lt;Choice: The sky&gt;</div><div class="line">&gt;&gt;&gt; c = q.choice_set.create(choice_text='Just hacking again', votes=<span class="number">0</span>)</div><div class="line"></div><div class="line"># Choice objects have API access <span class="keyword">to</span> their related Question objects.</div><div class="line">&gt;&gt;&gt; c.question</div><div class="line">&lt;Question: What's up?&gt;</div><div class="line"></div><div class="line"># And vice versa: Question objects get access <span class="keyword">to</span> Choice objects.</div><div class="line"><span class="comment">// 取得所有区这个Question 关联的 Choice的对象</span></div><div class="line">&gt;&gt;&gt; q.choice_set.all()</div><div class="line">&lt;QuerySet <span class="meta">[&lt;Choice: Not much&gt;, &lt;Choice: The sky&gt;, &lt;Choice: Just hacking again&gt;]</span>&gt;</div><div class="line">&gt;&gt;&gt; q.choice_set.count()</div><div class="line"><span class="number">3</span></div><div class="line"></div><div class="line"># The API automatically follows relationships <span class="keyword">as</span> far <span class="keyword">as</span> you need.</div><div class="line"># Use double underscores <span class="keyword">to</span> separate relationships.</div><div class="line"># This works <span class="keyword">as</span> many levels deep <span class="keyword">as</span> you want; there's no limit.</div><div class="line"># Find all Choices <span class="keyword">for</span> any question whose pub_date is <span class="keyword">in</span> this year</div><div class="line"># (reusing the 'current_year' variable we created above).</div><div class="line"><span class="comment">// 可以通过双下划线，在数据结构中找到关系</span></div><div class="line">&gt;&gt;&gt; Choice.objects.filter(question__pub_date__year=current_year)</div><div class="line">&lt;QuerySet <span class="meta">[&lt;Choice: Not much&gt;, &lt;Choice: The sky&gt;, &lt;Choice: Just hacking again&gt;]</span>&gt;</div><div class="line"></div><div class="line"><span class="comment">// 删除数据</span></div><div class="line"># Let's delete one <span class="keyword">of</span> the choices. Use delete() <span class="keyword">for</span> that.</div><div class="line">&gt;&gt;&gt; c = q.choice_set.filter(choice_text__startswith='Just hacking')</div><div class="line">&gt;&gt;&gt; c.delete()</div></pre></td></tr></table></figure>
<ul>
<li>这些<code>shell</code>的操作，你以为都只是在内存里操作的话，你就错了。<strong>打开你的数据库，你会发现你的这些shell的操作会实际操作到数据库的</strong></li>
<li>系统更多关于<code>shell</code>的操作在这里，你可以自己去查阅</li>
</ul>
<ol>
<li>[<a href="https://docs.djangoproject.com/en/1.11/ref/models/relations/" target="_blank" rel="external">https://docs.djangoproject.com/en/1.11/ref/models/relations/</a>]</li>
<li>[<a href="https://docs.djangoproject.com/en/1.11/topics/db/queries/" target="_blank" rel="external">https://docs.djangoproject.com/en/1.11/topics/db/queries/</a>]</li>
<li>[<a href="https://docs.djangoproject.com/en/1.11/topics/db/queries/#field-lookups-intro" target="_blank" rel="external">https://docs.djangoproject.com/en/1.11/topics/db/queries/#field-lookups-intro</a>]</li>
</ol>
<h3 id="下面介绍Django的一个牛逼的后台，他叫admin"><a href="#下面介绍Django的一个牛逼的后台，他叫admin" class="headerlink" title="下面介绍Django的一个牛逼的后台，他叫admin"></a>下面介绍Django的一个牛逼的后台，他叫<code>admin</code></h3><ul>
<li>首先我们得先创建我们的最高权限的用户。</li>
<li>执行<code>python manage.py createsuperuser</code></li>
</ul>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">GhCoder_Site python manage<span class="selector-class">.py</span> createsuperuser</div><div class="line">Username (leave blank to use <span class="string">'parallels'</span>): gonghuan</div><div class="line">Email <span class="selector-tag">address</span>: <span class="number">11</span>@<span class="number">11</span><span class="selector-class">.com</span></div><div class="line">Password: </div><div class="line">Password (again): </div><div class="line">Superuser created successfully.</div></pre></td></tr></table></figure>
<ul>
<li>再次执行<code>python manage.py runserver</code>,然后打开<code>http://127.0.0.1:8000/admin/</code>，你就会看到admin的后台登录系统了。</li>
<li>登录进去，你只会看见<code>user</code>,<code>group</code>的模块，那如何把我们之前创建的<code>polls</code>的app，展现在后台呢？方便我编辑数据？</li>
<li>打开<code>polls/admin.py</code>,并且我们需要告诉admin，Question这个数据类型，admin是有数据接口的，可以控制他。编辑如下代码：</li>
</ul>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">from django<span class="selector-class">.contrib</span> import admin</div><div class="line"></div><div class="line">from <span class="selector-class">.models</span> import Question</div><div class="line"></div><div class="line">admin<span class="selector-class">.site</span><span class="selector-class">.register</span>(Question)</div></pre></td></tr></table></figure>
<p>*此时我们就可以看到我们的Question的配置出现在后台了，并且可以增删改查了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;学习Django的第二部分-对官网Demo教程的翻译，以及自己的一些认识&quot;&gt;&lt;a href=&quot;#学习Django的第二部分-对官网Demo教程的翻译，以及自己的一些认识&quot; class=&quot;headerlink&quot; title=&quot;学习Django的第二部分[对官网Demo教程的翻译，以及自己的一些认识]&quot;&gt;&lt;/a&gt;学习Django的第二部分[对官网Demo教程的翻译，以及自己的一些认识]&lt;/h3&gt;&lt;h4 id=&quot;第一部分，已经使用了Django写了一个简单View，并且配置了我们的url，是的我们能够正常访问到我们新建的View页面。今天开始第二部分：&quot;&gt;&lt;a href=&quot;#第一部分，已经使用了Django写了一个简单View，并且配置了我们的url，是的我们能够正常访问到我们新建的View页面。今天开始第二部分：&quot; class=&quot;headerlink&quot; title=&quot;第一部分，已经使用了Django写了一个简单View，并且配置了我们的url，是的我们能够正常访问到我们新建的View页面。今天开始第二部分：&quot;&gt;&lt;/a&gt;第一部分，已经使用了Django写了一个简单View，并且配置了我们的url，是的我们能够正常访问到我们新建的View页面。今天开始第二部分：&lt;/h4&gt;
    
    </summary>
    
      <category term="日志" scheme="http://www.ghcoder.com/categories/%E6%97%A5%E5%BF%97/"/>
    
    
      <category term="Python、Django" scheme="http://www.ghcoder.com/tags/Python%E3%80%81Django/"/>
    
  </entry>
  
  <entry>
    <title>用Python的Django框架搭建前后台[官网教程]</title>
    <link href="http://www.ghcoder.com/2017/05/09/20170509/"/>
    <id>http://www.ghcoder.com/2017/05/09/20170509/</id>
    <published>2017-05-09T07:36:12.000Z</published>
    <updated>2017-05-25T06:14:20.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="人生苦短，我用Python–不管你之前写过多少其他语言，当你有一天回来写python的时候，你就会觉得“世界是那么的美好！”"><a href="#人生苦短，我用Python–不管你之前写过多少其他语言，当你有一天回来写python的时候，你就会觉得“世界是那么的美好！”" class="headerlink" title="人生苦短，我用Python–不管你之前写过多少其他语言，当你有一天回来写python的时候，你就会觉得“世界是那么的美好！”"></a>人生苦短，我用Python–不管你之前写过多少其他语言，当你有一天回来写python的时候，你就会觉得“世界是那么的美好！”</h3><h4 id="今天我就来讲讲我是如何用Python的django-https-docs-djangoproject-com-来搭建后台的："><a href="#今天我就来讲讲我是如何用Python的django-https-docs-djangoproject-com-来搭建后台的：" class="headerlink" title="今天我就来讲讲我是如何用Python的django[https://docs.djangoproject.com] 来搭建后台的："></a>今天我就来讲讲我是如何用<code>Python</code>的<code>django</code>[<a href="https://docs.djangoproject.com" target="_blank" rel="external">https://docs.djangoproject.com</a>] 来搭建后台的：</h4><a id="more"></a>
<ol>
<li>我是在mac的环境下搭建的，linux也试过，其实搭建环境来说，都差不多,这里就以mac为例子</li>
<li>首先mac或者linux的话，应该是自带python的，如果是win系统的话，你可以自己去下载[<a href="https://www.python.org/" target="_blank" rel="external">https://www.python.org/</a>]</li>
<li>数据库（database）也是很重要的，因为我们想做的是一个健全的前后台系统、后期还需要给移动端提供数据来源，所以我这里选用mysql，我这里偷懒就用了<code>MAMP</code>一键安装，在linux下也有相应的叫<code>LAMP</code>,一步步点击下一步之后就完成了，这里我用的是<code>Apache+Mysql</code>。安装完成之后，你就可以看到mysql的端口、密码、用户名啥的（这里可能有些坑，需要自己去踩，这里就不说了，自行google),这里要弄好，因为我们后续在配置django的时候需要配置。</li>
<li>下面进入正式安装jdango，官方建议通过pip去安装。</li>
</ol>
<figure class="highlight cmake"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip <span class="keyword">install</span> -U pip</div></pre></td></tr></table></figure>
<h5 id="如果报错就执行下面的命令："><a href="#如果报错就执行下面的命令：" class="headerlink" title="如果报错就执行下面的命令："></a>如果报错就执行下面的命令：</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip <span class="keyword">install</span> <span class="comment">--upgrade pip</span></div></pre></td></tr></table></figure>
<h5 id="不出意外的话，此时你的pip，应该已经安装好了。下面来安装环境，这里环境，官方的意见是安装virtualenv或者virtualenvwrapper-这里其实我都试过，你也可以试试，这里就用virtualenv-https-virtualenv-pypa-io-en-stable-你也可以自己参考一下virtualenv的官方介绍-https-virtualenv-pypa-io-en-stable-installation"><a href="#不出意外的话，此时你的pip，应该已经安装好了。下面来安装环境，这里环境，官方的意见是安装virtualenv或者virtualenvwrapper-这里其实我都试过，你也可以试试，这里就用virtualenv-https-virtualenv-pypa-io-en-stable-你也可以自己参考一下virtualenv的官方介绍-https-virtualenv-pypa-io-en-stable-installation" class="headerlink" title="不出意外的话，此时你的pip，应该已经安装好了。下面来安装环境，这里环境，官方的意见是安装virtualenv或者virtualenvwrapper,这里其实我都试过，你也可以试试，这里就用virtualenv [https://virtualenv.pypa.io/en/stable/] , 你也可以自己参考一下virtualenv的官方介绍 [https://virtualenv.pypa.io/en/stable/installation/] :"></a>不出意外的话，此时你的pip，应该已经安装好了。下面来安装环境，这里环境，官方的意见是安装<code>virtualenv</code>或者<code>virtualenvwrapper</code>,这里其实我都试过，你也可以试试，这里就用<code>virtualenv</code> [<a href="https://virtualenv.pypa.io/en/stable/" target="_blank" rel="external">https://virtualenv.pypa.io/en/stable/</a>] , 你也可以自己参考一下virtualenv的官方介绍 [<a href="https://virtualenv.pypa.io/en/stable/installation/" target="_blank" rel="external">https://virtualenv.pypa.io/en/stable/installation/</a>] :</h5><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">[sudo]</span> pip install virtualenv</div></pre></td></tr></table></figure>
<h5 id="最后执行安装django的命令："><a href="#最后执行安装django的命令：" class="headerlink" title="最后执行安装django的命令："></a>最后执行安装<code>django</code>的命令：</h5><figure class="highlight cmake"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip <span class="keyword">install</span> Django</div></pre></td></tr></table></figure>
<h5 id="官方给出了严重你是否安装成功，以及安装的版本-当成功打印的时候，就代表已经成功安装了。"><a href="#官方给出了严重你是否安装成功，以及安装的版本-当成功打印的时候，就代表已经成功安装了。" class="headerlink" title="官方给出了严重你是否安装成功，以及安装的版本,当成功打印的时候，就代表已经成功安装了。"></a>官方给出了严重你是否安装成功，以及安装的版本,当成功打印的时候，就代表已经成功安装了。</h5><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;</span>&gt; import django</div><div class="line"><span class="meta">&gt;&gt;</span>&gt; print(django.get_version())</div><div class="line"><span class="number">1.11</span></div></pre></td></tr></table></figure>
<h5 id="也可以直接在终端输入"><a href="#也可以直接在终端输入" class="headerlink" title="也可以直接在终端输入"></a>也可以直接在终端输入</h5><figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">python</span> -<span class="keyword">m</span> django --<span class="keyword">version</span></div></pre></td></tr></table></figure>
<h4 id="直接开始项目："><a href="#直接开始项目：" class="headerlink" title="直接开始项目："></a>直接开始项目：</h4><ol>
<li>直接在终端输入：此时在当前路径下就会看到我们创建的<code>GhCoder_Site</code>文件夹：</li>
</ol>
<figure class="highlight nsis"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">django-<span class="literal">admin</span> startproject GhCoder_Site</div></pre></td></tr></table></figure>
<ol>
<li>文件夹的结构：</li>
</ol>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">├── GhCoder_Site</div><div class="line">│   ├── __init__<span class="selector-class">.py</span></div><div class="line">│   ├── settings<span class="selector-class">.py</span></div><div class="line">│   ├── urls<span class="selector-class">.py</span></div><div class="line">│   └── wsgi<span class="selector-class">.py</span></div><div class="line">└── manage.py</div></pre></td></tr></table></figure>
<h4 id="这里官方给了一些解释，我觉得很好，有助于我们的理解-其实我之前都是写php的，深有感触–note"><a href="#这里官方给了一些解释，我觉得很好，有助于我们的理解-其实我之前都是写php的，深有感触–note" class="headerlink" title="这里官方给了一些解释，我觉得很好，有助于我们的理解, 其实我之前都是写php的，深有感触–note:"></a>这里官方给了一些解释，我觉得很好，有助于我们的理解, 其实我之前都是写php的，深有感触–note:</h4><blockquote>
<p>If your background is in plain old PHP (with no use of modern frameworks), you’re probably used to putting code under the Web server’s document root (in a place such as /var/www). With Django, you don’t do that. It’s not a good idea to put any of this Python code within your Web server’s document root, because it risks the possibility that people may be able to view your code over the Web. That’s not good for security.<br>Put your code in some directory outside of the document root, such as /home/mycode.</p>
</blockquote>
<h4 id="官方对于每个文件夹以及文件的作用都做了一定的解释，这里我就不解释了很通俗易懂："><a href="#官方对于每个文件夹以及文件的作用都做了一定的解释，这里我就不解释了很通俗易懂：" class="headerlink" title="官方对于每个文件夹以及文件的作用都做了一定的解释，这里我就不解释了很通俗易懂："></a>官方对于每个文件夹以及文件的作用都做了一定的解释，这里我就不解释了很通俗易懂：</h4><ul>
<li>The outer GhCoder_Site/ root directory is just a container for your project. Its name doesn’t matter to Django; you can rename it to anything you like.</li>
<li>manage.py: A command-line utility that lets you interact with this Django project in various ways. You can read all the details about manage.py in django-admin and manage.py.</li>
<li>The inner GhCoder_Site/ directory is the actual Python package for your project. Its name is the Python package name you’ll need to use to import anything inside it (e.g. GhCoder_Site.urls).</li>
<li>GhCoder_Site/<strong>init</strong>.py: An empty file that tells Python that this directory should be considered a Python package. If you’re a Python beginner, read more about packages in the official Python docs.</li>
<li>GhCoder_Site/settings.py: Settings/configuration for this Django project. Django settings will tell you all about how settings work.</li>
<li>GhCoder_Site/urls.py: The URL declarations for this Django project; a “table of contents” of your Django-powered site. You can read more about URLs in URL dispatcher.</li>
<li>GhCoder_Site/wsgi.py: An entry-point for WSGI-compatible web servers to serve your project. See How to deploy with WSGI for more details.</li>
</ul>
<h4 id="下面直接运行下面的命令："><a href="#下面直接运行下面的命令：" class="headerlink" title="下面直接运行下面的命令："></a>下面直接运行下面的命令：</h4><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python manage<span class="selector-class">.py</span> runserver</div></pre></td></tr></table></figure>
<h4 id="你会得到这样的反馈："><a href="#你会得到这样的反馈：" class="headerlink" title="你会得到这样的反馈："></a>你会得到这样的反馈：</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">Performing system checks...</div><div class="line"></div><div class="line">System <span class="keyword">check</span> <span class="keyword">identified</span> <span class="keyword">no</span> issues (<span class="number">0</span> silenced).</div><div class="line"></div><div class="line">//请忽略这里</div><div class="line">You have <span class="number">13</span> unapplied <span class="keyword">migration</span>(s). Your <span class="keyword">project</span> may <span class="keyword">not</span> <span class="keyword">work</span> properly <span class="keyword">until</span> you <span class="keyword">apply</span> the migrations <span class="keyword">for</span> app(s): <span class="keyword">admin</span>, auth, contenttypes, sessions.</div><div class="line">Run <span class="string">'python manage.py migrate'</span> <span class="keyword">to</span> <span class="keyword">apply</span> them.</div><div class="line"></div><div class="line">May <span class="number">09</span>, <span class="number">2017</span> - <span class="number">07</span>:<span class="number">08</span>:<span class="number">16</span></div><div class="line">Django <span class="keyword">version</span> <span class="number">1.11</span>, <span class="keyword">using</span> <span class="keyword">settings</span> <span class="string">'GhCoder_Site.settings'</span></div><div class="line"><span class="keyword">Starting</span> development <span class="keyword">server</span> <span class="keyword">at</span> <span class="keyword">http</span>://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">8000</span>/</div><div class="line">Quit the <span class="keyword">server</span> <span class="keyword">with</span> CONTROL-C.</div></pre></td></tr></table></figure>
<h4 id="此时打开浏览器，输入http-127-0-0-1-8000-，你就会看到Welcome-to-Django”-page-in-pleasant-light-blue-pastel-It-worked-，就代表成功了。"><a href="#此时打开浏览器，输入http-127-0-0-1-8000-，你就会看到Welcome-to-Django”-page-in-pleasant-light-blue-pastel-It-worked-，就代表成功了。" class="headerlink" title="此时打开浏览器，输入http://127.0.0.1:8000/，你就会看到Welcome to Django” page, in pleasant, light-blue pastel. It worked!，就代表成功了。"></a>此时打开浏览器，输入<code>http://127.0.0.1:8000/</code>，你就会看到<code>Welcome to Django” page, in pleasant, light-blue pastel. It worked!</code>，就代表成功了。</h4><h4 id="切换端口："><a href="#切换端口：" class="headerlink" title="切换端口："></a>切换端口：</h4><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python manage<span class="selector-class">.py</span> runserver <span class="number">8080</span></div></pre></td></tr></table></figure>
<h4 id="切换ip、监听所有的ip"><a href="#切换ip、监听所有的ip" class="headerlink" title="切换ip、监听所有的ip"></a>切换ip、监听所有的ip</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">python</span> <span class="selector-tag">manage</span><span class="selector-class">.py</span> <span class="selector-tag">runserver</span> 0<span class="selector-pseudo">:8000</span></div></pre></td></tr></table></figure>
<h3 id="Django的开发模式都是依赖于一个个app，这一点我非常喜欢，后期就算项目很大，也不会很乱，创建第一个app"><a href="#Django的开发模式都是依赖于一个个app，这一点我非常喜欢，后期就算项目很大，也不会很乱，创建第一个app" class="headerlink" title="Django的开发模式都是依赖于一个个app，这一点我非常喜欢，后期就算项目很大，也不会很乱，创建第一个app:"></a>Django的开发模式都是依赖于一个个app，这一点我非常喜欢，后期就算项目很大，也不会很乱，创建第一个app:</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python manage<span class="selector-class">.py</span> startapp polls</div></pre></td></tr></table></figure>
<h3 id="结构如下："><a href="#结构如下：" class="headerlink" title="结构如下："></a>结构如下：</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">.</div><div class="line">├── db<span class="selector-class">.sqlite3</span></div><div class="line">├── GhCoder_Site</div><div class="line">│   ├── __init__<span class="selector-class">.py</span></div><div class="line">│   ├── __init__<span class="selector-class">.pyc</span></div><div class="line">│   ├── settings<span class="selector-class">.py</span></div><div class="line">│   ├── settings<span class="selector-class">.pyc</span></div><div class="line">│   ├── urls<span class="selector-class">.py</span></div><div class="line">│   ├── urls<span class="selector-class">.pyc</span></div><div class="line">│   ├── wsgi<span class="selector-class">.py</span></div><div class="line">│   └── wsgi<span class="selector-class">.pyc</span></div><div class="line">├── manage<span class="selector-class">.py</span></div><div class="line">└── polls</div><div class="line">    ├── admin<span class="selector-class">.py</span></div><div class="line">    ├── apps<span class="selector-class">.py</span></div><div class="line">    ├── __init__<span class="selector-class">.py</span></div><div class="line">    ├── migrations</div><div class="line">    │   └── __init__<span class="selector-class">.py</span></div><div class="line">    ├── models<span class="selector-class">.py</span></div><div class="line">    ├── tests<span class="selector-class">.py</span></div><div class="line">    └── views.py</div></pre></td></tr></table></figure>
<h4 id="创建第一个views-打开polls-views-py-输入："><a href="#创建第一个views-打开polls-views-py-输入：" class="headerlink" title="创建第一个views,打开polls/views.py,输入："></a>创建第一个views,打开<code>polls/views.py</code>,输入：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(request)</span>:</span></div><div class="line">      <span class="keyword">return</span> HttpResponse(<span class="string">"Hello, world, You are in polls app"</span>)</div></pre></td></tr></table></figure>
<h4 id="现在配置一下路由-到文件polls-创建一个名为urls-py的文件。将之前写的view和这个url对应上："><a href="#现在配置一下路由-到文件polls-创建一个名为urls-py的文件。将之前写的view和这个url对应上：" class="headerlink" title="现在配置一下路由,到文件polls,创建一个名为urls.py的文件。将之前写的view和这个url对应上："></a>现在配置一下路由,到文件<code>polls</code>,创建一个名为<code>urls.py</code>的文件。将之前写的view和这个url对应上：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> url                                                                                                                      </div><div class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</div><div class="line">   </div><div class="line">urlpatterns = [</div><div class="line">               url(<span class="string">r'^$'</span>, views.index, name=<span class="string">'index'</span>)</div><div class="line">           ]</div></pre></td></tr></table></figure>
<h4 id="最后将app的url，写到项目中的urls-py的文件里面去，到GhCoder-Site-urls-py文件里面，添加如下代码："><a href="#最后将app的url，写到项目中的urls-py的文件里面去，到GhCoder-Site-urls-py文件里面，添加如下代码：" class="headerlink" title="最后将app的url，写到项目中的urls.py的文件里面去，到GhCoder_Site/urls.py文件里面，添加如下代码："></a>最后将app的url，写到项目中的urls.py的文件里面去，到<code>GhCoder_Site/urls.py</code>文件里面，添加如下代码：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> include, url</div><div class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</div><div class="line"></div><div class="line">urlpatterns = [</div><div class="line">    url(<span class="string">r'^polls/'</span>, include(<span class="string">'polls.urls'</span>)),</div><div class="line">    url(<span class="string">r'^admin/'</span>, admin.site.urls),</div><div class="line">]</div></pre></td></tr></table></figure>
<h4 id="这里关于include的官方介绍："><a href="#这里关于include的官方介绍：" class="headerlink" title="这里关于include的官方介绍："></a>这里关于include的官方介绍：</h4><blockquote>
<p>The include() function allows referencing other URLconfs. Note that the regular expressions for the include() function doesn’t have a $ (end-of-string match character) but rather a trailing slash. Whenever Django encounters include(), it chops off whatever part of the URL matched up to that point and sends the remaining string to the included URLconf for further processing.</p>
<p>The idea behind include() is to make it easy to plug-and-play URLs. Since polls are in their own URLconf (polls/urls.py), they can be placed under “/polls/”, or under “/fun_polls/”, or under “/content/polls/”, or any other path root, and the app will still work.</p>
</blockquote>
<h4 id="此时你访问http-127-0-0-1-8000-polls-就看到你刚才写的view以及url"><a href="#此时你访问http-127-0-0-1-8000-polls-就看到你刚才写的view以及url" class="headerlink" title="此时你访问http://127.0.0.1:8000/polls/就看到你刚才写的view以及url"></a>此时你访问<code>http://127.0.0.1:8000/polls/</code>就看到你刚才写的view以及url</h4>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;人生苦短，我用Python–不管你之前写过多少其他语言，当你有一天回来写python的时候，你就会觉得“世界是那么的美好！”&quot;&gt;&lt;a href=&quot;#人生苦短，我用Python–不管你之前写过多少其他语言，当你有一天回来写python的时候，你就会觉得“世界是那么的美好！”&quot; class=&quot;headerlink&quot; title=&quot;人生苦短，我用Python–不管你之前写过多少其他语言，当你有一天回来写python的时候，你就会觉得“世界是那么的美好！”&quot;&gt;&lt;/a&gt;人生苦短，我用Python–不管你之前写过多少其他语言，当你有一天回来写python的时候，你就会觉得“世界是那么的美好！”&lt;/h3&gt;&lt;h4 id=&quot;今天我就来讲讲我是如何用Python的django-https-docs-djangoproject-com-来搭建后台的：&quot;&gt;&lt;a href=&quot;#今天我就来讲讲我是如何用Python的django-https-docs-djangoproject-com-来搭建后台的：&quot; class=&quot;headerlink&quot; title=&quot;今天我就来讲讲我是如何用Python的django[https://docs.djangoproject.com] 来搭建后台的：&quot;&gt;&lt;/a&gt;今天我就来讲讲我是如何用&lt;code&gt;Python&lt;/code&gt;的&lt;code&gt;django&lt;/code&gt;[&lt;a href=&quot;https://docs.djangoproject.com&quot;&gt;https://docs.djangoproject.com&lt;/a&gt;] 来搭建后台的：&lt;/h4&gt;
    
    </summary>
    
      <category term="日志" scheme="http://www.ghcoder.com/categories/%E6%97%A5%E5%BF%97/"/>
    
    
      <category term="Python、Django" scheme="http://www.ghcoder.com/tags/Python%E3%80%81Django/"/>
    
  </entry>
  
  <entry>
    <title>Object-C 网管、以及切换AppDelegate的RootViewCtroller</title>
    <link href="http://www.ghcoder.com/2017/05/05/20170505/"/>
    <id>http://www.ghcoder.com/2017/05/05/20170505/</id>
    <published>2017-05-05T07:04:12.000Z</published>
    <updated>2017-05-10T12:17:45.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="昨天将最新版1-9-5发布上线。总结一下这一版本中踩过的坑。"><a href="#昨天将最新版1-9-5发布上线。总结一下这一版本中踩过的坑。" class="headerlink" title="昨天将最新版1.9.5发布上线。总结一下这一版本中踩过的坑。"></a>昨天将最新版1.9.5发布上线。总结一下这一版本中踩过的坑。</h2><h3 id="产品的需求："><a href="#产品的需求：" class="headerlink" title="产品的需求："></a>产品的需求：</h3><ol>
<li>app中默认是游客身份，随着不同身份的切换，可能需要切换不同的网管。(假如请求的url为: <code>http://www.siji.com/a.php</code>,那么随着身份的切换的话，可能 <code>http://www.siji.com</code>需要修改为<code>http://www.chengke.com</code>)，并且有些请求，是不需要依赖身份的：(比如登录部分请求就是<code>http://www.login.com/login.php</code>、支付部分的请求就是<code>http://www.pay.com/pay.php</code>)。<a id="more"></a></li>
<li>app中需要区分两种身份(例如 1.司机身份 2.乘客身份)，未来可能还需要更多身份去切换，伴随着身份切换，可能UI上会发生重大的改变，例如：司机身份是UITabBarController为rootViewController的，乘客身份只是(UIViewController+UISlideViewController)侧滑的样式。</li>
</ol>
<p><strong>之前发布的版本，有一点很重的线程安全的问题，我没有考虑到，现在我已经做了响应的修改了。在关于能够修改字典、数组的方法中我都用到了NSRecursiveLock，从而能够保证线程是安全的。属性的相关安全性，我也查了些资料：[<a href="https://zhuanlan.zhihu.com/p/23998703" target="_blank" rel="external">https://zhuanlan.zhihu.com/p/23998703</a>]</strong></p>
<h3 id="解决第一个问题："><a href="#解决第一个问题：" class="headerlink" title="解决第一个问题："></a>解决第一个问题：</h3><ol>
<li>首先我这里希望我在app刚进来的时候，就配置好，并且我这里希望他是线程安全，并且方便get/set值。这里我选用<code>单例</code>。并且在系统刚进来的时候就配置, 我已经加入cocoapods了：[<a href="https://github.com/Ghstart/GateWayObject]：" target="_blank" rel="external">https://github.com/Ghstart/GateWayObject]：</a></li>
</ol>
<figure class="highlight mel"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions &#123;</div><div class="line">    self.<span class="keyword">window</span> = [[RootWindow alloc] initWithFrame:[[UIScreen mainScreen] bounds]];</div><div class="line"></div><div class="line">    <span class="comment">//1.设置默认URL，就是其中一种身份对应的URL</span></div><div class="line">    <span class="comment">//2.设置一些URL的映射，不会根据之前身份设置来修改</span></div><div class="line">    [GateWayObject sharedInstanceWithDefaultURL:@"https:<span class="comment">//cz.redlion56.com/gwcz/"</span></div><div class="line">                                    ReflectURLS:@&#123;</div><div class="line">                                                  @"user/login.<span class="keyword">do</span><span class="string">": @"</span>https:<span class="comment">//login.redlion56.com/gwlogin/user/login.do",</span></div><div class="line">                                                  @"uic/user/logout.<span class="keyword">do</span><span class="string">": @"</span>https:<span class="comment">//cz.redlion56.com/gwcz/uic/user/logout.do"</span></div><div class="line">                                                  &#125;];</div><div class="line">                                                  </div><div class="line">    <span class="comment">// 3. 设置乘客身份对应的网管                          </span></div><div class="line">    [[GateWayObject currentGateWay] setGateWayURL:@"https:<span class="comment">//cz.redlion56.com/gwcz/"</span></div><div class="line">                                     forKeyObject:carownerRole];</div><div class="line">     </div><div class="line">    <span class="comment">// 4.设置乘客对应的网管</span></div><div class="line">    [[GateWayObject currentGateWay] setGateWayURL:@"https:<span class="comment">//sj.redlion56.com/gwsj/"</span></div><div class="line">                                     forKeyObject:driverRole];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 5.并且还可以根据相应的条件来切换网管</span></div><div class="line">  <span class="selector-tag">if</span> (xxx) &#123;</div><div class="line">        </div><div class="line">        <span class="selector-attr">[[GateWayObject currentGateWay]</span> <span class="selector-tag">swichGateWayBaseOn</span><span class="selector-pseudo">:carownerRole</span>];</div><div class="line">        </div><div class="line">    &#125; <span class="selector-tag">else</span> &#123;</div><div class="line">        </div><div class="line">        <span class="selector-attr">[[GateWayObject currentGateWay]</span> <span class="selector-tag">swichGateWayBaseOn</span><span class="selector-pseudo">:driverRole</span>];</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 7.直接可以取得次环境下对应的正确URL</span></div><div class="line">[self GET:[[GateWayObject currentGateWay] currentURLBaseOnRelativeURL:url]</div><div class="line">   <span class="keyword">parameters</span>:<span class="keyword">parameters</span></div><div class="line">      success:^(NSURLSessionDataTask <span class="comment">*task, id responseObject) &#123;</span></div><div class="line">          &#125;</div><div class="line">      &#125; failure:^(NSURLSessionDataTask <span class="comment">*task, NSError *error) &#123;</span></div><div class="line">          if <span class="comment">(failure &amp;&amp; error.code != -999 &amp;&amp; ![error.localizedDescription isEqualToString:@</span><span class="comment">"已取消"</span><span class="comment">]) &#123;</span></div><div class="line">              failure(error);</div><div class="line">          &#125;</div><div class="line">      &#125;];</div></pre></td></tr></table></figure>
<h3 id="下面看一下我的-h文件："><a href="#下面看一下我的-h文件：" class="headerlink" title="下面看一下我的.h文件："></a>下面看一下我的.h文件：</h3><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">GateWayObject</span> : <span class="title">NSObject</span></span></div><div class="line"></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">readonly</span>) <span class="built_in">NSString</span>    *currentRelateURL;</div><div class="line"></div><div class="line"><span class="comment">///////////-init-//////////////</span></div><div class="line"><span class="comment">/*</span></div><div class="line"> ** 获得当前的网管</div><div class="line"> */</div><div class="line"></div><div class="line">+ (GateWayObject *)currentGateWay;</div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line"> ** 网管实例化方法</div><div class="line"> ** 默认网关</div><div class="line"> */</div><div class="line">+ (GateWayObject *)sharedInstanceWithDefaultURL:(<span class="built_in">NSString</span> *)url;</div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line"> ** 网关实例化</div><div class="line"> ** 可以配置一些默认的URL对应的一些网关</div><div class="line"> */</div><div class="line">+ (GateWayObject *)sharedInstanceWithDefaultURL:(<span class="built_in">NSString</span> *)url ReflectURLS:(<span class="built_in">NSDictionary</span> *)reflectURLS;</div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line"> ** 设置网关</div><div class="line"> */</div><div class="line">- (<span class="keyword">void</span>)setGateWayURL:(<span class="built_in">NSString</span> *)url forKeyObject:(<span class="keyword">id</span>)keyObject;</div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line"> ** 设置默认的一些网关，优先级仅次于http/https</div><div class="line"> */</div><div class="line">- (<span class="keyword">void</span>)setDefaultRelativeURL:(<span class="built_in">NSString</span> *)relativeURL fullURL:(<span class="built_in">NSString</span> *)fullURL;</div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line"> ** 根据之前的设置的身份切换网管</div><div class="line"> ** 返回值为true则切换成功 false失败</div><div class="line"> */</div><div class="line">- (<span class="built_in">BOOL</span>)swichGateWayBaseOn:(<span class="keyword">id</span>)keyObject;</div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line"> ** 取得当前URL</div><div class="line"> */</div><div class="line">- (<span class="built_in">NSString</span> *)currentURLBaseOnRelativeURL:(<span class="built_in">NSString</span> *)url;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<h3 id="第二个问题的解决方案，自定义RootWindow-让它集成于-UIWindow，并且覆写，然后自己写一套新的stroyboard，每次身份切换的时候，直接切换keyWindow的rootViewController"><a href="#第二个问题的解决方案，自定义RootWindow-让它集成于-UIWindow，并且覆写，然后自己写一套新的stroyboard，每次身份切换的时候，直接切换keyWindow的rootViewController" class="headerlink" title="第二个问题的解决方案，自定义RootWindow,让它集成于 UIWindow，并且覆写，然后自己写一套新的stroyboard，每次身份切换的时候，直接切换keyWindow的rootViewController"></a>第二个问题的解决方案，自定义<code>RootWindow</code>,让它集成于 <code>UIWindow</code>，并且覆写，然后自己写一套新的stroyboard，每次身份切换的时候，直接切换keyWindow的rootViewController</h3><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)setRootViewController:(<span class="built_in">UIViewController</span> *)rootViewController</div><div class="line">&#123;</div><div class="line">	<span class="comment">// 这里我发现在某些设备上由于push、present之后就不能够正常销毁,这里就需要你去判断，做相应的pop、dismiss之后，在去setRootViewController</span></div><div class="line">	<span class="comment">// 但是后来又发现系统的navigation的栈，栈的弹出需要时间才能弹出，不是立刻弹出啊的，这里就很鸡肋了，目前我还没想到啥解决方案。</span></div><div class="line">    [<span class="built_in">UIViewController</span> fastToRootVC];</div><div class="line">    </div><div class="line">    <span class="comment">//remove old rootViewController's sub views</span></div><div class="line">    <span class="keyword">for</span> (<span class="built_in">UIView</span>* subView <span class="keyword">in</span> <span class="keyword">self</span>.rootViewController.view.subviews)</div><div class="line">    &#123;</div><div class="line">        [subView removeFromSuperview];</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//remove old rootViewController's view</span></div><div class="line">    [<span class="keyword">self</span>.rootViewController.view removeFromSuperview];</div><div class="line">    </div><div class="line">    <span class="comment">//set new rootViewController</span></div><div class="line">    [<span class="keyword">super</span> setRootViewController:rootViewController];</div><div class="line">    </div><div class="line">    <span class="comment">//remove empty UILayoutContainerView(s) remaining on root window</span></div><div class="line">    <span class="keyword">for</span> (<span class="built_in">UIView</span> *subView <span class="keyword">in</span> <span class="keyword">self</span>.subviews)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span> (subView.subviews.count == <span class="number">0</span>)</div><div class="line">        &#123;</div><div class="line">            [subView removeFromSuperview];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;昨天将最新版1-9-5发布上线。总结一下这一版本中踩过的坑。&quot;&gt;&lt;a href=&quot;#昨天将最新版1-9-5发布上线。总结一下这一版本中踩过的坑。&quot; class=&quot;headerlink&quot; title=&quot;昨天将最新版1.9.5发布上线。总结一下这一版本中踩过的坑。&quot;&gt;&lt;/a&gt;昨天将最新版1.9.5发布上线。总结一下这一版本中踩过的坑。&lt;/h2&gt;&lt;h3 id=&quot;产品的需求：&quot;&gt;&lt;a href=&quot;#产品的需求：&quot; class=&quot;headerlink&quot; title=&quot;产品的需求：&quot;&gt;&lt;/a&gt;产品的需求：&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;app中默认是游客身份，随着不同身份的切换，可能需要切换不同的网管。(假如请求的url为: &lt;code&gt;http://www.siji.com/a.php&lt;/code&gt;,那么随着身份的切换的话，可能 &lt;code&gt;http://www.siji.com&lt;/code&gt;需要修改为&lt;code&gt;http://www.chengke.com&lt;/code&gt;)，并且有些请求，是不需要依赖身份的：(比如登录部分请求就是&lt;code&gt;http://www.login.com/login.php&lt;/code&gt;、支付部分的请求就是&lt;code&gt;http://www.pay.com/pay.php&lt;/code&gt;)。
    
    </summary>
    
      <category term="日志" scheme="http://www.ghcoder.com/categories/%E6%97%A5%E5%BF%97/"/>
    
    
      <category term="Object-c" scheme="http://www.ghcoder.com/tags/Object-c/"/>
    
  </entry>
  
  <entry>
    <title>关于PHP7的新坑</title>
    <link href="http://www.ghcoder.com/2017/03/27/20170327/"/>
    <id>http://www.ghcoder.com/2017/03/27/20170327/</id>
    <published>2017-03-27T09:27:12.000Z</published>
    <updated>2017-05-10T12:18:40.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="距离上次写PHP已经过了2、3年了，最近闲来无事，想再整整PHP。我是通过mac安装了虚拟机，Ubuntn16-04的版本，在安装PHP环境的时候，就发现很多坑，一些小问题google可以查到的我这里就不说了，在安装完Apache、PHP、Mysql的时候，并且安装完Phpmyadmin的时候，会报错："><a href="#距离上次写PHP已经过了2、3年了，最近闲来无事，想再整整PHP。我是通过mac安装了虚拟机，Ubuntn16-04的版本，在安装PHP环境的时候，就发现很多坑，一些小问题google可以查到的我这里就不说了，在安装完Apache、PHP、Mysql的时候，并且安装完Phpmyadmin的时候，会报错：" class="headerlink" title="距离上次写PHP已经过了2、3年了，最近闲来无事，想再整整PHP。我是通过mac安装了虚拟机，Ubuntn16.04的版本，在安装PHP环境的时候，就发现很多坑，一些小问题google可以查到的我这里就不说了，在安装完Apache、PHP、Mysql的时候，并且安装完Phpmyadmin的时候，会报错："></a>距离上次写PHP已经过了2、3年了，最近闲来无事，想再整整PHP。我是通过mac安装了虚拟机，Ubuntn16.04的版本，在安装PHP环境的时候，就发现很多坑，一些小问题google可以查到的我这里就不说了，在安装完Apache、PHP、Mysql的时候，并且安装完Phpmyadmin的时候，会报错：</h2><a id="more"></a>
<figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="title">The</span></span> mysqli extension is missing....</div></pre></td></tr></table></figure>
<h3 id="google一搜就会发现："><a href="#google一搜就会发现：" class="headerlink" title="google一搜就会发现："></a>google一搜就会发现：</h3><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-<span class="keyword">get</span> install php5-mysql</div></pre></td></tr></table></figure>
<h3 id="这里对应的php5的安装，那你这里是写php7-0-mysql还是写php7-1-mysql就需要看你安装php的版本号了。你可以通过-lt-php-echo-phpinfo-gt-、也可以通过php-version可以知道，你需要安装的是多少。"><a href="#这里对应的php5的安装，那你这里是写php7-0-mysql还是写php7-1-mysql就需要看你安装php的版本号了。你可以通过-lt-php-echo-phpinfo-gt-、也可以通过php-version可以知道，你需要安装的是多少。" class="headerlink" title="这里对应的php5的安装，那你这里是写php7.0-mysql还是写php7.1-mysql就需要看你安装php的版本号了。你可以通过&lt;?php echo phpinfo();?&gt;、也可以通过php --version可以知道，你需要安装的是多少。"></a>这里对应的php5的安装，那你这里是写<code>php7.0-mysql</code>还是写<code>php7.1-mysql</code>就需要看你安装php的版本号了。你可以通过<code>&lt;?php echo phpinfo();?&gt;</code>、也可以通过<code>php --version</code>可以知道，你需要安装的是多少。</h3><h2 id="在调用mysql的时候，之前我记得我很久之前就一直都在使用mysql-connect-这个函数来连接数据库，但是最近我发现我通过这个函数、没有任何的反馈，通过try-catch也没有任何error、这个问题一直纠结了好久，今天才发现原来在php7的版本的时候，已经完全废弃了这个函数了，而是已经使用mysqli-connect"><a href="#在调用mysql的时候，之前我记得我很久之前就一直都在使用mysql-connect-这个函数来连接数据库，但是最近我发现我通过这个函数、没有任何的反馈，通过try-catch也没有任何error、这个问题一直纠结了好久，今天才发现原来在php7的版本的时候，已经完全废弃了这个函数了，而是已经使用mysqli-connect" class="headerlink" title="在调用mysql的时候，之前我记得我很久之前就一直都在使用mysql_connect()这个函数来连接数据库，但是最近我发现我通过这个函数、没有任何的反馈，通过try/catch也没有任何error、这个问题一直纠结了好久，今天才发现原来在php7的版本的时候，已经完全废弃了这个函数了，而是已经使用mysqli_connect(),"></a>在调用mysql的时候，之前我记得我很久之前就一直都在使用<code>mysql_connect()</code>这个函数来连接数据库，但是最近我发现我通过这个函数、没有任何的反馈，通过try/catch也没有任何error、这个问题一直纠结了好久，今天才发现原来在<code>php7</code>的版本的时候，已经完全废弃了这个函数了，而是已经使用<code>mysqli_connect()</code>,</h2><h3 id="这里是PHP官方手册的说明："><a href="#这里是PHP官方手册的说明：" class="headerlink" title="这里是PHP官方手册的说明："></a>这里是PHP官方手册的说明：</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">Warning</span></div><div class="line">本扩展自 <span class="selector-tag">PHP</span> 5<span class="selector-class">.5</span><span class="selector-class">.0</span> 起已废弃，并在自 <span class="selector-tag">PHP</span> 7<span class="selector-class">.0</span><span class="selector-class">.0</span> 开始被移除。应使用 <span class="selector-tag">MySQLi</span> 或 <span class="selector-tag">PDO_MySQL</span> 扩展来替换之。参见 <span class="selector-tag">MySQL</span>：选择 <span class="selector-tag">API</span> 指南以及相关 <span class="selector-tag">FAQ</span> 来获取更多信息。用以替代本函数的有：</div><div class="line"><span class="selector-tag">mysqli_connect</span>()</div><div class="line"><span class="selector-tag">PDO</span><span class="selector-pseudo">::__construct()</span></div></pre></td></tr></table></figure>
<h3 id="所以我这里就用mysqli-connect-来替换，我这里建立一个video的库，并且建了一个test的表："><a href="#所以我这里就用mysqli-connect-来替换，我这里建立一个video的库，并且建了一个test的表：" class="headerlink" title="所以我这里就用mysqli_connect()来替换，我这里建立一个video的库，并且建了一个test的表："></a>所以我这里就用mysqli_connect()来替换，我这里建立一个video的库，并且建了一个test的表：</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">$servername = <span class="string">"localhost"</span>;</div><div class="line">$username = <span class="string">"root"</span>;</div><div class="line">$password = <span class="string">"123456789"</span>;</div><div class="line">$dbname = <span class="string">"video"</span>;</div><div class="line"></div><div class="line"><span class="comment">// Create connection</span></div><div class="line">$conn = <span class="keyword">new</span> mysqli($servername, $username, $password, $dbname);</div><div class="line"><span class="comment">// Check connection</span></div><div class="line"><span class="keyword">if</span> ($conn-&gt;connect_error) &#123;</div><div class="line">    <span class="keyword">die</span>(<span class="string">"Connection failed: "</span> . $conn-&gt;connect_error);</div><div class="line">&#125; </div><div class="line"></div><div class="line">$sql = <span class="string">"SELECT * FROM test"</span>;</div><div class="line">$result = $conn-&gt;query($sql);</div><div class="line"></div><div class="line"><span class="keyword">if</span>($result -&gt; num_rows &gt; <span class="number">0</span>) &#123;</div><div class="line">    <span class="keyword">while</span>($row = $result -&gt; fetch_assoc()) &#123;</div><div class="line">        <span class="keyword">echo</span> <span class="string">"Name: "</span>.$row[<span class="string">"name"</span>].<span class="string">"-Status: "</span>.$row[<span class="string">"status"</span>].<span class="string">"-Time:"</span>.$row[<span class="string">"time"</span>].<span class="string">"&lt;br&gt;"</span>;</div><div class="line">    &#125;</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="keyword">echo</span> <span class="string">'no datas'</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">$result-&gt;close();</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;距离上次写PHP已经过了2、3年了，最近闲来无事，想再整整PHP。我是通过mac安装了虚拟机，Ubuntn16-04的版本，在安装PHP环境的时候，就发现很多坑，一些小问题google可以查到的我这里就不说了，在安装完Apache、PHP、Mysql的时候，并且安装完Phpmyadmin的时候，会报错：&quot;&gt;&lt;a href=&quot;#距离上次写PHP已经过了2、3年了，最近闲来无事，想再整整PHP。我是通过mac安装了虚拟机，Ubuntn16-04的版本，在安装PHP环境的时候，就发现很多坑，一些小问题google可以查到的我这里就不说了，在安装完Apache、PHP、Mysql的时候，并且安装完Phpmyadmin的时候，会报错：&quot; class=&quot;headerlink&quot; title=&quot;距离上次写PHP已经过了2、3年了，最近闲来无事，想再整整PHP。我是通过mac安装了虚拟机，Ubuntn16.04的版本，在安装PHP环境的时候，就发现很多坑，一些小问题google可以查到的我这里就不说了，在安装完Apache、PHP、Mysql的时候，并且安装完Phpmyadmin的时候，会报错：&quot;&gt;&lt;/a&gt;距离上次写PHP已经过了2、3年了，最近闲来无事，想再整整PHP。我是通过mac安装了虚拟机，Ubuntn16.04的版本，在安装PHP环境的时候，就发现很多坑，一些小问题google可以查到的我这里就不说了，在安装完Apache、PHP、Mysql的时候，并且安装完Phpmyadmin的时候，会报错：&lt;/h2&gt;
    
    </summary>
    
      <category term="日志" scheme="http://www.ghcoder.com/categories/%E6%97%A5%E5%BF%97/"/>
    
    
      <category term="PHP" scheme="http://www.ghcoder.com/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>更新Reveal2的一些问题</title>
    <link href="http://www.ghcoder.com/2017/03/15/20170315/"/>
    <id>http://www.ghcoder.com/2017/03/15/20170315/</id>
    <published>2017-03-15T01:27:12.000Z</published>
    <updated>2017-05-10T12:19:01.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="最近任务也不是很多，尽量逼自己把每天学的一些的东西都记录下来。"><a href="#最近任务也不是很多，尽量逼自己把每天学的一些的东西都记录下来。" class="headerlink" title="最近任务也不是很多，尽量逼自己把每天学的一些的东西都记录下来。"></a>最近任务也不是很多，尽量逼自己把每天学的一些的东西都记录下来。</h3><h2 id=""><a href="#" class="headerlink" title=""></a><a id="more"></a></h2><img src="http://ohhvhrib5.bkt.clouddn.com/images/103.jpeg">
<blockquote>
<p>这张图来自<code>简书</code>APP，也是一个朋友闻起来来的，他说这是在无数据、无网络的状态下就会出现这样的界面，这个是怎么做到的呢？</p>
</blockquote>
<p>1 . 我当时想了一下，还是觉得要用collectionView来实现吧，其实<code>热门文章</code>的内容，其实自己看就会发现，他就一种cell格式，而<code>热门专题</code>应该就是用collectionview来做的吧。</p>
<p>2 .后来一拍脑子觉得不对啊，这tm得多烦啊，而且这个仅仅只是无数据的一种页面的展示啊，要我做，那就直接一张image遮罩着不就行了。</p>
<h3 id="猜想了半天还是用Reveal来看一下吧。"><a href="#猜想了半天还是用Reveal来看一下吧。" class="headerlink" title="猜想了半天还是用Reveal来看一下吧。"></a>猜想了半天还是用Reveal来看一下吧。</h3><p>1 .由于很长时间不用Reveal了，而且我之前的Reveal还是1.x的版本，然后用越狱机器一看，一直导入失败，一直在报这个错误(❌)</p>
<blockquote>
<p>The operation couldn’t be completed. The app is linked against an older version of the Reveal library. You may need to update the Reveal library in your app. </p>
</blockquote>
<p>2 .后来发现之前导入到机器中的一个<code>libReveal.dylib</code>的文件以及找不到了，这下，我tm傻眼了，我一直以为让我更新一下这个所谓的动态库呢！ 后来google了一下，发现了官方的回复：</p>
<blockquote>
<p>We no longer ship a dynamic library starting with Reveal 2, we include an iOS 8+ framework instead. The good news is that you should be able to make a copy of, and rename the framework’s binary (RevealServer.framework/ReveaServer) to libReveal.dylib and then follow the instructions as before</p>
</blockquote>
<h3 id="最后还发现几个好玩的东西："><a href="#最后还发现几个好玩的东西：" class="headerlink" title="最后还发现几个好玩的东西："></a>最后还发现几个好玩的东西：</h3><hr>
<img src="http://ohhvhrib5.bkt.clouddn.com/images/104.jpeg">
<hr>
<img src="http://ohhvhrib5.bkt.clouddn.com/images/105.jpeg">
<blockquote>
<p>可以发现真的就如我的猜想，他其实这些都是之前就定死的一个image，遮罩在上面的，其他也就不用说了。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;最近任务也不是很多，尽量逼自己把每天学的一些的东西都记录下来。&quot;&gt;&lt;a href=&quot;#最近任务也不是很多，尽量逼自己把每天学的一些的东西都记录下来。&quot; class=&quot;headerlink&quot; title=&quot;最近任务也不是很多，尽量逼自己把每天学的一些的东西都记录下来。&quot;&gt;&lt;/a&gt;最近任务也不是很多，尽量逼自己把每天学的一些的东西都记录下来。&lt;/h3&gt;&lt;h2 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;
    
    </summary>
    
      <category term="日志" scheme="http://www.ghcoder.com/categories/%E6%97%A5%E5%BF%97/"/>
    
    
      <category term="Reveal" scheme="http://www.ghcoder.com/tags/Reveal/"/>
    
  </entry>
  
  <entry>
    <title>尝试Swift搭建服务器-建立自己的网站</title>
    <link href="http://www.ghcoder.com/2017/02/25/20170225/"/>
    <id>http://www.ghcoder.com/2017/02/25/20170225/</id>
    <published>2017-02-25T03:20:12.000Z</published>
    <updated>2017-05-10T12:19:20.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="学习Paul大神的swift-server，我也尝试用Swift来搭建自己的网站。这里主要依赖的是IBM开源的Kitura框架。"><a href="#学习Paul大神的swift-server，我也尝试用Swift来搭建自己的网站。这里主要依赖的是IBM开源的Kitura框架。" class="headerlink" title="学习Paul大神的swift-server，我也尝试用Swift来搭建自己的网站。这里主要依赖的是IBM开源的Kitura框架。"></a>学习Paul大神的swift-server，我也尝试用Swift来搭建自己的网站。这里主要依赖的是IBM开源的Kitura框架。</h2><a id="more"></a>
<h3 id="环境搭建-（Mac下）"><a href="#环境搭建-（Mac下）" class="headerlink" title="环境搭建 （Mac下）"></a>环境搭建 （Mac下）</h3><ol>
<li>因为我们是在自己的mac上搭建环境，所以需要下载Docker[<a href="https://docs.docker.com/docker-for-mac/" target="_blank" rel="external">https://docs.docker.com/docker-for-mac/</a>] 这个软件，这个软件的作用就相当于一台看不见的虚拟机，能够在mac上运行Linux。</li>
<li>下载完成之后，建立根目录文件夹。</li>
</ol>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">cd ~/Desktop</div><div class="line">mkdir server</div><div class="line">cd server</div><div class="line">docker run -itv $(pwd):/projects --name projects -w /projects -<span class="selector-tag">p</span> <span class="number">8089</span>:<span class="number">8089</span> -<span class="selector-tag">p</span> <span class="number">8090</span>:<span class="number">8090</span> -<span class="selector-tag">p</span> <span class="number">5984</span>:<span class="number">5984</span> twostraws/server-side-swift /bin/bash</div></pre></td></tr></table></figure>
<p>3 . 这里docker开头的命令，是让doker软件来运行的，其中’/projects’ 指的是文件内建立以projects开头的文件默认指向的是当前的文件路径，并且建立的8090、5984这两个端口。</p>
<p>4 . 建立好之后你就会看到类似如下的返回值：</p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">root<span class="variable">@f2429f0045db</span><span class="symbol">:/projects</span><span class="comment">#</span></div></pre></td></tr></table></figure>
<h3 id="建立第一个文件"><a href="#建立第一个文件" class="headerlink" title="建立第一个文件"></a>建立第一个文件</h3><ol>
<li>运行如下命令：</li>
</ol>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">cd</span> ~/Desktop/server</div><div class="line"><span class="built_in">mkdir</span> project1</div><div class="line"><span class="keyword">cd</span> project1</div><div class="line">swift package init --<span class="built_in">type</span> <span class="built_in">executable</span></div></pre></td></tr></table></figure>
<h4 id="最后一行命令可能比较困惑，其实这行命令就是告诉swift-package（这里的swift-package相当于OC中的cocoapods、或者NodeJS中的npm一样）-我们需要建立一个新的项目，’–type-executable‘的意思是我们希望建立一个独立的部分。看到如下返回值就代表成功了："><a href="#最后一行命令可能比较困惑，其实这行命令就是告诉swift-package（这里的swift-package相当于OC中的cocoapods、或者NodeJS中的npm一样）-我们需要建立一个新的项目，’–type-executable‘的意思是我们希望建立一个独立的部分。看到如下返回值就代表成功了：" class="headerlink" title="最后一行命令可能比较困惑，其实这行命令就是告诉swift package（这里的swift package相当于OC中的cocoapods、或者NodeJS中的npm一样）,我们需要建立一个新的项目，’–type executable‘的意思是我们希望建立一个独立的部分。看到如下返回值就代表成功了："></a>最后一行命令可能比较困惑，其实这行命令就是告诉swift package（这里的swift package相当于OC中的cocoapods、或者NodeJS中的npm一样）,我们需要建立一个新的项目，’–type executable‘的意思是我们希望建立一个独立的部分。看到如下返回值就代表成功了：</h4><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Creating executable package: project1</div><div class="line">Creating Package<span class="selector-class">.swift</span></div><div class="line">Creating <span class="selector-class">.gitignore</span></div><div class="line">Creating Sources/</div><div class="line">Creating Sources/main<span class="selector-class">.swift</span></div><div class="line">Creating Tests/</div></pre></td></tr></table></figure>
<p>2 .运行：</p>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">swift </span><span class="keyword">build</span></div></pre></td></tr></table></figure>
<p>3 . 再运行</p>
<figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="title">.build/debug/project1</span></div></pre></td></tr></table></figure>
<p>当看到”Hello world!”就代表已经成功了。</p>
<p>4 .再运行</p>
<figure class="highlight verilog"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">swift <span class="keyword">package</span> <span class="keyword">generate</span>-xcodeproj</div></pre></td></tr></table></figure>
<p>此时用Xcode打开刚刚生成的project1.xcodeproj,切换project1&gt;Sources&gt;project1,当控制台中打印“Hello world!”</p>
<p>5 . 找到Main.swift文件，更换内容，我们引入路由模块，并且实例化，并且监听8090端口</p>
<figure class="highlight nix"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">import</span> Kitura</div><div class="line"></div><div class="line"><span class="keyword">let</span> <span class="attr">router</span> = Router()</div><div class="line"></div><div class="line">Kitura.addHTTPServer(onPort: <span class="number">8090</span>, <span class="keyword">with</span>: router)</div><div class="line">Kitura.run()</div></pre></td></tr></table></figure>
<p>此时打开浏览器”<a href="http://localhost:8090&quot;,大功告成！！！" target="_blank" rel="external">http://localhost:8090&quot;,大功告成！！！</a></p>
<h3 id="环境搭建-（Linux下）"><a href="#环境搭建-（Linux下）" class="headerlink" title="环境搭建 （Linux下）"></a>环境搭建 （Linux下）</h3><ol>
<li><p>先下载适合你Linux版本的Swift的版本[<a href="https://swift.org/download/" target="_blank" rel="external">https://swift.org/download/</a>]</p>
</li>
<li><p>其实这里Kitura的官网给出了教程，你也可以按照官方的教程走下去。[<a href="http://www.kitura.io/en/starter/settingup.html" target="_blank" rel="external">http://www.kitura.io/en/starter/settingup.html</a>]</p>
</li>
</ol>
<figure class="highlight q"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ sudo apt-<span class="built_in">get</span> <span class="keyword">update</span></div><div class="line">$ sudo apt-<span class="built_in">get</span> install clang libicu-<span class="built_in">dev</span> libcurl4-openssl-<span class="built_in">dev</span> libssl-<span class="built_in">dev</span></div></pre></td></tr></table></figure>
<figure class="highlight dos"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ export <span class="built_in">PATH</span>=&lt;<span class="built_in">path</span> to uncompressed tar contents&gt;/usr/bin:$<span class="built_in">PATH</span></div></pre></td></tr></table></figure>
<p>2 .这里已经介绍解释的很清楚了，就是将&lt;&gt;以及其中的内容替换成你刚才下载并解压下来的Swift包路径，假设我的路径为/home/gh/swift-3.0.2-release/, 那就可以在终端运行：</p>
<figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ <span class="keyword">export</span> PATH=/<span class="built_in">home</span>/gh/swift<span class="number">-3.0</span><span class="number">.2</span>-<span class="built_in">release</span>/usr/bin:$PATH</div></pre></td></tr></table></figure>
<p>3 .紧接着运行,看到正常的返回就代表已经安装正常。</p>
<figure class="highlight ada"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">swift <span class="comment">--version</span></div></pre></td></tr></table></figure>
<p>4 .下面的方法步骤就和之前在Mac上的配置是一样的了，你也可以参考Kitura的教程[<a href="http://www.kitura.io/en/starter/gettingstarted.html" target="_blank" rel="external">http://www.kitura.io/en/starter/gettingstarted.html</a>]</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;学习Paul大神的swift-server，我也尝试用Swift来搭建自己的网站。这里主要依赖的是IBM开源的Kitura框架。&quot;&gt;&lt;a href=&quot;#学习Paul大神的swift-server，我也尝试用Swift来搭建自己的网站。这里主要依赖的是IBM开源的Kitura框架。&quot; class=&quot;headerlink&quot; title=&quot;学习Paul大神的swift-server，我也尝试用Swift来搭建自己的网站。这里主要依赖的是IBM开源的Kitura框架。&quot;&gt;&lt;/a&gt;学习Paul大神的swift-server，我也尝试用Swift来搭建自己的网站。这里主要依赖的是IBM开源的Kitura框架。&lt;/h2&gt;
    
    </summary>
    
      <category term="日志" scheme="http://www.ghcoder.com/categories/%E6%97%A5%E5%BF%97/"/>
    
    
      <category term="Swift" scheme="http://www.ghcoder.com/tags/Swift/"/>
    
  </entry>
  
  <entry>
    <title>学习阿里开源项目BeeHive(三)</title>
    <link href="http://www.ghcoder.com/2016/12/01/20161201/"/>
    <id>http://www.ghcoder.com/2016/12/01/20161201/</id>
    <published>2016-12-01T08:31:12.000Z</published>
    <updated>2017-05-10T10:06:02.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="最后总结一下整个BeeHive项目的搭建。以及我看完之后的一些质疑和想法，有些作者以及给出了回答，会在下一版本的更新中进行修改。"><a href="#最后总结一下整个BeeHive项目的搭建。以及我看完之后的一些质疑和想法，有些作者以及给出了回答，会在下一版本的更新中进行修改。" class="headerlink" title="最后总结一下整个BeeHive项目的搭建。以及我看完之后的一些质疑和想法，有些作者以及给出了回答，会在下一版本的更新中进行修改。"></a>最后总结一下整个BeeHive项目的搭建。以及我看完之后的一些质疑和想法，有些作者以及给出了回答，会在下一版本的更新中进行修改。</h3><hr>
<h4 id="先贴上我自己画的一个提纲"><a href="#先贴上我自己画的一个提纲" class="headerlink" title="先贴上我自己画的一个提纲"></a>先贴上我自己画的一个提纲</h4><img src="http://ohhvhrib5.bkt.clouddn.com/images/step1.png"> 
<h2 id=""><a href="#" class="headerlink" title=" "></a><a id="more"></a> </h2><h2 id="-1"><a href="#-1" class="headerlink" title=""></a><img src="http://ohhvhrib5.bkt.clouddn.com/images/step3.png"></h2><h4 id="首先，为什么每个ViewController都需要配备一个配备一个Module的文件？"><a href="#首先，为什么每个ViewController都需要配备一个配备一个Module的文件？" class="headerlink" title="首先，为什么每个ViewController都需要配备一个配备一个Module的文件？"></a>首先，为什么每个ViewController都需要配备一个配备一个Module的文件？</h4><h2 id="因为他需要通过-void-load-的方法，动态的将moduleInfo的信息存储下来，这里是存储在BHModuleManager文件中的self-BHModules此时这里存储的都是字符串，还没有创建为实例对象。"><a href="#因为他需要通过-void-load-的方法，动态的将moduleInfo的信息存储下来，这里是存储在BHModuleManager文件中的self-BHModules此时这里存储的都是字符串，还没有创建为实例对象。" class="headerlink" title="因为他需要通过+(void)load{}的方法，动态的将moduleInfo的信息存储下来，这里是存储在BHModuleManager文件中的self.BHModules此时这里存储的都是字符串，还没有创建为实例对象。"></a>因为他需要通过<code>+(void)load{}</code>的方法，动态的将<code>moduleInfo</code>的信息存储下来，这里是存储在<code>BHModuleManager</code>文件中的<code>self.BHModules</code><em>此时这里存储的都是字符串，还没有创建为实例对象</em>。</h2><h4 id="为什么有些module的文件中没有load方法，但是他还是在启动之前也注册进去了呢？答：因为这里作者都是通过宏的的形式，来快速实现加载的信息，本质上和-void-load-是一样的。"><a href="#为什么有些module的文件中没有load方法，但是他还是在启动之前也注册进去了呢？答：因为这里作者都是通过宏的的形式，来快速实现加载的信息，本质上和-void-load-是一样的。" class="headerlink" title="为什么有些module的文件中没有load方法，但是他还是在启动之前也注册进去了呢？答：因为这里作者都是通过宏的的形式，来快速实现加载的信息，本质上和+(void)load{}是一样的。"></a>为什么有些<code>module</code>的文件中没有load方法，但是他还是在启动之前也注册进去了呢？答：因为这里作者都是通过<code>宏</code>的的形式，来快速实现加载的信息，本质上和<code>+(void)load{}</code>是一样的。</h4><h2 id="BH-EXPORT-MODULE-NO"><a href="#BH-EXPORT-MODULE-NO" class="headerlink" title="BH_EXPORT_MODULE(NO)  "></a><em>BH_EXPORT_MODULE(NO)</em>  </h2><h4 id="这里在官方的demo中看到TestAppDelegate进行了ModuleConfigName、ServiceConfigName的设置，不设置可以吗？答：可以！！这里在BHContext对象实例化的时候，已经默认设置了初始值了。"><a href="#这里在官方的demo中看到TestAppDelegate进行了ModuleConfigName、ServiceConfigName的设置，不设置可以吗？答：可以！！这里在BHContext对象实例化的时候，已经默认设置了初始值了。" class="headerlink" title="这里在官方的demo中看到TestAppDelegate进行了ModuleConfigName、ServiceConfigName的设置，不设置可以吗？答：可以！！这里在BHContext对象实例化的时候，已经默认设置了初始值了。"></a>这里在官方的demo中看到TestAppDelegate进行了ModuleConfigName、ServiceConfigName的设置，不设置可以吗？答：可以！！这里在<code>BHContext</code>对象实例化的时候，已经默认设置了初始值了。</h4><hr>
<h4 id="这里假如我有新的功能，我应该往哪里去添加呢？答：这里只是我的猜想-gt-应该在BHContext中去添加，因为在BHContext实例化的时候，就顺带实例化了一系列的对象：BHShortCutItem、BHOpenURLItem、BHNotificationItem、BHUserActivity、BHConfig-并且这些对象都是单例，这里我保持我的态度。这里的if调试时作者的笔误，他会在下一版本更新-if-BHInstance-isKindOfClass-BHContext-class"><a href="#这里假如我有新的功能，我应该往哪里去添加呢？答：这里只是我的猜想-gt-应该在BHContext中去添加，因为在BHContext实例化的时候，就顺带实例化了一系列的对象：BHShortCutItem、BHOpenURLItem、BHNotificationItem、BHUserActivity、BHConfig-并且这些对象都是单例，这里我保持我的态度。这里的if调试时作者的笔误，他会在下一版本更新-if-BHInstance-isKindOfClass-BHContext-class" class="headerlink" title="这里假如我有新的功能，我应该往哪里去添加呢？答：这里只是我的猜想-&gt;应该在BHContext中去添加，因为在BHContext实例化的时候，就顺带实例化了一系列的对象：BHShortCutItem、BHOpenURLItem、BHNotificationItem、BHUserActivity、BHConfig,并且这些对象都是单例，这里我保持我的态度。这里的if调试时作者的笔误，他会在下一版本更新 if ([BHInstance isKindOfClass:[BHContext class]]) {}"></a>这里假如我有新的功能，我应该往哪里去添加呢？答：<em>这里只是我的猜想</em>-&gt;应该在<code>BHContext</code>中去添加，因为在<code>BHContext</code>实例化的时候，就顺带实例化了一系列的对象：<code>BHShortCutItem</code>、<code>BHOpenURLItem</code>、<code>BHNotificationItem</code>、<code>BHUserActivity</code>、<code>BHConfig</code>,并且这些对象都是单例，这里我保持我的态度。<em>这里的if调试时作者的笔误，他会在下一版本更新 if ([BHInstance isKindOfClass:[BHContext class]]) {}</em></h4><figure class="highlight monkey"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">-(instancetype)init</div><div class="line">&#123;</div><div class="line">    <span class="built_in">self</span> = [<span class="built_in">super</span> init];</div><div class="line">    <span class="keyword">if</span> (<span class="built_in">self</span>) &#123;</div><div class="line">        <span class="built_in">self</span>.modulesByName  = [[NSMutableDictionary alloc] initWithCapacity:<span class="number">1</span>];</div><div class="line">        <span class="built_in">self</span>.servicesByName  = [[NSMutableDictionary alloc] initWithCapacity:<span class="number">1</span>];</div><div class="line">        <span class="built_in">self</span>.moduleConfigName = @<span class="string">"BeeHive.bundle/BeeHive"</span>;</div><div class="line">        <span class="built_in">self</span>.serviceConfigName = @<span class="string">"BeeHive.bundle/BHService"</span>;<span class="meta"></span></div><div class="line"></div><div class="line">#<span class="meta-keyword">if</span> __IPHONE_OS_VERSION_MAX_ALLOWED &gt; 80400</div><div class="line">        <span class="built_in">self</span>.touchShortcutItem = [BHShortcutItem <span class="keyword">new</span>];<span class="meta"></span></div><div class="line">#<span class="meta-keyword">endif</span></div><div class="line"></div><div class="line">        <span class="built_in">self</span>.openURLItem = [BHOpenURLItem <span class="keyword">new</span>];</div><div class="line">        <span class="built_in">self</span>.notificationsItem = [BHNotificationsItem <span class="keyword">new</span>];</div><div class="line">        <span class="built_in">self</span>.userActivityItem = [BHUserActivityItem <span class="keyword">new</span>];</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="built_in">self</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">+(<span class="keyword">instancetype) </span><span class="keyword">shareInstance</span></div><div class="line">&#123;</div><div class="line">    static <span class="keyword">dispatch_once_t </span>p<span class="comment">;</span></div><div class="line">    static id <span class="keyword">BHInstance </span>= nil<span class="comment">;</span></div><div class="line"></div><div class="line">    <span class="keyword">dispatch_once(&amp;p, </span>^&#123;</div><div class="line">        <span class="keyword">BHInstance </span>= [[[self class] alloc] init]<span class="comment">;</span></div><div class="line">        if ([<span class="keyword">BHInstance </span>isKindOfClass:[<span class="keyword">BHContext </span>class]]) &#123;</div><div class="line">            ((<span class="keyword">BHContext </span>*) <span class="keyword">BHInstance).config </span>= [<span class="keyword">BHConfig </span><span class="keyword">shareInstance];</span></div><div class="line">        &#125;</div><div class="line">    &#125;)<span class="comment">;</span></div><div class="line"></div><div class="line">    return <span class="keyword">BHInstance;</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<h4 id="系统是在什么时候载入本地的组件信息的呢？答：是在哎BeeHive调用setContext对象的时候，进行调用的。并且这里通过context中的文件名，进行拼接，返回plist文件的信息。-比起在这里将self-BHModules-文件信息换成了响应的实例对象"><a href="#系统是在什么时候载入本地的组件信息的呢？答：是在哎BeeHive调用setContext对象的时候，进行调用的。并且这里通过context中的文件名，进行拼接，返回plist文件的信息。-比起在这里将self-BHModules-文件信息换成了响应的实例对象" class="headerlink" title="系统是在什么时候载入本地的组件信息的呢？答：是在哎BeeHive调用setContext对象的时候，进行调用的。并且这里通过context中的文件名，进行拼接，返回plist文件的信息。 比起在这里将self.BHModules 文件信息换成了响应的实例对象"></a>系统是在什么时候载入本地的组件信息的呢？答：是在哎<code>BeeHive</code>调用<code>setContext</code>对象的时候，进行调用的。并且这里通过<code>context</code>中的文件名，进行拼接，返回plist文件的信息。 <em>比起在这里将self.BHModules 文件信息换成了响应的实例对象</em></h4><hr>
<h4 id="那看到各个Module都会调用modSetUp、modInit类似的方法，那这些方法是在什么时候调用的？答：是在调用父类的Appdelegate的方法的时候调用的，"><a href="#那看到各个Module都会调用modSetUp、modInit类似的方法，那这些方法是在什么时候调用的？答：是在调用父类的Appdelegate的方法的时候调用的，" class="headerlink" title="那看到各个Module都会调用modSetUp、modInit类似的方法，那这些方法是在什么时候调用的？答：是在调用父类的Appdelegate的方法的时候调用的，"></a>那看到各个<code>Module</code>都会调用<code>modSetUp</code>、<code>modInit</code>类似的方法，那这些方法是在什么时候调用的？答：是在调用父类的<code>Appdelegate</code>的方法的时候调用的，</h4><hr>
<h4 id="初了一些主动调用的上面这些方法，那什么时候才会调用系统的方法，类似进入后台、被挂起、进入前台。答：这是在appdelegate的响应方法调用的时候，也会调用。"><a href="#初了一些主动调用的上面这些方法，那什么时候才会调用系统的方法，类似进入后台、被挂起、进入前台。答：这是在appdelegate的响应方法调用的时候，也会调用。" class="headerlink" title="初了一些主动调用的上面这些方法，那什么时候才会调用系统的方法，类似进入后台、被挂起、进入前台。答：这是在appdelegate的响应方法调用的时候，也会调用。"></a>初了一些主动调用的上面这些方法，那什么时候才会调用系统的方法，类似进入后台、被挂起、进入前台。答：这是在appdelegate的响应方法调用的时候，也会调用。</h4>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;最后总结一下整个BeeHive项目的搭建。以及我看完之后的一些质疑和想法，有些作者以及给出了回答，会在下一版本的更新中进行修改。&quot;&gt;&lt;a href=&quot;#最后总结一下整个BeeHive项目的搭建。以及我看完之后的一些质疑和想法，有些作者以及给出了回答，会在下一版本的更新中进行修改。&quot; class=&quot;headerlink&quot; title=&quot;最后总结一下整个BeeHive项目的搭建。以及我看完之后的一些质疑和想法，有些作者以及给出了回答，会在下一版本的更新中进行修改。&quot;&gt;&lt;/a&gt;最后总结一下整个BeeHive项目的搭建。以及我看完之后的一些质疑和想法，有些作者以及给出了回答，会在下一版本的更新中进行修改。&lt;/h3&gt;&lt;hr&gt;
&lt;h4 id=&quot;先贴上我自己画的一个提纲&quot;&gt;&lt;a href=&quot;#先贴上我自己画的一个提纲&quot; class=&quot;headerlink&quot; title=&quot;先贴上我自己画的一个提纲&quot;&gt;&lt;/a&gt;先贴上我自己画的一个提纲&lt;/h4&gt;&lt;img src=&quot;http://ohhvhrib5.bkt.clouddn.com/images/step1.png&quot;&gt; 
&lt;h2 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot; &quot;&gt;&lt;/a&gt;
    
    </summary>
    
      <category term="日志" scheme="http://www.ghcoder.com/categories/%E6%97%A5%E5%BF%97/"/>
    
    
      <category term="学习" scheme="http://www.ghcoder.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>学习阿里开源项目BeeHive(二)</title>
    <link href="http://www.ghcoder.com/2016/11/28/20161128/"/>
    <id>http://www.ghcoder.com/2016/11/28/20161128/</id>
    <published>2016-11-28T10:02:12.000Z</published>
    <updated>2017-05-10T12:20:07.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="紧接着前面那篇文章，回到BHAppDelegate-m的文件里面的"><a href="#紧接着前面那篇文章，回到BHAppDelegate-m的文件里面的" class="headerlink" title="紧接着前面那篇文章，回到BHAppDelegate.m的文件里面的"></a>紧接着前面那篇文章，回到<code>BHAppDelegate.m</code>的文件里面的</h3><figure class="highlight erlang"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">- <span class="params">(BOOL)</span>application:<span class="params">(UIApplication *)</span>application didFinishLaunchingWithOptions:<span class="params">(NSDictionary *)</span>launchOptions</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>之前已经把所有的timeProdiler的这个类的作用，实例，已经public的方法都已经说了。在这个方法的实现中，作者还做了另外一件事情。</p>
<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[[<span class="keyword">BHModuleManager </span><span class="keyword">sharedManager] </span>tiggerEvent:<span class="keyword">BHMSetupEvent];</span></div><div class="line">[[<span class="keyword">BHModuleManager </span><span class="keyword">sharedManager] </span>tiggerEvent:<span class="keyword">BHMInitEvent];</span></div><div class="line"></div><div class="line"><span class="keyword">dispatch_async(dispatch_get_main_queue(), </span>^&#123;</div><div class="line">    [[<span class="keyword">BHModuleManager </span><span class="keyword">sharedManager] </span>tiggerEvent:<span class="keyword">BHMSplashEvent];</span></div><div class="line">&#125;)<span class="comment">;</span></div></pre></td></tr></table></figure>
<ol>
<li><code>BHModuleManager</code>从字面上理解应该就是管理模块之前调用逻辑的意思，并且在<code>BHModuleManager.m</code>中，我们可以看出来这个类也是个单例。</li>
<li>在init之后，紧接着就是调用<code>- (void)tiggerEvent:(BHModuleEventType)eventType;</code>的方法。</li>
<li>在这个方法的实现中可以看到一个很长的swich语句，遍历你传入的一个枚举类型，来做一系列的事情。</li>
<li>先看在<code>didFinishLaunch</code>中，第一次调用这个方法，传入的参数为<code>BHMSetupEvent</code>。</li>
</ol>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">case</span> <span class="string">BHMSetupEvent:</span></div><div class="line">[self <span class="string">handleModuleEvent:</span>kSetupSelector];</div><div class="line"><span class="keyword">break</span>;</div></pre></td></tr></table></figure>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)handleModuleEvent:(<span class="built_in">NSString</span> *)selectorStr</div><div class="line">&#123;</div><div class="line">    SEL seletor = <span class="built_in">NSSelectorFromString</span>(selectorStr);</div><div class="line">    [<span class="keyword">self</span>.BHModules enumerateObjectsUsingBlock:^(<span class="keyword">id</span>&lt;BHModuleProtocol&gt; moduleInstance, <span class="built_in">NSUInteger</span> idx, <span class="built_in">BOOL</span> * _Nonnull stop) &#123;</div><div class="line">        <span class="keyword">if</span> ([moduleInstance respondsToSelector:seletor]) &#123;</div><div class="line"><span class="meta">#pragma clang diagnostic push</span></div><div class="line"><span class="meta">#pragma clang diagnostic ignored <span class="meta-string">"-Warc-performSelector-leaks"</span></span></div><div class="line">            [moduleInstance performSelector:seletor withObject:<span class="keyword">self</span>.wholeContext];</div><div class="line"><span class="meta">#pragma clang diagnostic pop</span></div><div class="line"></div><div class="line">        [[BHTimeProfiler sharedTimeProfiler] recordEventTime:[<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%@ --- %@"</span>, [moduleInstance <span class="keyword">class</span>], <span class="built_in">NSStringFromSelector</span>(seletor)]];</div><div class="line"></div><div class="line">        &#125;</div><div class="line">    &#125;];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ol>
<li>可以看到传入了一个字符串作为入参，而这个参数写在这个文件的.m中。<code>static  NSString *kSetupSelector = @&quot;modSetUp:&quot;;</code>写死了。</li>
<li>紧接着在<code>handleModuleEvent</code>的实现中，通过runtime的NSSelectorFromString的方法将字符串转化为SEL的类型。</li>
<li>再枚举BHModules数组，从枚举中我们发现，不是所有的object对象都添加在BHModules的MutableArray中，这些object的对象必须要遵守<code>id&lt;BHModuleProtocol&gt;</code>的协议。</li>
<li>查询数组中有没有对象可以响应这个方法的，如果有的话，就调用这个方法，并且开始reordTime。</li>
<li>并且为了消除编译器所报的警告，可以通过添加<code>#pragma clang diagnostic ignored &quot;-Warc-performSelector-leaks&quot;</code>,来消除warning。</li>
</ol>
<h4 id="紧接着调用了同一个方法，却传入了不同的参数"><a href="#紧接着调用了同一个方法，却传入了不同的参数" class="headerlink" title="紧接着调用了同一个方法，却传入了不同的参数"></a>紧接着调用了同一个方法，却传入了不同的参数</h4><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">[[BHModuleManager sharedManager] <span class="string">tiggerEvent:</span>BHMInitEvent];</div><div class="line"></div><div class="line"></div><div class="line"> <span class="keyword">case</span> <span class="string">BHMInitEvent:</span></div><div class="line"> <span class="comment">//special</span></div><div class="line"> [self handleModulesInitEvent];</div><div class="line"> <span class="keyword">break</span>;</div></pre></td></tr></table></figure>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)handleModulesInitEvent</div><div class="line">&#123;</div><div class="line"></div><div class="line">    [<span class="keyword">self</span>.BHModules enumerateObjectsUsingBlock:^(<span class="keyword">id</span>&lt;BHModuleProtocol&gt; moduleInstance, <span class="built_in">NSUInteger</span> idx, <span class="built_in">BOOL</span> * _Nonnull stop) &#123;</div><div class="line">        __<span class="keyword">weak</span> <span class="keyword">typeof</span>(&amp;*<span class="keyword">self</span>) wself = <span class="keyword">self</span>;</div><div class="line">        <span class="keyword">void</span> ( ^ bk )();</div><div class="line">        bk = ^()&#123;</div><div class="line">            __<span class="keyword">strong</span> <span class="keyword">typeof</span>(&amp;*<span class="keyword">self</span>) sself = wself;</div><div class="line">            <span class="keyword">if</span> (sself) &#123;</div><div class="line">                <span class="keyword">if</span> ([moduleInstance respondsToSelector:<span class="keyword">@selector</span>(modInit:)]) &#123;</div><div class="line">                    [moduleInstance modInit:sself.wholeContext];</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line"></div><div class="line">        [[BHTimeProfiler sharedTimeProfiler] recordEventTime:[<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%@ --- modInit:"</span>, [moduleInstance <span class="keyword">class</span>]]];</div><div class="line"></div><div class="line">        <span class="keyword">if</span> ([moduleInstance respondsToSelector:<span class="keyword">@selector</span>(async)]) &#123;</div><div class="line">            <span class="built_in">BOOL</span> async = [moduleInstance async];</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (async) &#123;</div><div class="line">                <span class="built_in">dispatch_async</span>(dispatch_get_main_queue(), ^&#123;</div><div class="line">                    bk();</div><div class="line">                &#125;);</div><div class="line"></div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                bk();</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            bk();</div><div class="line">        &#125;</div><div class="line">    &#125;];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ol>
<li>首先循环遍历<code>self.BHModules</code>这个数组对象，先用Timer 开始记录下init方法的时间。</li>
<li>判断数组中的元素是否响应<code>async</code>的方法, 这个<code>- (BOOL)async;</code>的方法定义在<code>BHModuleProtocol</code>中，如果响应了这个方法，就取得这个方法的返回值,<code>从字面上判断这个变量记录了是否运行在多线程中，这里我只是个猜测</code>。</li>
<li>如果是在多线程中，就回到主线程中来执行上面所定义的block：<code>void ( ^ bk )();</code>，如果不是的话或者没有响应<code>async</code>,都直接运行这个block，应该默认状态下就是主线程了。</li>
<li>从代码上看来，就是不管在什么线程或者是否响应<code>async</code>的方法，上面的block是肯定要执行的。</li>
<li>block中所做的事情也很简单，就是判断这个元素对象是否响应<code>- (void)modInit:(BHContext *)context;</code>,这个protocol的代理方法，如果响应的话，就会执行这段代码，至于这里的<code>BHContext</code>的对象，我目前没看到在哪里传入进来，这里只看到了一个<code>Setter</code>的方法。</li>
</ol>
<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">- (void)setWholeContext:(<span class="keyword">BHContext </span>*)wholeContext</div><div class="line">&#123;</div><div class="line">    _wholeContext = wholeContext<span class="comment">;</span></div><div class="line">    self.modulesConfigFilename = _wholeContext.moduleConfigName<span class="comment">;</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="最后执行的一个方法"><a href="#最后执行的一个方法" class="headerlink" title="最后执行的一个方法"></a>最后执行的一个方法</h4><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">dispatch_async(dispatch_get_main_queue(), </span>^&#123;</div><div class="line">       [[<span class="keyword">BHModuleManager </span><span class="keyword">sharedManager] </span>tiggerEvent:<span class="keyword">BHMSplashEvent];</span></div><div class="line">   &#125;)<span class="comment">;</span></div></pre></td></tr></table></figure>
<ol>
<li>这个方法和<code>[self handleModuleEvent:kSetupSelector];</code>一样，除了传入的参数不同，响应的方法不同，其他都是一样。</li>
<li>这里还要强制要求这个方法的调用一定要在主线程中。</li>
</ol>
<h3 id="这样就已经把自定义的BHAppDelegate的主要几个实现已经介绍了一下，下面来看看demo中的实现。在TestAppDelegate的didFinishLaunchingWithOptions的方法中。"><a href="#这样就已经把自定义的BHAppDelegate的主要几个实现已经介绍了一下，下面来看看demo中的实现。在TestAppDelegate的didFinishLaunchingWithOptions的方法中。" class="headerlink" title="这样就已经把自定义的BHAppDelegate的主要几个实现已经介绍了一下，下面来看看demo中的实现。在TestAppDelegate的didFinishLaunchingWithOptions的方法中。"></a>这样就已经把自定义的<code>BHAppDelegate</code>的主要几个实现已经介绍了一下，下面来看看demo中的实现。在<code>TestAppDelegate</code>的<code>didFinishLaunchingWithOptions</code>的方法中。</h3><h4 id="这四行代码涉及到了同一个对象BHContext-从字面上判断应该是上下文对象，应该是对象之间的调用会需要用它来记录一下，这里是我的猜测"><a href="#这四行代码涉及到了同一个对象BHContext-从字面上判断应该是上下文对象，应该是对象之间的调用会需要用它来记录一下，这里是我的猜测" class="headerlink" title="这四行代码涉及到了同一个对象BHContext,从字面上判断应该是上下文对象，应该是对象之间的调用会需要用它来记录一下，这里是我的猜测"></a>这四行代码涉及到了同一个对象<code>BHContext</code>,从字面上判断应该是<code>上下文对象，应该是对象之间的调用会需要用它来记录一下，这里是我的猜测</code></h4><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[<span class="keyword">BHContext </span><span class="keyword">shareInstance].application </span>= application<span class="comment">;</span></div><div class="line">[<span class="keyword">BHContext </span><span class="keyword">shareInstance].launchOptions </span>= launchOptions<span class="comment">;</span></div><div class="line">[<span class="keyword">BHContext </span><span class="keyword">shareInstance].moduleConfigName </span>= @<span class="string">"BeeHive.bundle/BeeHive"</span><span class="comment">;//可选，默认为BeeHive.bundle/BeeHive.plist</span></div><div class="line">[<span class="keyword">BHContext </span><span class="keyword">shareInstance].serviceConfigName </span>= @<span class="string">"BeeHive.bundle/BHService"</span><span class="comment">;</span></div></pre></td></tr></table></figure>
<h4 id="在BHContext-m的代码中可以看出来，这个对象也是个单例，在这个单例的init方法中："><a href="#在BHContext-m的代码中可以看出来，这个对象也是个单例，在这个单例的init方法中：" class="headerlink" title="在BHContext.m的代码中可以看出来，这个对象也是个单例，在这个单例的init方法中："></a>在<code>BHContext.m</code>的代码中可以看出来，这个对象也是个单例，在这个单例的init方法中：</h4><figure class="highlight monkey"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">-(instancetype)init</div><div class="line">&#123;</div><div class="line">    <span class="built_in">self</span> = [<span class="built_in">super</span> init];</div><div class="line">    <span class="keyword">if</span> (<span class="built_in">self</span>) &#123;</div><div class="line">        <span class="built_in">self</span>.modulesByName  = [[NSMutableDictionary alloc] initWithCapacity:<span class="number">1</span>];</div><div class="line">        <span class="built_in">self</span>.servicesByName  = [[NSMutableDictionary alloc] initWithCapacity:<span class="number">1</span>];</div><div class="line">        <span class="built_in">self</span>.moduleConfigName = @<span class="string">"BeeHive.bundle/BeeHive"</span>;</div><div class="line">        <span class="built_in">self</span>.serviceConfigName = @<span class="string">"BeeHive.bundle/BHService"</span>;<span class="meta"></span></div><div class="line"></div><div class="line">#<span class="meta-keyword">if</span> __IPHONE_OS_VERSION_MAX_ALLOWED &gt; 80400</div><div class="line">        <span class="built_in">self</span>.touchShortcutItem = [BHShortcutItem <span class="keyword">new</span>];<span class="meta"></span></div><div class="line">#<span class="meta-keyword">endif</span></div><div class="line"></div><div class="line">        <span class="built_in">self</span>.openURLItem = [BHOpenURLItem <span class="keyword">new</span>];</div><div class="line">        <span class="built_in">self</span>.notificationsItem = [BHNotificationsItem <span class="keyword">new</span>];</div><div class="line">        <span class="built_in">self</span>.userActivityItem = [BHUserActivityItem <span class="keyword">new</span>];</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="built_in">self</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ol>
<li>定义了<code>modulesByName</code>、<code>servicesByName</code>为<code>NSMutableDictionary</code>的对象，只能容纳一个元素。</li>
<li>定义了<code>moduleConfigName</code>、<code>serviceConfigName</code>为String的对象。</li>
<li>在系统大于8.0.4的时候，支持3D touch的话，会额外设置一个对象，这个对象里面就两个对象，一个是<code>UIApplicationShortcutItem *shortcutItem;</code>, 一个是<code>typedef void (^shortcutItemCompletionHandler)(BOOL);</code>,都是在调用3D touch的时候会调用到。</li>
<li>涉及到了另一个对象<code>BHOpenURLItem</code>,这个对象含有三个变量<code>NSURL *openURL;</code>,<code>NSString *sourceApplication;</code>,<code>NSDictionary *options;</code>。</li>
<li>设计了通知的一个对象<code>BHNotificationsItem</code>,这个对象含有五个变量：<code>NSError *notificationsError;</code>,<code>NSData *deviceToken;</code>,<code>NSDictionary *userInfo;</code>,<code>typedef void (^notificationResultHandler)(UIBackgroundFetchResult);</code>,<code>UILocalNotification *localNotification;</code>。</li>
<li>还有一个涉及到用户信息的一个对象：<code>BHUserActivityItem</code>,含有四个变量：<code>NSString *userActivityType;</code>,<code>NSUserActivity *userActivity;</code>,<code>NSError *userActivityError;</code>, <code>typedef void (^restorationHandler)(NSArray *);</code>。</li>
<li>总体看来这个对象完成的功能很多，并且以后很多类似3D touch 这种针对某种系统的新功能都可以在这个类中来拓展，而且很方便使用。</li>
</ol>
<h4 id="在本类的shareInstance的方法中："><a href="#在本类的shareInstance的方法中：" class="headerlink" title="在本类的shareInstance的方法中："></a>在本类的<code>shareInstance</code>的方法中：</h4><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">dispatch_once(&amp;p, </span>^&#123;</div><div class="line">        <span class="keyword">BHInstance </span>= [[[self class] alloc] init]<span class="comment">;</span></div><div class="line">        if ([<span class="keyword">BHInstance </span>isKindOfClass:[<span class="keyword">BHContext </span>class]]) &#123;</div><div class="line">            ((<span class="keyword">BHContext </span>*) <span class="keyword">BHInstance).config </span>= [<span class="keyword">BHConfig </span><span class="keyword">shareInstance];</span></div><div class="line">        &#125;</div><div class="line">    &#125;)<span class="comment">;</span></div></pre></td></tr></table></figure>
<ol>
<li>这里在设置<code>config</code>的变量之前判断<code>if ([BHInstance isKindOfClass:[BHContext class]]) {}</code>这个说实话，我没太明白这么做的原因是什么，上面都已经<code>BHInstance = [[[self class] alloc] init];</code>调用了，那这个判断还有什么意思吗？并且这个对象是继承的<code>NSObject</code>的对象。</li>
<li>这里的<code>BHConfig</code>对象，从代码上看也是一个单例，并且定义了一系列存储，判断是否存在，在.m的文件中定义了一个<code>NSMutableDictionary *config;</code>的对象，统一存储在这个里面，可以是对象类型，也可以是一些基础的数据类型。</li>
</ol>
<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[<span class="keyword">BHContext </span><span class="keyword">shareInstance].application </span>= application<span class="comment">;</span></div><div class="line">[<span class="keyword">BHContext </span><span class="keyword">shareInstance].launchOptions </span>= launchOptions<span class="comment">;</span></div><div class="line">[<span class="keyword">BHContext </span><span class="keyword">shareInstance].moduleConfigName </span>= @<span class="string">"BeeHive.bundle/BeeHive"</span><span class="comment">;//可选，默认为BeeHive.bundle/BeeHive.plist</span></div><div class="line">[<span class="keyword">BHContext </span><span class="keyword">shareInstance].serviceConfigName </span>= @<span class="string">"BeeHive.bundle/BHService"</span><span class="comment">;</span></div></pre></td></tr></table></figure>
<ol>
<li>现在可以看出来，首先这4行代码就是简单的赋值的动作，有些类的值你可以不赋值，类似的有：<code>moduleConfigName</code>,<code>serviceConfigName</code>,因为在对象实例化的时候，就已经进行了赋值。</li>
</ol>
<h4 id="紧接着在下面的两行代码中涉及到了一个新的对象："><a href="#紧接着在下面的两行代码中涉及到了一个新的对象：" class="headerlink" title="紧接着在下面的两行代码中涉及到了一个新的对象："></a>紧接着在下面的两行代码中涉及到了一个新的对象：</h4><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[<span class="keyword">BeeHive </span><span class="keyword">shareInstance].enableExpection </span>= YES<span class="comment">;</span></div><div class="line">[[<span class="keyword">BeeHive </span><span class="keyword">shareInstance] </span>setContext:[<span class="keyword">BHContext </span><span class="keyword">shareInstance]];</span></div></pre></td></tr></table></figure>
<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#pragma mark - Private</span></div><div class="line"></div><div class="line">-(void)setContext:(<span class="keyword">BHContext </span>*)<span class="built_in">context</span></div><div class="line">&#123;</div><div class="line">    _<span class="built_in">context</span> = <span class="built_in">context</span><span class="comment">;</span></div><div class="line"></div><div class="line">    static <span class="keyword">dispatch_once_t </span>onceToken<span class="comment">;</span></div><div class="line">    <span class="keyword">dispatch_once(&amp;onceToken, </span>^&#123;</div><div class="line">        [self loadStaticServices]<span class="comment">;</span></div><div class="line">        [self loadStaticModules]<span class="comment">;</span></div><div class="line">    &#125;)<span class="comment">;</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ol>
<li>首先在<code>BeeHive.m</code>的文件中，可以看出来，这个对象也是个单例。</li>
<li>紧接着在public的属性中，设置了全局了<code>BHContext</code>的对象，并且将它保存下来，并且在这里复写了<code>Setter</code>的方法,并且在<code>Setter</code>方法的时候,又调用了两个新的方法，并且这两个方法有且仅调用一次。</li>
</ol>
<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">-(void)loadStaticServices</div><div class="line">&#123;</div><div class="line">    [<span class="keyword">BHServiceManager </span><span class="keyword">sharedManager].enableException </span>= self.enableExpection<span class="comment">;</span></div><div class="line"></div><div class="line">    [[<span class="keyword">BHServiceManager </span><span class="keyword">sharedManager] </span>setWholeContext:self.context]<span class="comment">;</span></div><div class="line"></div><div class="line">    [[<span class="keyword">BHServiceManager </span><span class="keyword">sharedManager] </span>registerLocalServices]<span class="comment">;</span></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ol>
<li>在<code>loadStaticServices</code>的方法中，又创建了一个<code>BHServiceManager</code>的单例对象。</li>
<li>在<code>BHServiceManager</code>中设计了<code>enableException</code>的属性。</li>
<li>在<code>BHServiceManager</code>中设置了<code>BHContext</code>的对象，将<code>BHContext</code>对象也能够在<code>BHServiceManager</code>中能够持有这个对象。</li>
<li>最后调用到了<code>loadStaticServices</code>中的<code>registerLocalServices</code>的方法。方法如下：</li>
</ol>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)registerLocalServices</div><div class="line">&#123;</div><div class="line">    <span class="built_in">NSString</span> *serviceConfigName = <span class="keyword">self</span>.wholeContext.serviceConfigName;</div><div class="line"></div><div class="line">    <span class="built_in">NSString</span> *plistPath = [[<span class="built_in">NSBundle</span> mainBundle] pathForResource:serviceConfigName  ofType:<span class="string">@"plist"</span>];</div><div class="line">    <span class="keyword">if</span> (!plistPath) &#123;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="built_in">NSArray</span> *serviceList = [[<span class="built_in">NSArray</span> alloc] initWithContentsOfFile:plistPath];</div><div class="line"></div><div class="line">    [<span class="keyword">self</span>.lock lock];</div><div class="line">    [<span class="keyword">self</span>.allServices addObjectsFromArray:serviceList];</div><div class="line">    [<span class="keyword">self</span>.lock unlock];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ol>
<li>通过传入的<code>context</code>找到<code>serviceConfigName</code>的变量，拼接成plist文件名，如果项目中确实存在的话，就打开这个文件的内容。</li>
<li>这里通过锁，来将plist文件中取到的变量NSArray，存储到<code>allServices</code>私有变量中去。</li>
</ol>
<h4 id="另一个方法："><a href="#另一个方法：" class="headerlink" title="另一个方法："></a>另一个方法：</h4><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">- (void)loadStaticModules</div><div class="line">&#123;</div><div class="line">    [[<span class="keyword">BHModuleManager </span><span class="keyword">sharedManager] </span>setWholeContext:self.context]<span class="comment">;</span></div><div class="line"></div><div class="line">    [[<span class="keyword">BHModuleManager </span><span class="keyword">sharedManager] </span>loadLocalModules]<span class="comment">;</span></div><div class="line"></div><div class="line">    [[<span class="keyword">BHModuleManager </span><span class="keyword">sharedManager] </span>registedAllModules]<span class="comment">;</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ol>
<li>上面已经分析过了，这个<code>BHModuleManager</code>也是一个单例。首先将全局的<code>context</code>的变量设置上去，并且将<code>context中的moduleConfigName</code>的变量赋值给<code>modulesConfigFilename</code>。</li>
<li>将刚才的变量<code>modulesConfigFilename</code>拼接成<code>plist</code>文件，然后将取得的数据放入到数组中。</li>
<li>在<code>registedAllModules</code>的方法中，听过比较字典中的<code>moduleLevel</code>的value值，进行比较、排序，然后通过枚举，挨个实例化对象之后，在存入<code>BHModules</code>的可变数组中。</li>
</ol>
<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">id&lt;HomeServiceProtocol&gt; homeVc = [[<span class="keyword">BeeHive </span><span class="keyword">shareInstance] </span>createService:@protocol(HomeServiceProtocol)]<span class="comment">;</span></div></pre></td></tr></table></figure>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">id</span>)createService:(Protocol *)service</div><div class="line">&#123;</div><div class="line">    <span class="keyword">id</span> implInstance = <span class="literal">nil</span>;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (![<span class="keyword">self</span> checkValidService:service] &amp;&amp; <span class="keyword">self</span>.enableException) &#123;</div><div class="line">        <span class="keyword">@throw</span> [<span class="built_in">NSException</span> exceptionWithName:<span class="built_in">NSInternalInconsistencyException</span> reason:[<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%@ protocol does not been registed"</span>, <span class="built_in">NSStringFromProtocol</span>(service)] userInfo:<span class="literal">nil</span>];</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    Class implClass = [<span class="keyword">self</span> serviceImplClass:service];</div><div class="line"></div><div class="line">    implInstance = [[implClass alloc] init];</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (![implInstance respondsToSelector:<span class="keyword">@selector</span>(singleton)]) &#123;</div><div class="line">        <span class="keyword">return</span> implInstance;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="built_in">NSString</span> *serviceStr = <span class="built_in">NSStringFromProtocol</span>(service);</div><div class="line"></div><div class="line">    <span class="keyword">if</span> ([implInstance singleton]) &#123;</div><div class="line">        <span class="keyword">id</span> protocol = [[BHContext shareInstance].servicesByName objectForKey:serviceStr];</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (protocol) &#123;</div><div class="line">            <span class="keyword">return</span> protocol;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            [[BHContext shareInstance].servicesByName setObject:implInstance forKey:serviceStr];</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        [[BHContext shareInstance].servicesByName setObject:implInstance forKey:serviceStr];</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> implInstance;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ol>
<li>紧接着调用了<code>BeeHive</code>的public的方法：<code>- (id)createService:(Protocol *)proto;</code>传入一个protocol，返回一个id类型的对象。</li>
<li>其实这里<code>self checkValidService:service</code>值是判断之前<code>registerLocalServices</code>这个里面有没有遵循这个protocol的，假如没有，并且开启<code>self.enableException</code>的话，他就会抛出一个<code>NSException</code>。</li>
<li>否则就会遵循这个protocol的类，并且返回。</li>
<li>判断这个类有没有遵循<code>BHServiceProtocol</code>这个协议的<code>singleton</code>,并且实现，假如没有实现的话，就直接返回这个对象，不再往下执行了。</li>
<li>根据这个protocol在<code>[BHContext shareInstance].servicesByName</code>字典中查找有没有对应value值，如果有的话，就直接放回这个对象，如果没有的话，放回对象的同时，将这个protocol存储到这个<code>[BHContext shareInstance].servicesByName</code>字典中。</li>
<li>最后讲个homeVC设置为Appdelegate的RootWindow。</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;紧接着前面那篇文章，回到BHAppDelegate-m的文件里面的&quot;&gt;&lt;a href=&quot;#紧接着前面那篇文章，回到BHAppDelegate-m的文件里面的&quot; class=&quot;headerlink&quot; title=&quot;紧接着前面那篇文章，回到BHAppDelegate.m的文件里面的&quot;&gt;&lt;/a&gt;紧接着前面那篇文章，回到&lt;code&gt;BHAppDelegate.m&lt;/code&gt;的文件里面的&lt;/h3&gt;&lt;figure class=&quot;highlight erlang&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;- &lt;span class=&quot;params&quot;&gt;(BOOL)&lt;/span&gt;application:&lt;span class=&quot;params&quot;&gt;(UIApplication *)&lt;/span&gt;application didFinishLaunchingWithOptions:&lt;span class=&quot;params&quot;&gt;(NSDictionary *)&lt;/span&gt;launchOptions&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="日志" scheme="http://www.ghcoder.com/categories/%E6%97%A5%E5%BF%97/"/>
    
    
      <category term="学习" scheme="http://www.ghcoder.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>学习阿里开源项目BeeHive(-)</title>
    <link href="http://www.ghcoder.com/2016/11/25/20161125/"/>
    <id>http://www.ghcoder.com/2016/11/25/20161125/</id>
    <published>2016-11-25T08:27:12.000Z</published>
    <updated>2017-05-10T10:06:11.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="学习阿里开源-BeeHive-每次学习别人写的框架，或者好东西都会让自己学到很多东西，废话不多说，直接扯代码。"><a href="#学习阿里开源-BeeHive-每次学习别人写的框架，或者好东西都会让自己学到很多东西，废话不多说，直接扯代码。" class="headerlink" title="学习阿里开源 BeeHive ,每次学习别人写的框架，或者好东西都会让自己学到很多东西，废话不多说，直接扯代码。"></a>学习阿里开源 <code>BeeHive</code> ,每次学习别人写的框架，或者好东西都会让自己学到很多东西，废话不多说，直接扯代码。</h2><h2 id="源码中的几个小问题："><a href="#源码中的几个小问题：" class="headerlink" title="源码中的几个小问题："></a>源码中的几个小问题：</h2><h3 id="1-在Example中，程序的入口文件TestAppDelegate-你就惊奇地发现，他不是继承了UIAppDelegate，也不是继承了UIAppDelegate的子类，而是自己写了一个-quot-AppDelegate-quot"><a href="#1-在Example中，程序的入口文件TestAppDelegate-你就惊奇地发现，他不是继承了UIAppDelegate，也不是继承了UIAppDelegate的子类，而是自己写了一个-quot-AppDelegate-quot" class="headerlink" title="1. 在Example中，程序的入口文件TestAppDelegate,你就惊奇地发现，他不是继承了UIAppDelegate，也不是继承了UIAppDelegate的子类，而是自己写了一个&quot;AppDelegate&quot;"></a>1. 在Example中，程序的入口文件<code>TestAppDelegate</code>,你就惊奇地发现，他不是继承了UIAppDelegate，也不是继承了UIAppDelegate的子类，而是自己写了一个<code>&quot;AppDelegate&quot;</code></h3><a id="more"></a>
<figure class="highlight ada"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">@<span class="keyword">interface</span> TestAppDelegate : <span class="type">BHAppDelegate</span> &lt;UIApplicationDelegate&gt;</div></pre></td></tr></table></figure>
<p>在 <code>BHAppDelegate.m</code>的文件中，我们发现这个类实现了很多appDelegae的很多代理方法</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">-</span> (void)<span class="selector-tag">applicationWillResignActive</span><span class="selector-pseudo">:(UIApplication</span> *)<span class="selector-tag">application</span></div><div class="line">&#123;</div><div class="line">    <span class="selector-attr">[[BHModuleManager sharedManager]</span> <span class="selector-tag">tiggerEvent</span><span class="selector-pseudo">:BHMWillResignActiveEvent</span>];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">-</span> (void)<span class="selector-tag">applicationDidEnterBackground</span><span class="selector-pseudo">:(UIApplication</span> *)<span class="selector-tag">application</span></div><div class="line">&#123;</div><div class="line">    <span class="selector-attr">[[BHModuleManager sharedManager]</span> <span class="selector-tag">tiggerEvent</span><span class="selector-pseudo">:BHMDidEnterBackgroundEvent</span>];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">-</span> (void)<span class="selector-tag">applicationWillEnterForeground</span><span class="selector-pseudo">:(UIApplication</span> *)<span class="selector-tag">application</span></div><div class="line">&#123;</div><div class="line">    <span class="selector-attr">[[BHModuleManager sharedManager]</span> <span class="selector-tag">tiggerEvent</span><span class="selector-pseudo">:BHMWillEnterForegroundEvent</span>];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">-</span> (void)<span class="selector-tag">applicationDidBecomeActive</span><span class="selector-pseudo">:(UIApplication</span> *)<span class="selector-tag">application</span></div><div class="line">&#123;</div><div class="line">    <span class="selector-attr">[[BHModuleManager sharedManager]</span> <span class="selector-tag">tiggerEvent</span><span class="selector-pseudo">:BHMDidBecomeActiveEvent</span>];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">-</span> (void)<span class="selector-tag">applicationWillTerminate</span><span class="selector-pseudo">:(UIApplication</span> *)<span class="selector-tag">application</span></div><div class="line">&#123;</div><div class="line">    <span class="selector-attr">[[BHModuleManager sharedManager]</span> <span class="selector-tag">tiggerEvent</span><span class="selector-pseudo">:BHMWillTerminateEvent</span>];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>####当然这里先忽略，我们一点点说：</p>
<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">BOOL)application:(UIApplication </span>*)application <span class="keyword">didFinishLaunchingWithOptions:(NSDictionary </span>*)launchOptions</div><div class="line">&#123;</div><div class="line"><span class="comment">#ifdef DEBUG</span></div><div class="line">    self.timeProdiler = [<span class="keyword">BHTimeProfiler </span><span class="keyword">sharedTimeProfiler];</span></div><div class="line"><span class="comment">#endif</span></div><div class="line"></div><div class="line">    [[<span class="keyword">BHModuleManager </span><span class="keyword">sharedManager] </span>tiggerEvent:<span class="keyword">BHMSetupEvent];</span></div><div class="line">    [[<span class="keyword">BHModuleManager </span><span class="keyword">sharedManager] </span>tiggerEvent:<span class="keyword">BHMInitEvent];</span></div><div class="line"></div><div class="line">    <span class="keyword">dispatch_async(dispatch_get_main_queue(), </span>^&#123;</div><div class="line">        [[<span class="keyword">BHModuleManager </span><span class="keyword">sharedManager] </span>tiggerEvent:<span class="keyword">BHMSplashEvent];</span></div><div class="line">    &#125;)<span class="comment">;</span></div><div class="line"></div><div class="line"><span class="comment">#ifdef DEBUG</span></div><div class="line">    [self.timeProdiler printOutTimeProfileResult]<span class="comment">;</span></div><div class="line">    [self.timeProdiler saveTimeProfileDataIntoFile:@<span class="string">"BeeHiveTimeProfiler"</span>]<span class="comment">;</span></div><div class="line"><span class="comment">#endif</span></div><div class="line"></div><div class="line">    return YES<span class="comment">;</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="在debug状态下，这个程序启动的方法创建了一个timeProdiler的实例，并且在return之前执行了timeProdiler的两个方法。"><a href="#在debug状态下，这个程序启动的方法创建了一个timeProdiler的实例，并且在return之前执行了timeProdiler的两个方法。" class="headerlink" title="在debug状态下，这个程序启动的方法创建了一个timeProdiler的实例，并且在return之前执行了timeProdiler的两个方法。"></a>在debug状态下，这个程序启动的方法创建了一个<code>timeProdiler</code>的实例，并且在return之前执行了<code>timeProdiler</code>的两个方法。</h4><h5 id="进入到-BHTimeProfiler-m的文件里面发现，这个类是一个单例。在这个类的init的方法中发现"><a href="#进入到-BHTimeProfiler-m的文件里面发现，这个类是一个单例。在这个类的init的方法中发现" class="headerlink" title="进入到 BHTimeProfiler.m的文件里面发现，这个类是一个单例。在这个类的init的方法中发现"></a>进入到 <code>BHTimeProfiler.m</code>的文件里面发现，这个类是一个单例。在这个类的init的方法中发现</h5><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">instancetype</span>)initTimeProfilerWithMainKey:(<span class="built_in">NSString</span> *)mainKey</div><div class="line">&#123;</div><div class="line">    <span class="keyword">self</span> = [<span class="keyword">super</span> init];</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>) &#123;</div><div class="line">        _mainIdentifier = [mainKey <span class="keyword">copy</span>];</div><div class="line">        _lastTime = <span class="built_in">CACurrentMediaTime</span>();</div><div class="line">        _recordStartTime = <span class="built_in">CACurrentMediaTime</span>();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ol>
<li>用一个字符串对私有的_mainIdentifier的字符串类型进行了赋值。</li>
<li>创建了一个时间的值赋给了_lastTime。</li>
<li>创建了一个时间的值赋给了_recordStartTime。<code>这里的时间类型并没有用NSDate去实例化，而是用了CACurrentMediaTime，这个时间在设备上所有进程都是全局的，并且在设备休眠的状态的时候，这个值会暂停</code></li>
</ol>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)recordEventTime:(<span class="built_in">NSString</span> *)eventName</div><div class="line">&#123;</div><div class="line"><span class="meta">#ifdef DEBUG</span></div><div class="line">    <span class="built_in">NSString</span> *keyName = [eventName <span class="keyword">copy</span>];</div><div class="line"></div><div class="line">    [<span class="keyword">self</span>.identifiers addObject:keyName];</div><div class="line">    [<span class="keyword">self</span>.timeDataDic setObject:@(<span class="built_in">CACurrentMediaTime</span>()) forKey:keyName];</div><div class="line"><span class="meta">#endif</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ol>
<li>只有在debug的状态下调用这个public的方法才有意义。这个方法很简单，其实就是用mutableArray来存储<code>keyName</code>,并且将时间的值作为value存储在MutableDictionary中。这其实没什么好说的，但是这里有一点却引起了我的注意：</li>
</ol>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">if</span> __has_feature(objc_generics)</span></div><div class="line"><span class="meta">#   <span class="meta-keyword">define</span> TM__GENERICS(class, ...)         class<span class="meta-string">&lt;__VA_ARGS__&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">else</span></span></div><div class="line"><span class="meta">#   <span class="meta-keyword">define</span> TM__GENERICS(class, ...)         class</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> TMMutableArrayWith(valueType)                   TM__GENERICS(NSMutableArray, valueType)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> TMMutableDictionaryWith(keyType, valueType)     TM__GENERICS(NSMutableDictionary, keyType, valueType)</span></div></pre></td></tr></table></figure>
<ol>
<li><code>__has_feature(objc_generics)</code>判断是否支持Obj-C泛型的特征。</li>
<li><code>...</code>表示，这个表示符里面可以接受0个，或者1个，或者多个参数。</li>
<li>除了第一个class的参数，其他的参数作为一个整体在<code>__VA_ARGS__</code>里面返回。</li>
</ol>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)printOutTimeProfileResult</div><div class="line">&#123;</div><div class="line"><span class="meta">#ifdef DEBUG</span></div><div class="line">    <span class="keyword">for</span> (<span class="built_in">NSString</span> *eventName <span class="keyword">in</span> <span class="keyword">self</span>.identifiers) &#123;</div><div class="line">        <span class="built_in">NSAssert</span>([<span class="keyword">self</span>.timeDataDic objectForKey:eventName] != <span class="literal">nil</span> &amp;&amp;</div><div class="line">                 [[<span class="keyword">self</span>.timeDataDic objectForKey:eventName] isKindOfClass:[<span class="built_in">NSNumber</span> <span class="keyword">class</span>]], <span class="string">@"Save Wrong Type TimeStamp"</span>);</div><div class="line"></div><div class="line">        <span class="built_in">CFTimeInterval</span> current = [[<span class="keyword">self</span>.timeDataDic objectForKey:eventName] doubleValue];</div><div class="line">        printf(<span class="string">"[%s] time stamp: %gms and execute for %gms -&gt; \n"</span>, [eventName UTF8String], (current - <span class="keyword">self</span>.recordStartTime) * <span class="number">1000</span>, (current - <span class="keyword">self</span>.lastTime) * <span class="number">1000</span>);</div><div class="line"></div><div class="line">        <span class="keyword">self</span>.lastTime = current;</div><div class="line">    &#125;</div><div class="line"><span class="meta">#endif</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ol>
<li>遍历keyName的数组，拿到每个keyName，先去字典中找对应的时间值，假如没有的话，就只会断点断住。</li>
<li>算出现在的时间值，与lastTime,recordTime的值得差值。</li>
<li>最后加lastTime的值重新设置为当前的值。</li>
</ol>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)saveTimeProfileDataIntoFile:(<span class="built_in">NSString</span> *)fileName</div><div class="line">&#123;</div><div class="line">    <span class="built_in">NSString</span> *documentPath = [<span class="built_in">NSSearchPathForDirectoriesInDomains</span>(<span class="built_in">NSDocumentDirectory</span>, <span class="built_in">NSUserDomainMask</span>, <span class="literal">YES</span>) firstObject];</div><div class="line">    <span class="built_in">NSString</span> *filePath =  [documentPath stringByAppendingPathComponent:[fileName stringByAppendingPathExtension:<span class="string">@"txt"</span>]];</div><div class="line"></div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"TMTimeProfiler::SaveFilePath is %@"</span>, filePath);</div><div class="line"></div><div class="line">    <span class="built_in">BOOL</span> res=[[<span class="built_in">NSFileManager</span> defaultManager] createFileAtPath:filePath contents:<span class="literal">nil</span> attributes:<span class="literal">nil</span>];</div><div class="line">    <span class="keyword">if</span> (!res) &#123;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="built_in">NSFileHandle</span> *handle = [<span class="built_in">NSFileHandle</span> fileHandleForWritingAtPath:filePath];</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="built_in">NSString</span> *eventName <span class="keyword">in</span> <span class="keyword">self</span>.identifiers)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">CFTimeInterval</span> current = [[<span class="keyword">self</span>.timeDataDic objectForKey:eventName] doubleValue];</div><div class="line"></div><div class="line">        <span class="built_in">NSString</span> *output = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%@ time stamp  %g and execute for  %g\n"</span>, eventName, current, (current - <span class="keyword">self</span>.lastTime) * <span class="number">1000</span>];</div><div class="line"></div><div class="line">        [handle writeData:[output dataUsingEncoding:<span class="built_in">NSUTF8StringEncoding</span>]];</div><div class="line"></div><div class="line">        <span class="keyword">self</span>.lastTime = current;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    [handle closeFile];</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ol>
<li>这个函数的作用就是传入一个文件的名字，然后将启动时间，record时间，记录下来，这个没什么好说的。</li>
</ol>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">- (<span class="keyword">void</span>)postTimeProfileResultNotification</div><div class="line">&#123;</div><div class="line">    <span class="built_in">NSMutableArray</span> *logArray  = [<span class="built_in">NSMutableArray</span> array];</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="built_in">NSString</span> *eventName <span class="keyword">in</span> <span class="keyword">self</span>.identifiers)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">CFTimeInterval</span> current = [[<span class="keyword">self</span>.timeDataDic objectForKey:eventName] doubleValue];</div><div class="line"></div><div class="line"></div><div class="line">        [logArray addObject: @&#123;<span class="string">@"eventName"</span>:eventName,<span class="string">@"costTime"</span>: @((current - <span class="keyword">self</span>.lastTime) * <span class="number">1000</span>)&#125;];</div><div class="line"></div><div class="line">        <span class="keyword">self</span>.lastTime = current;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    [[<span class="built_in">NSNotificationCenter</span> defaultCenter] postNotificationName:kTimeProfilerResultNotificationName object:<span class="literal">nil</span> userInfo:@&#123;kNotificationUserInfoKey:logArray&#125;];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>1.用NSNotificationCenter，将上次lastTime与现在时间的差值作为NSNotificationCenter中的userInfo的参数传输出去。这样只要监听这个NSNotificationCenter，你每次post就能接受到这个全局的通知。光这一个时间的统计功能，产品、技术上就能做好多文章。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;学习阿里开源-BeeHive-每次学习别人写的框架，或者好东西都会让自己学到很多东西，废话不多说，直接扯代码。&quot;&gt;&lt;a href=&quot;#学习阿里开源-BeeHive-每次学习别人写的框架，或者好东西都会让自己学到很多东西，废话不多说，直接扯代码。&quot; class=&quot;headerlink&quot; title=&quot;学习阿里开源 BeeHive ,每次学习别人写的框架，或者好东西都会让自己学到很多东西，废话不多说，直接扯代码。&quot;&gt;&lt;/a&gt;学习阿里开源 &lt;code&gt;BeeHive&lt;/code&gt; ,每次学习别人写的框架，或者好东西都会让自己学到很多东西，废话不多说，直接扯代码。&lt;/h2&gt;&lt;h2 id=&quot;源码中的几个小问题：&quot;&gt;&lt;a href=&quot;#源码中的几个小问题：&quot; class=&quot;headerlink&quot; title=&quot;源码中的几个小问题：&quot;&gt;&lt;/a&gt;源码中的几个小问题：&lt;/h2&gt;&lt;h3 id=&quot;1-在Example中，程序的入口文件TestAppDelegate-你就惊奇地发现，他不是继承了UIAppDelegate，也不是继承了UIAppDelegate的子类，而是自己写了一个-quot-AppDelegate-quot&quot;&gt;&lt;a href=&quot;#1-在Example中，程序的入口文件TestAppDelegate-你就惊奇地发现，他不是继承了UIAppDelegate，也不是继承了UIAppDelegate的子类，而是自己写了一个-quot-AppDelegate-quot&quot; class=&quot;headerlink&quot; title=&quot;1. 在Example中，程序的入口文件TestAppDelegate,你就惊奇地发现，他不是继承了UIAppDelegate，也不是继承了UIAppDelegate的子类，而是自己写了一个&amp;quot;AppDelegate&amp;quot;&quot;&gt;&lt;/a&gt;1. 在Example中，程序的入口文件&lt;code&gt;TestAppDelegate&lt;/code&gt;,你就惊奇地发现，他不是继承了UIAppDelegate，也不是继承了UIAppDelegate的子类，而是自己写了一个&lt;code&gt;&amp;quot;AppDelegate&amp;quot;&lt;/code&gt;&lt;/h3&gt;
    
    </summary>
    
      <category term="日志" scheme="http://www.ghcoder.com/categories/%E6%97%A5%E5%BF%97/"/>
    
    
      <category term="学习" scheme="http://www.ghcoder.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>创建私有的Cocoapods</title>
    <link href="http://www.ghcoder.com/2016/10/28/20161028/"/>
    <id>http://www.ghcoder.com/2016/10/28/20161028/</id>
    <published>2016-10-28T03:53:12.000Z</published>
    <updated>2017-05-10T10:06:17.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="创建私有Cocoapods-最近一直想将自己的App模块化，就想就App拆成每个模块组件，比如：登录模块、网络模块、消息模块、用户中心模块…但是基于这些想法，我首先要先搞定私有化Cocoapods的问题，这样团队中新人，想调用的时候，就能够快速，便捷的调用了，只需要-pod-xxx"><a href="#创建私有Cocoapods-最近一直想将自己的App模块化，就想就App拆成每个模块组件，比如：登录模块、网络模块、消息模块、用户中心模块…但是基于这些想法，我首先要先搞定私有化Cocoapods的问题，这样团队中新人，想调用的时候，就能够快速，便捷的调用了，只需要-pod-xxx" class="headerlink" title="创建私有Cocoapods,最近一直想将自己的App模块化，就想就App拆成每个模块组件，比如：登录模块、网络模块、消息模块、用户中心模块…但是基于这些想法，我首先要先搞定私有化Cocoapods的问题，这样团队中新人，想调用的时候，就能够快速，便捷的调用了，只需要  pod xxx"></a>创建私有Cocoapods,最近一直想将自己的App模块化，就想就App拆成每个模块组件，比如：登录模块、网络模块、消息模块、用户中心模块…但是基于这些想法，我首先要先搞定私有化Cocoapods的问题，这样团队中新人，想调用的时候，就能够快速，便捷的调用了，只需要  <em>pod xxx</em></h3><blockquote>
<p>1.先到自己的git账号，创建一个新的仓库 ，我们取名字 <em>GH</em></p>
</blockquote>
<a id="more"></a>
<blockquote>
<p>2.开始终端，找到一个合适的位置：</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> ~/Desktop</div></pre></td></tr></table></figure>
<blockquote>
<p>3.初始化pod</p>
</blockquote>
<figure class="highlight crystal"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pod <span class="class"><span class="keyword">lib</span> <span class="title">create</span> <span class="title">GH</span></span></div></pre></td></tr></table></figure>
<blockquote>
<p>4.接着系统会问一下问题，你可以自己按照项目需求来回答，也可以参照我的</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">What language <span class="keyword">do</span> you want <span class="keyword">to</span> <span class="keyword">use</span>?? [ Swift / ObjC ]</div><div class="line"> &gt; ObjC</div><div class="line"></div><div class="line">Would you <span class="keyword">like</span> <span class="keyword">to</span> <span class="keyword">include</span> a demo application <span class="keyword">with</span> your <span class="keyword">library</span>? [ Yes / <span class="keyword">No</span> ]</div><div class="line"> &gt; Yes</div><div class="line"></div><div class="line">Which testing frameworks will you <span class="keyword">use</span>? [ Specta / Kiwi / <span class="keyword">None</span> ]</div><div class="line"> &gt; <span class="keyword">None</span></div><div class="line"></div><div class="line">Would you <span class="keyword">like</span> <span class="keyword">to</span> <span class="keyword">do</span> <span class="keyword">view</span> based testing? [ Yes / <span class="keyword">No</span> ]</div><div class="line"> &gt; <span class="keyword">No</span></div><div class="line"></div><div class="line">What <span class="keyword">is</span> your <span class="keyword">class</span> prefix?</div><div class="line"> &gt; GG</div></pre></td></tr></table></figure>
<blockquote>
<p>5.修改一下pod的配置文件,pod的配置文件应该都是一样的后缀名，我这里叫 <em>Gh.podspec</em></p>
</blockquote>
<h3 id="steps"><a href="#steps" class="headerlink" title="steps"></a>steps</h3><h4 id="1-这里我先讲description的描述内容注释掉"><a href="#1-这里我先讲description的描述内容注释掉" class="headerlink" title="1.这里我先讲description的描述内容注释掉"></a>1.这里我先讲description的描述内容注释掉</h4><figure class="highlight vala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#s.description      = &lt;&lt;-DESC</span></div><div class="line"><span class="meta">#TODO: Add long description of the pod here.</span></div><div class="line"><span class="meta">#                        DESC</span></div></pre></td></tr></table></figure>
<h4 id="2-修改homepage的路径，在第24行"><a href="#2-修改homepage的路径，在第24行" class="headerlink" title="2.修改homepage的路径，在第24行"></a>2.修改homepage的路径，在第24行</h4><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">s<span class="selector-class">.homepage</span>         = <span class="string">'https://github.com/Ghstart/Gh'</span></div></pre></td></tr></table></figure>
<h4 id="3-修改git的路径，在第28行"><a href="#3-修改git的路径，在第28行" class="headerlink" title="3.修改git的路径，在第28行"></a>3.修改git的路径，在第28行</h4><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">s<span class="selector-class">.source</span>           = &#123; :git =&gt; <span class="string">'https://github.com/Ghstart/Gh.gi    t'</span>, :tag =&gt; s<span class="selector-class">.version</span><span class="selector-class">.to_s</span> &#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>5.保存好退出，再次进入到那个文件夹中，将文件内容提交到github上,我这里选择的是命令的方式，你也可以用github客户端</p>
</blockquote>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">cd</span> Gh</div><div class="line">git init</div><div class="line">git remote <span class="built_in">add</span> origin http<span class="variable">s:</span>//github.<span class="keyword">com</span>/Ghstart/GH.git // 这个路径在你刚才新建仓库的那个页面就能找到</div><div class="line">git <span class="built_in">add</span> .</div><div class="line">git commit -<span class="keyword">m</span> <span class="string">'Gh first creats private own cocoapods'</span></div><div class="line">git <span class="keyword">tag</span> <span class="number">0.1</span>.<span class="number">0</span> // 这里的<span class="number">0.1</span>.<span class="number">0</span>在刚才的配置文件里有，对应起来就好了</div><div class="line">git push -<span class="keyword">u</span> origin master --<span class="keyword">tags</span></div></pre></td></tr></table></figure>
<blockquote>
<p>最后再去你刚才新建仓库的页面刷新一下，就会发现奇迹。。</p>
</blockquote>
<h3 id="现在开始添加自己的类"><a href="#现在开始添加自己的类" class="headerlink" title="现在开始添加自己的类"></a>现在开始添加自己的类</h3><blockquote>
<p>找到存放类的目录下，<em>/Users/</em>自己的mac名字<em>/Desktop/Gh/Gh/Classes</em>，在这个文件夹下面，你会发现一个名字叫做<em>ReplaceMe.m</em>，这个真是太贴心了，cocoapods都已经为我们想到了，在这里你先删除这个类，然后添加自己想要的类，然后在走一下下面的命令。</p>
<p>我觉得这里，你既然已经修改了内容，或者想发布第一版本，那么修改配置文件的tags修改为<em>0.1.1</em></p>
</blockquote>
<figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">git add .</div><div class="line">git commit -m<span class="string">"add files"</span></div><div class="line">git <span class="keyword">tag</span> <span class="title">0</span>.<span class="number">1.1</span></div><div class="line">git push -u origin <span class="keyword">master</span> <span class="title">--tags</span></div></pre></td></tr></table></figure>
<blockquote>
<p>现在到自己的github页面熟悉一下，就会发现自己创建的0.1.1的版本，以及新添加的文件。下面我们需要将我们自己创建的这个cocoapods提交给cocoapods审核，并且发布。</p>
</blockquote>
<figure class="highlight crystal"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">pod <span class="class"><span class="keyword">lib</span> <span class="title">lint</span> <span class="title">Gh</span>.<span class="title">podspec</span> // 认证通过</span></div><div class="line">pod trunk push    /<span class="regexp">/ 提交</span></div></pre></td></tr></table></figure>
<figure class="highlight livescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">在最后 pod trunk push 时候如果报错 如：</div><div class="line">[!] Authentication token <span class="keyword">is</span> invalid <span class="keyword">or</span> unverified. Either verify <span class="literal">it</span> <span class="keyword">with</span> the email <span class="literal">that</span> was sent <span class="keyword">or</span> register a <span class="keyword">new</span> session.</div><div class="line"></div><div class="line">这说明你之前的认证token已经失效了，重新注册一下就好了，输入以下命令：</div><div class="line">          pod trunk register gonghuan2020@gmail.com <span class="string">'gonghuan'</span></div><div class="line">然后在重新  pod trunk push 就可以了。</div></pre></td></tr></table></figure>
<figure class="highlight crystal"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">如果弹 [!] The spec did not pass validation, due to <span class="number">1</span> warning (but you can use <span class="string">`--allow-warnings`</span> to ignore it).</div><div class="line"></div><div class="line">pod trunk push --allow-warnings</div><div class="line"></div><div class="line">如果弹 You can use the <span class="string">`--no-clean`</span> option to inspect any issue.</div><div class="line">pod <span class="class"><span class="keyword">lib</span> <span class="title">lint</span> <span class="title">GateWayObject</span>.<span class="title">podspec</span> --<span class="title">allow</span>-<span class="title">warnings</span> --<span class="title">no</span>-<span class="title">clean</span></span></div></pre></td></tr></table></figure>
<p>大功告成！！<em>这里cocoapods是一个很关键的问题，尤其你刚跟新pod或者xcode，那问题会很多，建议出现一些奇葩的问题，可以先卸载cocoapods，然后再装最新的稳定版本。</em></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;创建私有Cocoapods-最近一直想将自己的App模块化，就想就App拆成每个模块组件，比如：登录模块、网络模块、消息模块、用户中心模块…但是基于这些想法，我首先要先搞定私有化Cocoapods的问题，这样团队中新人，想调用的时候，就能够快速，便捷的调用了，只需要-pod-xxx&quot;&gt;&lt;a href=&quot;#创建私有Cocoapods-最近一直想将自己的App模块化，就想就App拆成每个模块组件，比如：登录模块、网络模块、消息模块、用户中心模块…但是基于这些想法，我首先要先搞定私有化Cocoapods的问题，这样团队中新人，想调用的时候，就能够快速，便捷的调用了，只需要-pod-xxx&quot; class=&quot;headerlink&quot; title=&quot;创建私有Cocoapods,最近一直想将自己的App模块化，就想就App拆成每个模块组件，比如：登录模块、网络模块、消息模块、用户中心模块…但是基于这些想法，我首先要先搞定私有化Cocoapods的问题，这样团队中新人，想调用的时候，就能够快速，便捷的调用了，只需要  pod xxx&quot;&gt;&lt;/a&gt;创建私有Cocoapods,最近一直想将自己的App模块化，就想就App拆成每个模块组件，比如：登录模块、网络模块、消息模块、用户中心模块…但是基于这些想法，我首先要先搞定私有化Cocoapods的问题，这样团队中新人，想调用的时候，就能够快速，便捷的调用了，只需要  &lt;em&gt;pod xxx&lt;/em&gt;&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;1.先到自己的git账号，创建一个新的仓库 ，我们取名字 &lt;em&gt;GH&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="日志" scheme="http://www.ghcoder.com/categories/%E6%97%A5%E5%BF%97/"/>
    
    
      <category term="学习" scheme="http://www.ghcoder.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="Cocoapods" scheme="http://www.ghcoder.com/tags/Cocoapods/"/>
    
  </entry>
  
  <entry>
    <title>React-Native 实战(-)</title>
    <link href="http://www.ghcoder.com/2016/10/21/20161021/"/>
    <id>http://www.ghcoder.com/2016/10/21/20161021/</id>
    <published>2016-10-21T07:47:12.000Z</published>
    <updated>2017-05-10T10:06:22.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="实战-React-Native-重写红狮物流App的项目。下面的的几次博客我会以完成一个现有的项目，将它整体都用React重写。项目我已经上传到github-https-github-com-Ghstart-HongshiWuliuRN"><a href="#实战-React-Native-重写红狮物流App的项目。下面的的几次博客我会以完成一个现有的项目，将它整体都用React重写。项目我已经上传到github-https-github-com-Ghstart-HongshiWuliuRN" class="headerlink" title="实战(-) React-Native 重写红狮物流App的项目。下面的的几次博客我会以完成一个现有的项目，将它整体都用React重写。项目我已经上传到github[https://github.com/Ghstart/HongshiWuliuRN]"></a>实战(-) React-Native 重写红狮物流App的项目。下面的的几次博客我会以完成一个现有的项目，将它整体都用React重写。项目我已经上传到github[<a href="https://github.com/Ghstart/HongshiWuliuRN" target="_blank" rel="external">https://github.com/Ghstart/HongshiWuliuRN</a>]</h2><h3 id="首先找到index-ios-js文件，由于我们的app的架构就是主流的tab的这种，所以我这里用到了TabBarIOS的主件，代码如下："><a href="#首先找到index-ios-js文件，由于我们的app的架构就是主流的tab的这种，所以我这里用到了TabBarIOS的主件，代码如下：" class="headerlink" title="首先找到index.ios.js文件，由于我们的app的架构就是主流的tab的这种，所以我这里用到了TabBarIOS的主件，代码如下："></a>首先找到<code>index.ios.js</code>文件，由于我们的app的架构就是主流的tab的这种，所以我这里用到了TabBarIOS的主件，代码如下：</h3><a id="more"></a>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> React, &#123; Component &#125; from <span class="string">'react'</span>;</div><div class="line"><span class="keyword">import</span> &#123;</div><div class="line">  AppRegistry,</div><div class="line">  StyleSheet,</div><div class="line">  Text,</div><div class="line">  View,</div><div class="line">  TabBarIOS</div><div class="line">&#125; from <span class="string">'react-native'</span>;</div><div class="line"></div><div class="line"><span class="keyword">import</span> Task     from <span class="string">'./ios_views/task'</span>;</div><div class="line"><span class="keyword">import</span> Goods    from <span class="string">'./ios_views/goods'</span></div><div class="line"><span class="keyword">import</span> Home     from <span class="string">'./ios_views/home'</span></div><div class="line"><span class="keyword">import</span> Message  from <span class="string">'./ios_views/message'</span></div><div class="line"><span class="keyword">import</span> Setting  from <span class="string">'./ios_views/setting'</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">HongshiWuLiuRN</span> <span class="title">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>() &#123;</div><div class="line">    <span class="keyword">super</span>();</div><div class="line"></div><div class="line">    <span class="keyword">this</span>.state = &#123;</div><div class="line">      selected: <span class="string">'home'</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  _renderView(moduleName) &#123;</div><div class="line">    switch (moduleName) &#123;</div><div class="line">      case <span class="string">'task'</span>:</div><div class="line">        <span class="keyword">return</span> (</div><div class="line">          &lt;Task/&gt;</div><div class="line">        );</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">      case <span class="string">'goods'</span>:</div><div class="line">        <span class="keyword">return</span> (</div><div class="line">          &lt;Goods/&gt;</div><div class="line">        );</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">      case <span class="string">'home'</span>:</div><div class="line">        <span class="keyword">return</span> (</div><div class="line">          &lt;Home/&gt;</div><div class="line">        );</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">      case <span class="string">'message'</span>:</div><div class="line">        <span class="keyword">return</span> (</div><div class="line">          &lt;Message/&gt;</div><div class="line">        );</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">      case <span class="string">'setting'</span>:</div><div class="line">        <span class="keyword">return</span> (</div><div class="line">          &lt;Setting/&gt;</div><div class="line">        );</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">      <span class="keyword">default</span>:</div><div class="line">        <span class="keyword">return</span> ( &lt;View&gt;&lt;/View&gt; );</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span>(</div><div class="line">      &lt;TabBarIOS</div><div class="line">        tintColor = <span class="string">'#e23f42'</span></div><div class="line">      &gt;</div><div class="line">        &lt;TabBarIOS.Item</div><div class="line">          title = <span class="string">"任务"</span></div><div class="line">          selected = &#123; <span class="keyword">this</span>.state.selected === <span class="string">'task'</span> &#125;</div><div class="line">          icon = &#123;require(<span class="string">'./images/mission@2x.png'</span>)&#125;</div><div class="line">          selectedIcon=&#123;require(<span class="string">'./images/mission-1@2x.png'</span>)&#125;</div><div class="line">          onPress = &#123;() =&gt; &#123;</div><div class="line">            <span class="keyword">this</span>.setState(&#123;</div><div class="line">              selected: <span class="string">'task'</span></div><div class="line">            &#125;)</div><div class="line">          &#125;&#125;&gt;</div><div class="line"></div><div class="line">          &#123;<span class="keyword">this</span>._renderView(<span class="keyword">this</span>.state.selected)&#125;</div><div class="line"></div><div class="line"></div><div class="line">        &lt;/TabBarIOS.Item&gt;</div><div class="line"></div><div class="line">        &lt;TabBarIOS.Item</div><div class="line">          title = <span class="string">"货源"</span></div><div class="line">          selected = &#123; <span class="keyword">this</span>.state.selected === <span class="string">'goods'</span> &#125;</div><div class="line">          icon = &#123;require(<span class="string">'./images/goods@2x.png'</span>)&#125;</div><div class="line">          selectedIcon=&#123;require(<span class="string">'./images/goods-1@2x.png'</span>)&#125;</div><div class="line">          onPress = &#123;() =&gt; &#123;</div><div class="line">            <span class="keyword">this</span>.setState(&#123;</div><div class="line">              selected: <span class="string">'goods'</span></div><div class="line">            &#125;)</div><div class="line">          &#125;&#125;&gt;</div><div class="line"></div><div class="line"></div><div class="line">          &#123;<span class="keyword">this</span>._renderView(<span class="keyword">this</span>.state.selected)&#125;</div><div class="line"></div><div class="line">        &lt;/TabBarIOS.Item&gt;</div><div class="line"></div><div class="line">        &lt;TabBarIOS.Item</div><div class="line">          title = <span class="string">"首页"</span></div><div class="line">          selected = &#123; <span class="keyword">this</span>.state.selected === <span class="string">'home'</span> &#125;</div><div class="line">          icon = &#123;require(<span class="string">'./images/home@2x.png'</span>)&#125;</div><div class="line">          selectedIcon=&#123;require(<span class="string">'./images/home-1@2x.png'</span>)&#125;</div><div class="line">          onPress = &#123;() =&gt; &#123;</div><div class="line">            <span class="keyword">this</span>.setState(&#123;</div><div class="line">              selected: <span class="string">'home'</span></div><div class="line">            &#125;)</div><div class="line">        &#125;&#125;&gt;</div><div class="line"></div><div class="line">          &#123;<span class="keyword">this</span>._renderView(<span class="keyword">this</span>.state.selected)&#125;</div><div class="line"></div><div class="line">        &lt;/TabBarIOS.Item&gt;</div><div class="line"></div><div class="line">        &lt;TabBarIOS.Item</div><div class="line">          title = <span class="string">"消息"</span></div><div class="line">          selected = &#123; <span class="keyword">this</span>.state.selected === <span class="string">'message'</span> &#125;</div><div class="line">          icon = &#123;require(<span class="string">'./images/news@2x.png'</span>)&#125;</div><div class="line">          selectedIcon=&#123;require(<span class="string">'./images/news-1@2x.png'</span>)&#125;</div><div class="line">          onPress = &#123;() =&gt; &#123;</div><div class="line">            <span class="keyword">this</span>.setState(&#123;</div><div class="line">              selected: <span class="string">'message'</span></div><div class="line">            &#125;)</div><div class="line">          &#125;&#125;&gt;</div><div class="line"></div><div class="line">          &#123;<span class="keyword">this</span>._renderView(<span class="keyword">this</span>.state.selected)&#125;</div><div class="line"></div><div class="line">        &lt;/TabBarIOS.Item&gt;</div><div class="line"></div><div class="line">        &lt;TabBarIOS.Item</div><div class="line">          title = <span class="string">"设置"</span></div><div class="line">          selected = &#123; <span class="keyword">this</span>.state.selected === <span class="string">'setting'</span> &#125;</div><div class="line">          icon = &#123;require(<span class="string">'./images/user@2x.png'</span>)&#125;</div><div class="line">          selectedIcon=&#123;require(<span class="string">'./images/user-1@2x.png'</span>)&#125;</div><div class="line">          onPress = &#123;() =&gt; &#123;</div><div class="line">            <span class="keyword">this</span>.setState(&#123;</div><div class="line">              selected: <span class="string">'setting'</span></div><div class="line">            &#125;)</div><div class="line">          &#125;&#125;&gt;</div><div class="line"></div><div class="line">          &#123;<span class="keyword">this</span>._renderView(<span class="keyword">this</span>.state.selected)&#125;</div><div class="line"></div><div class="line">        &lt;/TabBarIOS.Item&gt;</div><div class="line">      &lt;/TabBarIOS&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">const styles = StyleSheet.create(&#123;</div><div class="line"></div><div class="line">&#125;);</div><div class="line"></div><div class="line">AppRegistry.registerComponent(<span class="string">'HongshiWuLiuRN'</span>, () =&gt; HongshiWuLiuRN);</div></pre></td></tr></table></figure>
<h3 id="首先你先不要运行，我先解释一下几点比较重要的问题："><a href="#首先你先不要运行，我先解释一下几点比较重要的问题：" class="headerlink" title="首先你先不要运行，我先解释一下几点比较重要的问题："></a>首先你先不要运行，我先解释一下几点比较重要的问题：</h3><blockquote>
<p>引入系统主件(<strong>关于系统主件，你可以直接copy就好，这里我的意见就是官方建议那种写法，你就以这种写法为主</strong>)、第三方主件、以及自己定义的主件(<strong>这里一定要理清楚自己写的主件的路径</strong>)。</p>
</blockquote>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 引入系统主件</span></div><div class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">import</span> &#123;</div><div class="line">  AppRegistry,</div><div class="line">  StyleSheet,</div><div class="line">  Text,</div><div class="line">  View,</div><div class="line">  TabBarIOS</div><div class="line">&#125; <span class="keyword">from</span> <span class="string">'react-native'</span>;</div><div class="line"></div><div class="line"><span class="comment">// 引入自定义的主件</span></div><div class="line"><span class="keyword">import</span> <span class="keyword">Task</span>     <span class="keyword">from</span> <span class="string">'./ios_views/task'</span>;</div><div class="line"><span class="keyword">import</span> Goods    <span class="keyword">from</span> <span class="string">'./ios_views/goods'</span></div><div class="line"><span class="keyword">import</span> Home     <span class="keyword">from</span> <span class="string">'./ios_views/home'</span></div><div class="line"><span class="keyword">import</span> Message  <span class="keyword">from</span> <span class="string">'./ios_views/message'</span></div><div class="line"><span class="keyword">import</span> Setting  <span class="keyword">from</span> <span class="string">'./ios_views/setting'</span></div></pre></td></tr></table></figure>
<blockquote>
<p>如何定义主件,这里我目前写了两个方法，也是最常使用的两个方法：<strong>其中constructor是这个主件的实例化方法，而真正让视图渲染到屏幕上的是render的方法，你可以在这里添加想渲染上去的视图内容。</strong></p>
</blockquote>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">HongshiWuLiuRN</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">  constructor() &#123;</div><div class="line">    <span class="keyword">super</span>();</div><div class="line">  &#125;</div><div class="line"></div><div class="line">	render() &#123;</div><div class="line"></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>如何定义主件视图的样式，<strong>这里我们就需要用到stylesheet 所创创建的对象，在这里你就可以像写CSS样式一样，来定义视图了。</strong></p>
</blockquote>
<figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">const styles</span> = StyleSheet.create(&#123;</div><div class="line"></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<blockquote>
<p>如何定义应用的入口文件，<strong>就想C函数一样，需要一个main函数作为入口文件，在RN中，我需要使用AppRegistry来注册这个主件，同时也作为入口文件。</strong></p>
</blockquote>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">AppRegistry.registerComponent(<span class="string">'HongshiWuLiuRN'</span>, <span class="function"><span class="params">()</span> =&gt;</span> HongshiWuLiuRN);</div></pre></td></tr></table></figure>
<blockquote>
<p>如何添加图片，你可以发现这段代码 <strong>导入图片和自定义的主件是一样，需要写清楚图片所在的路径，这里为了调试，你可以先注释到</strong>：</p>
</blockquote>
<figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="attr">icon</span> = &#123;require(<span class="string">'./images/news@2x.png'</span>)&#125;</div><div class="line"><span class="attr">selectedIcon</span>=&#123;require(<span class="string">'./images/news-1@2x.png'</span>)&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>整个TabBar的功能，是由<strong>TabBarIOS</strong>来实现的，具体在这里，我们可以通过设置<strong>tintColor = ‘#e23f42’</strong>可以设置TabBar点选适合的颜色，而具体的图片的样式，文字，以及点击的方法就需要在<strong>TabBarIOS.Item</strong>来进行设置,重点说一下这个这段代码：这里定义一个私有方法，传入了一个字符串类型的参数，在拿到的参数的时候，我用<strong>swich</strong>的的方法，根据传入不同的参数，返回不同的<strong>自定义的主件</strong></p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">&#123;<span class="keyword">this</span>._renderView(<span class="keyword">this</span>.state.selected)&#125;</div><div class="line"></div><div class="line"> _renderView(moduleName) &#123;</div><div class="line">    <span class="keyword">switch</span> (moduleName) &#123;</div><div class="line">      <span class="keyword">case</span> <span class="string">'task'</span>:</div><div class="line">        <span class="keyword">return</span> (</div><div class="line">          <span class="xml"><span class="tag">&lt;<span class="name">Task</span>/&gt;</span></span></div><div class="line">        );</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">      <span class="keyword">case</span> <span class="string">'goods'</span>:</div><div class="line">        <span class="keyword">return</span> (</div><div class="line">          <span class="xml"><span class="tag">&lt;<span class="name">Goods</span>/&gt;</span></span></div><div class="line">        );</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">      <span class="keyword">case</span> <span class="string">'home'</span>:</div><div class="line">        <span class="keyword">return</span> (</div><div class="line">          <span class="xml"><span class="tag">&lt;<span class="name">Home</span>/&gt;</span></span></div><div class="line">        );</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">      <span class="keyword">case</span> <span class="string">'message'</span>:</div><div class="line">        <span class="keyword">return</span> (</div><div class="line">          <span class="xml"><span class="tag">&lt;<span class="name">Message</span>/&gt;</span></span></div><div class="line">        );</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">      <span class="keyword">case</span> <span class="string">'setting'</span>:</div><div class="line">        <span class="keyword">return</span> (</div><div class="line">          <span class="xml"><span class="tag">&lt;<span class="name">Setting</span>/&gt;</span></span></div><div class="line">        );</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">      <span class="keyword">default</span>:</div><div class="line">        <span class="keyword">return</span> ( <span class="xml"><span class="tag">&lt;<span class="name">View</span>&gt;</span><span class="tag">&lt;/<span class="name">View</span>&gt;</span></span> );</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>这里根据自定义主件的路径，可以猜到，我在同级目录下创建一个<strong>ios_views</strong>的文件夹，在<strong>ios_views</strong>的文件下我有创建了四个js文件： <strong>goods.js</strong>、<strong>home.js</strong>、<strong>message.js</strong>、<strong>setting.js</strong>、<strong>task.js</strong>,代码如下,这个五个文件，你目前可以一样的代码，只需要修改相应的名字，就可以了：</p>
</blockquote>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> <span class="type">React</span>, &#123; <span class="type">Component</span> &#125; from <span class="symbol">'reac</span>t';</div><div class="line"><span class="keyword">import</span> &#123;</div><div class="line">  <span class="type">StyleSheet</span>,</div><div class="line">  <span class="type">View</span>,</div><div class="line">  <span class="type">NavigatorIOS</span></div><div class="line">&#125; from <span class="symbol">'react</span>-native';</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">home_views</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      &lt;<span class="type">View</span>&gt;</div><div class="line"></div><div class="line">      &lt;/<span class="type">View</span>&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">home</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span>(</div><div class="line">      &lt;<span class="type">NavigatorIOS</span></div><div class="line">          initialRoute=&#123;&#123;</div><div class="line">          component: home_views,</div><div class="line">          title: <span class="string">"红狮物流"</span>,</div><div class="line">          titleTextColor: '#fff',</div><div class="line">          barTintColor: '#e23f42',</div><div class="line">        &#125;&#125;</div><div class="line">      /&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">const styles = <span class="type">StyleSheet</span>.create(&#123;</div><div class="line"></div><div class="line">&#125;);</div><div class="line"></div><div class="line">module.exports = home</div></pre></td></tr></table></figure>
<blockquote>
<p>这里用到了<strong>NavigatorIOS</strong>的主件，这个就是强大的路由主件。你可以看到，在里面必须要定义初始路由对应于哪个主件，以及nav的背景色，title，字体颜色等等。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;实战-React-Native-重写红狮物流App的项目。下面的的几次博客我会以完成一个现有的项目，将它整体都用React重写。项目我已经上传到github-https-github-com-Ghstart-HongshiWuliuRN&quot;&gt;&lt;a href=&quot;#实战-React-Native-重写红狮物流App的项目。下面的的几次博客我会以完成一个现有的项目，将它整体都用React重写。项目我已经上传到github-https-github-com-Ghstart-HongshiWuliuRN&quot; class=&quot;headerlink&quot; title=&quot;实战(-) React-Native 重写红狮物流App的项目。下面的的几次博客我会以完成一个现有的项目，将它整体都用React重写。项目我已经上传到github[https://github.com/Ghstart/HongshiWuliuRN]&quot;&gt;&lt;/a&gt;实战(-) React-Native 重写红狮物流App的项目。下面的的几次博客我会以完成一个现有的项目，将它整体都用React重写。项目我已经上传到github[&lt;a href=&quot;https://github.com/Ghstart/HongshiWuliuRN&quot;&gt;https://github.com/Ghstart/HongshiWuliuRN&lt;/a&gt;]&lt;/h2&gt;&lt;h3 id=&quot;首先找到index-ios-js文件，由于我们的app的架构就是主流的tab的这种，所以我这里用到了TabBarIOS的主件，代码如下：&quot;&gt;&lt;a href=&quot;#首先找到index-ios-js文件，由于我们的app的架构就是主流的tab的这种，所以我这里用到了TabBarIOS的主件，代码如下：&quot; class=&quot;headerlink&quot; title=&quot;首先找到index.ios.js文件，由于我们的app的架构就是主流的tab的这种，所以我这里用到了TabBarIOS的主件，代码如下：&quot;&gt;&lt;/a&gt;首先找到&lt;code&gt;index.ios.js&lt;/code&gt;文件，由于我们的app的架构就是主流的tab的这种，所以我这里用到了TabBarIOS的主件，代码如下：&lt;/h3&gt;
    
    </summary>
    
      <category term="日志" scheme="http://www.ghcoder.com/categories/%E6%97%A5%E5%BF%97/"/>
    
    
      <category term="学习" scheme="http://www.ghcoder.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="React Native" scheme="http://www.ghcoder.com/tags/React-Native/"/>
    
  </entry>
  
  <entry>
    <title>学习React Native中</title>
    <link href="http://www.ghcoder.com/2016/08/24/20160824/"/>
    <id>http://www.ghcoder.com/2016/08/24/20160824/</id>
    <published>2016-08-24T06:53:12.000Z</published>
    <updated>2017-05-10T10:06:27.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="其实从去年我就一直看学习并看React-Native-开始学习只是为了兴趣，现在项目中用到了有些更新的功能，我就是用React-native-来做的。其实还是蛮好的，但是我发现更新实在是太快了，现在官网的稳定版本是0-31版本"><a href="#其实从去年我就一直看学习并看React-Native-开始学习只是为了兴趣，现在项目中用到了有些更新的功能，我就是用React-native-来做的。其实还是蛮好的，但是我发现更新实在是太快了，现在官网的稳定版本是0-31版本" class="headerlink" title="其实从去年我就一直看学习并看React Native,开始学习只是为了兴趣，现在项目中用到了有些更新的功能，我就是用React native 来做的。其实还是蛮好的，但是我发现更新实在是太快了，现在官网的稳定版本是0.31版本"></a>其实从去年我就一直看学习并看React Native,开始学习只是为了兴趣，现在项目中用到了有些更新的功能，我就是用React native 来做的。其实还是蛮好的，但是我发现更新实在是太快了，现在官网的稳定版本是<a href="https://facebook.github.io/react-native/" target="_blank" rel="external">0.31版本</a></h2><a id="more"></a>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><blockquote>
<p>打开terminal, cd到某个路径下，执行命令 <code>react-native init helloworld</code>[^这里的helloword就是你创建的项目名字]<br>如果出现这样的代码就代码创建成功。</p>
</blockquote>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">To <span class="built_in">run</span> your app <span class="keyword">on</span> iOS:</div><div class="line">   cd /Users/gonghuan/Desktop/helloworld</div><div class="line">   react-native <span class="built_in">run</span>-ios</div><div class="line">   - <span class="keyword">or</span> -</div><div class="line">   Open /Users/gonghuan/Desktop/helloworld/ios/helloworld.xcodeproj <span class="keyword">in</span> Xcode</div><div class="line">   Hit <span class="keyword">the</span> Run button</div><div class="line">To <span class="built_in">run</span> your app <span class="keyword">on</span> Android:</div><div class="line">   Have an Android emulator <span class="built_in">running</span> (quickest way <span class="keyword">to</span> <span class="keyword">get</span> started), <span class="keyword">or</span> a device connected</div><div class="line">   cd /Users/gonghuan/Desktop/helloworld</div><div class="line">   react-native <span class="built_in">run</span>-android</div></pre></td></tr></table></figure>
<blockquote>
<p>此时你可以通过类似<code>react-native run-ios</code>可以直接调起iOS模拟器，此时你可以看到你的终端不断在解析，然后就可以成功运行了。</p>
<h2 id="说到这里，应该你已经可以运行你的app了，至于之前要安装-brew-node等等，我这里就不再多说了，你可以去官网上走一遍，很简单。"><a href="#说到这里，应该你已经可以运行你的app了，至于之前要安装-brew-node等等，我这里就不再多说了，你可以去官网上走一遍，很简单。" class="headerlink" title="说到这里，应该你已经可以运行你的app了，至于之前要安装 brew node等等，我这里就不再多说了，你可以去官网上走一遍，很简单。"></a>说到这里，应该你已经可以运行你的app了，至于之前要安装 brew node等等，我这里就不再多说了，你可以去官网上走一遍，很简单。</h2></blockquote>
<h3 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h3><blockquote>
<p>我这里我选用的是atom，这里说一个我遇到的小问题，也许你也会遇到，在我们使用atom的时候，需要安装一些插件来帮助我们能够更加高效的写代码，就比如facebook开发的<a href="https://nuclide.io/docs/editor/setup/#quick-install" target="_blank" rel="external">Nuclide</a></p>
</blockquote>
<ol>
<li>按照官方install的说明，我们可以知道有两种安装的方式，一种就是通过直接在终端输入<code>apm install nuclide</code>,但是说实话，我就成功过一次，而且还是要挂vpn，之后就一直没有成功过了，这我就呵呵了。</li>
<li>官方建议第二种方式：直接在atom-&gt;Setting Views-&gt;Manage Packages,搜索Nuclide，直接安装。</li>
<li><p>第三种：通过这种方式你可以安装Themes、packages</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"> <span class="built_in">cd</span> ~/.atom/packages</div><div class="line">git <span class="built_in">clone</span> [packgae-url] <span class="comment"># git clone https://github.com/facebook/nuclide</span></div><div class="line"><span class="built_in">cd</span> [package] <span class="comment">#nuclide</span></div><div class="line">npm install</div></pre></td></tr></table></figure>
</li>
</ol>
<hr>
<p>###好了，到目前为止，你已经可以，我们已经可以开始运行，并且可以安装自己喜欢的插件，已经修改自己喜欢的主题了。下面我们开始coding,我们先通过atom打开我们之前创建的helloworld的项目，并且找到<code>index.ios.js</code>,删除里面所有的代码，不要着急，我们会慢慢的添加进去所有的代码。</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">firstRN</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span>(</div><div class="line">      &lt;<span class="type">Text</span>&gt;</div><div class="line">        <span class="type">Hello</span> world</div><div class="line">      &lt;/<span class="type">Text</span>&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="type">AppRegistry</span>.registerComponent(<span class="symbol">'helloworl</span>d', ()=&gt;firstRN);</div></pre></td></tr></table></figure>
<ol>
<li>这里我们先创建一个firstRN的类，继承自Component对象，这里你先不要管，我们后面都会解释的。</li>
<li>第二步，我们用AppRegistry这个注册一个对象，这个对象的名字是我们应用的名字‘helloworld’，第二个参数指向的是我们刚才创建的firstRN类。</li>
<li>我们点击模拟器，发现报错，<code>Unhandled JS Exception:xxxx: Can&#39;t find variable: Component</code>,在文件头部添加</li>
</ol>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">import</span> &#123; AppRegistry, Text &#125; <span class="keyword">from</span> <span class="string">'react-native'</span>;</div></pre></td></tr></table></figure>
<blockquote>
<p>The AppRegistry just tells React Native which component is the root one for the whole application. You won’t be thinking about AppRegistry a lot - there will probably just be one call to AppRegistry.registerComponent in your whole app. It’s included in these examples so you can paste the whole thing into your index.ios.js or index.android.js file and get it running.—-这里是官方给的AppRegistry，其实AppRegistry只做了一件事情，就是告诉这个应用，谁是整个应用的根控制器，这样你可以通过修改index.ios.js来修改iOS的根控制器是啥？安卓也是一样，修改的index.android.js<br>再次刷新模拟器，就会发现左上角会出现我们写的Hello world的文字。<br>这里我们觉得样式好丑，那该怎么办，没事，RN也是可以做到修改的。</p>
</blockquote>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> <span class="type">React</span>, &#123; <span class="type">Component</span> &#125; from <span class="symbol">'reac</span>t';</div><div class="line"><span class="keyword">import</span> &#123; <span class="type">AppRegistry</span>, <span class="type">Text</span> , <span class="type">StyleSheet</span> &#125; from <span class="symbol">'react</span>-native';</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">firstRN</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span>(</div><div class="line">      &lt;<span class="type">Text</span> style = &#123;styles.helloWorldStyle&#125;&gt;</div><div class="line">        <span class="type">Hello</span> world</div><div class="line">      &lt;/<span class="type">Text</span>&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">const styles = <span class="type">StyleSheet</span>.create(&#123;</div><div class="line">  helloWorldStyle: &#123;</div><div class="line">    color:<span class="symbol">'re</span>d',</div><div class="line">    fontSize:<span class="number">30</span>,</div><div class="line">    fontWeight:<span class="symbol">'bol</span>d'</div><div class="line">  &#125;</div><div class="line">&#125;)</div><div class="line"></div><div class="line"></div><div class="line"><span class="type">AppRegistry</span>.registerComponent(<span class="symbol">'helloworl</span>d', ()=&gt;firstRN);</div></pre></td></tr></table></figure>
<blockquote>
<p>这里我们需要在import中导读 StyleSheet,因为我们需要在后面的设置样式的时候，用到这个类。<br>直接在text后面添加style的样式熟悉<br>直接在后面创建styles的属性，通过StyleSheet来创建。<br>再次刷新模拟器，你就可以看到效果了。</p>
</blockquote>
<hr>
<h3 id="先说这么多，后期我们还会说到很多在app开发中遇到的各种问题，导航栏，网络请求，传值等等。"><a href="#先说这么多，后期我们还会说到很多在app开发中遇到的各种问题，导航栏，网络请求，传值等等。" class="headerlink" title="先说这么多，后期我们还会说到很多在app开发中遇到的各种问题，导航栏，网络请求，传值等等。"></a>先说这么多，后期我们还会说到很多在app开发中遇到的各种问题，导航栏，网络请求，传值等等。</h3>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;其实从去年我就一直看学习并看React-Native-开始学习只是为了兴趣，现在项目中用到了有些更新的功能，我就是用React-native-来做的。其实还是蛮好的，但是我发现更新实在是太快了，现在官网的稳定版本是0-31版本&quot;&gt;&lt;a href=&quot;#其实从去年我就一直看学习并看React-Native-开始学习只是为了兴趣，现在项目中用到了有些更新的功能，我就是用React-native-来做的。其实还是蛮好的，但是我发现更新实在是太快了，现在官网的稳定版本是0-31版本&quot; class=&quot;headerlink&quot; title=&quot;其实从去年我就一直看学习并看React Native,开始学习只是为了兴趣，现在项目中用到了有些更新的功能，我就是用React native 来做的。其实还是蛮好的，但是我发现更新实在是太快了，现在官网的稳定版本是0.31版本&quot;&gt;&lt;/a&gt;其实从去年我就一直看学习并看React Native,开始学习只是为了兴趣，现在项目中用到了有些更新的功能，我就是用React native 来做的。其实还是蛮好的，但是我发现更新实在是太快了，现在官网的稳定版本是&lt;a href=&quot;https://facebook.github.io/react-native/&quot;&gt;0.31版本&lt;/a&gt;&lt;/h2&gt;
    
    </summary>
    
      <category term="日志" scheme="http://www.ghcoder.com/categories/%E6%97%A5%E5%BF%97/"/>
    
    
      <category term="学习" scheme="http://www.ghcoder.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="React Native" scheme="http://www.ghcoder.com/tags/React-Native/"/>
    
  </entry>
  
  <entry>
    <title>因为我不想打卡，不要问我为什么？？</title>
    <link href="http://www.ghcoder.com/2016/08/15/20160815/"/>
    <id>http://www.ghcoder.com/2016/08/15/20160815/</id>
    <published>2016-08-15T06:28:12.000Z</published>
    <updated>2017-05-10T10:06:32.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="最近一直没啥时间来整理一些学习资料以及学习的内容，感觉这样不是很好。又由于公司要打卡了，所以我就写写我是怎么不打卡的吧！O-∩-∩-O"><a href="#最近一直没啥时间来整理一些学习资料以及学习的内容，感觉这样不是很好。又由于公司要打卡了，所以我就写写我是怎么不打卡的吧！O-∩-∩-O" class="headerlink" title="最近一直没啥时间来整理一些学习资料以及学习的内容，感觉这样不是很好。又由于公司要打卡了，所以我就写写我是怎么不打卡的吧！O(∩_∩)O~~~"></a>最近一直没啥时间来整理一些学习资料以及学习的内容，感觉这样不是很好。又由于公司要打卡了，所以我就写写我是怎么不打卡的吧！O(∩_∩)O~~~</h3><a id="more"></a>
<ol>
<li>mac电脑先安装抓包神器：Charles (网上有很多这个使用教程，我就不多说了，毕竟是工具，没啥难度)</li>
<li>点击Help-&gt;Local IP Address,将本机的IP打印出来，然后在手机里面设置代理为相应的IP，端口为：8888</li>
<li>此时你就可以开始看到数据的返回、和请求了。</li>
</ol>
<pre><code>![1.pi](media/14712518179704/1.pic.jpg)
</code></pre><ol>
<li>然后你就可以看到你想要的代码请求了，其实这个Android和iOS,还有点不同，Android返回的代码不是text/json,而是text/html,我在我代码中加入了代码格式的转换。</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">__block NSDictionary *par = @&#123;@&quot;employeeNo&quot;:pp.employeeNo,@&quot;coord&quot;:@&quot;30.249812,120.211494&quot;,@&quot;img_ids&quot;:@&quot;&quot;,@&quot;identifier&quot;: pp.identifier,@&quot;type&quot;: @&quot;0&quot;&#125;&#125;;</div><div class="line"></div><div class="line">   AFHTTPRequestOperationManager *manager = [AFHTTPRequestOperationManager manager];</div><div class="line">          [manager POST:@&quot;http://xxxx/HSSCM/appmail/employeeRecordManage/sign.do&quot; parameters:par success:^(AFHTTPRequestOperation * _Nonnull operation, id  _Nonnull responseObject) &#123;</div><div class="line">              NSLog(@&quot;%@&quot;,operation);</div><div class="line">              NSLog(@&quot;%@&quot;,responseObject);</div><div class="line">          &#125; failure:^(AFHTTPRequestOperation * _Nullable operation, NSError * _Nonnull error) &#123;</div><div class="line">              NSLog(@&quot;%@&quot;,operation);</div><div class="line">              NSLog(@&quot;%@&quot;,error);</div><div class="line">          &#125;];</div></pre></td></tr></table></figure>
<ol>
<li>你或许已经发现了参数的规律了，这里的employeeNO就是我们之前抓包的用户唯一标示符（安卓这边还耍了个心眼，取了一个很怪的名字，视图误导我们）</li>
<li>coord就是经纬度，用逗号链接起来的一个字符串</li>
<li>img_ids我不知道是个什么东西，反正可有可无</li>
<li>identifior是手机的udid（iOS中这样称呼吧）,这里我猜想他的employeeNO与手机identifior是一一对应的，<strong>所以这也就解释了为什么我在换手机的时候，会报错</strong></li>
<li>type:0–就是签出，1–就是签到</li>
</ol>
<hr>
<p>##现在问题都已经分析完了，我们该用什么对策来自动帮我们打卡呢。</p>
<p>####由于必须需要内网才能打卡，我们不能外网或者4G的条件下打卡，折让我们很蛋疼，这里我想到几个解决方案：</p>
<ol>
<li>安卓的手机，可以借用一款叫做&lt;按键精灵&gt;的app,但是有个条件就是你必须拿到root权限，这样就可以录制你按键的动作，你可以指定时间执行。</li>
<li>公司的电脑、或者测试机，安装一个teamViewer，这样你就可以在家里远程操控他。</li>
<li>公司的测试机充当服务器的功能、一直在跑，这样我需要关心的只有一件事：手机有电。</li>
</ol>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">	- (<span class="built_in">NSArray</span> *)setUPDatas:(TypeStatus)typeStatus &#123;</div><div class="line">     <span class="built_in">NSMutableArray</span> *datas = [<span class="built_in">NSMutableArray</span> new];</div><div class="line"></div><div class="line">     <span class="built_in">NSArray</span> *employeeNos = @[<span class="string">@"31330034"</span>, <span class="string">@"31330040"</span>, <span class="string">@"31330035"</span>];</div><div class="line">     <span class="built_in">NSArray</span> *identifiers = @[<span class="string">@"05B7A575-2D2A-4006-890A-D0994EFF3DAC"</span>, <span class="string">@"a000004f73cb94"</span>, <span class="string">@"1B65EB63-487B-49BF-B751-F2D544175BE7"</span>];</div><div class="line">     <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; employeeNos.count ; i++) &#123;</div><div class="line">         People *people = [[People alloc] init];</div><div class="line">         people.employeeNo = employeeNos[i];</div><div class="line">         people.coord = <span class="string">@"30.249812,120.211494"</span>;</div><div class="line">         people.img_ids = <span class="string">@""</span>;</div><div class="line">         people.identifier = identifiers[i];</div><div class="line">         <span class="keyword">if</span> (typeStatus == LogIn) &#123;</div><div class="line">             people.type = <span class="string">@"1"</span>;</div><div class="line">         &#125; <span class="keyword">else</span> &#123;</div><div class="line">             people.type = <span class="string">@"0"</span>;</div><div class="line">         &#125;</div><div class="line"></div><div class="line">         people.random_signInMin = [<span class="keyword">self</span> getRandomNumber:<span class="number">5</span> to:<span class="number">25</span>];</div><div class="line">         people.random_signInSec = [<span class="keyword">self</span> getRandomNumber:<span class="number">1</span> to:<span class="number">59</span>];</div><div class="line">         people.random_signOutMin = [<span class="keyword">self</span> getRandomNumber:<span class="number">5</span> to:<span class="number">25</span>];</div><div class="line">         people.random_signOutSec = [<span class="keyword">self</span> getRandomNumber:<span class="number">1</span> to:<span class="number">59</span>];</div><div class="line"></div><div class="line">         [datas addObject:people];</div><div class="line">     &#125;</div><div class="line"></div><div class="line">     <span class="keyword">return</span> [datas <span class="keyword">copy</span>];</div><div class="line"> 	&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"> 	- (<span class="keyword">int</span>)getRandomNumber:(<span class="keyword">int</span>)from to:(<span class="keyword">int</span>)to &#123;</div><div class="line">     <span class="keyword">return</span> (<span class="keyword">int</span>)(from + (arc4random() % (to - from + <span class="number">1</span>)));</div><div class="line"> 	&#125;</div><div class="line"></div><div class="line"><span class="meta">#### 我在这里实例化了用户的对象，在这个对象生成的同事，就已经确定这个对象签到的时间，和签出的时间（在某个数范围内随机生成）。</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> (hour == signOutHour) &#123; <span class="comment">// 签出--0</span></div><div class="line"></div><div class="line">             <span class="keyword">if</span> (<span class="keyword">self</span>.needSignOut.count == <span class="number">0</span>) <span class="keyword">return</span>;</div><div class="line"></div><div class="line">             <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; <span class="keyword">self</span>.needSignOut.count; i++) &#123;</div><div class="line">                 People *pp = <span class="keyword">self</span>.needSignOut[i];</div><div class="line"></div><div class="line">                 <span class="keyword">if</span> (pp.random_signOutMin &lt; min || (pp.random_signOutMin == min &amp;&amp; pp.random_signOutSec &lt;= sec)) &#123;</div><div class="line">                     par = @&#123;</div><div class="line">                             <span class="string">@"employeeNo"</span>:pp.employeeNo,</div><div class="line">                             <span class="string">@"coord"</span>: <span class="string">@"30.249812,120.211494"</span>,</div><div class="line">                             <span class="string">@"img_ids"</span>:<span class="string">@""</span>,</div><div class="line">                             <span class="string">@"identifier"</span>: pp.identifier,</div><div class="line">                             <span class="string">@"type"</span>: pp.type&#125;;</div><div class="line"></div><div class="line">                     [<span class="keyword">self</span> SignOrSignOut:par week:week time:[<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%ld:%ld:%ld"</span>,(<span class="keyword">long</span>)hour,(<span class="keyword">long</span>)min,(<span class="keyword">long</span>)sec]];</div><div class="line">                 &#125;</div><div class="line">             &#125;</div><div class="line">            &#125;</div></pre></td></tr></table></figure>
<hr>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)<span class="string">needToRemove:</span>(TypeStatus)status <span class="string">identifior:</span>(NSString *)identifior <span class="string">realtime:</span>(NSString *)realtime&#123;</div><div class="line"> <span class="keyword">if</span> (status == LogIn) &#123;</div><div class="line">     <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; self.needSignIn.count; i++) &#123;</div><div class="line">         NSMutableDictionary *tempDic = [NSMutableDictionary <span class="keyword">new</span>];</div><div class="line">         People *pp = self.needSignIn[i];</div><div class="line">         <span class="keyword">if</span> ([pp.identifier <span class="string">isEqualToString:</span>identifior] &amp;&amp; ![identifior <span class="string">isEqualToString:</span>@<span class="string">""</span>]) &#123;</div><div class="line">             NSLog(@<span class="string">"移除people:%@---loginMin:%ld----loginSec:%ld"</span>,pp.identifier,(<span class="keyword">long</span>)pp.random_signInMin, (<span class="keyword">long</span>)pp.random_signInSec);</div><div class="line"></div><div class="line">             [self.needSignIn <span class="string">removeObject:</span>pp];</div><div class="line"></div><div class="line"></div><div class="line">             <span class="keyword">if</span> (pp.identifier != nil) [tempDic <span class="string">setObject:</span>pp.identifier <span class="string">forKey:</span>@<span class="string">"iden"</span>];</div><div class="line">             [tempDic <span class="string">setObject:</span>[NSString <span class="string">stringWithFormat:</span>@<span class="string">"签到时间:%ld:%ld:%ld"</span>, signInHour, pp.random_signInMin, pp.random_signInSec] <span class="string">forKey:</span>@<span class="string">"time"</span>];</div><div class="line">             <span class="keyword">if</span> (realtime != nil) [tempDic <span class="string">setObject:</span>realtime <span class="string">forKey:</span>@<span class="string">"realtime"</span>];</div><div class="line"></div><div class="line">             <span class="keyword">if</span> (tempDic != nil) [self.tableViewDatas <span class="string">addObject:</span>tempDic];</div><div class="line"></div><div class="line">         &#125;</div><div class="line">     &#125;</div></pre></td></tr></table></figure>
<ol>
<li>这里你会发现我在遍历的同事，又对mutableArray对象进行的操作，开始一直crash，会报这个错：<strong>collection __nsarraym was mutated while being enumerated</strong></li>
<li>意思就是说，你在遍历这个对象的同事，又对这个对象进行了添加、删除的操作。这里给你三种解决的思路。</li>
</ol>
<blockquote>
<p>1</p>
</blockquote>
<figure class="highlight matlab"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (int <span class="built_in">i</span> = <span class="number">0</span> ; <span class="built_in">i</span> &lt; self.needSignIn.count; <span class="built_in">i</span>++) &#123;&#125;</div></pre></td></tr></table></figure>
<p>替换</p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (People *pp <span class="keyword">in</span> <span class="keyword">self</span>.needSignIn) &#123;&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>2</p>
</blockquote>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">NSSortDescriptor</span> *sd1 = [<span class="built_in">NSSortDescriptor</span> sortDescriptorWithKey:<span class="literal">nil</span> ascending:<span class="literal">NO</span>];<span class="comment">//yes升序排列，no,降序排列</span></div><div class="line"><span class="built_in">NSArray</span> *myary = [ary sortedArrayUsingDescriptors:[<span class="built_in">NSArray</span> arrayWithObjects:sd1, <span class="literal">nil</span>]];<span class="comment">//注意这里的ary进行排序后会生产一个新的数组指针，myary，不能在用ary,ary还是保持不变的。</span></div><div class="line"><span class="keyword">for</span> (People *pp <span class="keyword">in</span> myary) &#123;&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>3</p>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">生成一个零时的数组，用来遍历，之前的数据用来操作。</div></pre></td></tr></table></figure>
<p><strong>其实这里有个问题，想了好久才想明白：为什么正序排列不行，倒序就可以呢？？,为什么for不行，但是forin的可以呢？</strong></p>
<p>####其实for的语句可以等同于：假如说我有10个元素，在第一个的时候，我就remove了，那是不是到了第九个的时候就越界了呢？？</p>
<figure class="highlight axapta"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> <span class="keyword">count</span> =  arr.<span class="keyword">count</span>; <span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;<span class="keyword">count</span>;i++) &#123;&#125;</div></pre></td></tr></table></figure>
<p><strong>倒序同样的道理：</strong></p>
<figure class="highlight axapta"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> <span class="keyword">count</span> =  arr.<span class="keyword">count</span>;</div><div class="line"><span class="keyword">for</span> (i = <span class="keyword">count</span> - <span class="number">1</span>;i&gt;=<span class="number">0</span> ;i—) &#123;&#125;</div></pre></td></tr></table></figure>
<h4 id="当我移除当前这个的时候，其实比不影响我其他的元素布局。"><a href="#当我移除当前这个的时候，其实比不影响我其他的元素布局。" class="headerlink" title="当我移除当前这个的时候，其实比不影响我其他的元素布局。"></a>当我移除当前这个的时候，其实比不影响我其他的元素布局。</h4><p><strong>但是这两种情况，假如你使用for的语句格式，就不会有问题了</strong></p>
<figure class="highlight matlab"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (int <span class="built_in">i</span> = <span class="number">0</span> ; <span class="built_in">i</span> &lt; self.needSignIn.count; <span class="built_in">i</span>++) &#123;&#125;</div></pre></td></tr></table></figure>
<p>###总结一句话：</p>
<ol>
<li>当我们正序遍历时,如果删除了一个,那么没有遍历到的元素位置都会往前移动一位,这样系统就无法确定接下来遍历是从删除位置开始呢,还是从删除位置下一位开始呢</li>
<li>对于逆序遍历就不会,因为我们逆序遍历时,遇到匹配的元素删除后,位置改变的是遍历过得元素,而没有遍历到的元素位置却没有改变,所以遍历能够正常进行.</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;最近一直没啥时间来整理一些学习资料以及学习的内容，感觉这样不是很好。又由于公司要打卡了，所以我就写写我是怎么不打卡的吧！O-∩-∩-O&quot;&gt;&lt;a href=&quot;#最近一直没啥时间来整理一些学习资料以及学习的内容，感觉这样不是很好。又由于公司要打卡了，所以我就写写我是怎么不打卡的吧！O-∩-∩-O&quot; class=&quot;headerlink&quot; title=&quot;最近一直没啥时间来整理一些学习资料以及学习的内容，感觉这样不是很好。又由于公司要打卡了，所以我就写写我是怎么不打卡的吧！O(∩_∩)O~~~&quot;&gt;&lt;/a&gt;最近一直没啥时间来整理一些学习资料以及学习的内容，感觉这样不是很好。又由于公司要打卡了，所以我就写写我是怎么不打卡的吧！O(∩_∩)O~~~&lt;/h3&gt;
    
    </summary>
    
      <category term="日志" scheme="http://www.ghcoder.com/categories/%E6%97%A5%E5%BF%97/"/>
    
    
      <category term="学习" scheme="http://www.ghcoder.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="Obeject-c" scheme="http://www.ghcoder.com/tags/Obeject-c/"/>
    
  </entry>
  
  <entry>
    <title>搭建SDK中所遇到的坑</title>
    <link href="http://www.ghcoder.com/2016/05/10/20160510/"/>
    <id>http://www.ghcoder.com/2016/05/10/20160510/</id>
    <published>2016-05-10T01:41:12.000Z</published>
    <updated>2017-05-10T10:06:36.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="其实开始之前，我找到一篇很不错的文章，想翻译的，但是google了一下，发现已经有好多人翻译过这篇文章了，这里我就不再多说什么了，把原文的链接贴出来。https-www-raywenderlich-com-65964-create-a-framework-for-ios-这里我就说一下，我在搭建sdk的时候，遇到的坑吧。"><a href="#其实开始之前，我找到一篇很不错的文章，想翻译的，但是google了一下，发现已经有好多人翻译过这篇文章了，这里我就不再多说什么了，把原文的链接贴出来。https-www-raywenderlich-com-65964-create-a-framework-for-ios-这里我就说一下，我在搭建sdk的时候，遇到的坑吧。" class="headerlink" title="其实开始之前，我找到一篇很不错的文章，想翻译的，但是google了一下，发现已经有好多人翻译过这篇文章了，这里我就不再多说什么了，把原文的链接贴出来。https://www.raywenderlich.com/65964/create-a-framework-for-ios,这里我就说一下，我在搭建sdk的时候，遇到的坑吧。"></a>其实开始之前，我找到一篇很不错的文章，想翻译的，但是google了一下，发现已经有好多人翻译过这篇文章了，这里我就不再多说什么了，把原文的链接贴出来。<a href="https://www.raywenderlich.com/65964/create-a-framework-for-ios" target="_blank" rel="external">https://www.raywenderlich.com/65964/create-a-framework-for-ios</a>,这里我就说一下，我在搭建sdk的时候，遇到的坑吧。</h2><a id="more"></a>
<ol>
<li>其实你要是能够走完上面的流程，你基本上已经完成了80%了，剩下的就是发现问题，再去打包。</li>
</ol>
<h3 id="第一个错误"><a href="#第一个错误" class="headerlink" title="第一个错误"></a>第一个错误</h3><p><code>*** Terminating app due to uncaught exception &#39;NSInvalidArgumentException&#39;, reason: &#39;Could not find a storyboard named &#39;XXXXname&#39; in bundle NSBundle</code></p>
<ul>
<li>这个错误可能直接就会导致app起不来，一启动就会crash，这里需要将所有你用到xib，storyboard的文件都统一作出修改。<code>其实这个问题在遇到用xib/SB创建的cell的时候、在xib/SB中添加图片的时候需要将[UIImage imageNamed:@&quot;&quot;] =======&gt; 修改为 [UIImage imageNamed:@&quot;xxxx.bundle/xxxxName&quot;]</code></li>
</ul>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">UIStoryboard</span> *main = [<span class="built_in">UIStoryboard</span> storyboardWithName:<span class="string">@"xxxxName"</span> bundle:[<span class="built_in">NSBundle</span> mainBundle]];</div><div class="line"></div><div class="line">修改为===============================</div><div class="line"></div><div class="line"><span class="built_in">UIStoryboard</span> *main = [<span class="built_in">UIStoryboard</span> storyboardWithName:<span class="string">@"xxxx.bundle/xxxxName"</span> bundle:[<span class="built_in">NSBundle</span> mainBundle]];</div></pre></td></tr></table></figure>
<h3 id="第二个错误"><a href="#第二个错误" class="headerlink" title="第二个错误"></a>第二个错误</h3><p><code>可能会在Iphone4的时候，直接无法build,直接报这个错： dyld: Symbol not found: ___NSDictionary0__</code></p>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">需要将项目中的<span class="keyword">build </span>Phases 中的core foundation的stastu的状态 从Required修改为Optional</div></pre></td></tr></table></figure>
<p><code>后续如果还有其他的bug，我再贴出来吧！</code></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;其实开始之前，我找到一篇很不错的文章，想翻译的，但是google了一下，发现已经有好多人翻译过这篇文章了，这里我就不再多说什么了，把原文的链接贴出来。https-www-raywenderlich-com-65964-create-a-framework-for-ios-这里我就说一下，我在搭建sdk的时候，遇到的坑吧。&quot;&gt;&lt;a href=&quot;#其实开始之前，我找到一篇很不错的文章，想翻译的，但是google了一下，发现已经有好多人翻译过这篇文章了，这里我就不再多说什么了，把原文的链接贴出来。https-www-raywenderlich-com-65964-create-a-framework-for-ios-这里我就说一下，我在搭建sdk的时候，遇到的坑吧。&quot; class=&quot;headerlink&quot; title=&quot;其实开始之前，我找到一篇很不错的文章，想翻译的，但是google了一下，发现已经有好多人翻译过这篇文章了，这里我就不再多说什么了，把原文的链接贴出来。https://www.raywenderlich.com/65964/create-a-framework-for-ios,这里我就说一下，我在搭建sdk的时候，遇到的坑吧。&quot;&gt;&lt;/a&gt;其实开始之前，我找到一篇很不错的文章，想翻译的，但是google了一下，发现已经有好多人翻译过这篇文章了，这里我就不再多说什么了，把原文的链接贴出来。&lt;a href=&quot;https://www.raywenderlich.com/65964/create-a-framework-for-ios&quot;&gt;https://www.raywenderlich.com/65964/create-a-framework-for-ios&lt;/a&gt;,这里我就说一下，我在搭建sdk的时候，遇到的坑吧。&lt;/h2&gt;
    
    </summary>
    
      <category term="日志" scheme="http://www.ghcoder.com/categories/%E6%97%A5%E5%BF%97/"/>
    
    
      <category term="Obeject-c" scheme="http://www.ghcoder.com/tags/Obeject-c/"/>
    
      <category term="项目" scheme="http://www.ghcoder.com/tags/%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>关于学习UITableViewCell的高度计算的框架-UITableView-FDTemplateLayoutCell。</title>
    <link href="http://www.ghcoder.com/2016/05/05/20160505/"/>
    <id>http://www.ghcoder.com/2016/05/05/20160505/</id>
    <published>2016-05-05T09:06:12.000Z</published>
    <updated>2017-05-10T12:21:19.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="学习UITableView的高度计算的框架"><a href="#学习UITableView的高度计算的框架" class="headerlink" title="学习UITableView的高度计算的框架"></a>学习UITableView的高度计算的框架</h2><a id="more"></a>
<h2 id="这里学习的是UITableView-FDTemplateLayoutCellhttps-github-com-forkingdog-UITableView-FDTemplateLayoutCell你也可以自己去下载并且学习。"><a href="#这里学习的是UITableView-FDTemplateLayoutCellhttps-github-com-forkingdog-UITableView-FDTemplateLayoutCell你也可以自己去下载并且学习。" class="headerlink" title="这里学习的是UITableView-FDTemplateLayoutCellhttps://github.com/forkingdog/UITableView-FDTemplateLayoutCell你也可以自己去下载并且学习。"></a>这里学习的是UITableView-FDTemplateLayoutCell<a href="https://github.com/forkingdog/UITableView-FDTemplateLayoutCell" target="_blank" rel="external">https://github.com/forkingdog/UITableView-FDTemplateLayoutCell</a>你也可以自己去下载并且学习。</h2><ul>
<li>他的文件很简单，直接在UITableView的高度放回中去调用方法：直接调用UITableView 中(FDTemplateLayoutCell)的category的方法,其实他的category里面一共写了三种可以计算高度的方法，这是其中的一种：</li>
</ul>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div></pre></td><td class="code"><pre><div class="line">- (<span class="built_in">CGFloat</span>)fd_heightForCellWithIdentifier:(<span class="built_in">NSString</span> *)identifier configuration:(<span class="keyword">void</span> (^)(<span class="keyword">id</span> cell))configuration &#123;</div><div class="line">		<span class="comment">//1.</span></div><div class="line">	    <span class="keyword">if</span> (!identifier) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//2.</span></div><div class="line">    <span class="built_in">UITableViewCell</span> *templateLayoutCell = [<span class="keyword">self</span> fd_templateCellForReuseIdentifier:identifier];</div><div class="line"></div><div class="line">    <span class="comment">// Manually calls to ensure consistent behavior with actual cells. (that are displayed on screen)</span></div><div class="line">    [templateLayoutCell prepareForReuse];</div><div class="line"></div><div class="line">    <span class="comment">//8.</span></div><div class="line">    <span class="comment">// Customize and provide content for our template cell.</span></div><div class="line">    <span class="keyword">if</span> (configuration) &#123;</div><div class="line">        configuration(templateLayoutCell);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> [<span class="keyword">self</span> fd_systemFittingHeightForConfiguratedCell:templateLayoutCell];</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//2.</span></div><div class="line">- (__kindof <span class="built_in">UITableViewCell</span> *)fd_templateCellForReuseIdentifier:(<span class="built_in">NSString</span> *)identifier &#123;</div><div class="line">	<span class="comment">//....</span></div><div class="line">		<span class="comment">//4.</span></div><div class="line">	    <span class="keyword">if</span> (!templateCellsByIdentifiers) &#123;</div><div class="line">        templateCellsByIdentifiers = @&#123;&#125;.mutableCopy;</div><div class="line">        objc_setAssociatedObject(<span class="keyword">self</span>, _cmd, templateCellsByIdentifiers, OBJC_ASSOCIATION_RETAIN_NONATOMIC);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    	<span class="comment">//5.</span></div><div class="line">        <span class="keyword">if</span> (!templateCell) &#123;</div><div class="line">        templateCell = [<span class="keyword">self</span> dequeueReusableCellWithIdentifier:identifier];</div><div class="line">        <span class="built_in">NSAssert</span>(templateCell != <span class="literal">nil</span>, <span class="string">@"Cell must be registered to table view for identifier - %@"</span>, identifier);</div><div class="line">        <span class="comment">//6.</span></div><div class="line">        templateCell.fd_isTemplateLayoutCell = <span class="literal">YES</span>;</div><div class="line">        templateCell.contentView.translatesAutoresizingMaskIntoConstraints = <span class="literal">NO</span>;</div><div class="line">        templateCellsByIdentifiers[identifier] = templateCell;</div><div class="line">        [<span class="keyword">self</span> fd_debugLog:[<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"layout cell created - %@"</span>, identifier]];</div><div class="line">    &#125;</div><div class="line"></div><div class="line">	<span class="comment">//....</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="comment">//3.</span></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Returns the value associated with a given object for a given key.</div><div class="line"> *</div><div class="line"> * @param object The source object for the association.</div><div class="line"> * @param key The key for the association.</div><div class="line"> *</div><div class="line"> * @return The value associated with the key \e key for \e object.</div><div class="line"> *</div><div class="line"> * @see objc_setAssociatedObject</div><div class="line"> */</div><div class="line">OBJC_EXPORT <span class="keyword">id</span> objc_getAssociatedObject(<span class="keyword">id</span> object, <span class="keyword">const</span> <span class="keyword">void</span> *key)</div><div class="line"></div><div class="line"><span class="comment">//6.</span></div><div class="line"><span class="comment">/// Indicate this is a template layout cell for calculation only.</span></div><div class="line"><span class="comment">/// You may need this when there are non-UI side effects when configure a cell.</span></div><div class="line"><span class="comment">/// Like:</span></div><div class="line"><span class="comment">///   - (void)configureCell:(FooCell *)cell atIndexPath:(NSIndexPath *)indexPath &#123;</span></div><div class="line"><span class="comment">///       cell.entity = [self entityAtIndexPath:indexPath];</span></div><div class="line"><span class="comment">///       if (!cell.fd_isTemplateLayoutCell) &#123;</span></div><div class="line"><span class="comment">///           [self notifySomething]; // non-UI side effects</span></div><div class="line"><span class="comment">///       &#125;</span></div><div class="line"><span class="comment">///   &#125;</span></div><div class="line"><span class="comment">///</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) <span class="built_in">BOOL</span> fd_isTemplateLayoutCell;</div><div class="line"></div><div class="line"><span class="comment">//7.</span></div><div class="line">- (<span class="built_in">BOOL</span>)fd_isTemplateLayoutCell &#123;</div><div class="line">    <span class="keyword">return</span> [objc_getAssociatedObject(<span class="keyword">self</span>, _cmd) boolValue];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)setFd_isTemplateLayoutCell:(<span class="built_in">BOOL</span>)isTemplateLayoutCell &#123;</div><div class="line">    objc_setAssociatedObject(<span class="keyword">self</span>, <span class="keyword">@selector</span>(fd_isTemplateLayoutCell), @(isTemplateLayoutCell), OBJC_ASSOCIATION_RETAIN);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ol>
<li>这里假如不传入identifior的值得话，他就直接直接返回0，表示不计算高度了。</li>
<li>这里根据传入的identifior的值，来找到相应的UITableViewCell</li>
<li>这里是runtime源码中所申明的，可以看到这个是根据给的Object以及给的Key来返回一个对象</li>
<li>第一次申明的话，它就会创建一个空的可变字典对象,字典的对象是{<nsstring *,="" uitableviewcell="" *="">},key是String, value是UITableViewCell。</nsstring></li>
<li>当第一次没有UITableViewCell的对象的时候，就开始在重用池中，找UITableViewCell的对象,并将UITableViewCell对象塞进之前的字典对象。</li>
<li>这边在塞入UITableViewCell对象的时候，通过category(7.)来这是这个UITableViewCell的属性，这个作者的用意就是表明这个只是用计算高度的。</li>
<li>如果需要在cell中设置cell元素中的值，就在这里设置。最后拿到UITableViewCell的对象。</li>
</ol>
<h2 id="最后将拿到的UITableViewCell的对象丢到这个函数中计算"><a href="#最后将拿到的UITableViewCell的对象丢到这个函数中计算" class="headerlink" title="最后将拿到的UITableViewCell的对象丢到这个函数中计算"></a>最后将拿到的UITableViewCell的对象丢到这个函数中计算</h2><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">- (CGFloat)<span class="string">fd_systemFittingHeightForConfiguratedCell:</span>(UITableViewCell *)cell &#123;</div><div class="line">	  <span class="comment">// Auto layout engine does its math</span></div><div class="line">	  <span class="comment">// 6.</span></div><div class="line">        fittingHeight = [cell.contentView <span class="string">systemLayoutSizeFittingSize:</span>UILayoutFittingCompressedSize].height;</div><div class="line">        [cell.contentView <span class="string">removeConstraint:</span>widthFenceConstraint];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ol>
<li>这里首先获得这个UITableViewCell的宽度，赋值给contentViewWidth的对象。</li>
<li>下面判断这个cell中有没有设置accessoryView的这个view，如果设置了accessoryView的话，这个cell的宽度按会稍微小一点（16 + CGRectGetWidth(cell.accessoryView.frame)）</li>
<li>否则会根据accessoryView的类型不同，需要减去不同的宽度。</li>
<li>fd_enforceFrameLayout是用autolayout的、还是使用的frame的布局。</li>
<li>通过NSLayoutConstraint，将cell.contentView的宽度设置为contentViewWidth。</li>
<li><code>直接返回高度，并将约束移除掉。这里我不是很明白，为什么要这样做。</code></li>
<li>如果这里的UITableview的格式如果不是UITableViewCellSeparatorStyleNone，高度可能会有点偏差，加上这个偏差（1.0 / [UIScreen mainScreen].scale）</li>
</ol>
<p>##Demo中第二种方法，其他参数都是一样的，就是多了一个cacheByIndexPath,就是根据IndexPath的对象来存储刚才计算的高度。<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/// This method does what "-fd_heightForCellWithIdentifier:configuration" does, and</span></div><div class="line"><span class="comment">/// calculated height will be cached by its index path, returns a cached height</span></div><div class="line"><span class="comment">/// when needed. Therefore lots of extra height calculations could be saved.</span></div><div class="line"><span class="comment">///</span></div><div class="line"><span class="comment">/// No need to worry about invalidating cached heights when data source changes, it</span></div><div class="line"><span class="comment">/// will be done automatically when you call "-reloadData" or any method that triggers</span></div><div class="line"><span class="comment">/// UITableView's reloading.</span></div><div class="line"><span class="comment">///</span></div><div class="line"><span class="comment">/// @param indexPath where this cell's height cache belongs.</span></div><div class="line"><span class="comment">///</span></div><div class="line">- (<span class="built_in">CGFloat</span>)fd_heightForCellWithIdentifier:(<span class="built_in">NSString</span> *)identifier cacheByIndexPath:(<span class="built_in">NSIndexPath</span> *)indexPath configuration:(<span class="keyword">void</span> (^)(<span class="keyword">id</span> cell))configuration &#123;</div><div class="line"></div><div class="line">	    <span class="comment">// Hit cache</span></div><div class="line">	    <span class="comment">//1.</span></div><div class="line">    <span class="keyword">if</span> ([<span class="keyword">self</span>.fd_indexPathHeightCache existsHeightAtIndexPath:indexPath]) &#123;</div><div class="line">        [<span class="keyword">self</span> fd_debugLog:[<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"hit cache by index path[%@:%@] - %@"</span>, @(indexPath.section), @(indexPath.row), @([<span class="keyword">self</span>.fd_indexPathHeightCache heightForIndexPath:indexPath])]];</div><div class="line">        <span class="keyword">return</span> [<span class="keyword">self</span>.fd_indexPathHeightCache heightForIndexPath:indexPath];</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//9.</span></div><div class="line">     <span class="built_in">CGFloat</span> height = [<span class="keyword">self</span> fd_heightForCellWithIdentifier:identifier configuration:configuration];</div><div class="line">    [<span class="keyword">self</span>.fd_indexPathHeightCache cacheHeight:height byIndexPath:indexPath];</div><div class="line">    [<span class="keyword">self</span> fd_debugLog:[<span class="built_in">NSString</span> stringWithFormat: <span class="string">@"cached by index path[%@:%@] - %@"</span>, @(indexPath.section), @(indexPath.row), @(height)]];</div><div class="line"></div><div class="line">    <span class="keyword">return</span> height;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//2.</span></div><div class="line">- (<span class="built_in">BOOL</span>)existsHeightAtIndexPath:(<span class="built_in">NSIndexPath</span> *)indexPath &#123;</div><div class="line">	<span class="comment">//6.</span></div><div class="line">	 <span class="built_in">NSNumber</span> *number = <span class="keyword">self</span>.heightsBySectionForCurrentOrientation[indexPath.section][indexPath.row];</div><div class="line">    <span class="keyword">return</span> ![number isEqualToNumber:@<span class="number">-1</span>];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//3.</span></div><div class="line">- (<span class="keyword">void</span>)buildCachesAtIndexPathsIfNeeded:(<span class="built_in">NSArray</span> *)indexPaths &#123;</div><div class="line">	  [indexPaths enumerateObjectsUsingBlock:^(<span class="built_in">NSIndexPath</span> *indexPath, <span class="built_in">NSUInteger</span> idx, <span class="built_in">BOOL</span> *stop) &#123;</div><div class="line">	  <span class="comment">//4.</span></div><div class="line">        [<span class="keyword">self</span> buildSectionsIfNeeded:indexPath.section];</div><div class="line">      <span class="comment">//5.</span></div><div class="line">        [<span class="keyword">self</span> buildRowsIfNeeded:indexPath.row inExistSection:indexPath.section];</div><div class="line">    &#125;];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)buildSectionsIfNeeded:(<span class="built_in">NSInteger</span>)targetSection &#123;</div><div class="line">    [<span class="keyword">self</span> enumerateAllOrientationsUsingBlock:^(FDIndexPathHeightsBySection *heightsBySection) &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="built_in">NSInteger</span> section = <span class="number">0</span>; section &lt;= targetSection; ++section) &#123;</div><div class="line">            <span class="keyword">if</span> (section &gt;= heightsBySection.count) &#123;</div><div class="line">                heightsBySection[section] = [<span class="built_in">NSMutableArray</span> array];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)buildRowsIfNeeded:(<span class="built_in">NSInteger</span>)targetRow inExistSection:(<span class="built_in">NSInteger</span>)section &#123;</div><div class="line">    [<span class="keyword">self</span> enumerateAllOrientationsUsingBlock:^(FDIndexPathHeightsBySection *heightsBySection) &#123;</div><div class="line">        <span class="built_in">NSMutableArray</span>&lt;<span class="built_in">NSNumber</span> *&gt; *heightsByRow = heightsBySection[section];</div><div class="line">        <span class="keyword">for</span> (<span class="built_in">NSInteger</span> row = <span class="number">0</span>; row &lt;= targetRow; ++row) &#123;</div><div class="line">            <span class="keyword">if</span> (row &gt;= heightsByRow.count) &#123;</div><div class="line">                heightsByRow[row] = @<span class="number">-1</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//6.</span></div><div class="line"><span class="keyword">typedef</span> <span class="built_in">NSMutableArray</span>&lt;<span class="built_in">NSMutableArray</span>&lt;<span class="built_in">NSNumber</span> *&gt; *&gt; FDIndexPathHeightsBySection;</div><div class="line"></div><div class="line"><span class="comment">//7.</span></div><div class="line">- (<span class="built_in">CGFloat</span>)heightForIndexPath:(<span class="built_in">NSIndexPath</span> *)indexPath &#123;</div><div class="line">    [<span class="keyword">self</span> buildCachesAtIndexPathsIfNeeded:@[indexPath]];</div><div class="line">    <span class="built_in">NSNumber</span> *number = <span class="keyword">self</span>.heightsBySectionForCurrentOrientation[indexPath.section][indexPath.row];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//8.</span></div><div class="line">- (FDIndexPathHeightsBySection *)heightsBySectionForCurrentOrientation &#123;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">UIDeviceOrientationIsPortrait</span>([<span class="built_in">UIDevice</span> currentDevice].orientation) ? <span class="keyword">self</span>.heightsBySectionForPortrait: <span class="keyword">self</span>.heightsBySectionForLandscape;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<ol>
<li>和上面方法一样的我就不说了，这里的高度缓存部分还是蛮有意思的，这里新建了一个fd_indexPathHeightCache的对象，这个对象就是用来管理缓存的部分，对象继承的是NSObject</li>
<li>通过传入的indexPath来返回这个对象是否已经缓存进去了。</li>
<li>在将indexPath的对象打包成NSArray的对象，对到下一个函数中</li>
<li>将indexPath.section,如果数组中不含有这个section的话，那就新建一个，通过6.可以知道，这个是个二位数组，最外层数组的index的数目就是section</li>
<li>下一个方法就是根据section，找到里面一层的数组，这个数组放的就是对应的rows的对象，如果没有就会默认塞入一个-1的值。</li>
<li>再根据同样的方法，到二维数组中查找对象，如果不是我们之前塞入的-1,那就是true，否则就是false。</li>
<li><code>这里我没看懂，已经知道在缓存中存在了，为什么还要再掉一遍[self buildCachesAtIndexPathsIfNeeded:@[indexPath]];</code></li>
<li>这里可以知道，作者根据横竖屏设置了两个不同的数据，就是为了分别存储、提取。</li>
<li>如果之前没有缓存的话，它会先去调用一遍之前计算高度的方法，然后将计算出来的高度，丢到之前的二维数组中去。</li>
</ol>
<p>###第三种的计算方式，就是根据每个model设置不同key值来存储高度。<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/// This method caches height by your model entity's identifier.</span></div><div class="line"><span class="comment">/// If your model's changed, call "-invalidateHeightForKey:(id &lt;NSCopying&gt;)key" to</span></div><div class="line"><span class="comment">/// invalidate cache and re-calculate, it's much cheaper and effective than "cacheByIndexPath".</span></div><div class="line"><span class="comment">///</span></div><div class="line"><span class="comment">/// @param key model entity's identifier whose data configures a cell.</span></div><div class="line"><span class="comment">///</span></div><div class="line">- (<span class="built_in">CGFloat</span>)fd_heightForCellWithIdentifier:(<span class="built_in">NSString</span> *)identifier cacheByKey:(<span class="keyword">id</span>&lt;<span class="built_in">NSCopying</span>&gt;)key configuration:(<span class="keyword">void</span> (^)(<span class="keyword">id</span> cell))configuration &#123;</div><div class="line">	<span class="comment">//1.</span></div><div class="line">	   <span class="comment">// Hit cache</span></div><div class="line">    <span class="keyword">if</span> ([<span class="keyword">self</span>.fd_keyedHeightCache existsHeightForKey:key]) &#123;</div><div class="line">        <span class="built_in">CGFloat</span> cachedHeight = [<span class="keyword">self</span>.fd_keyedHeightCache heightForKey:key];</div><div class="line">        [<span class="keyword">self</span> fd_debugLog:[<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"hit cache by key[%@] - %@"</span>, key, @(cachedHeight)]];</div><div class="line">        <span class="keyword">return</span> cachedHeight;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//2.</span></div><div class="line">    <span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">NSMutableDictionary</span>&lt;<span class="keyword">id</span>&lt;<span class="built_in">NSCopying</span>&gt;, <span class="built_in">NSNumber</span> *&gt; *mutableHeightsByKeyForPortrait;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<ol>
<li>作者也说了，这个效率会比之前按照indexPath的计算效率要高。</li>
<li>通过这个，我们大概就知道，作者所谓的效率高，应该就是这个意思，这里不是什么二维数组，而是一个NSMutableDictionary对象。其他基本上类似。</li>
</ol>
<p><code>最后说一下自己的一个疑问：第二种方法中，作者为什么不将key和value经过简单的运算，作为key，来用NSDictionary来存储数据呢？作者的解释是：里面要配合 section row 的insert remove的话，会比较麻烦。所以作者最后还是选择的二维数组。</code></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;学习UITableView的高度计算的框架&quot;&gt;&lt;a href=&quot;#学习UITableView的高度计算的框架&quot; class=&quot;headerlink&quot; title=&quot;学习UITableView的高度计算的框架&quot;&gt;&lt;/a&gt;学习UITableView的高度计算的框架&lt;/h2&gt;
    
    </summary>
    
      <category term="日志" scheme="http://www.ghcoder.com/categories/%E6%97%A5%E5%BF%97/"/>
    
    
      <category term="学习" scheme="http://www.ghcoder.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="Obeject-c" scheme="http://www.ghcoder.com/tags/Obeject-c/"/>
    
  </entry>
  
</feed>
