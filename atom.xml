<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Ghcoder</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.ghcoder.com/"/>
  <updated>2017-09-13T06:47:06.000Z</updated>
  <id>http://www.ghcoder.com/</id>
  
  <author>
    <name>Ghcoder</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>学习Swift Tips(二)</title>
    <link href="http://www.ghcoder.com/2017/09/08/20170908/"/>
    <id>http://www.ghcoder.com/2017/09/08/20170908/</id>
    <published>2017-09-08T02:53:12.000Z</published>
    <updated>2017-09-13T06:47:06.000Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li>在介绍（Tuple）的时候，说了交换输入的方法书写，在Object-C中，有很多方法，我们传入的是指针，这个问题主要的来源就是因为受制约C语言，单一返回，有了Tuple的时候，我们就可以方便的调用了。</li>
</ul>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">let rect = CGRect(<span class="string">x:</span> <span class="number">0</span>, <span class="string">y:</span> <span class="number">0</span>, <span class="string">width:</span> <span class="number">100</span>, <span class="string">height:</span> <span class="number">100</span>)</div><div class="line">let (small, large) = rect.divided(<span class="string">atDistance:</span> <span class="number">20</span>, <span class="string">from:</span> .minXEdge)</div></pre></td></tr></table></figure>
<a id="more"></a>
<hr>
<ul>
<li>在写swift的时候，我们常常需要和Optional打交道，这时候我们就需要常常用到解包，这里就提到了一个快速解包的方式<code>??</code>,首先看一下如何使用：</li>
</ul>
<figure class="highlight excel"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">var</span> lev<span class="symbol">el:</span> <span class="built_in">Int</span>?</div><div class="line"><span class="built_in">var</span> startLevel = <span class="number">1</span></div><div class="line"></div><div class="line"><span class="built_in">var</span> currentLevel = level ?? startLevel</div></pre></td></tr></table></figure>
<ul>
<li>这里很简单，但是还是要说一下，这里的<code>??</code>判断左边的值，如果是非nil的<code>optional</code>的值，那就直接返回左边的value值，否则就返回右边的值,但是细细往下看一下源码的定义会发现：</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> ??&lt;T&gt;<span class="params">(<span class="keyword">optional</span>: T?, defaultValue: @autoclosure <span class="params">()</span></span></span> <span class="keyword">throws</span> -&gt; <span class="type">T</span>) <span class="keyword">rethrows</span> -&gt; <span class="type">T</span></div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> ??&lt;T&gt;<span class="params">(<span class="keyword">optional</span>: T?, defaultValue: @autoclosure <span class="params">()</span></span></span> <span class="keyword">throws</span> -&gt; <span class="type">T</span>?) <span class="keyword">rethrows</span> -&gt; <span class="type">T</span>?</div></pre></td></tr></table></figure>
<ul>
<li>看到这里，我就有点疑惑了，这个<code>??</code>其实就是一个函数，那么问题来了，<code>函数的调用方式为什么那么另类呢？</code>,按照我们的理解，这个函数的调用方式不应该是这样的吗？<code>??(optional, xxx)</code>,但是发现这样写，会报错，所以这里我就决定把函数的定义直接copy下来，然后自己去实现，带入如下：</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">th</span>&lt;T&gt;<span class="params">(<span class="number">_</span> <span class="keyword">optional</span>: T?, <span class="number">_</span> defaultValue: @autoclosure <span class="params">()</span></span></span> <span class="keyword">throws</span> -&gt; <span class="type">T</span>) <span class="keyword">rethrows</span> -&gt; <span class="type">T</span> &#123;</div><div class="line">    <span class="keyword">if</span> <span class="keyword">let</span> <span class="keyword">optional</span> = <span class="keyword">optional</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">optional</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">try</span> defaultValue()</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">var</span> level: <span class="type">Int</span>?</div><div class="line"><span class="keyword">var</span> startLevel = <span class="number">1</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> test = th(level, startLevel)</div></pre></td></tr></table></figure>
<ul>
<li>看到这里我就开始猜测了，这或许是<code>swift</code>为了方便的我们的调用，所以它又定义了一个语法糖吧！</li>
</ul>
<hr>
<ul>
<li>@autoclosure 符号的意思，就是直接将：入参T 转化为 ()-&gt;T</li>
</ul>
<hr>
<ul>
<li>@escaping 符号的意思就是说明，这个参数是异步的，不是属于这个局部的函数，可以在这个函数执行完成之后再执行这里的回调，不加任何参数的block默认就是同步的，函数执行完成之前，这个block就会被收回。</li>
</ul>
<hr>
<ul>
<li>optional Chaining 如果某个属性是nil的话，会提前返回回来。</li>
</ul>
<hr>
<ul>
<li>重载符号的做法，用的比较少：</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">precedencegroup <span class="type">DotProductPrecedence</span> &#123;</div><div class="line">    <span class="keyword">associativity</span>: <span class="keyword">none</span></div><div class="line">    higherThan: <span class="type">MultiplicationPrecedence</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">infix</span> <span class="keyword">operator</span> +*: <span class="type">DotProductPrecedence</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> +*<span class="params">(<span class="keyword">left</span>: Vector2D, <span class="keyword">right</span>: Vector2D)</span></span> -&gt; <span class="type">Double</span> &#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">left</span>.x * <span class="keyword">right</span>.x + <span class="keyword">left</span>.y * <span class="keyword">right</span>.y</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<ul>
<li>外部传入的参数，如果需要在函数内部修改的话，需要在参数前面加上<code>inout</code>，这样传入参数的时候，就需要将之前传入的值改为地址，类似:</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">incrementor</span><span class="params">(variable: <span class="keyword">inout</span> Int)</span></span> -&gt; <span class="type">Int</span> &#123;</div><div class="line">       variable += <span class="number">1</span></div><div class="line">       <span class="keyword">return</span> variable</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<hr>
<ul>
<li>字面量的作用，我就觉得很鸡肋，但是还是看一下，说白了，字面量的意思就是说：<code>可同直接实例化的时候，传入一个String、Int、Bool, 而返回的确实我们自定义的类型</code>，例如：</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>: <span class="title">ExpressibleByStringLiteral</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">let</span> name: <span class="type">String</span></div><div class="line"></div><div class="line">    <span class="keyword">init</span>(name value: <span class="type">String</span>) &#123;</div><div class="line">        <span class="keyword">self</span>.name = value</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">required</span> <span class="keyword">convenience</span> <span class="keyword">init</span>(stringLiteral value: <span class="type">String</span>) &#123;</div><div class="line">        <span class="keyword">self</span>.<span class="keyword">init</span>(name: value)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">required</span> <span class="keyword">convenience</span> <span class="keyword">init</span>(extendedGraphemeClusterLiteral value: <span class="type">String</span>) &#123;</div><div class="line">        <span class="keyword">self</span>.<span class="keyword">init</span>(name: value)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">required</span> <span class="keyword">convenience</span> <span class="keyword">init</span>(unicodeScalarLiteral value: <span class="type">String</span>) &#123;</div><div class="line">        <span class="keyword">self</span>.<span class="keyword">init</span>(name: value)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"> <span class="keyword">let</span> p: <span class="type">Person</span> = <span class="string">"xiaoming"</span></div><div class="line"> <span class="built_in">print</span>(p.name)</div></pre></td></tr></table></figure>
<hr>
<ul>
<li>数组下标说实话，还是蛮不错的内容，用的好的话，可以节省很多的时间，通过对下面两个方法写一下拓展，就可以实现自定义的下标功能：</li>
</ul>
<figure class="highlight fortran"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> subscript(<span class="built_in">index</span>: <span class="built_in">Int</span>) -&gt; Element</div><div class="line"></div><div class="line"><span class="keyword">public</span> subscript(bounds: <span class="built_in">Range</span>&lt;<span class="built_in">Int</span>&gt;) -&gt; ArraySlice&lt;Element&gt;</div></pre></td></tr></table></figure>
<ul>
<li>onvcate 的例子中举出了下面的例子，方便我们通过下标来获取数组的数据：</li>
</ul>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</div><div class="line"><span class="function"><span class="title">print</span><span class="params">(arr[[<span class="number">0</span>,<span class="number">2</span>,<span class="number">3</span>]])</span></span></div><div class="line">arr[[<span class="number">0</span>,<span class="number">2</span>,<span class="number">3</span>]] = [-<span class="number">1</span>, -<span class="number">3</span>, -<span class="number">4</span>]</div><div class="line"><span class="function"><span class="title">print</span><span class="params">(arr)</span></span></div><div class="line"></div><div class="line"></div><div class="line">extension Array &#123;</div><div class="line"></div><div class="line">    subscript(<span class="selector-tag">input</span>: [Int]) -&gt; ArraySlice&lt;Element&gt; &#123;</div><div class="line">        get&#123;</div><div class="line">            <span class="selector-tag">var</span> result = ArraySlice&lt;Element&gt;()</div><div class="line">            <span class="keyword">for</span> <span class="selector-tag">i</span> <span class="keyword">in</span> <span class="selector-tag">input</span> &#123;</div><div class="line">                assert(<span class="selector-tag">i</span> &lt; self<span class="selector-class">.count</span>, <span class="string">"Index out of range"</span>)</div><div class="line">                result.append(self[i])</div><div class="line">            &#125;</div><div class="line">            return result</div><div class="line">        &#125;</div><div class="line">        set&#123;</div><div class="line">            <span class="keyword">for</span>(index,i) <span class="keyword">in</span> <span class="selector-tag">input</span>.enumerated() &#123;</div><div class="line">                assert(<span class="selector-tag">i</span> &lt; self<span class="selector-class">.count</span>, <span class="string">"Index out of range"</span>)</div><div class="line">                self[i] = newValue[index]</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>下面作者也说了，这个方式调用起来不是很优雅，然后就有了下面的拓展，是我自己写的：</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Array</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">subscript</span>(first: <span class="type">Int</span>, second: <span class="type">Int</span>, other: <span class="type">Int</span>...) -&gt; <span class="type">ArraySlice</span>&lt;<span class="type">Element</span>&gt; &#123;</div><div class="line">        <span class="keyword">get</span>&#123;</div><div class="line">            <span class="keyword">var</span> result = <span class="type">ArraySlice</span>&lt;<span class="type">Element</span>&gt;()</div><div class="line"></div><div class="line">            <span class="keyword">if</span> first &lt; <span class="keyword">self</span>.<span class="built_in">count</span> &#123;</div><div class="line">                result.append(<span class="keyword">self</span>[first])</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">if</span> second &lt; <span class="keyword">self</span>.<span class="built_in">count</span> &#123;</div><div class="line">                result.append(<span class="keyword">self</span>[second])</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> other &#123;</div><div class="line">                <span class="built_in">assert</span>(i &lt; <span class="keyword">self</span>.<span class="built_in">count</span>, <span class="string">"Index out of range"</span>)</div><div class="line">                result.append(<span class="keyword">self</span>[i])</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">return</span> result</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">set</span>&#123;</div><div class="line">            <span class="keyword">var</span> tempDatas = other.<span class="built_in">count</span> &gt; <span class="number">0</span> ? other : [<span class="type">Int</span>]()</div><div class="line">            <span class="keyword">if</span> (first &lt; <span class="keyword">self</span>.<span class="built_in">count</span>) &#123;</div><div class="line">                tempDatas.append(first)</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (second &lt; <span class="keyword">self</span>.<span class="built_in">count</span>) &#123;</div><div class="line">                tempDatas.append(second)</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">for</span>(index,i) <span class="keyword">in</span> tempDatas.enumerated() &#123;</div><div class="line">                <span class="built_in">assert</span>(i &lt; <span class="keyword">self</span>.<span class="built_in">count</span>, <span class="string">"Index out of range"</span>)</div><div class="line">                <span class="keyword">self</span>[i] = newValue[index]</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> t = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</div><div class="line"><span class="built_in">print</span>( t[<span class="number">0</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>])</div><div class="line">t[<span class="number">0</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>] = [<span class="number">99</span>,<span class="number">99</span>,<span class="number">99</span>,<span class="number">99</span>]</div><div class="line"><span class="built_in">print</span>(t)</div></pre></td></tr></table></figure>
<hr>
<ul>
<li>函数作为一等公民，就是你可以把函数作为参数，返回值，或者可以在函数中定义任意多个函数，这样也可以控制代码的访问权限的问题。</li>
</ul>
<hr>
<ul>
<li>在不同的target(一个叫<code>GG</code>,一个叫<code>HH</code>)中，调用同一个类的，同一个方法，例如我们定义了一个<code>My</code>的类，里面定义了一个<code>hello</code>的类方法:</li>
</ul>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">GG<span class="selector-class">.My</span><span class="selector-class">.hello</span>()</div><div class="line">HH<span class="selector-class">.My</span><span class="selector-class">.hello</span>()</div></pre></td></tr></table></figure>
<hr>
<ul>
<li>typealias 除了用在给变量、实例、属性定义别名外，还可以用在协议上，我认为这样的用户很大:</li>
</ul>
<figure class="highlight puppet"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">protocol <span class="keyword">Cat</span> &#123;&#125;</div><div class="line"><span class="keyword">protocol</span> <span class="keyword">Dog</span> &#123;&#125;</div><div class="line"><span class="keyword">typealias</span> <span class="keyword">Pat</span> = Cat &amp; Dog</div><div class="line"></div><div class="line"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UIViewController</span>, <span class="title">Pat</span> &#123;&#125;</div></pre></td></tr></table></figure>
<hr>
<ul>
<li>如果想对协议添加限定的话，我们就可以定义一个<code>associatedtype xx</code>,这样在遵循了协议的时候，就需要制定我们type的类型，这就和之前看官方<code>Array</code>定义的效果医院，需要我们制定类型，这样就能够更好的限制遵循协议的对象。</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">Animal</span> </span>&#123;</div><div class="line">    associatedtype <span class="type">F</span></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">eat</span><span class="params">(<span class="number">_</span> food: F)</span></span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Meat</span>: <span class="title">Food</span> </span>&#123;&#125;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Crass</span>: <span class="title">Food</span> </span>&#123;&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Tiger</span>: <span class="title">Animal</span> </span>&#123;</div><div class="line">    <span class="keyword">typealias</span> <span class="type">F</span> = <span class="type">Meat</span></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">eat</span><span class="params">(<span class="number">_</span> food: Meat)</span></span> &#123;</div><div class="line">        <span class="built_in">print</span>(<span class="string">"eat <span class="subst">\(food)</span>"</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>但是一旦我们这样限制了协议之后，在进行独立判断的时候，我们就不能像之前那样直接进行判断了，例如：</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">isDangerous</span><span class="params">(animal: Animal)</span></span> -&gt; <span class="type">Bool</span> &#123;</div><div class="line">    <span class="keyword">if</span> animal <span class="keyword">is</span> <span class="type">Tiger</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="literal">true</span></div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="literal">false</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>这里错误的原因，是因为我们没有在编译的时候，限制协议中的type类型，在这种情况下，我们只能按照泛型的类型来书写了：</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">isDangerous</span>&lt;T: Animal&gt;<span class="params">(animal: T)</span></span> -&gt; <span class="type">Bool</span> &#123;</div><div class="line">    <span class="keyword">if</span> animal <span class="keyword">is</span> <span class="type">Tiger</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="literal">true</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="literal">false</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<ul>
<li>可变参数的调用，不限制在指定哪个位置，接受可变参数的函数内部，把可变参数看作是对应数据的数组，但是每个函数只能接受一个可变参数，并且可变参数的类型必须是一致的。</li>
</ul>
<hr>
<ul>
<li>方法的调用顺序问题:</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> name: <span class="type">String</span></div><div class="line">    <span class="keyword">init</span>() &#123;</div><div class="line">        name = <span class="string">"cat"</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tiger</span>: <span class="title">Cat</span> </span>&#123;</div><div class="line">    <span class="keyword">let</span> power: <span class="type">Int</span></div><div class="line">    <span class="keyword">override</span> <span class="keyword">init</span>() &#123;</div><div class="line">        power = <span class="number">10</span></div><div class="line">        <span class="keyword">super</span>.<span class="keyword">init</span>()</div><div class="line">        name = <span class="string">"gh"</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>类在初始化的时候，必须要保证该类的所有成员都完成了初始化。</li>
<li>存在继承关系的类，必须要确保当前子类实例的所有成员完成初始化后才会调用父类的初始化。</li>
<li>可以显示的调用<code>super.init()</code>，如果不显示的调用的<code>super.init()</code>的时候，当我们完成子类的实例化方法的时候，就会自己调用<code>super.init()</code>,当然如果存在复写的情况的话，还是需要显示的调用的。</li>
</ul>
<hr>
<ul>
<li>Designated、Convenience、Required 使用注意点：</li>
</ul>
<ol>
<li>Swift的<code>init</code>只能被调用一次，而且是线程安全的，可以对let属性变量进行赋值。</li>
<li>在<code>init</code>前面加了<code>convenience</code>的初始化方法必须调用同一个类的<code>init</code>的方法。</li>
<li><code>convenience</code>的实例化方法不能被重写，并且也不能够被子类通过<code>super</code>的方式调用。</li>
<li>只要子类重写了<code>convenience</code>方法所需的<code>init</code>的方法后，子类就可以使用<code>convenience</code>的初始化方法。</li>
<li>当子类含有异于父类的初始化方法时（初始化方法参数类型和数量异于父类），子类必须要实现父类的required初始化方法，并且也要使用required修饰符而不是override。</li>
<li>当子类没有初始化方法时，可以不用实现父类的required初始化方法。</li>
</ol>
<hr>
<ul>
<li>对于可以返回nil的初始化方法，我们需要在<code>init?(xxx)</code>，加入<code>?</code></li>
</ul>
<hr>
<ul>
<li>如果想在protocol 里定义一个类型域上的方法或者计算属性，我们需要在定义的时候用<code>static</code>进行定义。</li>
</ul>
<hr>
<ul>
<li>在Swift中的集合类型，在定义中可以看出，我们可以将同一种类型的数据存放在集合中，但是如果类型不同呢？我们应该怎么办呢？</li>
</ul>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Any 类型可以隐式转化</span></div><div class="line"><span class="keyword">let</span> mixed: [CustomStringConvertible] = [<span class="number">1</span>, <span class="string">"two"</span>, <span class="literal">false</span>]</div><div class="line"></div><div class="line"><span class="comment">// 转化为[NSObject]</span></div><div class="line"><span class="keyword">let</span> objectArray = [<span class="number">1</span> <span class="keyword">as</span> NSObject, <span class="string">"two"</span> <span class="keyword">as</span> NSObject, <span class="literal">false</span> <span class="keyword">as</span> NSObject]</div><div class="line"></div><div class="line"><span class="keyword">let</span> any = mixed[<span class="number">2</span>]</div><div class="line"></div><div class="line"><span class="keyword">let</span> nsObject = objectArray[<span class="number">2</span>]</div></pre></td></tr></table></figure>
<ul>
<li>这样存储是没啥问题的，但是也会存在一个问题，那就是可能数据会部分丢失，这其实也是不建议的，因为既然你能存放在同一个集合中，那这些元素，就应该存在一定的共同点。</li>
</ul>
<figure class="highlight crystal"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">enum</span> <span class="title">IntOrString</span> &#123;</span></div><div class="line">    <span class="keyword">case</span> IntValue(Int)</div><div class="line">    <span class="keyword">case</span> StringValue(String)</div><div class="line">    <span class="keyword">case</span> BoolValue(Bool)</div><div class="line">&#125;</div><div class="line"></div><div class="line">let mixed = [IntOrString.IntValue(<span class="number">1</span>), IntOrString.StringValue(<span class="string">"two"</span>), IntOrString.BoolValue(<span class="literal">false</span>)]</div></pre></td></tr></table></figure>
<hr>
<ul>
<li>默认参数可以在任意的位置:</li>
</ul>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">func</span> sayHello1(<span class="keyword">str1: </span><span class="keyword">String </span>= <span class="string">"Hello"</span>, <span class="keyword">str2: </span><span class="keyword">String, </span><span class="keyword">str3: </span><span class="keyword">String) </span>&#123;</div><div class="line">    print(<span class="keyword">str1 </span>+ <span class="keyword">str2 </span>+ <span class="keyword">str3)</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="symbol">func</span> sayHello2(<span class="keyword">str1: </span><span class="keyword">String, </span><span class="keyword">str2: </span><span class="keyword">String, </span><span class="keyword">str3: </span><span class="keyword">String </span>= <span class="string">"World"</span>) &#123;</div><div class="line">    print(<span class="keyword">str1 </span>+ <span class="keyword">str2 </span>+ <span class="keyword">str3)</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="symbol">sayHello1</span>(<span class="keyword">str2: </span><span class="string">" "</span>, <span class="keyword">str3: </span><span class="string">"World"</span>)</div><div class="line"><span class="symbol">sayHello2</span>(<span class="keyword">str1: </span><span class="string">"Hello"</span>, <span class="keyword">str2: </span><span class="string">" "</span>)</div></pre></td></tr></table></figure>
<hr>
<ul>
<li>swift 中没有专门的用来正则匹配的东西，但是围绕<code>NSRegularExpression</code>也是可以在swift上做一下拓展:</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">RegexHelper</span> </span>&#123;</div><div class="line">    <span class="keyword">let</span> regex: <span class="type">NSRegularExpression</span></div><div class="line"></div><div class="line">    <span class="keyword">init</span>(<span class="number">_</span> pattern: <span class="type">String</span>) <span class="keyword">throws</span> &#123;</div><div class="line">        <span class="keyword">try</span> regex = <span class="type">NSRegularExpression</span>(pattern: pattern, options: .caseInsensitive)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">match</span><span class="params">(<span class="number">_</span> input: String)</span></span> -&gt; <span class="type">Bool</span> &#123;</div><div class="line">        <span class="keyword">let</span> matches = regex.matches(<span class="keyword">in</span>: input,</div><div class="line">                                    options: [],</div><div class="line">                                    range: <span class="type">NSMakeRange</span>(<span class="number">0</span>, input.utf16.<span class="built_in">count</span>))</div><div class="line">        <span class="keyword">return</span> matches.<span class="built_in">count</span> &gt; <span class="number">0</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">let</span> mailPattern = <span class="string">"^([a-z0-9\\.-]+)@([\\da-z\\.-]+)\\.([a-z\\.]&#123;2,6&#125;)$"</span></div><div class="line"></div><div class="line"><span class="keyword">let</span> matcher: <span class="type">RegexHelper</span></div><div class="line"><span class="keyword">do</span> &#123;</div><div class="line">    matcher = <span class="keyword">try</span> <span class="type">RegexHelper</span>(mailPattern)</div><div class="line"></div><div class="line">    <span class="keyword">let</span> maybeMailAddress = <span class="string">"onev@onevcat.com"</span></div><div class="line"></div><div class="line">    <span class="keyword">if</span> matcher.match(maybeMailAddress) &#123;</div><div class="line">        <span class="built_in">print</span>(<span class="string">"有效的邮箱地址"</span>)</div><div class="line">    &#125;</div><div class="line">&#125; <span class="keyword">catch</span> &#123;</div><div class="line">    <span class="built_in">print</span>(error)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<ul>
<li><code>...</code>(闭区间)和<code>..&lt;</code>(开区间)，除了可以生成一个数字类型的范围外，还是可以生成字符串和ASCII编码：</li>
</ul>
<figure class="highlight nix"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> <span class="attr">interval</span> = <span class="string">"a"</span>...<span class="string">"z"</span></div><div class="line"><span class="keyword">let</span> <span class="attr">xx</span> = \<span class="number">0</span>...~</div></pre></td></tr></table></figure>
<hr>
<ul>
<li>任意的类型有：<code>Any/AnyObject/AnyClass</code>, 而 <code>typealias AnyClass = AnyObject.Type</code>, <code>.self</code>用在类型后面取得类型本身，用在某实例后面表示取得实例本事</li>
<li>通过<code>AnyObject.Type</code>获取得到的是一个元类型， 也就是<code>AnyClass</code>,这时候我们需要调用<code>.self</code>来获取元类。</li>
</ul>
<hr>
<ul>
<li>在协议中返回值，我们可以返回<code>Self</code>,这个类型的意思是，遵循这个协议的类调用这个方法可以返回一个同样遵循该协议并且相同的类：</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">Copyable</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">copy</span><span class="params">()</span></span> -&gt; <span class="type">Self</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span>: <span class="title">Copyable</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> num = <span class="number">1</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">copy</span><span class="params">()</span></span> -&gt; <span class="type">Self</span> &#123;</div><div class="line">        <span class="keyword">let</span> result = type(of: <span class="keyword">self</span>).<span class="keyword">init</span>()</div><div class="line">        result.num = num</div><div class="line">        <span class="keyword">return</span> result</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">required</span> <span class="keyword">init</span>() &#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>这样书写之后，不管是<code>MyClass</code>还是<code>MyClass</code>的子类都可以同样适用该协议方法。</li>
<li>并且需要使用<code>required</code>来定义初始化方法，确保该类及其子类都能响应这个初始化方法。</li>
</ul>
<hr>
<ul>
<li>swift 是不支持动态派发的，所以他不会根据继承的关系，在运行时改变方法的执行：</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pet</span> </span>&#123;&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span>: <span class="title">Pet</span> </span>&#123;&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span>: <span class="title">Pet</span> </span>&#123;&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">printPet</span><span class="params">(<span class="number">_</span> pet: Pet)</span></span> &#123;</div><div class="line">    <span class="built_in">print</span>(<span class="string">"Pet"</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">printPet</span><span class="params">(<span class="number">_</span> cat: Cat)</span></span> &#123;</div><div class="line">    <span class="built_in">print</span>(<span class="string">"Meow"</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">printPet</span><span class="params">(<span class="number">_</span> dog: Dog)</span></span> &#123;</div><div class="line">    <span class="built_in">print</span>(<span class="string">"Bark"</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">printThem</span><span class="params">(<span class="number">_</span> pet: Pet, <span class="number">_</span> cat: Cat)</span></span> &#123;</div><div class="line">    printPet(pet) <span class="comment">// Pet</span></div><div class="line">    printPet(cat) <span class="comment">// Meow</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">printThem(<span class="type">Dog</span>(), <span class="type">Cat</span>())</div></pre></td></tr></table></figure>
<ul>
<li>虽然我这里传入的是<code>Dog()</code>的实例，但是在函数内部，我们定义的确实它的父类，所以在实际调用的时候，不管你传入的是什么，在编译的时候，就已经决定了，函数调用的入参是<code>pet</code>，如果想要区分的话，只能通过类型的判断去执行：</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">printThem</span><span class="params">(<span class="number">_</span> pet: Pet, <span class="number">_</span> cat: Cat)</span></span> &#123;</div><div class="line">    <span class="keyword">if</span> <span class="keyword">let</span> aCat = pet <span class="keyword">as</span>? <span class="type">Cat</span> &#123;</div><div class="line">        printPet(aCat)</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> <span class="keyword">let</span> aDog = pet <span class="keyword">as</span>? <span class="type">Dog</span> &#123;</div><div class="line">        printPet(aDog)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    printPet(cat)</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<ul>
<li>属性的监听在<code>willSet</code>是将<code>date</code>-&gt;<code>newValue</code>, 而<code>didSet</code>是从<code>oldValue</code>-&gt;<code>date</code>。</li>
<li>基本上在同一个类中对同一个属性值，不可能存在<code>set</code>/<code>willSet</code>/<code>didSet</code>, 但是如果复写父类的属性值的时候，我们就可以同时实现三个属性值：</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> number: <span class="type">Int</span> &#123;</div><div class="line">        <span class="keyword">get</span> &#123;</div><div class="line">            <span class="built_in">print</span>(<span class="string">"get"</span>)</div><div class="line">            <span class="keyword">return</span> <span class="number">1</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">set</span> &#123;</div><div class="line">            <span class="built_in">print</span>(<span class="string">"set"</span>)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>: <span class="title">A</span> </span>&#123;</div><div class="line">    <span class="keyword">override</span> <span class="keyword">var</span> number: <span class="type">Int</span> &#123;</div><div class="line">        <span class="keyword">willSet</span> &#123; <span class="built_in">print</span>(<span class="string">"willset"</span>) &#125;</div><div class="line">        <span class="keyword">didSet</span>  &#123; <span class="built_in">print</span>(<span class="string">"didSet"</span>) &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">let</span> b = <span class="type">B</span>()</div><div class="line">b.number = <span class="number">0</span></div><div class="line"></div><div class="line"><span class="comment">// 输出</span></div><div class="line"><span class="comment">// get</span></div><div class="line"><span class="comment">// willSet</span></div><div class="line"><span class="comment">// set</span></div><div class="line"><span class="comment">// didSet</span></div></pre></td></tr></table></figure>
<ul>
<li>这里首先打印<code>get</code>,是因为这里实现了<code>didSet</code>,在<code>didSet</code>中用到了<code>oldValue</code>, 而这个值需要在整个set动作之前进行获取并存储代用。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;在介绍（Tuple）的时候，说了交换输入的方法书写，在Object-C中，有很多方法，我们传入的是指针，这个问题主要的来源就是因为受制约C语言，单一返回，有了Tuple的时候，我们就可以方便的调用了。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight groovy&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;let rect = CGRect(&lt;span class=&quot;string&quot;&gt;x:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;y:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;width:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;height:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;let (small, large) = rect.divided(&lt;span class=&quot;string&quot;&gt;atDistance:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;from:&lt;/span&gt; .minXEdge)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="日志" scheme="http://www.ghcoder.com/categories/%E6%97%A5%E5%BF%97/"/>
    
    
      <category term="Swift" scheme="http://www.ghcoder.com/tags/Swift/"/>
    
  </entry>
  
  <entry>
    <title>学习Masonry Autolayout布局实例</title>
    <link href="http://www.ghcoder.com/2017/09/07/20170907/"/>
    <id>http://www.ghcoder.com/2017/09/07/20170907/</id>
    <published>2017-09-07T03:33:12.000Z</published>
    <updated>2017-09-07T08:04:51.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="最近看到很多人都在转一篇博客，博客的链接为：-http-tutuge-me-2015-05-23-autolayout-example-with-masonry-其实文章的知识点不是很多，重点就是讲如何运用Masonry来实现一些东西，但是不得不承认这篇文章很使用，我在平时开发的时候，很多细节的地方，我也没有注意到，然后看了一下他的四篇博客，记录一下："><a href="#最近看到很多人都在转一篇博客，博客的链接为：-http-tutuge-me-2015-05-23-autolayout-example-with-masonry-其实文章的知识点不是很多，重点就是讲如何运用Masonry来实现一些东西，但是不得不承认这篇文章很使用，我在平时开发的时候，很多细节的地方，我也没有注意到，然后看了一下他的四篇博客，记录一下：" class="headerlink" title="最近看到很多人都在转一篇博客，博客的链接为：[http://tutuge.me/2015/05/23/autolayout-example-with-masonry/], 其实文章的知识点不是很多，重点就是讲如何运用Masonry来实现一些东西，但是不得不承认这篇文章很使用，我在平时开发的时候，很多细节的地方，我也没有注意到，然后看了一下他的四篇博客，记录一下："></a>最近看到很多人都在转一篇博客，博客的链接为：[<a href="http://tutuge.me/2015/05/23/autolayout-example-with-masonry/" target="_blank" rel="external">http://tutuge.me/2015/05/23/autolayout-example-with-masonry/</a>], 其实文章的知识点不是很多，重点就是讲如何运用Masonry来实现一些东西，但是不得不承认这篇文章很使用，我在平时开发的时候，很多细节的地方，我也没有注意到，然后看了一下他的四篇博客，记录一下：</h4><ul>
<li>第一部分重点讲的是两个属性: <code>Content Compression Resistance</code>、<code>Content Hugging</code>,这里我觉得作者的解释还是形象的：</li>
</ul>
<a id="more"></a>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">Content Compression Resistance = 不许挤我</div><div class="line">值越高，内容越不容易被压缩</div><div class="line">当内容放不下的时候，优先挤压那些优先级低的元素</div><div class="line"></div><div class="line">Content Hugging = 抱紧</div><div class="line">子元素设置的属性值越高，子元素越不会随着父视图的变化而变化</div><div class="line"></div><div class="line"><span class="comment">//设置label1的content hugging 为1000</span></div><div class="line">[_label1 setContentHuggingPriority:<span class="built_in">UILayoutPriorityRequired</span></div><div class="line">                               forAxis:<span class="built_in">UILayoutConstraintAxisHorizontal</span>];</div><div class="line"></div><div class="line"><span class="comment">//设置label1的content compression 为1000</span></div><div class="line">[_label1 setContentCompressionResistancePriority:<span class="built_in">UILayoutPriorityRequired</span></div><div class="line">                                             forAxis:<span class="built_in">UILayoutConstraintAxisHorizontal</span>];</div></pre></td></tr></table></figure>
<ul>
<li>居中显示四个元素:</li>
</ul>
<figure class="highlight gauss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">UIView __block *lastView = nil;</div><div class="line"> MASConstraint __block *widthConstraint = nil;</div><div class="line"> NSUInteger arrayCount = _imageViews.count;</div><div class="line"> [_imageViews enumerateObjectsUsingBlock:^(UIView *<span class="built_in">view</span>, NSUInteger idx, <span class="keyword">BOOL</span> *<span class="keyword">stop</span>) &#123;</div><div class="line">     [<span class="built_in">view</span> mas_makeConstraints:^(MASConstraintMaker *<span class="built_in">make</span>) &#123;</div><div class="line">         <span class="comment">//宽高固定</span></div><div class="line">         widthConstraint = <span class="built_in">make</span>.width.equalTo(<span class="comment">@(imageViewSize.width));</span></div><div class="line">         make.height.equalTo(@(imageViewSize.height));</div><div class="line">         <span class="comment">//左边约束</span></div><div class="line">         <span class="built_in">make</span>.left.equalTo(lastView ? lastView.mas_right : <span class="built_in">view</span>.superview.mas_left);</div><div class="line">         <span class="comment">//垂直中心对齐</span></div><div class="line">         <span class="built_in">make</span>.centerY.equalTo(<span class="built_in">view</span>.superview.mas_centerY);</div><div class="line">         <span class="comment">//设置最右边的imageView的右边与父view的最有对齐</span></div><div class="line">         <span class="keyword">if</span> (idx == arrayCount - <span class="number">1</span>) &#123;</div><div class="line">             <span class="built_in">make</span>.right.equalTo(<span class="built_in">view</span>.superview.mas_right);</div><div class="line">         &#125;</div><div class="line"></div><div class="line">         [_widthConstraints addObject:widthConstraint];</div><div class="line">         lastView = <span class="built_in">view</span>;</div><div class="line">     &#125;];</div><div class="line"> &#125;];</div><div class="line"></div><div class="line"> ...</div><div class="line"></div><div class="line"> <span class="comment">// 隐藏元素的时候，就可以直接来修改约束</span></div><div class="line"></div><div class="line">     <span class="keyword">if</span> (sender.on) &#123;</div><div class="line">     width.equalTo(<span class="comment">@(IMAGE_SIZE));</span></div><div class="line"> &#125; else &#123;</div><div class="line">     width.equalTo(@<span class="number">0</span>);</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<ul>
<li>a视图是b视图的倍数关系的：</li>
</ul>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">make</span><span class="selector-class">.width</span><span class="selector-class">.equalTo</span>(_<span class="selector-tag">containerView</span><span class="selector-class">.mas_width</span>)<span class="selector-class">.multipliedBy</span>(0<span class="selector-class">.5</span>);</div></pre></td></tr></table></figure>
<ul>
<li><p><code>UITableViewCell</code>高度的问题：</p>
</li>
<li><p>首先如果是在<code>iOS8以及以后的版本的话</code>，那就不需要考虑这个问题了，直接使用新特性</p>
</li>
</ul>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">_tableView.estimatedRowHeight = <span class="number">80.0</span>f;</div><div class="line"></div><div class="line">...</div><div class="line">- (<span class="built_in">CGFloat</span>)tableView:(<span class="built_in">UITableView</span> *)tableView heightForRowAtIndexPath:(<span class="built_in">NSIndexPath</span> *)indexPath &#123;</div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">#ifdef IOS_8_NEW_FEATURE_SELF_SIZING</span></div><div class="line">    <span class="comment">// iOS 8 的Self-sizing特性</span></div><div class="line">    <span class="keyword">return</span> <span class="built_in">UITableViewAutomaticDimension</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>如果是在旧版本<code>iOS7上的话</code>:</li>
</ul>
 <figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"> <span class="comment">// 根据当前数据，计算Cell的高度，注意+1</span></div><div class="line">dataEntity.cellHeight = [_templateCell.contentView systemLayoutSizeFittingSize:UILayoutFittingCompressedSize].<span class="built_in">height</span> + <span class="number">0.5</span>f;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">// 计算UILabel的preferredMaxLayoutWidth值，多行时必须设置这个值，否则系统无法决定Label的宽度</span></div><div class="line">    CGFloat preferredMaxWidth = [UIScreen mainScreen].bounds.<span class="built_in">size</span>.<span class="built_in">width</span> - <span class="number">44</span> - <span class="number">4</span> * <span class="number">3</span>; <span class="comment">// 44 = avatar宽度，4 * 3为padding</span></div><div class="line"></div><div class="line">    <span class="comment">// Content - 多行</span></div><div class="line">    _contentLabel.preferredMaxLayoutWidth = preferredMaxWidth; <span class="comment">// 多行时必须设置</span></div></pre></td></tr></table></figure>
<ul>
<li><p>为了避免在转屏的时候，Header、Bottom差一截的问题，这里我们头，尾视图不需要根据父视图来设定约束，而是根据<code>topLayoutGuide</code>、<code>bottomLayoutGuide</code>来设定:</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"> [<span class="name">_topView</span> mas_updateConstraints:^(<span class="name">MASConstraintMaker</span> *make) &#123;</div><div class="line">    // 直接利用其length属性，避免iOS、SDK版本升级后topLayoutGuide不再是UIView</div><div class="line">    make.top.equalTo(<span class="name">self.view.mas_top</span>).with.offset(<span class="name">self.topLayoutGuide.length</span>)<span class="comment">;</span></div><div class="line">&#125;]<span class="comment">;</span></div><div class="line"></div><div class="line">// 根据新的length值更新约束</div><div class="line">[<span class="name">_bottomView</span> mas_updateConstraints:^(<span class="name">MASConstraintMaker</span> *make) &#123;</div><div class="line">    // 直接利用其length属性，避免iOS、SDK版本升级后topLayoutGuide不再是UIView</div><div class="line">    make.bottom.equalTo(<span class="name">self.view.mas_bottom</span>).with.offset(<span class="name"><span class="builtin-name">-</span></span>(<span class="name">self.bottomLayoutGuide.length</span>))<span class="comment">;</span></div><div class="line">&#125;]<span class="comment">;</span></div></pre></td></tr></table></figure>
</li>
<li><p>自定义<code>baseline</code>的属性值：</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"> <span class="comment">// 返回自定义的baseline的view</span></div><div class="line">- (UIView *)viewForBaselineLayout &#123;</div><div class="line">    <span class="keyword">return</span> _baseView;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>可拉伸的<code>UITableView</code></p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"> _tableView.contentInset = <span class="built_in">UIEdgeInsetsMake</span>(ParallaxHeaderHeight, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</div><div class="line"></div><div class="line"> ...</div><div class="line"></div><div class="line"> - (<span class="keyword">void</span>)initView &#123;</div><div class="line">    _parallaxHeaderView = [<span class="built_in">UIImageView</span> new];</div><div class="line">    [<span class="keyword">self</span>.view insertSubview:_parallaxHeaderView belowSubview:_tableView];</div><div class="line">    _parallaxHeaderView.contentMode = <span class="built_in">UIViewContentModeScaleAspectFill</span>;</div><div class="line">    _parallaxHeaderView.image = [<span class="built_in">UIImage</span> imageNamed:<span class="string">@"parallax_header_back"</span>];</div><div class="line"></div><div class="line">    [_parallaxHeaderView mas_makeConstraints:^(MASConstraintMaker *make) &#123;</div><div class="line">        make.left.and.right.equalTo(<span class="keyword">self</span>.view);</div><div class="line">        make.top.equalTo(<span class="keyword">self</span>.mas_topLayoutGuideBottom);</div><div class="line">        _parallaxHeaderHeightConstraint = make.height.equalTo(@(ParallaxHeaderHeight));</div><div class="line">    &#125;];</div><div class="line"></div><div class="line">    <span class="comment">// Add KVO</span></div><div class="line">    [_tableView addObserver:<span class="keyword">self</span> forKeyPath:<span class="string">@"contentOffset"</span> options:<span class="built_in">NSKeyValueObservingOptionNew</span> context:<span class="literal">nil</span>];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li>KVO的回调</li>
</ul>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 方法2：利用KVO</span></div><div class="line">- (<span class="keyword">void</span>)observeValueForKeyPath:(<span class="built_in">NSString</span> *)keyPath ofObject:(<span class="keyword">id</span>)object</div><div class="line">                        change:(<span class="built_in">NSDictionary</span>&lt;<span class="built_in">NSString</span> *,<span class="keyword">id</span>&gt; *)change</div><div class="line">                       context:(<span class="keyword">void</span> *)context &#123;</div><div class="line">    <span class="keyword">if</span> ([keyPath isEqualToString:<span class="string">@"contentOffset"</span>]) &#123;</div><div class="line">        <span class="built_in">CGPoint</span> contentOffset = ((<span class="built_in">NSValue</span> *)change[<span class="built_in">NSKeyValueChangeNewKey</span>]).CGPointValue;</div><div class="line">        <span class="keyword">if</span> (contentOffset.y &lt; -ParallaxHeaderHeight) &#123;</div><div class="line">            _parallaxHeaderHeightConstraint.equalTo(@(-contentOffset.y));</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;最近看到很多人都在转一篇博客，博客的链接为：-http-tutuge-me-2015-05-23-autolayout-example-with-masonry-其实文章的知识点不是很多，重点就是讲如何运用Masonry来实现一些东西，但是不得不承认这篇文章很使用，我在平时开发的时候，很多细节的地方，我也没有注意到，然后看了一下他的四篇博客，记录一下：&quot;&gt;&lt;a href=&quot;#最近看到很多人都在转一篇博客，博客的链接为：-http-tutuge-me-2015-05-23-autolayout-example-with-masonry-其实文章的知识点不是很多，重点就是讲如何运用Masonry来实现一些东西，但是不得不承认这篇文章很使用，我在平时开发的时候，很多细节的地方，我也没有注意到，然后看了一下他的四篇博客，记录一下：&quot; class=&quot;headerlink&quot; title=&quot;最近看到很多人都在转一篇博客，博客的链接为：[http://tutuge.me/2015/05/23/autolayout-example-with-masonry/], 其实文章的知识点不是很多，重点就是讲如何运用Masonry来实现一些东西，但是不得不承认这篇文章很使用，我在平时开发的时候，很多细节的地方，我也没有注意到，然后看了一下他的四篇博客，记录一下：&quot;&gt;&lt;/a&gt;最近看到很多人都在转一篇博客，博客的链接为：[&lt;a href=&quot;http://tutuge.me/2015/05/23/autolayout-example-with-masonry/&quot;&gt;http://tutuge.me/2015/05/23/autolayout-example-with-masonry/&lt;/a&gt;], 其实文章的知识点不是很多，重点就是讲如何运用Masonry来实现一些东西，但是不得不承认这篇文章很使用，我在平时开发的时候，很多细节的地方，我也没有注意到，然后看了一下他的四篇博客，记录一下：&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;第一部分重点讲的是两个属性: &lt;code&gt;Content Compression Resistance&lt;/code&gt;、&lt;code&gt;Content Hugging&lt;/code&gt;,这里我觉得作者的解释还是形象的：&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="日志" scheme="http://www.ghcoder.com/categories/%E6%97%A5%E5%BF%97/"/>
    
    
      <category term="Object-C" scheme="http://www.ghcoder.com/tags/Object-C/"/>
    
  </entry>
  
  <entry>
    <title>学习Swift Tips</title>
    <link href="http://www.ghcoder.com/2017/09/01/20170901/"/>
    <id>http://www.ghcoder.com/2017/09/01/20170901/</id>
    <published>2017-09-01T06:11:12.000Z</published>
    <updated>2017-09-07T08:05:53.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="onvcate的《Swift开发者必备的Tips》之前刚出的时候，我就翻阅过，后来Swift的版本一直在改，我也就懒得去看了-现在Swift的ABI基本都稳定了，我在回顾复习一下这本书，记录一下要点："><a href="#onvcate的《Swift开发者必备的Tips》之前刚出的时候，我就翻阅过，后来Swift的版本一直在改，我也就懒得去看了-现在Swift的ABI基本都稳定了，我在回顾复习一下这本书，记录一下要点：" class="headerlink" title="onvcate的《Swift开发者必备的Tips》之前刚出的时候，我就翻阅过，后来Swift的版本一直在改，我也就懒得去看了,现在Swift的ABI基本都稳定了，我在回顾复习一下这本书，记录一下要点："></a>onvcate的《Swift开发者必备的Tips》之前刚出的时候，我就翻阅过，后来Swift的版本一直在改，我也就懒得去看了,现在Swift的ABI基本都稳定了，我在回顾复习一下这本书，记录一下要点：</h3><h4 id="协议中的read-only的属性值："><a href="#协议中的read-only的属性值：" class="headerlink" title="协议中的read-only的属性值："></a>协议中的read-only的属性值：</h4><ul>
<li>在protocol中给在方法前面添加<code>mutating</code>，可以修改<code>Struct</code>、<code>Enum</code>中的属性值, 在<code>Class</code>中本来就可以修改，所以可以直接忽视<code>mutating</code>。</li>
<li>首先我们来想一下，怎么在<code>protocol</code>中定义一个只读的属性值:</li>
</ul>
<a id="more"></a>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">protocol Vehicle &#123;</div><div class="line">    <span class="selector-tag">var</span> number: Int &#123; get &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">struct MyCar: Vehicle &#123;</div><div class="line">    <span class="selector-tag">var</span> number: Int</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">var</span> car = MyCar(number: <span class="number">3</span>)</div><div class="line">car<span class="selector-class">.number</span></div><div class="line"></div><div class="line">car<span class="selector-class">.number</span> = <span class="number">10</span></div><div class="line"></div><div class="line">car.number</div></pre></td></tr></table></figure>
<ul>
<li>当我写完这段代码的时候，我发现，我定义的只读属性<code>number</code>,但是这里为什么？我还可以设置呢？我google了一下：[<a href="https://stackoverflow.com/questions/31358518/read-only-properties-of-protocols-in-swift" target="_blank" rel="external">https://stackoverflow.com/questions/31358518/read-only-properties-of-protocols-in-swift</a>]</li>
</ul>
<blockquote>
<p>There’s no way to specify in a protocol that you must have a read-only property. Your protocol asks for a car.number property, and allows but does not require a setter.</p>
</blockquote>
<ul>
<li>这里我的理解就是，当你实例化一个<code>car</code>的对象，并且调用car.xxx某个属性值的时候，你并没有限制他的xxx属性值是只读的。所以我们只需要修改car的那行代码：</li>
</ul>
<figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="string">var </span><span class="string">car:</span> <span class="string">Vehicle </span>= <span class="string">MyCar(</span><span class="string">number:</span> 3)</div><div class="line"></div><div class="line"><span class="string">car.</span><span class="string">number</span></div><div class="line"></div><div class="line"><span class="string">car.</span><span class="string">number </span>= <span class="string">10 </span>// <span class="string">error:</span>  <span class="string">'number'</span> <span class="string">is </span>a <span class="built_in">get-only</span> <span class="string">property</span></div><div class="line"></div><div class="line"><span class="string">car.</span><span class="string">number</span></div></pre></td></tr></table></figure>
<hr>
<ul>
<li>那么我现在在协议中定义一个新的方法，这个方法做什么呢？就是修改协议里面的变量值，代码如下：</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">Vehicle</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> number: <span class="type">Int</span> &#123; <span class="keyword">get</span> &#125;</div><div class="line"></div><div class="line">    <span class="keyword">mutating</span> <span class="function"><span class="keyword">func</span> <span class="title">changeNumber</span><span class="params">()</span></span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">MyCar</span>: <span class="title">Vehicle</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">var</span> number: <span class="type">Int</span></div><div class="line"></div><div class="line">    <span class="keyword">mutating</span> <span class="function"><span class="keyword">func</span> <span class="title">changeNumber</span><span class="params">()</span></span> &#123;</div><div class="line">        number = <span class="number">99</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> car: <span class="type">Vehicle</span> = <span class="type">MyCar</span>(number: <span class="number">12</span>)</div><div class="line"></div><div class="line">car.number</div><div class="line"></div><div class="line">car.changeNumber()</div><div class="line"></div><div class="line">car.number</div></pre></td></tr></table></figure>
<ul>
<li>惊奇的发现，居然可以修改这个只读的属性值了？？我又懵逼了。查看了官方的<code>Demo</code>[<a href="https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/Protocols.html" target="_blank" rel="external">https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/Protocols.html</a>]</li>
<li>这里的属性值我只是简单的定义了下，没有通过computed value来定义值，按照官方的demo，我们直接修改代码如下：</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">Vehicle</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> number: <span class="type">Int</span> &#123; <span class="keyword">get</span> &#125;</div><div class="line"></div><div class="line">    <span class="keyword">mutating</span> <span class="function"><span class="keyword">func</span> <span class="title">changeNumber</span><span class="params">()</span></span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">MyCar</span>: <span class="title">Vehicle</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">var</span> customInt: <span class="type">Int</span></div><div class="line"></div><div class="line">    <span class="keyword">var</span> number: <span class="type">Int</span> &#123;</div><div class="line">        <span class="keyword">get</span> &#123;</div><div class="line">            <span class="keyword">return</span> customInt</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">mutating</span> <span class="function"><span class="keyword">func</span> <span class="title">changeNumber</span><span class="params">()</span></span> &#123;</div><div class="line"><span class="comment">//        number = 99</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> car: <span class="type">Vehicle</span> = <span class="type">MyCar</span>(customInt: <span class="number">12</span>)</div><div class="line"></div><div class="line">car.number</div><div class="line"></div><div class="line">car.changeNumber()</div><div class="line"></div><div class="line">car.number</div></pre></td></tr></table></figure>
<ul>
<li>这样一旦我调用ChangeNumber的方法的时候，你就会发现报错了。</li>
</ul>
<hr>
<ul>
<li>下面说了<code>for in</code>的使用，大家应该都知道，<code>for in</code>的循环，我们都可以使用在集合类型的上面，但是在swift中我其实是可以将<code>for in</code>用在我们自定义的类型上面。在Apple的官方文档上也给了一个说明：[<a href="https://developer.apple.com/documentation/swift/iteratorprotocol" target="_blank" rel="external">https://developer.apple.com/documentation/swift/iteratorprotocol</a>]</li>
<li>首先能使用<code>for in</code>来枚举的对象，必须遵循<code>Sequence</code>,看里面的源码会发现里面除了很多的方法就只剩两个属性值的设置：</li>
</ul>
<figure class="highlight rust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/// A type that provides the sequence's iteration interface and</span></div><div class="line"> <span class="comment">/// encapsulates its iteration state.</span></div><div class="line"> associatedtype <span class="built_in">Iterator</span> : IteratorProtocol</div><div class="line"></div><div class="line"> <span class="comment">/// A type that represents a subsequence of some of the sequence's elements.</span></div><div class="line"> associatedtype SubSequence</div><div class="line"></div><div class="line">     <span class="comment">/// Returns an iterator over the elements of this sequence.</span></div><div class="line"> public func makeIterator() -&gt; <span class="keyword">Self</span>.<span class="built_in">Iterator</span></div></pre></td></tr></table></figure>
<ul>
<li>按照官方的意思，我们这里其他不需要去实现，这里就实现了一个<code>public func makeIterator() -&gt; Self.Iterator</code>这个方法，可以看出这个方法返回的是一个迭代器，而这个迭代器必须要实现<code>IteratorProtocol</code>的协议：</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">protocol</span> <span class="title">IteratorProtocol</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/// The type of element traversed by the iterator.</span></div><div class="line">    associatedtype <span class="type">Element</span></div><div class="line"></div><div class="line">    <span class="comment">/// Advances to the next element and returns it, or `nil` if no next element</span></div><div class="line">    <span class="comment">/// exists.</span></div><div class="line">    <span class="comment">///</span></div><div class="line">    <span class="comment">/// Repeatedly calling this method returns, in order, all the elements of the</span></div><div class="line">    <span class="comment">/// underlying sequence. As soon as the sequence has run out of elements, all</span></div><div class="line">    <span class="comment">/// subsequent calls return `nil`.</span></div><div class="line">    <span class="comment">///</span></div><div class="line">    <span class="comment">/// You must not call this method if any other copy of this iterator has been</span></div><div class="line">    <span class="comment">/// advanced with a call to its `next()` method.</span></div><div class="line">    <span class="comment">///</span></div><div class="line">    <span class="comment">/// The following example shows how an iterator can be used explicitly to</span></div><div class="line">    <span class="comment">/// emulate a `for`-`in` loop. First, retrieve a sequence's iterator, and</span></div><div class="line">    <span class="comment">/// then call the iterator's `next()` method until it returns `nil`.</span></div><div class="line">    <span class="comment">///</span></div><div class="line">    <span class="comment">///     let numbers = [2, 3, 5, 7]</span></div><div class="line">    <span class="comment">///     var numbersIterator = numbers.makeIterator()</span></div><div class="line">    <span class="comment">///</span></div><div class="line">    <span class="comment">///     while let num = numbersIterator.next() &#123;</span></div><div class="line">    <span class="comment">///         print(num)</span></div><div class="line">    <span class="comment">///     &#125;</span></div><div class="line">    <span class="comment">///     // Prints "2"</span></div><div class="line">    <span class="comment">///     // Prints "3"</span></div><div class="line">    <span class="comment">///     // Prints "5"</span></div><div class="line">    <span class="comment">///     // Prints "7"</span></div><div class="line">    <span class="comment">///</span></div><div class="line">    <span class="comment">/// - Returns: The next element in the underlying sequence, if a next element</span></div><div class="line">    <span class="comment">///   exists; otherwise, `nil`.</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">mutating</span> <span class="function"><span class="keyword">func</span> <span class="title">next</span><span class="params">()</span></span> -&gt; <span class="type">Self</span>.<span class="type">Element</span>?</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>上面的注释也说明了一些，这里其实就是一个<code>迭代器模式</code>，不断的调用next()的方法，知道返回nil，官方的例子上面没有用到<code>Element</code>,就只是将返回的类型定义为<code>Int?</code>,只是用了<code>next</code>的方法：</li>
<li>并且之前我们也看到了<code>CountdownIterator</code>的实例化方法，将自己这个结构体传入了进去,所以这里就定义了一个内部变量<code>countdown</code>:</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Coundown</span>: <span class="title">Sequence</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">let</span> start: <span class="type">Int</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">makeIterator</span><span class="params">()</span></span> -&gt; <span class="type">CoundownIterator</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="type">CoundownIterator</span>(<span class="keyword">self</span>)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">CoundownIterator</span>: <span class="title">IteratorProtocol</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">let</span> countdown: <span class="type">Coundown</span></div><div class="line">    <span class="keyword">var</span> times = <span class="number">0</span></div><div class="line"></div><div class="line">    <span class="keyword">init</span>(<span class="number">_</span> countdown: <span class="type">Coundown</span>) &#123;</div><div class="line">        <span class="keyword">self</span>.countdown = countdown</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">mutating</span> <span class="function"><span class="keyword">func</span> <span class="title">next</span><span class="params">()</span></span> -&gt; <span class="type">Int</span>? &#123;</div><div class="line"></div><div class="line">        <span class="keyword">let</span> nextNumber = countdown.start - times</div><div class="line">        <span class="keyword">guard</span> nextNumber &gt; <span class="number">0</span> <span class="keyword">else</span> &#123; <span class="keyword">return</span> <span class="literal">nil</span> &#125;</div><div class="line"></div><div class="line">        times += <span class="number">1</span></div><div class="line">        <span class="keyword">return</span> nextNumber</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> threeTwoOne = <span class="type">Coundown</span>(start: <span class="number">3</span>)</div><div class="line"><span class="keyword">for</span> <span class="built_in">count</span> <span class="keyword">in</span> threeTwoOne &#123;</div><div class="line">    <span class="built_in">print</span>(<span class="string">"<span class="subst">\(<span class="built_in">count</span>)</span>..."</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>上面的例子还是通俗易懂的，但是唯一的缺点就是有些属性没用，可能他觉得没必要吧，看一下onevcate的例子：</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> UIKit</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ReverseSequence</span>&lt;<span class="title">T</span>&gt;: <span class="title">Sequence</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">var</span> array: [<span class="type">T</span>]</div><div class="line"></div><div class="line">    <span class="keyword">init</span>(array: [<span class="type">T</span>]) &#123;</div><div class="line">        <span class="keyword">self</span>.array = array</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">typealias</span> <span class="type">Iterator</span> = <span class="type">ReverseItrator</span>&lt;<span class="type">T</span>&gt;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">makeIterator</span><span class="params">()</span></span> -&gt; <span class="type">ReverseItrator</span>&lt;<span class="type">T</span>&gt; &#123;</div><div class="line">        <span class="keyword">return</span> <span class="type">ReverseItrator</span>(array: <span class="keyword">self</span>.array)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ReverseItrator</span>&lt;<span class="title">T</span>&gt;: <span class="title">IteratorProtocol</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">typealias</span> <span class="type">Element</span> = <span class="type">T</span></div><div class="line"></div><div class="line">    <span class="keyword">var</span> array: [<span class="type">Element</span>]</div><div class="line">    <span class="keyword">var</span> currentIndex = <span class="number">0</span></div><div class="line"></div><div class="line">    <span class="keyword">init</span>(array: [<span class="type">T</span>]) &#123;</div><div class="line">        <span class="keyword">self</span>.array = array</div><div class="line">        currentIndex = array.<span class="built_in">count</span> - <span class="number">1</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">mutating</span> <span class="function"><span class="keyword">func</span> <span class="title">next</span><span class="params">()</span></span> -&gt; <span class="type">T</span>? &#123;</div><div class="line">        <span class="keyword">if</span> currentIndex &lt; <span class="number">0</span> &#123;</div><div class="line">            <span class="keyword">return</span> <span class="literal">nil</span></div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">let</span> element = <span class="keyword">self</span>.array[currentIndex]</div><div class="line">            currentIndex -= <span class="number">1</span></div><div class="line">            <span class="keyword">return</span> element</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> arr = [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</div><div class="line"></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="type">ReverseSequence</span>(array: arr) &#123;</div><div class="line">    <span class="built_in">print</span>(<span class="string">"Index: <span class="subst">\(i)</span> is <span class="subst">\(arr[i])</span>"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>其实这里会发现<code>typealias Iterator = ReverseItrator&lt;T&gt;</code>, <code>typealias Element = T</code>写了这些之后，相应协议中的返回值就是自动生成，但是如果你想代码简洁，其实可以忽略这些属性值，直接设置也是可以的。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;onvcate的《Swift开发者必备的Tips》之前刚出的时候，我就翻阅过，后来Swift的版本一直在改，我也就懒得去看了-现在Swift的ABI基本都稳定了，我在回顾复习一下这本书，记录一下要点：&quot;&gt;&lt;a href=&quot;#onvcate的《Swift开发者必备的Tips》之前刚出的时候，我就翻阅过，后来Swift的版本一直在改，我也就懒得去看了-现在Swift的ABI基本都稳定了，我在回顾复习一下这本书，记录一下要点：&quot; class=&quot;headerlink&quot; title=&quot;onvcate的《Swift开发者必备的Tips》之前刚出的时候，我就翻阅过，后来Swift的版本一直在改，我也就懒得去看了,现在Swift的ABI基本都稳定了，我在回顾复习一下这本书，记录一下要点：&quot;&gt;&lt;/a&gt;onvcate的《Swift开发者必备的Tips》之前刚出的时候，我就翻阅过，后来Swift的版本一直在改，我也就懒得去看了,现在Swift的ABI基本都稳定了，我在回顾复习一下这本书，记录一下要点：&lt;/h3&gt;&lt;h4 id=&quot;协议中的read-only的属性值：&quot;&gt;&lt;a href=&quot;#协议中的read-only的属性值：&quot; class=&quot;headerlink&quot; title=&quot;协议中的read-only的属性值：&quot;&gt;&lt;/a&gt;协议中的read-only的属性值：&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;在protocol中给在方法前面添加&lt;code&gt;mutating&lt;/code&gt;，可以修改&lt;code&gt;Struct&lt;/code&gt;、&lt;code&gt;Enum&lt;/code&gt;中的属性值, 在&lt;code&gt;Class&lt;/code&gt;中本来就可以修改，所以可以直接忽视&lt;code&gt;mutating&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;首先我们来想一下，怎么在&lt;code&gt;protocol&lt;/code&gt;中定义一个只读的属性值:&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="日志" scheme="http://www.ghcoder.com/categories/%E6%97%A5%E5%BF%97/"/>
    
    
      <category term="Swift" scheme="http://www.ghcoder.com/tags/Swift/"/>
    
  </entry>
  
  <entry>
    <title>学习YYText(一)</title>
    <link href="http://www.ghcoder.com/2017/08/30/20170830/"/>
    <id>http://www.ghcoder.com/2017/08/30/20170830/</id>
    <published>2017-08-30T08:11:12.000Z</published>
    <updated>2017-09-01T10:05:33.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="YY系列的很多代码都写的很棒，最近很多地方都用到富文本，所以决定用YYText-用之前看了一下里面的代码，觉得还是有很多地方要学习的。代码量非常大，所以可能要分几篇博客分别去写，简单的逻辑就不写了。"><a href="#YY系列的很多代码都写的很棒，最近很多地方都用到富文本，所以决定用YYText-用之前看了一下里面的代码，觉得还是有很多地方要学习的。代码量非常大，所以可能要分几篇博客分别去写，简单的逻辑就不写了。" class="headerlink" title="YY系列的很多代码都写的很棒，最近很多地方都用到富文本，所以决定用YYText,用之前看了一下里面的代码，觉得还是有很多地方要学习的。代码量非常大，所以可能要分几篇博客分别去写，简单的逻辑就不写了。"></a>YY系列的很多代码都写的很棒，最近很多地方都用到富文本，所以决定用<code>YYText</code>,用之前看了一下里面的代码，觉得还是有很多地方要学习的。代码量非常大，所以可能要分几篇博客分别去写，简单的逻辑就不写了。</h4><ul>
<li>看<code>demo</code>里面，第一行的代码，关于的测试部分就写的很简单，但是深究下去，还是有很多值得学习的地方的：</li>
</ul>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 这里的self只是一个传入的ViewController的实例</span></div><div class="line">[YYTextExampleHelper <span class="string">addDebugOptionToViewController:</span>self];</div></pre></td></tr></table></figure>
<a id="more"></a>
<ul>
<li>这里传入的vc只是用来设置navigationItem的，这里是设置的一个UISwicher的UI控件，这里存在一个方法：</li>
</ul>
<figure class="highlight clojure"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[switcher addBlockForControlEvents:UIControlEventValueChanged block:^(<span class="name">UISwitch</span> *sender) &#123;</div><div class="line">      [self setDebug:sender.isOn]<span class="comment">;</span></div><div class="line">  &#125;]<span class="comment">;</span></div></pre></td></tr></table></figure>
<ul>
<li>仔细一看就会发现问题，UISwich的实例变量可以直接调用<code>addBlockForControlEvents</code>的方法，传入了<code>Event</code>和<code>block</code>:</li>
</ul>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">UIControl</span> (<span class="title">YYAdd</span>)</span></div><div class="line"></div><div class="line">...</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)addBlockForControlEvents:(<span class="built_in">UIControlEvents</span>)controlEvents</div><div class="line">                           block:(<span class="keyword">void</span> (^)(<span class="keyword">id</span> sender))block &#123;</div><div class="line">    _YYUIControlBlockTarget *target = [[_YYUIControlBlockTarget alloc]</div><div class="line">                                       initWithBlock:block events:controlEvents];</div><div class="line">    [<span class="keyword">self</span> addTarget:target action:<span class="keyword">@selector</span>(invoke:) forControlEvents:controlEvents];</div><div class="line">    <span class="built_in">NSMutableArray</span> *targets = [<span class="keyword">self</span> _yy_allUIControlBlockTargets];</div><div class="line">    [targets addObject:target];</div><div class="line">&#125;</div><div class="line"></div><div class="line">...</div><div class="line"></div><div class="line">- (<span class="built_in">NSMutableArray</span> *)_yy_allUIControlBlockTargets &#123;</div><div class="line">    <span class="built_in">NSMutableArray</span> *targets = objc_getAssociatedObject(<span class="keyword">self</span>, &amp;block_key);</div><div class="line">    <span class="keyword">if</span> (!targets) &#123;</div><div class="line">        targets = [<span class="built_in">NSMutableArray</span> array];</div><div class="line">        objc_setAssociatedObject(<span class="keyword">self</span>, &amp;block_key, targets, OBJC_ASSOCIATION_RETAIN_NONATOMIC);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> targets;</div><div class="line">&#125;</div><div class="line"></div><div class="line">...</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">_YYUIControlBlockTarget</span> : <span class="title">NSObject</span></span></div><div class="line"></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">copy</span>) <span class="keyword">void</span> (^block)(<span class="keyword">id</span> sender);</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) <span class="built_in">UIControlEvents</span> events;</div><div class="line"></div><div class="line">- (<span class="keyword">id</span>)initWithBlock:(<span class="keyword">void</span> (^)(<span class="keyword">id</span> sender))block events:(<span class="built_in">UIControlEvents</span>)events;</div><div class="line">- (<span class="keyword">void</span>)invoke:(<span class="keyword">id</span>)sender;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">_YYUIControlBlockTarget</span></span></div><div class="line"></div><div class="line">- (<span class="keyword">id</span>)initWithBlock:(<span class="keyword">void</span> (^)(<span class="keyword">id</span> sender))block events:(<span class="built_in">UIControlEvents</span>)events &#123;</div><div class="line">    <span class="keyword">self</span> = [<span class="keyword">super</span> init];</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>) &#123;</div><div class="line">        _block = [block <span class="keyword">copy</span>];</div><div class="line">        _events = events;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)invoke:(<span class="keyword">id</span>)sender &#123;</div><div class="line">    <span class="keyword">if</span> (_block) _block(sender);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line">...</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<ul>
<li>这里点到源码里面可以看到，YY作者写了一个<code>UIControl</code>的category，来作了拓展，提供了<code>addBlockForControlEvents</code>这个方法，这也就解释了上面可以调用这个方法。</li>
<li>发现作者拿到<code>UIControlEvents</code>和<code>block</code>，直接生成了一个<code>_YYUIControlBlockTarget</code>实例。发现生成的这个实例，也做什么特别的事情，就是把block copy保存下来，events也保存下来。</li>
<li>然后它还是调用了系统的<code>addTarget:action:forControlEvents</code>，直接调用<code>invoke:</code>的方法，其实就是调用了我传入进来的<code>block</code>。</li>
<li>下面可以看到作者通过<code>runtime</code>给这个category生成了一个<code>NSMutableArry</code>的属性值，并且把我的target对象保存起来。</li>
<li>其实通过看源码就可以发现作者这么写这个category，就做了两件事情，第一可以用block, 第二可以方便直接remove掉相关对象上事件。</li>
</ul>
<hr>
<ul>
<li>在事件成功触发的时候，就会调用下面的方法：</li>
</ul>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">+ (<span class="keyword">void</span>)<span class="string">setDebug:</span>(BOOL)debug &#123;</div><div class="line">    YYTextDebugOption *debugOptions = [YYTextDebugOption <span class="keyword">new</span>];</div><div class="line">    <span class="keyword">if</span> (debug) &#123;</div><div class="line">        debugOptions.baselineColor = [UIColor redColor];</div><div class="line">        debugOptions.CTFrameBorderColor = [UIColor redColor];</div><div class="line">        debugOptions.CTLineFillColor = [UIColor <span class="string">colorWithRed:</span><span class="number">0.000</span> <span class="string">green:</span><span class="number">0.463</span> <span class="string">blue:</span><span class="number">1.000</span> <span class="string">alpha:</span><span class="number">0.180</span>];</div><div class="line">        debugOptions.CGGlyphBorderColor = [UIColor <span class="string">colorWithRed:</span><span class="number">1.000</span> <span class="string">green:</span><span class="number">0.524</span> <span class="string">blue:</span><span class="number">0.000</span> <span class="string">alpha:</span><span class="number">0.200</span>];</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        [debugOptions clear];</div><div class="line">    &#125;</div><div class="line">    [YYTextDebugOption <span class="string">setSharedDebugOption:</span>debugOptions];</div><div class="line">    DebugEnabled = debug;</div><div class="line">&#125;</div><div class="line"></div><div class="line">...</div><div class="line"></div><div class="line"><span class="meta">@interface</span> <span class="string">YYTextDebugOption :</span> NSObject &lt;NSCopying&gt;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> Set a debug option as shared debug option.</div><div class="line"> This method must be called on main thread.</div><div class="line"></div><div class="line"> <span class="doctag">@discussion</span> When call this method, the new option will set to all debug target</div><div class="line"> which is added by `addDebugTarget:`.</div><div class="line"></div><div class="line"> <span class="doctag">@param</span> option  A new debug option (nil is valid).</div><div class="line"> */</div><div class="line">+ (<span class="keyword">void</span>)<span class="string">setSharedDebugOption:</span>(nullable YYTextDebugOption *)option;</div><div class="line"></div><div class="line">...</div></pre></td></tr></table></figure>
<ul>
<li>在这个类方法中主要涉及到的一个对象为<code>YYTextDebugOption</code>,这个对象只是一个继承自NSObject的对象，这里没毛病。</li>
<li><p>生成实例对象之后，我们需要设置不同的值，然后还是通过自己的类方法，将上面的生成的这个对象通过参数出入进去。</p>
</li>
<li><p>在<code>YYTextDebugOption</code>里面：</p>
</li>
</ul>
<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line">+ (void)setSharedDebugOption:(YYTextDebugOption *)option &#123;</div><div class="line">    NSAssert([NSThread isMainThread], @<span class="string">"This method must be called on the main thread"</span>)<span class="comment">;</span></div><div class="line">    _setSharedDebugOption(option)<span class="comment">;</span></div><div class="line">&#125;</div><div class="line">...</div><div class="line"></div><div class="line">static void _setSharedDebugOption(YYTextDebugOption *option) &#123;</div><div class="line">    _initSharedDebug()<span class="comment">;</span></div><div class="line">    pthread_mutex_lock(&amp;_sharedDebugLock)<span class="comment">;</span></div><div class="line">    _sharedDebugOption = option.copy<span class="comment">;</span></div><div class="line">    CFSetApplyFunction(_sharedDebugTargets, _sharedDebugSetFunction, NULL)<span class="comment">;</span></div><div class="line">    pthread_mutex_unlock(&amp;_sharedDebugLock)<span class="comment">;</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">....</div><div class="line"></div><div class="line">static void _initSharedDebug() &#123;</div><div class="line">    static <span class="keyword">dispatch_once_t </span>onceToken<span class="comment">;</span></div><div class="line">    <span class="keyword">dispatch_once(&amp;onceToken, </span>^&#123;</div><div class="line">        pthread_mutex_init(&amp;_sharedDebugLock, NULL)<span class="comment">;</span></div><div class="line">        CFSetCallBacks callbacks = kCFTypeSetCallBacks<span class="comment">;</span></div><div class="line">        callbacks.retain = _sharedDebugSetRetain<span class="comment">;</span></div><div class="line">        callbacks.release = _sharedDebugSetRelease<span class="comment">;</span></div><div class="line">        _sharedDebugTargets = CFSetCreateMutable(CFAllocatorGetDefault(), <span class="number">0</span>, &amp;callbacks)<span class="comment">;</span></div><div class="line">    &#125;)<span class="comment">;</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>这里首页确保了设置的的时候，必须是要主线程去调用，其实这里这样写，和后面通过锁来存储对象效果是一致的。</li>
<li>这里发现作者都是些的c函数，这里我不太确定，为什么不用oc呢？</li>
<li>这里作者写了一个单例，并且初始化了<code>pthread_mutex_init(&amp;_sharedDebugLock, NULL);</code>锁的值</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">//1：pthread_mutex_init(pthread_mutex_t * mutex,const pthread_mutexattr_t *attr);</span></div><div class="line">初始化锁变量mutex。attr为锁属性，<span class="literal">NULL</span>值为默认属性。</div><div class="line"><span class="comment">//2：pthread_mutex_lock(pthread_mutex_t *mutex);加锁</span></div><div class="line"><span class="comment">//3：pthread_mutex_tylock(pthread_mutex_t *mutex);加锁，但是与2不一样的是当锁已经在使用的时候，返回为EBUSY，而不是挂起等待。</span></div><div class="line"><span class="comment">//4：pthread_mutex_unlock(pthread_mutex_t *mutex);释放锁</span></div><div class="line"><span class="comment">//5：pthread_mutex_destroy(pthread_mutex_t *mutex);使用完后释放</span></div><div class="line"></div><div class="line">...</div><div class="line">__OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_2_0)</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_mutex_init</span><span class="params">(<span class="keyword">pthread_mutex_t</span> * __restrict,</span></span></div><div class="line">		<span class="keyword">const</span> <span class="keyword">pthread_mutexattr_t</span> * _Nullable __restrict);</div><div class="line">...</div></pre></td></tr></table></figure>
<ul>
<li>看代码可以发现，这里需要传入两个值，第一个值是用来表示这个锁的标记，同样第二只默认为Null</li>
</ul>
<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">CFSetCallBacks callbacks = kCFTypeSetCallBacks<span class="comment">;</span></div><div class="line">   callbacks.retain = _sharedDebugSetRetain<span class="comment">;</span></div><div class="line">   callbacks.release = _sharedDebugSetRelease<span class="comment">;</span></div><div class="line">   _sharedDebugTargets = CFSetCreateMutable(CFAllocatorGetDefault(), <span class="number">0</span>, &amp;callbacks)<span class="comment">;</span></div></pre></td></tr></table></figure>
<ul>
<li>这里的几行代码，其实是通过c的方法是，来生成一个容器属性，类似<code>NSArray,NSDictionary,NSSet</code>,通过源码就可以发现其实就是一个结构体，结构体里面定义的属性值，就是我们需要定义这个容器变量的值，可以猜出来，<code>release</code>/<code>retain</code>是设置对象的内存管理的，<code>equal</code>/<code>hash</code>是对象存储的方式，当然啦，通过c生成的函数，我们可以转化为<code>Foundation</code>的属性值,可以通过类似这样的方式来生成<code>return (NSMutableSet *)CFBridgingRelease(CFSetCreateMutable(0, 0, &amp;callbacks));</code></li>
</ul>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> &#123;</div><div class="line">    <span class="built_in">CFIndex</span>				version;</div><div class="line">    <span class="built_in">CFSetRetainCallBack</span>			<span class="keyword">retain</span>;</div><div class="line">    <span class="built_in">CFSetReleaseCallBack</span>		release;</div><div class="line">    <span class="built_in">CFSetCopyDescriptionCallBack</span>	copyDescription;</div><div class="line">    <span class="built_in">CFSetEqualCallBack</span>			equal;</div><div class="line">    <span class="built_in">CFSetHashCallBack</span>			hash;</div><div class="line">&#125; <span class="built_in">CFSetCallBacks</span>;</div></pre></td></tr></table></figure>
<ul>
<li>通过代码可以看出来，其实作者就是想保证，始终只有一个<code>YYTextDebugOption *option</code>的存在。通过获取这个<code>option</code>的值，就知道你的设置了。</li>
</ul>
<hr>
<ul>
<li>关键设置<code>Text</code>的相关代码：</li>
</ul>
<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">NSMutableAttributedString *text = [NSMutableAttributedString new]<span class="comment">;</span></div><div class="line"></div><div class="line">   &#123;</div><div class="line">       NSMutableAttributedString *one = [[NSMutableAttributedString alloc] initWithString:@<span class="string">"Shadow"</span>]<span class="comment">;</span></div><div class="line">       one.yy_font = [UIFont <span class="keyword">boldSystemFontOfSize:30];</span></div><div class="line">       one.yy_color = [UIColor whiteColor]<span class="comment">;</span></div><div class="line">       YYTextShadow *<span class="keyword">shadow </span>= [YYTextShadow new]<span class="comment">;</span></div><div class="line">       <span class="keyword">shadow.color </span>= [UIColor colorWithWhite:<span class="number">0</span>.<span class="number">000</span> alpha:<span class="number">0</span>.<span class="number">490</span>]<span class="comment">;</span></div><div class="line">       <span class="keyword">shadow.offset </span>= CGSizeMake(<span class="number">0</span>, <span class="number">1</span>)<span class="comment">;</span></div><div class="line">       <span class="keyword">shadow.radius </span>= <span class="number">5</span><span class="comment">;</span></div><div class="line">       one.yy_textShadow = <span class="keyword">shadow;</span></div><div class="line">       [text appendAttributedString:one]<span class="comment">;</span></div><div class="line">       [text appendAttributedString:[self padding]]<span class="comment">;</span></div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<ul>
<li>这里设置<code>yy_font</code>、<code>yy_color</code>的时候，用法和我们之前设置label的属性设置一模一样，这里点进去可以发现，这里是因为作者写了一个<code>NSMutableAttributedString</code>的一个<code>category</code>，和之前的做法一样,在setter值的时候，作者覆写了setter的值方法，统一都调用了一个同一个的方法：</li>
</ul>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line">- (<span class="keyword">void</span>)<span class="string">yy_setFont:</span>(UIFont *)font <span class="string">range:</span>(NSRange)range &#123;</div><div class="line">    <span class="comment">/*</span></div><div class="line">     In iOS7 and later, UIFont is toll-free bridged to CTFontRef,</div><div class="line">     although Apple does not mention it in documentation.</div><div class="line"></div><div class="line">     In iOS6, UIFont is a wrapper for CTFontRef, so CoreText can alse use UIfont,</div><div class="line">     but UILabel/UITextView cannot use CTFontRef.</div><div class="line"></div><div class="line">     We use UIFont for both CoreText and UIKit.</div><div class="line">     */</div><div class="line">    [self <span class="string">yy_setAttribute:</span>NSFontAttributeName <span class="string">value:</span>font <span class="string">range:</span>range];</div><div class="line">&#125;</div><div class="line"></div><div class="line">...</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)<span class="string">yy_setColor:</span>(UIColor *)color <span class="string">range:</span>(NSRange)range &#123;</div><div class="line">    [self <span class="string">yy_setAttribute:</span>(id)kCTForegroundColorAttributeName <span class="string">value:</span>(id)color.CGColor <span class="string">range:</span>range];</div><div class="line">    [self <span class="string">yy_setAttribute:</span>NSForegroundColorAttributeName <span class="string">value:</span>color <span class="string">range:</span>range];</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">...</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)<span class="string">yy_setAttribute:</span>(NSString *)name <span class="string">value:</span>(id)value <span class="string">range:</span>(NSRange)range &#123;</div><div class="line">    <span class="keyword">if</span> (!name || [NSNull <span class="string">isEqual:</span>name]) <span class="keyword">return</span>;</div><div class="line">    <span class="keyword">if</span> (value &amp;&amp; ![NSNull <span class="string">isEqual:</span>value]) [self <span class="string">addAttribute:</span>name <span class="string">value:</span>value <span class="string">range:</span>range];</div><div class="line">    <span class="keyword">else</span> [self <span class="string">removeAttribute:</span>name <span class="string">range:</span>range];</div><div class="line">&#125;</div><div class="line"></div><div class="line">...</div></pre></td></tr></table></figure>
<ul>
<li>这里其实已经很明显了，所有的设置属性的时候，都是调用的这个方法，如果存在这个值，就设置上去，没有，就去除掉。</li>
<li>这里在设置颜色的时候，连着设置了两个属性，我查了一下，但是网上都没有说的很清楚，应该是<code>就是为了某些版本的兼容问题的吧，看一下matt大神的解释吧：</code> [<a href="https://github.com/TTTAttributedLabel/TTTAttributedLabel/pull/416" target="_blank" rel="external">https://github.com/TTTAttributedLabel/TTTAttributedLabel/pull/416</a>]</li>
</ul>
<blockquote>
<p>Unfortunately, this patch appears to actually degrade support for iOS 8, as NS text attributes do not seem to apply in Core Text rendering for whatever reason.</p>
<p>As inconvenient as they are, everything works in iOS 4 – 8 if kCT. Am I missing something? This feels like more of a “if it ain’t broke, don’t fix it” type of situation…</p>
</blockquote>
<ul>
<li>关键这里的shadow让人看的很懵逼，因为看代码就可以知道，作者这里自定义了一个继承了<code>NSObject</code>的<code>Shadow</code>对象<code>YYTextShadow *shadow = [YYTextShadow new];</code>,同样它和设置font，color一样，都是最终调用到了<code>- (void)yy_setAttribute:(NSString *)name value:(id)value range:(NSRange)range {}</code>,<strong>前面我好理解，他都是设置的系统的设置，所以你不管设置font，color其实最终都是走到系统的设置上去了，但是这里设置的对象，key都是自定义的，这里系统是怎么认识的呢？开始看到这里的时候，我就有点不是很理解了，但是当我看到下面的时候我就明白了。</strong></li>
</ul>
<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">YYLabel *<span class="keyword">label</span><span class="bash"> = [YYLabel new];</span></div><div class="line"> <span class="keyword">label</span>.<span class="bash">attributedText = text;</span></div><div class="line"> <span class="keyword">label</span>.<span class="bash">width = self.view.width;</span></div><div class="line"> <span class="keyword">label</span>.<span class="bash">height = self.view.height - (kiOS7Later ? 64 : 44);</span></div><div class="line"> <span class="keyword">label</span>.<span class="bash">top = (kiOS7Later ? 64 : 0);</span></div><div class="line"> <span class="keyword">label</span>.<span class="bash">textAlignment = NSTextAlignmentCenter;</span></div><div class="line"> <span class="keyword">label</span>.<span class="bash">textVerticalAlignment = YYTextVerticalAlignmentCenter;</span></div><div class="line"> <span class="keyword">label</span>.<span class="bash">numberOfLines = 0;</span></div><div class="line"> <span class="keyword">label</span>.<span class="bash">backgroundColor = [UIColor colorWithWhite:0.933 alpha:1.000];</span></div><div class="line"> [self.view addSubview:<span class="keyword">label</span><span class="bash">];</span></div></pre></td></tr></table></figure>
<ul>
<li>首先这里定义一个新的属性值，叫做<code>YYLabel</code>,点进去可以发现，这个<code>YYLabel</code>的对象继承的是<code>UIView</code>的,这里作者要做的应该就是写一个变化的<code>UILabel</code>:</li>
</ul>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> The YYLabel <span class="built_in">class</span> implements a <span class="built_in">read</span>-only <span class="built_in">text</span> view.</div><div class="line"></div><div class="line"> @discussion The API <span class="keyword">and</span> behavior <span class="keyword">is</span> similar <span class="keyword">to</span> UILabel, <span class="keyword">but</span> provides more features:</div><div class="line"></div><div class="line"> * It supports asynchronous layout <span class="keyword">and</span> rendering (<span class="keyword">to</span> avoid blocking UI thread).</div><div class="line"> * It extends <span class="keyword">the</span> CoreText attributes <span class="keyword">to</span> support more <span class="built_in">text</span> effects.</div><div class="line"> * It allows <span class="keyword">to</span> add UIImage, UIView <span class="keyword">and</span> CALayer <span class="keyword">as</span> <span class="built_in">text</span> attachments.</div><div class="line"> * It allows <span class="keyword">to</span> add 'highlight' link <span class="keyword">to</span> <span class="keyword">some</span> range <span class="keyword">of</span> <span class="built_in">text</span> <span class="keyword">to</span> allow user interact <span class="keyword">with</span>.</div><div class="line"> * It allows <span class="keyword">to</span> add container path <span class="keyword">and</span> exclusion paths <span class="keyword">to</span> control <span class="built_in">text</span> container's shape.</div><div class="line"> * It supports vertical form layout <span class="keyword">to</span> display CJK <span class="built_in">text</span>.</div><div class="line"></div><div class="line"> See NSAttributedString+YYText.h <span class="keyword">for</span> more convenience methods <span class="keyword">to</span> <span class="keyword">set</span> <span class="keyword">the</span> attributes.</div><div class="line"> See YYTextAttribute.h <span class="keyword">and</span> YYTextLayout.h <span class="keyword">for</span> more information.</div><div class="line"> */</div><div class="line">@interface YYLabel : UIView &lt;NSCoding&gt;</div></pre></td></tr></table></figure>
<ul>
<li>可以看到YYLabel除了UILabel提供的那些东西外，我们还提供很多牛逼的功能，这些动能的实现，我还没有看，先来看看之前我们设置的<code>NSMutableAttributedString</code>是如何生效的？</li>
<li>在第二行代码，我们直接将我们前面设置的text属性值进行设定<code>label.attributedText = text;</code>:</li>
</ul>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)setAttributedText:(<span class="built_in">NSAttributedString</span> *)attributedText &#123;</div><div class="line">    <span class="keyword">if</span> (attributedText.length &gt; <span class="number">0</span>) &#123;</div><div class="line">        _innerText = attributedText.mutableCopy;</div><div class="line">        <span class="keyword">switch</span> (_lineBreakMode) &#123;</div><div class="line">            <span class="keyword">case</span> <span class="built_in">NSLineBreakByWordWrapping</span>:</div><div class="line">            <span class="keyword">case</span> <span class="built_in">NSLineBreakByCharWrapping</span>:</div><div class="line">            <span class="keyword">case</span> <span class="built_in">NSLineBreakByClipping</span>: &#123;</div><div class="line">                _innerText.yy_lineBreakMode = _lineBreakMode;</div><div class="line">            &#125; <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> <span class="built_in">NSLineBreakByTruncatingHead</span>:</div><div class="line">            <span class="keyword">case</span> <span class="built_in">NSLineBreakByTruncatingTail</span>:</div><div class="line">            <span class="keyword">case</span> <span class="built_in">NSLineBreakByTruncatingMiddle</span>: &#123;</div><div class="line">                _innerText.yy_lineBreakMode = <span class="built_in">NSLineBreakByWordWrapping</span>;</div><div class="line">            &#125; <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">default</span>: <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        _innerText = [<span class="built_in">NSMutableAttributedString</span> new];</div><div class="line">    &#125;</div><div class="line">    [_textParser parseText:_innerText selectedRange:<span class="literal">NULL</span>];</div><div class="line">    <span class="keyword">if</span> (!_ignoreCommonProperties) &#123;</div><div class="line">        <span class="keyword">if</span> (_displaysAsynchronously &amp;&amp; _clearContentsBeforeAsynchronouslyDisplay) &#123;</div><div class="line">            [<span class="keyword">self</span> _clearContents];</div><div class="line">        &#125;</div><div class="line">        [<span class="keyword">self</span> _updateOuterTextProperties];</div><div class="line">        [<span class="keyword">self</span> _setLayoutNeedUpdate];</div><div class="line">        [<span class="keyword">self</span> _endTouch];</div><div class="line">        [<span class="keyword">self</span> invalidateIntrinsicContentSize];</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>这里的代码应该就是解析我们之前设置的<code>NSAttributedString</code>属性。</li>
<li>按照代码，先判断_lineBreakMode，然后给<code>NSAttributedString</code>设置<code>yy_lineBreakMode</code>的值。</li>
<li><code>[_textParser parseText:_innerText selectedRange:NULL];</code>这个是一个代理方法，但是我现在我这里的<code>_textParser</code>是<code>nil</code>,那也就不会调用这个代理方法，从函数名字上可以知道，这里的函数主要做的上就是去解析某个<code>Text</code>。</li>
<li>调用<code>[self _updateOuterTextProperties];</code></li>
</ul>
<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">- (void)_updateOuterTextProperties &#123;</div><div class="line">    _text = [_innerText yy_plainTextForRange:NSMakeRange(<span class="number">0</span>, _innerText.length)]<span class="comment">;</span></div><div class="line">    _font = _innerText.yy_font<span class="comment">;</span></div><div class="line">    if (!_font) _font = [self _defaultFont]<span class="comment">;</span></div><div class="line">    _textColor = _innerText.yy_color<span class="comment">;</span></div><div class="line">    if (!_textColor) _textColor = [UIColor <span class="keyword">blackColor];</span></div><div class="line">    _textAlignment = _innerText.yy_alignment<span class="comment">;</span></div><div class="line">    _lineBreakMode = _innerText.yy_lineBreakMode<span class="comment">;</span></div><div class="line">    NSShadow *<span class="keyword">shadow </span>= _innerText.yy_shadow<span class="comment">;</span></div><div class="line">    _shadowColor = <span class="keyword">shadow.shadowColor;</span></div><div class="line"><span class="comment">#if !TARGET_INTERFACE_BUILDER</span></div><div class="line">    _shadowOffset = <span class="keyword">shadow.shadowOffset;</span></div><div class="line"><span class="comment">#else</span></div><div class="line">    _shadowOffset = CGPointMake(<span class="keyword">shadow.shadowOffset.width, </span><span class="keyword">shadow.shadowOffset.height);</span></div><div class="line"><span class="comment">#endif</span></div><div class="line"></div><div class="line">    _shadowBlurRadius = <span class="keyword">shadow.shadowBlurRadius;</span></div><div class="line">    _attributedText = _innerText<span class="comment">;</span></div><div class="line">    [self _updateOuterLineBreakMode]<span class="comment">;</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>从上面的代码的逻辑中我们可以看出，这个函数主要做的事情就是讲我们前面传入进来的<code>NSAttributedString</code>一个个取出来</li>
<li><code>- (NSString *)yy_plainTextForRange:(NSRange)range {}</code>这个函数的主要是从<code>NSAttributedString</code>中取出Text的值，复制给一个全局的text的值，看一下这里的实现：</li>
</ul>
<figure class="highlight nimrod"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">- (<span class="type">NSString</span> *)yy_plainTextForRange:(<span class="type">NSRange</span>)<span class="built_in">range</span> &#123;</div><div class="line">    <span class="keyword">if</span> (<span class="built_in">range</span>.location == <span class="type">NSNotFound</span> ||<span class="built_in">range</span>.length == <span class="type">NSNotFound</span>) <span class="keyword">return</span> <span class="keyword">nil</span>;</div><div class="line">    <span class="type">NSMutableString</span> *<span class="literal">result</span> = [<span class="type">NSMutableString</span> <span class="built_in">string</span>];</div><div class="line">    <span class="keyword">if</span> (<span class="built_in">range</span>.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">result</span>;</div><div class="line">    <span class="type">NSString</span> *<span class="built_in">string</span> = self.<span class="built_in">string</span>;</div><div class="line">    [self enumerateAttribute:<span class="type">YYTextBackedStringAttributeName</span> inRange:<span class="built_in">range</span> options:kNilOptions usingBlock:^(id value, <span class="type">NSRange</span> <span class="built_in">range</span>, <span class="type">BOOL</span> *stop) &#123;</div><div class="line">        <span class="type">YYTextBackedString</span> *backed = value;</div><div class="line">        <span class="keyword">if</span> (backed &amp;&amp; backed.<span class="built_in">string</span>) &#123;</div><div class="line">            [<span class="literal">result</span> appendString:backed.<span class="built_in">string</span>];</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            [<span class="literal">result</span> appendString:[<span class="built_in">string</span> substringWithRange:<span class="built_in">range</span>]];</div><div class="line">        &#125;</div><div class="line">    &#125;];</div><div class="line">    <span class="keyword">return</span> <span class="literal">result</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>这里他枚举了<code>NSAttributedString</code>的属性值，如果前面设置过<code>YYTextBackedStringAttributeName</code>,这里它会进行拼接，但是我们前面没有设置这个属性，所以，这个枚举出的<code>value = nil</code>。可以通过这里的枚举方法，我们就可以枚举出我们想要<code>attribute</code>值，并进行修改：</li>
</ul>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">NSMutableAttributedString</span> *res = [<span class="keyword">self</span>.richTextEditor.attributedText mutableCopy];</div><div class="line"></div><div class="line">[res beginEditing];</div><div class="line">__block <span class="built_in">BOOL</span> found = <span class="literal">NO</span>;</div><div class="line">[res enumerateAttribute:<span class="built_in">NSFontAttributeName</span> inRange:<span class="built_in">NSMakeRange</span>(<span class="number">0</span>, res.length) options:<span class="number">0</span> usingBlock:^(<span class="keyword">id</span> value, <span class="built_in">NSRange</span> range, <span class="built_in">BOOL</span> *stop) &#123;</div><div class="line">    <span class="keyword">if</span> (value) &#123;</div><div class="line">        <span class="built_in">UIFont</span> *oldFont = (<span class="built_in">UIFont</span> *)value;</div><div class="line">        <span class="built_in">UIFont</span> *newFont = [oldFont fontWithSize:oldFont.pointSize * <span class="number">2</span>];</div><div class="line">        [res removeAttribute:<span class="built_in">NSFontAttributeName</span> range:range];</div><div class="line">        [res addAttribute:<span class="built_in">NSFontAttributeName</span> value:newFont range:range];</div><div class="line">        found = <span class="literal">YES</span>;</div><div class="line">    &#125;</div><div class="line">&#125;];</div><div class="line"><span class="keyword">if</span> (!found) &#123;</div><div class="line">    <span class="comment">// No font was found - do something else?</span></div><div class="line">&#125;</div><div class="line">[res endEditing];</div><div class="line"><span class="keyword">self</span>.richTextEditor.attributedText = res;</div></pre></td></tr></table></figure>
<ul>
<li>下面就是简单的对全局的值进行赋值,看到这里，就可以稍微明白了之前的自定义设置Shadow的问题了：<code>NSShadow *shadow = _innerText.yy_shadow;</code>,然后将shadow的值进行赋值：</li>
</ul>
<figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">   _shadowColor = shadow.shadowColor;</div><div class="line"><span class="meta">#<span class="meta-keyword">if</span> !TARGET_INTERFACE_BUILDER</span></div><div class="line">    _shadowOffset = shadow.shadowOffset;</div><div class="line"><span class="meta">#<span class="meta-keyword">else</span></span></div><div class="line">    _shadowOffset = CGPointMake(shadow.shadowOffset.<span class="built_in">width</span>, shadow.shadowOffset.<span class="built_in">height</span>);</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"></div><div class="line">    _shadowBlurRadius = shadow.shadowBlurRadius;</div></pre></td></tr></table></figure>
<ul>
<li>最后又设置了一下<code>- (void)_updateOuterLineBreakMode {}</code>代码如下：</li>
</ul>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)_updateOuterLineBreakMode &#123;</div><div class="line">    <span class="keyword">if</span> (_innerContainer.truncationType) &#123;</div><div class="line">        <span class="keyword">switch</span> (_innerContainer.truncationType) &#123;</div><div class="line">            <span class="keyword">case</span> YYTextTruncationTypeStart: &#123;</div><div class="line">                _lineBreakMode = <span class="built_in">NSLineBreakByTruncatingHead</span>;</div><div class="line">            &#125; <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> YYTextTruncationTypeEnd: &#123;</div><div class="line">                _lineBreakMode = <span class="built_in">NSLineBreakByTruncatingTail</span>;</div><div class="line">            &#125; <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> YYTextTruncationTypeMiddle: &#123;</div><div class="line">                _lineBreakMode = <span class="built_in">NSLineBreakByTruncatingMiddle</span>;</div><div class="line">            &#125; <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">default</span>:<span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        _lineBreakMode = _innerText.yy_lineBreakMode;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>这里又设计到了一下新的对象<code>YYTextContainer *_innerContainer;</code>,这里我目前没用到这个值，所以暂且先忽略它。</li>
<li>下面调用了新的方法<code>- (void)_setLayoutNeedUpdate {}</code>,这个方法设置了一个属性值，然后调用<code>- (void)_clearInnerLayout {}</code>由于这里我们没有设置值，所以直接return掉了，最后调用了一下<code>[self.layer setNeedsDisplay];</code></li>
<li>在最后的最后调用了<code>[self invalidateIntrinsicContentSize];</code>,这个函数的调用我之前也没有用过，但是看解释应该可以猜出一部分：</li>
</ul>
<blockquote>
<p>call this when something changes that affects the intrinsicContentSize.  Otherwise UIKit won’t notice that it changed.<br>我的猜测是当父视图的发生变化的时候，我们需要调用这个方法来通知子视图也发生了变化。</p>
</blockquote>
<h4 id="到目前为止外面只了解完了最最基础的那个函数调用，设置shadow，textcolor，font，足以看出这个yyText的强大了。"><a href="#到目前为止外面只了解完了最最基础的那个函数调用，设置shadow，textcolor，font，足以看出这个yyText的强大了。" class="headerlink" title="到目前为止外面只了解完了最最基础的那个函数调用，设置shadow，textcolor，font，足以看出这个yyText的强大了。"></a>到目前为止外面只了解完了最最基础的那个函数调用，设置shadow，textcolor，font，足以看出这个yyText的强大了。</h4><hr>
<ul>
<li>网上找了些资料，大部分都没有说清楚，能说清楚下面两篇文章：可以看看 : [<a href="http://www.jianshu.com/p/f0c33d6c39bb" target="_blank" rel="external">http://www.jianshu.com/p/f0c33d6c39bb</a>, <a href="http://blog.csdn.net/wypblog/article/details/7264315" target="_blank" rel="external">http://blog.csdn.net/wypblog/article/details/7264315</a>]</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;YY系列的很多代码都写的很棒，最近很多地方都用到富文本，所以决定用YYText-用之前看了一下里面的代码，觉得还是有很多地方要学习的。代码量非常大，所以可能要分几篇博客分别去写，简单的逻辑就不写了。&quot;&gt;&lt;a href=&quot;#YY系列的很多代码都写的很棒，最近很多地方都用到富文本，所以决定用YYText-用之前看了一下里面的代码，觉得还是有很多地方要学习的。代码量非常大，所以可能要分几篇博客分别去写，简单的逻辑就不写了。&quot; class=&quot;headerlink&quot; title=&quot;YY系列的很多代码都写的很棒，最近很多地方都用到富文本，所以决定用YYText,用之前看了一下里面的代码，觉得还是有很多地方要学习的。代码量非常大，所以可能要分几篇博客分别去写，简单的逻辑就不写了。&quot;&gt;&lt;/a&gt;YY系列的很多代码都写的很棒，最近很多地方都用到富文本，所以决定用&lt;code&gt;YYText&lt;/code&gt;,用之前看了一下里面的代码，觉得还是有很多地方要学习的。代码量非常大，所以可能要分几篇博客分别去写，简单的逻辑就不写了。&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;看&lt;code&gt;demo&lt;/code&gt;里面，第一行的代码，关于的测试部分就写的很简单，但是深究下去，还是有很多值得学习的地方的：&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight groovy&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 这里的self只是一个传入的ViewController的实例&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[YYTextExampleHelper &lt;span class=&quot;string&quot;&gt;addDebugOptionToViewController:&lt;/span&gt;self];&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="日志" scheme="http://www.ghcoder.com/categories/%E6%97%A5%E5%BF%97/"/>
    
    
      <category term="Swift" scheme="http://www.ghcoder.com/tags/Swift/"/>
    
  </entry>
  
  <entry>
    <title>Core Data的迁移和合并(五)</title>
    <link href="http://www.ghcoder.com/2017/08/22/20170822/"/>
    <id>http://www.ghcoder.com/2017/08/22/20170822/</id>
    <published>2017-08-22T02:11:12.000Z</published>
    <updated>2017-09-01T03:06:15.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="记得在两年前我去面试的时候，面试官关于Core-data的问题，他们大都只会问你一个问题，基本上你只要能够答出来，就说明还是使用过Core-Data，这个问题就是：“如何迁移Core-Data的数据库”？因为谁都无法预料业务的发展，以及数据库的修改，所以这个问题也是必然会发生的。这里重点列举几个Core-Data数据库迁移的问题："><a href="#记得在两年前我去面试的时候，面试官关于Core-data的问题，他们大都只会问你一个问题，基本上你只要能够答出来，就说明还是使用过Core-Data，这个问题就是：“如何迁移Core-Data的数据库”？因为谁都无法预料业务的发展，以及数据库的修改，所以这个问题也是必然会发生的。这里重点列举几个Core-Data数据库迁移的问题：" class="headerlink" title="记得在两年前我去面试的时候，面试官关于Core data的问题，他们大都只会问你一个问题，基本上你只要能够答出来，就说明还是使用过Core Data，这个问题就是：“如何迁移Core Data的数据库”？因为谁都无法预料业务的发展，以及数据库的修改，所以这个问题也是必然会发生的。这里重点列举几个Core Data数据库迁移的问题："></a>记得在两年前我去面试的时候，面试官关于Core data的问题，他们大都只会问你一个问题，基本上你只要能够答出来，就说明还是使用过Core Data，这个问题就是：“如何迁移Core Data的数据库”？因为谁都无法预料业务的发展，以及数据库的修改，所以这个问题也是必然会发生的。这里重点列举几个Core Data数据库迁移的问题：</h4><ul>
<li><strong>首先要说一下，如果你的App，只是缓存一些离线数据的话，就没必要考虑什么数据库迁移了，因为你只需要在新版本中，删除之前的core data数据，新建一个就可以了</strong></li>
</ul>
<a id="more"></a>
<hr>
<ul>
<li>只是在原有的Entity中添加几个字段,步骤如下：</li>
</ul>
<ol>
<li>点击<code>Editor-&gt;Add Model Version</code>.</li>
<li>命名新版本的文字就啥：<code>xxx v2</code>.</li>
<li>如果你有多个Core Data的项目，需要勾选你想要修改的Core Data项目的名字.</li>
<li>点击创建完成.</li>
<li>点击<code>File Inspector</code>,在Model Version中勾选你刚才创建的新的Model.</li>
<li>此时我们就可以勾选进我们新建的Core Data Entity的字段创建表中去，创建你想要修改的字段.</li>
<li>此时你就可以去想要的xxx.swift的Model Template 的文件中去添加字段了，例如：<code>@NSManaged var image: UIImage?</code></li>
<li>此时你就可以像使用其他字段一样使用你新建的字段了，例如上面的image<code>xxx.image = xxx</code></li>
</ol>
<hr>
<ul>
<li>在原有的Entity中删除字段，并且创建新的RelationShip关联到新的Entity对象：</li>
</ul>
<ol>
<li>前面的1-5的操作都是一样的.</li>
<li>点击Core Data来创建新建的一个Entity,并且设置相应的字段(这里设置Module 为项目的名字).</li>
<li>然后从我们新建的Entity中建立新的联系去关联到我们之前的Entity(通过设置destination来设置关联).</li>
<li>并且回到之前的Entity中，删除或者修改我们想要的修改的字段.</li>
<li>并且在之前的Entity中，建立联系，关联到之前新建的Entity(这里需要设置destination为新建的Entity，并且设置inverse).</li>
<li>此时已经可以开始准备合并了，在此之前，需要做些修改：</li>
<li>创建一个新的类，类名和我们新建的Entity的名字一样，并且在里面创建我们新建的字段.</li>
<li>修改之前Entity对应的Swift类中，增删修改字段.</li>
<li>下面是最最重要的一步：建立model 映射：</li>
<li>在<code>New/File</code>中选择<code>Mapping Model</code>,选择你修改的基准的Entity为Source, 选择最新的Entity为Targer Model，名字类似为：<code>UnCloudNotesMappingModel_v2_to_v3</code></li>
<li>在这个新建的映射的文件中可以看出来，如果是之前就存在Entity的话，那么的它的值<code>Value Expression</code>= <code>$source.xxx</code>，可以看出来这样的数据是没有发生改变的.(<strong>这里的source就是我们开始创建这个文件的时候选择的source是同一个文件，我们可以理解为：v3里面xx字段的值，直接就是取自v2字段的同样的值</strong>).</li>
<li>刚下已经说了需要新建的一个Entity建立关联，那么必然在这个RelationShip中我们可以看到我们才新建好的Relationship的字段，但是在<code>Value Expression</code>中发现xcode并没有给我们填入什么值，这也是很好理解的，<strong>为这个值，关联的是我们新建Entity值，当然之前的Source不知道啦！！所以你现在要做的就是删除这段关联，因为既然是关联，我可以从a对象关联b对象，那我同样可以从b对象关联到a对象</strong></li>
<li>勾选新建的Entity对象，发现此时的xode没有给我们勾选Source，这里的理解为：<strong>默认这个新建的Entity的值，所有的值，都是我们自己新建，不需要从之前的Entity中获取值,但是我们这里一旦勾选了source，为某个对象的话，xocde会自动去更加字符创去匹配，获取相应的值，选择了source之后，对应的名字也从xxx改为yyyToxxx</strong>.</li>
<li>通过之前的理解我们其实可以理解为，每一个note都会关联attachment,但是这里我也可以做一下过滤，如果<code>attachment里的image != nil</code>,才将数据进行关联.</li>
<li><code>之前xcode为我们创建的Relationship，由于里面的value expression是我们新建的Entity,所以我们将之前的RelationShip删除掉，然后为新建的Entity新建一个relationship关联到之前的旧Entity,并且设置Mapping Name,这里系统就会自动将value expression值填上runtime的函数</code></li>
<li>最后设置两个属性：</li>
</ol>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">description</span>.shouldMigrateStoreAutomatically = <span class="keyword">true</span></div><div class="line"><span class="keyword">description</span>.shouldInferMappingModelAutomatically = <span class="keyword">false</span></div></pre></td></tr></table></figure>
<hr>
<ul>
<li>删除对象的字段，并且建立一个新的Entity,里面包含了其他新建的字段,是并且这个Entity是之前某个Entity的子类.</li>
</ul>
<ol>
<li>前面的1-5的操作都是一样的.</li>
<li>点击Core Data来创建新建的一个Entity,并且设置相应的字段(这里设置Module 为项目的名字).</li>
<li>设置新建Entity的Parent Entity,并且也可以设置相应的自定义字段.</li>
<li>之后新建我们新建(EntityName).swift，根据新建的字段类型，定义字段，此时可以同样表明继承关系<code>class ImageAttachment:Attachment {}</code></li>
<li>虽然这里创建了我们想要的Entity以及字段，但是之前的旧model如何作转化呢？这里就同样需要映射，因此这里创建了一个新的Mapping Model:<code>UnCloudNotesMappingModel_v3_to_v4</code>.</li>
<li>这里我们可以更加需要，如果新建的Entity的字段直接来自于之前的某个Model的话，我就可以将这个Model设置为Source，但是如果有些字段没有，或者不是直接可以获取到的话，或者需要从不同的字段中进行一定的逻辑才能够赋值的话，那么这里就需要自定义<code>NSEntityMigrationPolicy</code>,这里我们新建的子类对象，并且将Model的<code>Custom Policy</code>设置为我们新建的子类的话，系统在载入的时候，会进行比较，假如你现在的Core Data的版本确实需要更新的话，就会执行这个类.</li>
</ol>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">AttachmentToImageAttachmentMigrationPolicyV3toV4</span>: <span class="title">NSEntityMigrationPolicy</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">createDestinationInstances</span><span class="params">(forSource sInstance: NSManagedObject, <span class="keyword">in</span> mapping: NSEntityMapping, manager: NSMigrationManager)</span></span> <span class="keyword">throws</span> &#123;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">//1.这里会存在两个context，一个读入的source context，一个写入destinationContext.这里当然需要读入的最终的这个context</span></div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">let</span> description = <span class="type">NSEntityDescription</span>.entity(forEntityName: <span class="string">"ImageAttachment"</span>,</div><div class="line">                                                 <span class="keyword">in</span>: manager.destinationContext)</div><div class="line"></div><div class="line">    <span class="keyword">let</span> newAttachment = <span class="type">ImageAttachment</span>(entity: description!,</div><div class="line">                                        insertInto: manager.destinationContext)</div><div class="line"></div><div class="line">    <span class="comment">//2. 将属性进行迭代</span></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">traversePropertyMappings</span><span class="params">(block: <span class="params">(NSPropertyMapping, String)</span></span></span> -&gt; ()) <span class="keyword">throws</span> &#123;</div><div class="line">      <span class="keyword">if</span> <span class="keyword">let</span> attributeMappings = mapping.attributeMappings &#123;</div><div class="line"></div><div class="line">        <span class="keyword">for</span> propertyMapping <span class="keyword">in</span> attributeMappings &#123;</div><div class="line"></div><div class="line">          <span class="keyword">if</span> <span class="keyword">let</span> destinationName = propertyMapping.name &#123;</div><div class="line">            block(propertyMapping, destinationName)</div><div class="line">          &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="comment">//3.如果这个对象，连相应的属性值都不能反悔的话，那就代表肯定有问题的，需要抛出问题.</span></div><div class="line"></div><div class="line">            <span class="keyword">let</span> message = <span class="string">"Attribute destination not configured properly"</span></div><div class="line">            <span class="keyword">let</span> userInfo = [<span class="type">NSLocalizedFailureReasonErrorKey</span>: message]</div><div class="line">            <span class="keyword">throw</span> <span class="type">NSError</span>(domain: errorDomain,</div><div class="line">                          code: <span class="number">0</span>,</div><div class="line">                          userInfo: userInfo)</div><div class="line"></div><div class="line">          &#125;</div><div class="line"></div><div class="line">        &#125;</div><div class="line"></div><div class="line">      &#125; <span class="keyword">else</span> &#123;</div><div class="line"></div><div class="line">        <span class="keyword">let</span> message = <span class="string">"No Attribute Mappings found"</span></div><div class="line">        <span class="keyword">let</span> userInfo = [<span class="type">NSLocalizedFailureReasonErrorKey</span>: message]</div><div class="line">        <span class="keyword">throw</span> <span class="type">NSError</span>(domain: errorDomain,</div><div class="line">                      code: <span class="number">0</span>,</div><div class="line">                      userInfo: userInfo)</div><div class="line"></div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">// 4. 这一步按照映射关系，应该是一一对象进行赋值的</span></div><div class="line">    <span class="keyword">try</span>  traversePropertyMappings &#123;</div><div class="line">      propertyMapping, destinationName <span class="keyword">in</span></div><div class="line"></div><div class="line">      <span class="keyword">guard</span> <span class="keyword">let</span> valueExpression = propertyMapping.valueExpression <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</div><div class="line"></div><div class="line">        <span class="keyword">let</span> context: <span class="type">NSMutableDictionary</span> = [<span class="string">"source"</span>: sInstance]</div><div class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> desinationValue = valueExpression.expressionValue(with: sInstance, context: context) <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</div><div class="line">        newAttachment.setValue(desinationValue, forKey: destinationName)</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 5. 接下来的数据，你可以进行计算，或者从其他Entity中获取值</span></div><div class="line"></div><div class="line">    <span class="keyword">if</span> <span class="keyword">let</span> image = sInstance.value(forKey: <span class="string">"image"</span>) <span class="keyword">as</span>? <span class="type">UIImage</span> &#123;</div><div class="line">      newAttachment.setValue(image.size.width, forKey: <span class="string">"width"</span>)</div><div class="line">      newAttachment.setValue(image.size.height, forKey: <span class="string">"height"</span>)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 6.</span></div><div class="line">    <span class="keyword">let</span> body = sInstance.value(forKeyPath: <span class="string">"note.body"</span>) <span class="keyword">as</span>? <span class="type">NSString</span> ?? <span class="string">""</span></div><div class="line">    newAttachment.setValue(body.substring(to: <span class="number">80</span>), forKey: <span class="string">"caption"</span>)</div><div class="line"></div><div class="line">    <span class="comment">// 7. 下面需要将新建的Entity与source object、mapping 之间建立联系，如果在迁移数据接受的时候，此函数调用失败的话，数据会丢失.</span></div><div class="line">    manager.associate(sourceInstance: sInstance, withDestinationInstance: newAttachment, <span class="keyword">for</span>: mapping)</div><div class="line">  &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<ul>
<li><p>之前所讲的都是从v1-&gt;v2,从v2-&gt;v3,从v3-&gt;v4，但是这其实是最最简单的情况，但事实情况会比较复杂，因为你永远不知道用户此时是什么版本号？他们可以从v1-&gt;v4,也可以从v2-&gt;v4，那么这样一来就会比较复杂了.此时我们这里就需要进行自定义数据合并了.</p>
</li>
<li><p>我们要做的事情，是进行比较，要先从bundle中读取文件名，然后我们从文件名中进行判断，这个bundle是数据v2、v3还是v1.</p>
</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">NSManagedObjectModel</span> </span>&#123;</div><div class="line">  <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">func</span> <span class="title">modelURLs</span>(</span></div><div class="line">    <span class="title">in</span> <span class="title">modelFolder</span>: <span class="title">String</span>) -&gt; [<span class="title">URL</span>] &#123;</div><div class="line">    <span class="keyword">return</span> <span class="type">Bundle</span>.main</div><div class="line">      .urls(forResourcesWithExtension: <span class="string">"mom"</span>,</div><div class="line">      subdirectory: <span class="string">"<span class="subst">\(modelFolder)</span>.momd"</span>) ?? []</div><div class="line">  &#125;</div><div class="line">  <span class="class"><span class="keyword">class</span> <span class="title">func</span> <span class="title">modelVersionsFor</span>(</span></div><div class="line">    <span class="title">modelNamed</span> <span class="title">modelName</span>: <span class="title">String</span>) -&gt; [<span class="title">NSManagedObjectModel</span>] &#123;</div><div class="line">    <span class="keyword">return</span> modelURLs(<span class="keyword">in</span>: modelName)</div><div class="line">      .flatMap(<span class="type">NSManagedObjectModel</span>.<span class="keyword">init</span>)</div><div class="line">  &#125;</div><div class="line">  <span class="class"><span class="keyword">class</span> <span class="title">func</span> <span class="title">uncloudNotesModel</span>(</span></div><div class="line">    <span class="title">named</span> <span class="title">modelName</span>: <span class="title">String</span>) -&gt; <span class="title">NSManagedObjectModel</span> &#123;</div><div class="line">    <span class="keyword">let</span> model = modelURLs(<span class="keyword">in</span>: <span class="string">"UnCloudNotesDataModel"</span>)</div><div class="line">      .<span class="built_in">filter</span> &#123; $<span class="number">0</span>.lastPathComponent == <span class="string">"<span class="subst">\(modelName)</span>.mom"</span> &#125;</div><div class="line">      .first</div><div class="line">      .flatMap(<span class="type">NSManagedObjectModel</span>.<span class="keyword">init</span>)</div><div class="line">    <span class="keyword">return</span> model ?? <span class="type">NSManagedObjectModel</span>()</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>版本号之前的判断：</li>
</ul>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">var</span> <span class="title">version1</span>: <span class="type">NSManagedObjectModel &#123;</span></span></div><div class="line">   <span class="keyword">return</span> uncloudNotesModel(named: <span class="string">"UnCloudNotesDataModel"</span>)</div><div class="line"> &#125;</div><div class="line"> <span class="keyword">var</span> isVersion1: Bool &#123;</div><div class="line">   <span class="keyword">return</span> self == type(of: self).version1</div><div class="line"> &#125;</div><div class="line"> <span class="class"><span class="keyword">class</span> <span class="title">var</span> <span class="title">version2</span>: <span class="type">NSManagedObjectModel &#123;</span></span></div><div class="line">   <span class="keyword">return</span> uncloudNotesModel(named: <span class="string">"UnCloudNotesDataModel v2"</span>)</div><div class="line"> &#125;</div><div class="line"></div><div class="line"> <span class="keyword">var</span> isVersion2: Bool &#123;</div><div class="line">   <span class="keyword">return</span> self == type(of: self).version2</div><div class="line"> &#125;</div><div class="line"></div><div class="line"> <span class="class"><span class="keyword">class</span> <span class="title">var</span> <span class="title">version3</span>: <span class="type">NSManagedObjectModel &#123;</span></span></div><div class="line">   <span class="keyword">return</span> uncloudNotesModel(named: <span class="string">"UnCloudNotesDataModel v3"</span>)</div><div class="line"> &#125;</div><div class="line"></div><div class="line"> <span class="keyword">var</span> isVersion3: Bool &#123;</div><div class="line">   <span class="keyword">return</span> self == type(of: self).version3</div><div class="line"> &#125;</div><div class="line"></div><div class="line"> <span class="class"><span class="keyword">class</span> <span class="title">var</span> <span class="title">version4</span>: <span class="type">NSManagedObjectModel &#123;</span></span></div><div class="line">   <span class="keyword">return</span> uncloudNotesModel(named: <span class="string">"UnCloudNotesDataModel v4"</span>)</div><div class="line"> &#125;</div><div class="line"></div><div class="line"> <span class="keyword">var</span> isVersion4: Bool &#123;</div><div class="line">   <span class="keyword">return</span> self == type(of: self).version4</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<ul>
<li>啥时候进行数据迁移呢？</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> stack: <span class="type">CoreDataStack</span> &#123;</div><div class="line">  <span class="keyword">guard</span> enableMigrations,</div><div class="line">       !store(at: storeURL,</div><div class="line">         isCompatibleWithModel: currentModel)</div><div class="line">  <span class="keyword">else</span> &#123; <span class="keyword">return</span> <span class="type">CoreDataStack</span>(modelName: modelName) &#125;</div><div class="line">  performMigration()</div><div class="line">  <span class="keyword">return</span> <span class="type">CoreDataStack</span>(modelName: modelName)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 通过获取元数据，并且进行比较，如果需要更新的话，就会将数据返回</span></div><div class="line"></div><div class="line">  <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">store</span><span class="params">(at storeURL: URL,</span></span></div><div class="line">                     isCompatibleWithModel model: NSManagedObjectModel) -&gt; <span class="type">Bool</span> &#123;</div><div class="line">    <span class="keyword">let</span> storeMetadata = metadataForStoreAtURL(storeURL: storeURL)</div><div class="line">    <span class="keyword">return</span> model.isConfiguration(withName: <span class="literal">nil</span>, compatibleWithStoreMetadata:storeMetadata)</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">metadataForStoreAtURL</span><span class="params">(storeURL: URL)</span></span></div><div class="line">    -&gt; [<span class="type">String</span>: <span class="type">Any</span>] &#123;</div><div class="line">      <span class="keyword">let</span> metadata: [<span class="type">String</span>: <span class="type">Any</span>]</div><div class="line">      <span class="keyword">do</span> &#123;</div><div class="line">        metadata = <span class="keyword">try</span> <span class="type">NSPersistentStoreCoordinator</span></div><div class="line">          .metadataForPersistentStore(ofType: <span class="type">NSSQLiteStoreType</span>,</div><div class="line">                                      at: storeURL, options: <span class="literal">nil</span>)</div><div class="line">      &#125; <span class="keyword">catch</span> &#123;</div><div class="line">        metadata = [:]</div><div class="line">        <span class="built_in">print</span>(<span class="string">"Error retrieving metadata for store at URL:<span class="subst">\(storeURL)</span>: <span class="subst">\(error)</span>"</span>)</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">return</span> metadata</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<ul>
<li>数据如何进行合并呢？</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">migrateStoreAt</span><span class="params">(URL storeURL: URL,</span></span></div><div class="line">                             fromModel from:NSManagedObjectModel,</div><div class="line">                             toModel to:NSManagedObjectModel,</div><div class="line">                             mappingModel:NSMappingModel? = <span class="literal">nil</span>) &#123;</div><div class="line"></div><div class="line">   <span class="comment">// 1.创建migration manager的实例对象</span></div><div class="line">   <span class="keyword">let</span> migrationManager =</div><div class="line">     <span class="type">NSMigrationManager</span>(sourceModel: from, destinationModel: to)</div><div class="line"></div><div class="line">   <span class="comment">// 2.如果在方法中传递mapping model的对象的话，我们可以使用它，否则我们就创建它.</span></div><div class="line">   <span class="keyword">var</span> migrationMappingModel: <span class="type">NSMappingModel</span></div><div class="line">   <span class="keyword">if</span> <span class="keyword">let</span> mappingModel = mappingModel &#123;</div><div class="line">     migrationMappingModel = mappingModel</div><div class="line">   &#125; <span class="keyword">else</span> &#123;</div><div class="line">     migrationMappingModel = <span class="keyword">try</span>! <span class="type">NSMappingModel</span></div><div class="line">       .inferredMappingModel(</div><div class="line">         forSourceModel: from, destinationModel: to)</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="comment">// 3</span></div><div class="line">   <span class="keyword">let</span> targetURL = storeURL.deletingLastPathComponent()</div><div class="line">   <span class="keyword">let</span> destinationName = storeURL.lastPathComponent + <span class="string">"~1"</span></div><div class="line">   <span class="keyword">let</span> destinationURL = targetURL</div><div class="line">     .appendingPathComponent(destinationName)</div><div class="line"></div><div class="line">   <span class="built_in">print</span>(<span class="string">"From Model: <span class="subst">\(from.entityVersionHashesByName)</span>"</span>)</div><div class="line">   <span class="built_in">print</span>(<span class="string">"To Model: <span class="subst">\(to.entityVersionHashesByName)</span>"</span>)</div><div class="line">   <span class="built_in">print</span>(<span class="string">"Migrating store <span class="subst">\(storeURL)</span> to <span class="subst">\(destinationURL)</span>"</span>)</div><div class="line">   <span class="built_in">print</span>(<span class="string">"Mapping model: <span class="subst">\(String(describing: mappingModel)</span>)"</span>)</div><div class="line"></div><div class="line">   <span class="comment">// 4</span></div><div class="line">   <span class="keyword">let</span> success: <span class="type">Bool</span></div><div class="line">   <span class="keyword">do</span> &#123;</div><div class="line">     <span class="keyword">try</span> migrationManager.migrateStore(from: storeURL,</div><div class="line">                                       sourceType:<span class="type">NSSQLiteStoreType</span>,</div><div class="line">                                       options:<span class="literal">nil</span>,</div><div class="line">                                       with:migrationMappingModel,</div><div class="line">                                       toDestinationURL:destinationURL,</div><div class="line">                                       destinationType:<span class="type">NSSQLiteStoreType</span>,</div><div class="line">                                       destinationOptions:<span class="literal">nil</span>)</div><div class="line">     success = <span class="literal">true</span></div><div class="line">   &#125; <span class="keyword">catch</span> &#123;</div><div class="line">     success = <span class="literal">false</span></div><div class="line">     <span class="built_in">print</span>(<span class="string">"Migration failed: <span class="subst">\(error)</span>"</span>)</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="comment">// 5</span></div><div class="line">   <span class="keyword">if</span> success &#123;</div><div class="line">     <span class="built_in">print</span>(<span class="string">"Migration Completed Successfully"</span>)</div><div class="line"></div><div class="line">     <span class="keyword">let</span> fileManager = <span class="type">FileManager</span>.<span class="keyword">default</span></div><div class="line">     <span class="keyword">do</span> &#123;</div><div class="line">       <span class="keyword">try</span> fileManager.removeItem(at: storeURL)</div><div class="line">       <span class="keyword">try</span> fileManager.moveItem(at: destinationURL,</div><div class="line">                                to: storeURL)</div><div class="line">     &#125; <span class="keyword">catch</span> &#123;</div><div class="line">       <span class="built_in">print</span>(<span class="string">"Error migrating <span class="subst">\(error)</span>"</span>)</div><div class="line">     &#125;</div><div class="line">   &#125;</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<ul>
<li>如何一步步的合并数据，这里调用了一个递归函数，从而时间一步步的合并数据：</li>
</ul>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">func performMigration() &#123;</div><div class="line">    <span class="keyword">if</span> !currentModel.isVersion4 &#123;</div><div class="line">      fatalError(<span class="string">"Can only handle migrations to version 4!"</span>)</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> <span class="keyword">let</span> storeModel = self.storeModel &#123;</div><div class="line">      <span class="keyword">if</span> storeModel.isVersion1 &#123;</div><div class="line">        <span class="keyword">let</span> destinationModel = NSManagedObjectModel.version2</div><div class="line"></div><div class="line">        migrateStoreAt(URL: storeURL,</div><div class="line">                       fromMode<span class="variable">l:</span> storeModel,</div><div class="line">                       toMode<span class="variable">l:</span> destinationModel)</div><div class="line"></div><div class="line">        performMigration()</div><div class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> storeModel.isVersion2 &#123;</div><div class="line">        <span class="keyword">let</span> destinationModel = NSManagedObjectModel.version3</div><div class="line">        <span class="keyword">let</span> mappingModel = NSMappingModel(from: nil,</div><div class="line">                                          forSourceMode<span class="variable">l:</span> storeModel,</div><div class="line">                                          destinationMode<span class="variable">l:</span> destinationModel)</div><div class="line"></div><div class="line">        migrateStoreAt(URL: storeURL,</div><div class="line">                       fromMode<span class="variable">l:</span> storeModel,</div><div class="line">                       toMode<span class="variable">l:</span> destinationModel,</div><div class="line">                       mappingMode<span class="variable">l:</span> mappingModel)</div><div class="line"></div><div class="line">        performMigration()</div><div class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> storeModel.isVersion3 &#123;</div><div class="line">        <span class="keyword">let</span> destinationModel = NSManagedObjectModel.version4</div><div class="line">        <span class="keyword">let</span> mappingModel = NSMappingModel(from: nil,</div><div class="line">                                          forSourceMode<span class="variable">l:</span> storeModel,</div><div class="line">                                          destinationMode<span class="variable">l:</span> destinationModel)</div><div class="line"></div><div class="line">        migrateStoreAt(URL: storeURL,</div><div class="line">                       fromMode<span class="variable">l:</span> storeModel,</div><div class="line">                       toMode<span class="variable">l:</span> destinationModel,</div><div class="line">                       mappingMode<span class="variable">l:</span> mappingModel)</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;记得在两年前我去面试的时候，面试官关于Core-data的问题，他们大都只会问你一个问题，基本上你只要能够答出来，就说明还是使用过Core-Data，这个问题就是：“如何迁移Core-Data的数据库”？因为谁都无法预料业务的发展，以及数据库的修改，所以这个问题也是必然会发生的。这里重点列举几个Core-Data数据库迁移的问题：&quot;&gt;&lt;a href=&quot;#记得在两年前我去面试的时候，面试官关于Core-data的问题，他们大都只会问你一个问题，基本上你只要能够答出来，就说明还是使用过Core-Data，这个问题就是：“如何迁移Core-Data的数据库”？因为谁都无法预料业务的发展，以及数据库的修改，所以这个问题也是必然会发生的。这里重点列举几个Core-Data数据库迁移的问题：&quot; class=&quot;headerlink&quot; title=&quot;记得在两年前我去面试的时候，面试官关于Core data的问题，他们大都只会问你一个问题，基本上你只要能够答出来，就说明还是使用过Core Data，这个问题就是：“如何迁移Core Data的数据库”？因为谁都无法预料业务的发展，以及数据库的修改，所以这个问题也是必然会发生的。这里重点列举几个Core Data数据库迁移的问题：&quot;&gt;&lt;/a&gt;记得在两年前我去面试的时候，面试官关于Core data的问题，他们大都只会问你一个问题，基本上你只要能够答出来，就说明还是使用过Core Data，这个问题就是：“如何迁移Core Data的数据库”？因为谁都无法预料业务的发展，以及数据库的修改，所以这个问题也是必然会发生的。这里重点列举几个Core Data数据库迁移的问题：&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;首先要说一下，如果你的App，只是缓存一些离线数据的话，就没必要考虑什么数据库迁移了，因为你只需要在新版本中，删除之前的core data数据，新建一个就可以了&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="日志" scheme="http://www.ghcoder.com/categories/%E6%97%A5%E5%BF%97/"/>
    
    
      <category term="Core Data, Swift" scheme="http://www.ghcoder.com/tags/Core-Data-Swift/"/>
    
  </entry>
  
  <entry>
    <title>学习NSFetchedResultsController, 获取数据部分(五)</title>
    <link href="http://www.ghcoder.com/2017/08/21/20170821/"/>
    <id>http://www.ghcoder.com/2017/08/21/20170821/</id>
    <published>2017-08-21T03:39:12.000Z</published>
    <updated>2017-08-21T11:08:26.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="上一周一直在忙着写项目，书虽然看完了，但是还是想写写笔记，加深一下记忆，在第四章的时候，其实通过NSFetchReques一些值的修改，其实我们已经可以开始正常的使用core-data-并且可以按照我们的意愿来过滤数据，并且进行排序。这一章重点讲的是NSFetchedResultsController。"><a href="#上一周一直在忙着写项目，书虽然看完了，但是还是想写写笔记，加深一下记忆，在第四章的时候，其实通过NSFetchReques一些值的修改，其实我们已经可以开始正常的使用core-data-并且可以按照我们的意愿来过滤数据，并且进行排序。这一章重点讲的是NSFetchedResultsController。" class="headerlink" title="上一周一直在忙着写项目，书虽然看完了，但是还是想写写笔记，加深一下记忆，在第四章的时候，其实通过NSFetchReques一些值的修改，其实我们已经可以开始正常的使用core data, 并且可以按照我们的意愿来过滤数据，并且进行排序。这一章重点讲的是NSFetchedResultsController。"></a>上一周一直在忙着写项目，书虽然看完了，但是还是想写写笔记，加深一下记忆，在第四章的时候，其实通过NSFetchReques一些值的修改，其实我们已经可以开始正常的使用core data, 并且可以按照我们的意愿来过滤数据，并且进行排序。这一章重点讲的是<strong>NSFetchedResultsController</strong>。</h4><a id="more"></a>
<ul>
<li>什么是NSFetchedResultsController? 干什么用的？</li>
<li>其实操作Core Data,我们做的最多的操作其实就是，从Core Data中获取数据，然后放入到Array中，然后设置DataSource，然后刷新TableView, Apple就是为了解决这种麻烦，所以才产生了<code>NSFetchedResultsController</code>，但是<code>NSFetchedResultsController</code>不同于其他的<code>ViewController</code>,因为它是没有界面的，他主要的目的是为了异步获取的数据用的。说白了，<code>NSFetchedResultsController</code>其实就是<code>NSFetchRequest Result</code>数据的封装。从继承关系上也可以看出来：</li>
</ul>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">open</span> <span class="class"><span class="keyword">class</span> <span class="title">NSFetchedResultsController</span>&lt;<span class="type">ResultType</span>&gt; : <span class="type">NSObject where ResultType : NSFetchRequestResult &#123;&#125;</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="type">UIViewController &#123;&#125;</span></span></div></pre></td></tr></table></figure>
<ul>
<li>和<code>NSFetchRequest</code>很用法很类似的：</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 1</span></div><div class="line"><span class="keyword">let</span> fetchRequest: <span class="type">NSFetchRequest</span>&lt;<span class="type">Team</span>&gt; = <span class="type">Team</span>.fetchRequest()</div><div class="line"><span class="keyword">let</span> <span class="built_in">sort</span> = <span class="type">NSSortDescriptor</span>(key: #keyPath(<span class="type">Team</span>.teamName),</div><div class="line">  ascending: <span class="literal">true</span>)</div><div class="line">fetchRequest.sortDescriptors = [<span class="built_in">sort</span>]</div><div class="line"></div><div class="line"><span class="comment">// 2</span></div><div class="line">fetchedResultsController = <span class="type">NSFetchedResultsController</span>(</div><div class="line">  fetchRequest: fetchRequest,</div><div class="line">  managedObjectContext: coreDataStack.managedContext,</div><div class="line">  sectionNameKeyPath: <span class="literal">nil</span>,</div><div class="line">  cacheName: <span class="literal">nil</span>)</div><div class="line"><span class="comment">// 3</span></div><div class="line"><span class="keyword">do</span> &#123;</div><div class="line">  <span class="keyword">try</span> fetchedResultsController.performFetch()</div><div class="line">&#125; <span class="keyword">catch</span> <span class="keyword">let</span> error <span class="keyword">as</span> <span class="type">NSError</span> &#123;</div><div class="line">  <span class="built_in">print</span>(<span class="string">"Fetching error: <span class="subst">\(error)</span>, <span class="subst">\(error.userInfo)</span>"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>NSFetchedResultsController主要是为了协调Core Data和TableView,但是仍然需要传递NSFetchRequest, 记住NSFetchRequest是可以高度自定义的，可以传递<code>descriptiors</code>/ <code>predicate</code></li>
<li><p>实例化NSFetchedResultsController需要四个参数，第二个参数就是<code>NSManagedObjectContext</code>，需要这个<code>managedContext</code>来进行搜索 ,剩下的<code>sectionNameKeyPath</code>,<code>cacheName</code></p>
</li>
<li><p><strong>NSFetchedResultsController里面必须至少要有一个sort descriptor</strong>否则会直接crash</p>
</li>
</ul>
<h4 id="如何获取数据"><a href="#如何获取数据" class="headerlink" title="如何获取数据"></a>如何获取数据</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">numberOfSections</span><span class="params">(<span class="keyword">in</span> tableView: UITableView)</span></span> -&gt; <span class="type">Int</span> &#123;</div><div class="line">  <span class="keyword">guard</span> <span class="keyword">let</span> sections = fetchedResultsController.sections <span class="keyword">else</span> &#123;</div><div class="line"><span class="keyword">return</span> <span class="number">0</span> &#125;</div><div class="line">  <span class="keyword">return</span> sections.<span class="built_in">count</span></div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(<span class="number">_</span> tableView: UITableView,</span></span></div><div class="line">               numberOfRowsInSection section: Int)</div><div class="line">-&gt; <span class="type">Int</span> &#123;</div><div class="line">  <span class="keyword">guard</span> <span class="keyword">let</span> sectionInfo =</div><div class="line">    fetchedResultsController.sections?[section] <span class="keyword">else</span> &#123;</div><div class="line"><span class="keyword">return</span> <span class="number">0</span> &#125;</div><div class="line">  <span class="keyword">return</span> sectionInfo.numberOfObjects</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>通过调用<code>sections</code>的属性，返回的数组中，包含的Object中，都遵循了<code>NSFetchedResultsSectionInfo</code>的协议，这个轻量级的协议，能够调用<code>title</code>/<code>number</code></li>
<li>如果获取相应的对象呢？</li>
</ul>
<figure class="highlight ceylon"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> team = fetchedResultsController.<span class="keyword">object</span>(at: indexPath)</div></pre></td></tr></table></figure>
<h4 id="如何更改数据"><a href="#如何更改数据" class="headerlink" title="如何更改数据"></a>如何更改数据</h4><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">let team = fetchedResultsController.object(at: indexPath)</div><div class="line">  team<span class="selector-class">.wins</span> = team<span class="selector-class">.wins</span> + <span class="number">1</span></div><div class="line">  coreDataStack.saveContext()</div></pre></td></tr></table></figure>
<h4 id="如何将数据分组"><a href="#如何将数据分组" class="headerlink" title="如何将数据分组"></a>如何将数据分组</h4><ul>
<li>可以根据我们之前创建的Entity对象中的字段，任意进行分组，例如我们的Entity中存在一个名为<code>qualifyingZone</code>的String的字段,来进行分组，只需要如下的修改：</li>
</ul>
<figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">fetchedResultsController = NSFetchedResultsController(</div><div class="line"><span class="symbol">  fetchRequest:</span> fetchRequest,</div><div class="line"><span class="symbol">  managedObjectContext:</span> coreDataStack.managedContext,</div><div class="line"><span class="symbol">  sectionNameKeyPath:</span> <span class="meta">#keyPath(Team.qualifyingZone),</span></div><div class="line"><span class="symbol">  cacheName:</span> nil)</div></pre></td></tr></table></figure>
<ul>
<li>这里我们只是传入了一个#keyPath(),根据之前的知识，这个字段的意思会在编译的时候，去寻找Team下面的qualifyingZone。</li>
<li>这个字段又是如何分组的呢？首先它是先讲这些最为Key的字段放在一个Section中（数组中），然后在回更加每个不同的字段去生成不同的数据。</li>
<li><strong>通过#keyPath,可以深入到Core Data中的relationship来查询属性值</strong></li>
<li>虽然当时<code>sectionNameKeyPath</code>但是发现，数据的排序还是更加首字母的？这是因为我没有设置<code>NSSortDescriptor</code>，修改代码如下：</li>
</ul>
<figure class="highlight lasso"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> zoneSort = NSSortDescriptor(</div><div class="line">  key: #keyPath(Team.qualifyingZone), <span class="keyword">ascending</span>: <span class="literal">true</span>)</div><div class="line"><span class="keyword">let</span> scoreSort = NSSortDescriptor(</div><div class="line">  key: #keyPath(Team.wins), <span class="keyword">ascending</span>: <span class="literal">false</span>)</div><div class="line"><span class="keyword">let</span> nameSort = NSSortDescriptor(</div><div class="line">  key: #keyPath(Team.teamName), <span class="keyword">ascending</span>: <span class="literal">true</span>)</div><div class="line">fetchRequest.sortDescriptors = <span class="meta">[</span>zoneSort, scoreSort, nameSort<span class="meta">]</span></div></pre></td></tr></table></figure>
<ul>
<li>根据数组的排序，先根据<code>Team.qualifyingZone</code>排序，然后根据<code>Team.wins</code>排序，最后根据<code>Team.teamName</code>来排序。</li>
</ul>
<h4 id="缓存数据"><a href="#缓存数据" class="headerlink" title="缓存数据"></a>缓存数据</h4><figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">fetchedResultsController = NSFetchedResultsController(</div><div class="line"><span class="symbol">  fetchRequest:</span> fetchRequest,</div><div class="line"><span class="symbol">  managedObjectContext:</span> coreDataStack.managedContext,</div><div class="line"><span class="symbol">  sectionNameKeyPath:</span> <span class="meta">#keyPath(Team.qualifyingZone),</span></div><div class="line"><span class="symbol">  cacheName:</span> <span class="string">"worldCup"</span>)</div></pre></td></tr></table></figure>
<ul>
<li>数据分类是很耗性能，避免每次都去分类数据，可以通过缓存，如何通过缓存呢？</li>
<li>直接添加一个字符串的key，这样就可以将数据缓存到磁盘中去了。</li>
</ul>
<h4 id="监听数据变化"><a href="#监听数据变化" class="headerlink" title="监听数据变化"></a>监听数据变化</h4><ul>
<li>NSFetchedResultsController可以监听数据集的变化，并且通知他的代理，通过实现代理方法，可以做响应的操作。</li>
<li><strong>这里代理的触发还是需要通过设置NSManagedObjectContext,如果在项目中存在多个Managed Object Context的话，那么代理的方法是不会触发的，除非我们保存数据，并且合并context</strong></li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// MARK: - NSFetchedResultsControllerDelegate</span></div><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">ViewController</span>: <span class="title">NSFetchedResultsControllerDelegate</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">func</span> <span class="title">controllerWillChangeContent</span><span class="params">(<span class="number">_</span> controller: NSFetchedResultsController&lt;NSFetchRequestResult&gt;)</span></span> &#123;</div><div class="line">    tableView.beginUpdates()</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">func</span> <span class="title">controller</span><span class="params">(<span class="number">_</span> controller: NSFetchedResultsController&lt;NSFetchRequestResult&gt;,</span></span></div><div class="line">                  didChange anObject: Any,</div><div class="line">                  at indexPath: IndexPath?,</div><div class="line">                  <span class="keyword">for</span> type: NSFetchedResultsChangeType,</div><div class="line">                  newIndexPath: IndexPath?) &#123;</div><div class="line"></div><div class="line">    <span class="keyword">switch</span> type &#123;</div><div class="line">    <span class="keyword">case</span> .insert:</div><div class="line">      tableView.insertRows(at: [newIndexPath!], with: .automatic)</div><div class="line">    <span class="keyword">case</span> .delete:</div><div class="line">      tableView.deleteRows(at: [indexPath!], with: .automatic)</div><div class="line">    <span class="keyword">case</span> .update:</div><div class="line">      <span class="keyword">let</span> cell = tableView.cellForRow(at: indexPath!) <span class="keyword">as</span>! <span class="type">TeamCell</span></div><div class="line">      configure(cell: cell, <span class="keyword">for</span>: indexPath!)</div><div class="line">    <span class="keyword">case</span> .move:</div><div class="line">      tableView.deleteRows(at: [indexPath!], with: .automatic)</div><div class="line">      tableView.insertRows(at: [newIndexPath!], with: .automatic)</div><div class="line">  &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">func</span> <span class="title">controller</span><span class="params">(<span class="number">_</span> controller: NSFetchedResultsController&lt;NSFetchRequestResult&gt;,</span></span></div><div class="line">                  didChange sectionInfo: NSFetchedResultsSectionInfo,</div><div class="line">                  atSectionIndex sectionIndex: Int,</div><div class="line">                  <span class="keyword">for</span> type: NSFetchedResultsChangeType) &#123;</div><div class="line"></div><div class="line">    <span class="keyword">let</span> indexSet = <span class="type">IndexSet</span>(integer: sectionIndex)</div><div class="line"></div><div class="line">    <span class="keyword">switch</span> type &#123;</div><div class="line">    <span class="keyword">case</span> .insert:</div><div class="line">      tableView.insertSections(indexSet, with: .automatic)</div><div class="line">    <span class="keyword">case</span> .delete:</div><div class="line">      tableView.deleteSections(indexSet, with: .automatic)</div><div class="line">    <span class="keyword">default</span>:</div><div class="line">      <span class="keyword">break</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">func</span> <span class="title">controllerDidChangeContent</span><span class="params">(<span class="number">_</span> controller: NSFetchedResultsController&lt;NSFetchRequestResult&gt;)</span></span> &#123;</div><div class="line">    tableView.endUpdates()</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="添加Entity"><a href="#添加Entity" class="headerlink" title="添加Entity"></a>添加Entity</h4><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">let team = Team(</div><div class="line">    context: self<span class="selector-class">.coreDataStack</span><span class="selector-class">.managedContext</span>)</div><div class="line">  team<span class="selector-class">.teamName</span> = nameTextField<span class="selector-class">.text</span></div><div class="line">  team<span class="selector-class">.qualifyingZone</span> = zoneTextField<span class="selector-class">.text</span></div><div class="line">  team<span class="selector-class">.imageName</span> = <span class="string">"wenderland-flag"</span></div><div class="line">  self<span class="selector-class">.coreDataStack</span><span class="selector-class">.saveContext</span>()</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;上一周一直在忙着写项目，书虽然看完了，但是还是想写写笔记，加深一下记忆，在第四章的时候，其实通过NSFetchReques一些值的修改，其实我们已经可以开始正常的使用core-data-并且可以按照我们的意愿来过滤数据，并且进行排序。这一章重点讲的是NSFetchedResultsController。&quot;&gt;&lt;a href=&quot;#上一周一直在忙着写项目，书虽然看完了，但是还是想写写笔记，加深一下记忆，在第四章的时候，其实通过NSFetchReques一些值的修改，其实我们已经可以开始正常的使用core-data-并且可以按照我们的意愿来过滤数据，并且进行排序。这一章重点讲的是NSFetchedResultsController。&quot; class=&quot;headerlink&quot; title=&quot;上一周一直在忙着写项目，书虽然看完了，但是还是想写写笔记，加深一下记忆，在第四章的时候，其实通过NSFetchReques一些值的修改，其实我们已经可以开始正常的使用core data, 并且可以按照我们的意愿来过滤数据，并且进行排序。这一章重点讲的是NSFetchedResultsController。&quot;&gt;&lt;/a&gt;上一周一直在忙着写项目，书虽然看完了，但是还是想写写笔记，加深一下记忆，在第四章的时候，其实通过NSFetchReques一些值的修改，其实我们已经可以开始正常的使用core data, 并且可以按照我们的意愿来过滤数据，并且进行排序。这一章重点讲的是&lt;strong&gt;NSFetchedResultsController&lt;/strong&gt;。&lt;/h4&gt;
    
    </summary>
    
      <category term="日志" scheme="http://www.ghcoder.com/categories/%E6%97%A5%E5%BF%97/"/>
    
    
      <category term="Core Data, Swift" scheme="http://www.ghcoder.com/tags/Core-Data-Swift/"/>
    
  </entry>
  
  <entry>
    <title>学习CoreData, 获取数据部分(四)</title>
    <link href="http://www.ghcoder.com/2017/08/10/20170810/"/>
    <id>http://www.ghcoder.com/2017/08/10/20170810/</id>
    <published>2017-08-10T01:29:12.000Z</published>
    <updated>2017-08-21T11:08:55.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="前面三章都是一些很基础的操作以及概念，之前我们取数据，用的最多的也就是使用NSFetchRequest中的NSPredicate-我们通过修改相应的NSPredicate值来获取到我们想要的数据。所有这一章主要讲解的是获取数据的相关操作以及技巧。"><a href="#前面三章都是一些很基础的操作以及概念，之前我们取数据，用的最多的也就是使用NSFetchRequest中的NSPredicate-我们通过修改相应的NSPredicate值来获取到我们想要的数据。所有这一章主要讲解的是获取数据的相关操作以及技巧。" class="headerlink" title="前面三章都是一些很基础的操作以及概念，之前我们取数据，用的最多的也就是使用NSFetchRequest中的NSPredicate,我们通过修改相应的NSPredicate值来获取到我们想要的数据。所有这一章主要讲解的是获取数据的相关操作以及技巧。"></a>前面三章都是一些很基础的操作以及概念，之前我们取数据，用的最多的也就是使用NSFetchRequest中的NSPredicate,我们通过修改相应的NSPredicate值来获取到我们想要的数据。所有这一章主要讲解的是获取数据的相关操作以及技巧。</h4><ul>
<li>之前用到的操作是：创建一个<code>NSFetchRequest</code>的实例，然后通过<code>NSManagedObjectContext</code>这个对象来直接修改<code>NSFetchRequest</code>就可以实现了。</li>
<li>仅仅获取<code>NSFetchRequest</code>的方法就有5种:</li>
</ul>
<a id="more"></a>
<figure class="highlight nix"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">// <span class="number">1</span>:通过最普通的NSFetchRequest&lt;Venue&gt;()的方法来实例化NSFetchRequest的对象，紧接着必须使用NSEntityDescription来获取相应的Entity对象，然后直接通过set entity的值。</div><div class="line"></div><div class="line"><span class="keyword">let</span> <span class="attr">fetchRequest1</span> = NSFetchRequest&lt;Venue&gt;()</div><div class="line"><span class="keyword">let</span> <span class="attr">entity</span> =</div><div class="line">  NSEntityDescription.entity(forEntityName: <span class="string">"Venue"</span>,</div><div class="line">                             <span class="keyword">in</span>: managedContext)!</div><div class="line">fetchRequest1.<span class="attr">entity</span> = entity</div><div class="line"></div><div class="line"></div><div class="line">// <span class="number">2</span>:这里直接通过NSFetchRequest的实例化方法传入entityName值，直接将上面的步骤省略了，避免使用NSEntityDescription的对象。</div><div class="line"></div><div class="line"><span class="keyword">let</span> <span class="attr">fetchRequest2</span> = NSFetchRequest&lt;Venue&gt;(entityName: <span class="string">"Venue"</span>)</div><div class="line"></div><div class="line"></div><div class="line">// <span class="number">3</span>: 这个又在第二部的上面做出了相应的省略，当你生成NSManagedObject subclass 的对象，同时你这个对象也会生成一个类方法，直接返回NSFetchRequest，通过这样能够直接与相应的Entity产生联系。</div><div class="line"></div><div class="line"><span class="keyword">let</span> fetchRequest3: NSFetchRequest&lt;Venue&gt; = Venue.fetchRequest()</div><div class="line"></div><div class="line"></div><div class="line">// <span class="number">4</span>: 在三章里分析managedObjectModel就说过，这里可以直接通过managedObjectModel来获取NSFetchRequest。这里在xCode回有个可视化的操作，就是可以添加Request的操作。</div><div class="line"></div><div class="line"><span class="keyword">let</span> <span class="attr">fetchRequest4</span> =</div><div class="line">  managedObjectModel.fetchRequestTemplate(forName: <span class="string">"venueFR"</span>)</div><div class="line"></div><div class="line"></div><div class="line">// <span class="number">5</span>: 这里第五个方法其实与第四个很相近的，都是通过managedObjectModel来获取NSFetchRequest，不同的是这里多穿了一个substitutionVariables，这个值是用在predicate中的，从而进一步来获取你想要的值。</div><div class="line"></div><div class="line"><span class="keyword">let</span> <span class="attr">fetchRequest5</span> =</div><div class="line">  managedObjectModel.fetchRequestFromTemplate(</div><div class="line">    withName: <span class="string">"venueFR"</span>,</div><div class="line">    substitutionVariables: [<span class="string">"NAME"</span> : <span class="string">"Vivi Bubble Tea"</span>])</div></pre></td></tr></table></figure>
<ul>
<li>其实<code>NSFetchRequest</code>是一个很普通的类，但是如果你仔细研究一下<code>NSFetchRequest</code>的实例化，你就会发现<code>&lt;ResultType : NSFetchRequestResult&gt;</code>这个参数，这个参数的作用就是准备具体说明了你想要获取数据的格式:例如之前你获取的是<code>[Venue]</code>而不是<code>[AnyObject]</code>。</li>
<li>点击<code>xxx.xcdatamodeld</code>,并且长按<code>Add Entity</code>,选择<code>Add Fetch Request</code>，这样就创建了一个<code>NSFetchRequest</code>的对象。但是通过这样创建的<code>NSFetchRequest</code>的<strong>对象是无法修改的。这里需要注意一下</strong>，并且通过修改这里<code>Fetch all</code>选择相应的model，当然这里也可以通过添加另外的<code>predicate</code>的值，来对我们需要的数据进行操作。</li>
<li>那么如何来获取我们之前在模板中创建的<code>NSFetchRequest</code>对象呢？这里我们用到是通过<code>managedObjectModel</code>来获取相应的<code>Request</code>:</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">guard</span> <span class="keyword">let</span> model =</div><div class="line">  coreDataStack.managedContext</div><div class="line">    .persistentStoreCoordinator?.managedObjectModel,</div><div class="line">  <span class="keyword">let</span> fetchRequest = model</div><div class="line">    .fetchRequestTemplate(forName: <span class="string">"FetchRequest"</span>)</div><div class="line">    <span class="keyword">as</span>? <span class="type">NSFetchRequest</span>&lt;<span class="type">Venue</span>&gt; <span class="keyword">else</span> &#123;</div><div class="line"><span class="keyword">return</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><code>NSFetchRequest</code>有一个<code>resultType</code>的属性值，之前我们使用的都是它的默认值<code>NSManagedObjectResultType</code>,其实它是一个枚举值，一共可以获取四中不同的类型：</li>
</ul>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.managedObjectResultType</span>: 返回的响应的数据(默认的值)</div><div class="line"><span class="selector-class">.countResultType</span>: 返回的匹配数据的个数</div><div class="line"><span class="selector-class">.dictionaryResultType</span>: 以字典的形式来返回相应的数据，包括count，匹配的数据。</div><div class="line"><span class="selector-class">.managedObjectIDResultType</span>: 返回匹配数据的唯一标示符</div></pre></td></tr></table></figure>
<ul>
<li>这里创建<code>Predicate</code>的方式之前我们也已经看到了,这里的#keyPath, 这个在编译的时候，编译器就会一级级的找相应的属性值，是否存在写错的情况：</li>
</ul>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">lazy <span class="selector-tag">var</span> cheapVenuePredicate: NSPredicate = &#123;</div><div class="line">  return NSPredicate(format: <span class="string">"%K == %@"</span>,</div><div class="line">    #keyPath(Venue<span class="selector-class">.priceInfo</span><span class="selector-class">.priceCategory</span>), <span class="string">"$"</span>)</div><div class="line">&#125;()</div></pre></td></tr></table></figure>
<ul>
<li>获取count：</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"> <span class="function"><span class="keyword">func</span> <span class="title">populateCheapVenueCountLabel</span><span class="params">()</span></span> &#123;</div><div class="line">    <span class="keyword">let</span> fetchRequest =</div><div class="line">      <span class="type">NSFetchRequest</span>&lt;<span class="type">NSNumber</span>&gt;(entityName: <span class="string">"Venue"</span>)</div><div class="line">    fetchRequest.resultType = .countResultType</div><div class="line">    fetchRequest.predicate = cheapVenuePredicate</div><div class="line">    <span class="keyword">do</span> &#123;</div><div class="line">      <span class="keyword">let</span> countResult =</div><div class="line">        <span class="keyword">try</span> coreDataStack.managedContext.fetch(fetchRequest)</div><div class="line">      <span class="keyword">let</span> <span class="built_in">count</span> = countResult.first!.intValue</div><div class="line">      firstPriceCategoryLabel.text =</div><div class="line">        <span class="string">"<span class="subst">\(<span class="built_in">count</span>)</span> bubble tea places"</span></div><div class="line">    &#125; <span class="keyword">catch</span> <span class="keyword">let</span> error <span class="keyword">as</span> <span class="type">NSError</span> &#123;</div><div class="line">      <span class="built_in">print</span>(<span class="string">"Count not fetch <span class="subst">\(error)</span>, <span class="subst">\(error.userInfo)</span>"</span>)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    -----------------</div><div class="line"></div><div class="line"></div><div class="line">     <span class="keyword">let</span> fetchRequest: <span class="type">NSFetchRequest</span>&lt;<span class="type">Venue</span>&gt; = <span class="type">Venue</span>.fetchRequest()</div><div class="line">  fetchRequest.predicate = expensiveVenuePredicate</div><div class="line">  <span class="keyword">do</span> &#123;</div><div class="line">    <span class="keyword">let</span> <span class="built_in">count</span> =</div><div class="line">      <span class="keyword">try</span> coreDataStack.managedContext.<span class="built_in">count</span>(<span class="keyword">for</span>: fetchRequest)</div><div class="line">    thirdPriceCategoryLabel.text = <span class="string">"<span class="subst">\(<span class="built_in">count</span>)</span> bubble tea places"</span></div><div class="line">  &#125; <span class="keyword">catch</span> <span class="keyword">let</span> error <span class="keyword">as</span> <span class="type">NSError</span> &#123;</div><div class="line">    <span class="built_in">print</span>(<span class="string">"Count not fetch <span class="subst">\(error)</span>, <span class="subst">\(error.userInfo)</span>"</span>)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>上面所有的操作都是需要把所有的相关数据载入到内存中去，然后再去计算个数，core data 能够快速找到数据的“总和、平均值、最大、最小”：</li>
</ul>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">func populateDealsCountLabel() &#123;</div><div class="line"><span class="comment">// 1</span></div><div class="line">  let fetchRequest =</div><div class="line">    NSFetchRequest&lt;NSDictionary&gt;(entityName: <span class="string">"Venue"</span>)</div><div class="line">  fetchRequest<span class="selector-class">.resultType</span> = <span class="selector-class">.dictionaryResultType</span></div><div class="line"></div><div class="line"></div><div class="line">  <span class="comment">// 2: 这边你为了获取总和生成了一个NSExpressionDescription的对象，并且set了一个name的值，便于自己能够从字典中找到自己想要的那个值：</span></div><div class="line">  let sumExpressionDesc = NSExpressionDescription()</div><div class="line">  sumExpressionDesc<span class="selector-class">.name</span> = <span class="string">"sumDeals"</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// 3: 首先你生成了一个NSExpression的变量来确定你需要哪个字段来计算总和，其次生成了一个NSExpression来变量来确定你要运行的函数，最后定义了返回数据的类型是int32位：</span></div><div class="line">  let specialCountExp =</div><div class="line">    NSExpression(forKeyPath: #keyPath(Venue.specialCount))</div><div class="line">  sumExpressionDesc<span class="selector-class">.expression</span> =</div><div class="line">    NSExpression(forFunction: <span class="string">"sum:"</span>,</div><div class="line">                 arguments: [specialCountExp])</div><div class="line">  sumExpressionDesc<span class="selector-class">.expressionResultType</span> =</div><div class="line">    <span class="selector-class">.integer32AttributeType</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// 4：将自己设置的东西都告诉给FetchRequest</span></div><div class="line">  fetchRequest<span class="selector-class">.propertiesToFetch</span> = [sumExpressionDesc]</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// 5:根据上面的定义，我们需要调用的是sum函数，将我们Venue.specialCount所有的字段都加起来，丢在一个字典中，字典的key为sumDeals:</span></div><div class="line"></div><div class="line">  do &#123;</div><div class="line">    let results =</div><div class="line">      try coreDataStack<span class="selector-class">.managedContext</span><span class="selector-class">.fetch</span>(fetchRequest)</div><div class="line">    let resultDict = results.first!</div><div class="line">    let numDeals = resultDict[<span class="string">"sumDeals"</span>]!</div><div class="line">    numDealsLabel<span class="selector-class">.text</span> = <span class="string">"\(numDeals) total deals"</span></div><div class="line">  &#125; catch let error as NSError &#123;</div><div class="line">    print(<span class="string">"Count not fetch \(error), \(error.userInfo)"</span>)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><p>这里除了支持sum，还有其他函数支持吗？<strong>count,min,max,median,mode,absolute</strong></p>
</li>
<li><p>这里我们运用的都是些一个单独的NSPredicate，来进行过滤数据，但是我们其实还可以运用多个Predicate来实现类似<code>AND</code>,<code>OR</code>,<code>NOT</code>，可以通过<strong>NSCompoundPredicate</strong>将两个单独<code>NSPredicate</code>组合成一个。</p>
</li>
</ul>
<h4 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h4><ul>
<li>另一个很牛逼的地方，就是可以对获取的数据进行排序，这里运用的函数是<code>NSSortDescriptor</code>,其实这个函数在我们版本号比较的时候就可以运用，但是Core Data中的排序，它是发生在SQLite层面的，而不是内存层面的。</li>
</ul>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">lazy <span class="keyword">var</span> nameSortDescriptor: NSSortDescriptor = &#123;</div><div class="line">  <span class="keyword">let</span> compareSelector =</div><div class="line">    <span class="meta">#selector(NSString.localizedStandardCompare(_:))</span></div><div class="line">  <span class="keyword">return</span> NSSortDescriptor(key: <span class="meta">#keyPath(Venue.name),</span></div><div class="line">&#125;()</div><div class="line"><span class="keyword">ascending</span>: <span class="literal">true</span>,</div><div class="line">selector: compareSelector)</div><div class="line">lazy <span class="keyword">var</span> distanceSortDescriptor: NSSortDescriptor = &#123;</div><div class="line">  <span class="keyword">return</span> NSSortDescriptor(</div><div class="line">    key: <span class="meta">#keyPath(Venue.location.distance),</span></div><div class="line">    <span class="keyword">ascending</span>: <span class="literal">true</span>)</div><div class="line">&#125;()</div><div class="line">lazy <span class="keyword">var</span> priceSortDescriptor: NSSortDescriptor = &#123;</div><div class="line">  <span class="keyword">return</span> NSSortDescriptor(</div><div class="line">    key: <span class="meta">#keyPath(Venue.priceInfo.priceCategory),</span></div><div class="line">    <span class="keyword">ascending</span>: <span class="literal">true</span>)</div><div class="line">&#125;()</div></pre></td></tr></table></figure>
<ul>
<li>上面需要解释一下的是Venue.name 的排序，需要三个字段：1:属性的字段名。2：升序还是降序，3: 执行比较的函数。<strong>这里需要重点说一下，我之前比较的都是用的compare的函数，但是apple这里建议使用的是NSString.localizedStandardCompare</strong>，因为这个函数对一些特殊的字符也做了相应的操作。</li>
</ul>
<h4 id="异步操作："><a href="#异步操作：" class="headerlink" title="异步操作："></a>异步操作：</h4><ul>
<li>现在我们所有获取数据的操作其实都是在主线程操作的，所以在我们操作大量数据的时候，就会生卡顿，在iOS8的时候，CoreData可以在后台长期高效的运行。</li>
</ul>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">var</span> asyncFetchRequest: NSAsynchronousFetchRequest&lt;Venue&gt;!</div></pre></td></tr></table></figure>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">  <span class="keyword">super</span>.viewDidLoad()</div><div class="line"><span class="comment">// 1</span></div><div class="line">  fetchRequest = <span class="type">Venue</span>.fetchRequest()</div><div class="line"><span class="comment">// 2</span></div><div class="line">  asyncFetchRequest =</div><div class="line">    <span class="type">NSAsynchronousFetchRequest</span>&lt;<span class="type">Venue</span>&gt;(</div><div class="line">      fetchRequest: fetchRequest) &#123;</div><div class="line">        [<span class="keyword">unowned</span> <span class="keyword">self</span>] (result: <span class="type">NSAsynchronousFetchResult</span>) <span class="keyword">in</span></div><div class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> venues = result.finalResult <span class="keyword">else</span> &#123;</div><div class="line"><span class="keyword">return</span></div><div class="line">&#125;</div><div class="line">      <span class="keyword">self</span>.venues = venues</div><div class="line">      <span class="keyword">self</span>.tableView.reloadData()</div><div class="line">  &#125;</div><div class="line"><span class="comment">// 3</span></div><div class="line">  <span class="keyword">do</span> &#123;</div><div class="line">    <span class="keyword">try</span> coreDataStack.managedContext.execute(asyncFetchRequest)</div><div class="line">    <span class="comment">// Returns immediately, cancel here if you want</span></div><div class="line">  &#125; <span class="keyword">catch</span> <span class="keyword">let</span> error <span class="keyword">as</span> <span class="type">NSError</span> &#123;</div><div class="line">    <span class="built_in">print</span>(<span class="string">"Could not fetch <span class="subst">\(error)</span>, <span class="subst">\(error.userInfo)</span>"</span>)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>这里可以看到<code>NSAsyncchronousFetchRequest</code>并没有取代<code>NSFetchRequest</code>,这里可以把<code>异步操作</code>是<code>普通操作的一个封装</code>。</li>
<li>并且这里<code>NSManagedObjectContext</code>执行的是<code>execute(_:)</code>而不是<code>fetch(_:)</code></li>
<li>当然这里你可以可以通过调用<code>cancel()</code>来取消查询。</li>
</ul>
<h4 id="批量操作，无需获取数据。"><a href="#批量操作，无需获取数据。" class="headerlink" title="批量操作，无需获取数据。"></a>批量操作，无需获取数据。</h4><ul>
<li>在iOS8的时候，提供了一个新的接口可以批量操作，并且也不需要将数据载入到内存中去<code>NSBatchUpdateRequest</code>，</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 1. 通过传入EntityName 实例化了一个NSBatchUpdateRequest对象</span></div><div class="line"><span class="keyword">let</span> batchUpdate = <span class="type">NSBatchUpdateRequest</span>(entityName: <span class="string">"Venue"</span>)</div><div class="line"></div><div class="line"><span class="comment">// 2. 设置了需要修改的字段，以及值</span></div><div class="line">batchUpdate.propertiesToUpdate =</div><div class="line">  [#keyPath(<span class="type">Venue</span>.favorite) : <span class="literal">true</span>]</div><div class="line"></div><div class="line"><span class="comment">// 3. 这个批量操作需要影响哪些数据</span></div><div class="line">batchUpdate.affectedStores =</div><div class="line">  coreDataStack.managedContext</div><div class="line">    .persistentStoreCoordinator?.persistentStores</div><div class="line"></div><div class="line"><span class="comment">// 4. 设置了返回结果的类型，我们这里定义为返回批量更新的count值</span></div><div class="line">batchUpdate.resultType = .updatedObjectsCountResultType</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">do</span> &#123;</div><div class="line">  <span class="keyword">let</span> batchResult =</div><div class="line">    <span class="keyword">try</span> coreDataStack.managedContext.execute(batchUpdate)</div><div class="line">      <span class="keyword">as</span>! <span class="type">NSBatchUpdateResult</span></div><div class="line">  <span class="built_in">print</span>(<span class="string">"Records updated <span class="subst">\(batchResult.result!)</span>"</span>)</div><div class="line">&#125; <span class="keyword">catch</span> <span class="keyword">let</span> error <span class="keyword">as</span> <span class="type">NSError</span> &#123;</div><div class="line">  <span class="built_in">print</span>(<span class="string">"Could not update <span class="subst">\(error)</span>, <span class="subst">\(error.userInfo)</span>"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;前面三章都是一些很基础的操作以及概念，之前我们取数据，用的最多的也就是使用NSFetchRequest中的NSPredicate-我们通过修改相应的NSPredicate值来获取到我们想要的数据。所有这一章主要讲解的是获取数据的相关操作以及技巧。&quot;&gt;&lt;a href=&quot;#前面三章都是一些很基础的操作以及概念，之前我们取数据，用的最多的也就是使用NSFetchRequest中的NSPredicate-我们通过修改相应的NSPredicate值来获取到我们想要的数据。所有这一章主要讲解的是获取数据的相关操作以及技巧。&quot; class=&quot;headerlink&quot; title=&quot;前面三章都是一些很基础的操作以及概念，之前我们取数据，用的最多的也就是使用NSFetchRequest中的NSPredicate,我们通过修改相应的NSPredicate值来获取到我们想要的数据。所有这一章主要讲解的是获取数据的相关操作以及技巧。&quot;&gt;&lt;/a&gt;前面三章都是一些很基础的操作以及概念，之前我们取数据，用的最多的也就是使用NSFetchRequest中的NSPredicate,我们通过修改相应的NSPredicate值来获取到我们想要的数据。所有这一章主要讲解的是获取数据的相关操作以及技巧。&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;之前用到的操作是：创建一个&lt;code&gt;NSFetchRequest&lt;/code&gt;的实例，然后通过&lt;code&gt;NSManagedObjectContext&lt;/code&gt;这个对象来直接修改&lt;code&gt;NSFetchRequest&lt;/code&gt;就可以实现了。&lt;/li&gt;
&lt;li&gt;仅仅获取&lt;code&gt;NSFetchRequest&lt;/code&gt;的方法就有5种:&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="日志" scheme="http://www.ghcoder.com/categories/%E6%97%A5%E5%BF%97/"/>
    
    
      <category term="Core Data, Swift" scheme="http://www.ghcoder.com/tags/Core-Data-Swift/"/>
    
  </entry>
  
  <entry>
    <title>学习CoreData(三)</title>
    <link href="http://www.ghcoder.com/2017/08/09/20170809/"/>
    <id>http://www.ghcoder.com/2017/08/09/20170809/</id>
    <published>2017-08-09T01:33:12.000Z</published>
    <updated>2017-08-09T03:51:17.000Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li>这一章主要介绍的了四个组成的类</li>
</ul>
<figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">`NSManagedObjectModel`,`NSPersistentStore`,`NSPersistentStoreCoordinator`,`NSManagedObjectContext`</div></pre></td></tr></table></figure>
<a id="more"></a>
<ol>
<li><code>NSManagedObjectModel</code>: 它就相当于数据库的一个表，我的理解就是代表我们创建的一个<code>Entity</code>,里面包含很多我们创建的字段值，当然也包含与其他<code>Entity</code>之前的关系（relationship）。具体<code>NSManagedObjectModel</code>是如何与我们创建的<code>data model</code>产生联系的呢？答案就是：<code>runtime</code>,通过<code>runtime</code>的机制，能够在编译期高效的将我们所创建<code>model data</code>，也就是将<code>xcdatamodel</code>文件的内容编译进<code>momd</code>文件夹中，再将<code>momd</code>文件夹中的内容实例化<code>NSManagedObjectModel</code></li>
<li><code>NSPersistentStore</code>: 他就是负责读写数据，这里还提到了私有<code>NSPersistentStore</code>类型，三种是原子性的，一种是非原子性的（所谓的原子性和定义属性值用的原子性不是同一个概念，这里指的原子性：在你做读写的时候，需要将所有的相关数据都载入到内存中去，而非原子性可以根据数据的需求而载入）,四种Type依次为:<code>NSQLiteStoreType</code>,<code>NSXMLStoreType</code>,<code>NSBinaryStoreType</code>,<code>NSInMemoryStoreType</code>。</li>
<li><code>NSPersistentStoreCoordinator</code>: 是<code>NSManagedObjectModel</code>和<code>NSPersistentStore</code>的桥接，我的理解是，它就是<code>NSManagedObjectModel</code>和<code>NSPersistentStore</code>上层的实现，core data 主要也是通过它来实现功能，<code>NSPersistentStoreCoordinator</code>隐藏了它内部的实现，因为<code>NSManagedObjectContext</code>并不知道你要存储的是<code>sqlite xml还是其他的格式</code>，如果你有多个持久化存储，而对<code>NSManagedObjectContext</code>也是统一的接口。</li>
<li><code>NSManagedObjectContext</code>，是<code>managed object</code>的暂存器，它也是最最上层的封装，所有的操作都可以通过它来完成，如果不调用save()的方法的话，所有的<code>NSManagedObjectContext</code>变化均不会生效的。<code>NSManagedObjectContext</code>管理着所有期间创建、获取对象的生命周期，也报错错误信息，以及model的关系，每个<code>managedobjec</code>都必须持有对<code>NSManagedObjectContext</code>的引用，一旦持有了<code>NSManagedObjectContext</code>,在<code>managedobjec</code>的整个生命周期中都会持有，也一个application中，也可以存在多个<code>NSManagedObjectContext</code>，并且<code>NSManagedObjectContext</code>也不是线程安全的。</li>
</ol>
<ul>
<li><p>iOS10 出现了一个新的类<code>NSPersistentContainer</code>，你只需要实例化<code>NSPersistentContainer</code>就可以获得上面所提到的四个重要的类了。</p>
</li>
<li><p>通过懒加载的方式，直接生成<code>NSPersistentContainer</code>:</p>
</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="built_in">lazy</span> <span class="keyword">var</span> storeContainer: <span class="type">NSPersistentContainer</span> = &#123;</div><div class="line"></div><div class="line">  <span class="keyword">let</span> container = <span class="type">NSPersistentContainer</span>(name: <span class="keyword">self</span>.modelName)</div><div class="line"></div><div class="line">  container.loadPersistentStores &#123;</div><div class="line">    (storeDescription, error) <span class="keyword">in</span></div><div class="line"></div><div class="line">    <span class="keyword">if</span> <span class="keyword">let</span> error = error <span class="keyword">as</span> <span class="type">NSError</span>? &#123;</div><div class="line">      <span class="built_in">print</span>(<span class="string">"Unresolved error <span class="subst">\(error)</span>, <span class="subst">\(error.userInfo)</span>"</span>)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> container</div><div class="line"></div><div class="line">&#125;()</div></pre></td></tr></table></figure>
<ul>
<li>那么自然获取<code>NSManagedObjectContext</code>就可以直接通过<code>NSPersistentContainer</code>来获取了：</li>
<li>虽然这里的<code>NSManagedObjectContext</code>可以直接获取，但是<code>managed model</code>,<code>store coordinator</code> 以及<code>persistent store</code>就需要通过<code>NSPersistentStoreDescription</code></li>
</ul>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">lazy <span class="selector-tag">var</span> managedContext: NSManagedObjectContext = &#123;</div><div class="line">  return self<span class="selector-class">.storeContainer</span><span class="selector-class">.viewContext</span></div><div class="line">&#125;()</div></pre></td></tr></table></figure>
<ul>
<li>这里在保存数据之前可以先进行判断数据是够发生变化，这边变化的东西，<code>NSManagedObjectContext</code>是肯定知道的：</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">saveContext</span> <span class="params">()</span></span> &#123;</div><div class="line">  <span class="keyword">guard</span> managedContext.hasChanges <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</div><div class="line">  <span class="keyword">do</span> &#123;</div><div class="line">    <span class="keyword">try</span> managedContext.save()</div><div class="line">  &#125; <span class="keyword">catch</span> <span class="keyword">let</span> error <span class="keyword">as</span> <span class="type">NSError</span> &#123;</div><div class="line">    <span class="built_in">print</span>(<span class="string">"Unresolved error <span class="subst">\(error)</span>, <span class="subst">\(error.userInfo)</span>"</span>)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>创建完<code>Entity</code>之后，可以为这个<code>Entity</code>来创建关系，点击关系，可以关联其他的<code>Entity</code>,并且也可以编辑<code>RelationShip</code>的<code>Data Model</code>Inspector: <code>To Many</code>（一对多），并且也可以设置<code>Ordered</code>顺序,这里一旦生成对多有序的对象，那对象就是<code>NSOrderedSet</code>类型。</li>
</ul>
<ul>
<li>可以看到实例化model，对象很简单，只需要传入<code>context</code>就可以了：</li>
</ul>
<figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">let walk = Walk(<span class="name">context</span>: managedContext)</div></pre></td></tr></table></figure>
<ul>
<li>也可以直接通过<code>NSManagedObjectContext</code>直接删除某个对象：</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//2</span></div><div class="line">  managedContext.<span class="keyword">delete</span>(walkToRemove)</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;这一章主要介绍的了四个组成的类&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight autohotkey&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;`NSManagedObjectModel`,`NSPersistentStore`,`NSPersistentStoreCoordinator`,`NSManagedObjectContext`&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="日志" scheme="http://www.ghcoder.com/categories/%E6%97%A5%E5%BF%97/"/>
    
    
      <category term="Core Data, Swift" scheme="http://www.ghcoder.com/tags/Core-Data-Swift/"/>
    
  </entry>
  
  <entry>
    <title>学习CoreData, 子类化NSManagerObject(二)</title>
    <link href="http://www.ghcoder.com/2017/08/08/20170808/"/>
    <id>http://www.ghcoder.com/2017/08/08/20170808/</id>
    <published>2017-08-08T03:17:12.000Z</published>
    <updated>2017-08-08T02:34:32.000Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li>打开xxx.xcdatamodeld文件,添加Entity,例如这里名叫“Person”的类,并且通过类似第一部分的操作就可以编辑了Attributes了。</li>
<li>这里在给Attribute添加字段的时候需要注意的: 字段类型有<code>Boolean 布尔类型</code>, <code>Date 时间戳</code>, <code>Double 浮点类型</code>,<code>String 字符串类型</code>, <code>Integer Integer 32 Integer 64 整型</code>。</li>
</ul>
<a id="more"></a>
<ul>
<li>如果Entity中有关联的<code>image</code>或者<code>PDF</code>(任何可以被序列化为0或者任何的东西)类型的话，都可以将它定义为<code>Binary Data 二进制类型</code>, 但是这也会带来一个问题：“如果二进制文件太大,当你每次需要获取这个Entity的时候，就会消耗巨大的内存，从而影响性能”，这里你可以通过勾选<code>Allows External Storage</code>,这样“Core Data会根据你存入数据的大小，来决定是直接存储这个值还是仅仅只是存储一个URI的值，这个值指向的是一个单独的文件数据”,并且如果打开了这个属性值，你将无法通过查询的方式来获取这个值。</li>
<li>这里的UIColor,NSArray,NSDictionary任何只要遵循了NSCoding协议的都可以定义为: <code>Transformable</code>。</li>
<li>之前不管是取值还是赋值都是通过KVC的方式来实现的，例如：</li>
</ul>
<figure class="highlight ceylon"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Set the name</span></div><div class="line">person.setValue(aName, forKey: <span class="string">"name"</span>)</div><div class="line"><span class="comment">// Get the name</span></div><div class="line"><span class="keyword">let</span> name = person.<span class="keyword">value</span>(forKey: <span class="string">"name"</span>)</div></pre></td></tr></table></figure>
<ul>
<li>我们勾选<code>Codegen</code>值为：<code>Manual/None</code>,然后点击<code>Editor\Create NSManagedObject Subclass....</code>，这样<code>Xcode</code>就可以为我们创建了两个文件。如果修改了响应的<code>Entity</code>的文件的属性，可以重新点击<code>Editor\Create NSManagedObject Subclass....</code></li>
<li>生成的文件中，属性值前面都写着<code>@NSManaged</code>,这个字段的意思是告诉Swift编译器，这个属性的存储和实现都是在运行时产生的，而不是在编译的时候产生。因为这些属性的存储是需要<code>managed object context</code>,而这个东西在编译的时候，还没有生成。</li>
<li>测试插入的一个新的数据：</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"> <span class="comment">// Save test bow tie</span></div><div class="line">  <span class="keyword">let</span> bowtie = <span class="type">NSEntityDescription</span>.insertNewObject(</div><div class="line">    forEntityName: <span class="string">"Bowtie"</span>,</div><div class="line">    into: <span class="keyword">self</span>.persistentContainer.viewContext) <span class="keyword">as</span>! <span class="type">Bowtie</span></div><div class="line">  bowtie.name = <span class="string">"My bow tie"</span></div><div class="line">  bowtie.lastWorn = <span class="type">NSDate</span>()</div><div class="line">  <span class="comment">// Retrieve test bow tie</span></div><div class="line">  <span class="keyword">do</span> &#123;</div><div class="line">    <span class="keyword">let</span> request = <span class="type">NSFetchRequest</span>&lt;<span class="type">Bowtie</span>&gt;(entityName: <span class="string">"Bowtie"</span>)</div><div class="line">    <span class="keyword">let</span> ties =</div><div class="line">      <span class="keyword">try</span> <span class="keyword">self</span>.persistentContainer.viewContext.fetch(request)</div><div class="line">    <span class="keyword">let</span> sample = ties.first</div><div class="line">    <span class="built_in">print</span>(<span class="string">"Name :<span class="subst">\(sample?.name)</span>, Worn: <span class="subst">\(sample?.lastWorn)</span>"</span>)</div><div class="line">  &#125; <span class="keyword">catch</span> <span class="keyword">let</span> error <span class="keyword">as</span> <span class="type">NSError</span> &#123;</div><div class="line">    <span class="built_in">print</span>(<span class="string">"Fetching error: <span class="subst">\(error)</span>, <span class="subst">\(error.userInfo)</span>"</span>)</div><div class="line">  &#125;</div><div class="line"><span class="keyword">return</span> <span class="literal">true</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><code>image</code>和<code>UIColor</code>的存取</li>
</ul>
<figure class="highlight nix"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line">   <span class="keyword">let</span> <span class="attr">colorDict</span> = btDict[<span class="string">"tintColor"</span>] as! [String: AnyObject]</div><div class="line">    bowtie.<span class="attr">tintColor</span> = UIColor.color(dict: colorDict)</div><div class="line"></div><div class="line">    <span class="keyword">let</span> <span class="attr">image</span> = UIImage(named: imageName!)</div><div class="line">    <span class="keyword">let</span> <span class="attr">photoData</span> = UIImagePNGRepresentation(image!)!</div><div class="line">    bowtie.<span class="attr">photoData</span> = NSData(data: photoData)</div><div class="line">...</div></pre></td></tr></table></figure>
<ul>
<li>如何根据条件查询？运用<code>NSPredicate</code>:</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//2</span></div><div class="line">  <span class="keyword">let</span> request = <span class="type">NSFetchRequest</span>&lt;<span class="type">Bowtie</span>&gt;(entityName: <span class="string">"Bowtie"</span>)</div><div class="line">  <span class="keyword">let</span> firstTitle = segmentedControl.titleForSegment(at: <span class="number">0</span>)!</div><div class="line">  request.predicate = <span class="type">NSPredicate</span>(</div><div class="line">    format: <span class="string">"searchKey == %@"</span>, firstTitle)</div><div class="line"><span class="keyword">do</span> &#123; <span class="comment">//3</span></div><div class="line">    <span class="keyword">let</span> results = <span class="keyword">try</span> managedContext.fetch(request)</div><div class="line"><span class="comment">//4</span></div><div class="line">    populate(bowtie: results.first!)</div><div class="line">  &#125; <span class="keyword">catch</span> <span class="keyword">let</span> error <span class="keyword">as</span> <span class="type">NSError</span> &#123;</div><div class="line">    <span class="built_in">print</span>(<span class="string">"Could not fetch <span class="subst">\(error)</span>, <span class="subst">\(error.userInfo)</span>"</span>)</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<ul>
<li>CoreData 如何对字段值进行验证？</li>
<li>勾选需要验证字段，打开<code>data model inspector</code>,然后勾选<code>Validation</code>，可以勾选<code>默认值</code>,<code>最大值</code>,<code>最小值</code>，这样就可以在catch中捕获住Error：</li>
</ul>
<figure class="highlight gauss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">if</span> <span class="built_in">error</span>.domain == NSCocoaErrorDomain &amp;&amp;</div><div class="line">      (<span class="built_in">error</span>.<span class="built_in">code</span> == NSValidationNumberTooLargeError ||</div><div class="line">        <span class="built_in">error</span>.<span class="built_in">code</span> == NSValidationNumberTooSmallError) &#123;</div><div class="line">      rate(currentBowtie)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;打开xxx.xcdatamodeld文件,添加Entity,例如这里名叫“Person”的类,并且通过类似第一部分的操作就可以编辑了Attributes了。&lt;/li&gt;
&lt;li&gt;这里在给Attribute添加字段的时候需要注意的: 字段类型有&lt;code&gt;Boolean 布尔类型&lt;/code&gt;, &lt;code&gt;Date 时间戳&lt;/code&gt;, &lt;code&gt;Double 浮点类型&lt;/code&gt;,&lt;code&gt;String 字符串类型&lt;/code&gt;, &lt;code&gt;Integer Integer 32 Integer 64 整型&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="日志" scheme="http://www.ghcoder.com/categories/%E6%97%A5%E5%BF%97/"/>
    
    
      <category term="Core Data, Swift" scheme="http://www.ghcoder.com/tags/Core-Data-Swift/"/>
    
  </entry>
  
  <entry>
    <title>学习CoreData(一)</title>
    <link href="http://www.ghcoder.com/2017/08/07/20170807/"/>
    <id>http://www.ghcoder.com/2017/08/07/20170807/</id>
    <published>2017-08-07T03:17:12.000Z</published>
    <updated>2017-08-07T03:36:46.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="最近在看Core-Data这本书，很多人都说这个东西多难用，但是很多细节如果不进去细细看的话，也会存在很多懵逼的地方。不得不承认，这个东西还是挺牛逼的。"><a href="#最近在看Core-Data这本书，很多人都说这个东西多难用，但是很多细节如果不进去细细看的话，也会存在很多懵逼的地方。不得不承认，这个东西还是挺牛逼的。" class="headerlink" title="最近在看Core Data这本书，很多人都说这个东西多难用，但是很多细节如果不进去细细看的话，也会存在很多懵逼的地方。不得不承认，这个东西还是挺牛逼的。"></a>最近在看Core Data这本书，很多人都说这个东西多难用，但是很多细节如果不进去细细看的话，也会存在很多懵逼的地方。不得不承认，这个东西还是挺牛逼的。</h3><a id="more"></a>
<hr>
<ul>
<li>如何存入相应的<code>Entity</code>对象? 在回答这个问题之前要先知道，我们是通过什么对象来存入数据的呢？</li>
<li>答案是：<code>NSManagedObjectContext</code></li>
</ul>
<hr>
<ul>
<li>那什么是<code>NSManagedObjectContext</code>?</li>
<li>书上的给的解释我认为很贴切：<code>You can consider a managed object context as an in-memory “scratchpad” for working with managed objects</code>，我的理解是：<code>它其实就相当于内存中的暂存器</code>,那么完成插入数据就分为两步：<code>1. 将数据插入到NSManagedObjectContext</code>，<code>2. 然后将managed object context的变化保存到磁盘中</code></li>
</ul>
<hr>
<ul>
<li>那现在怎么获取这个所谓的暂存器<code>NSManagedObjectContext</code>?</li>
<li>如果你的项目创建是通过xcode，勾选创建<code>Use Core Data</code>的话，就可以直接通过下面的代码来获取：</li>
</ul>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">let managedContext =</div><div class="line">    appDelegate<span class="selector-class">.persistentContainer</span><span class="selector-class">.viewContext</span></div></pre></td></tr></table></figure>
<hr>
<ul>
<li>如何通过<code>NSManagedObjectContext</code>来获取<code>Entity</code>？</li>
<li>我们通过模板来创建的<code>Entity</code>对象，在CoreData中就好比<code>Class</code>,这些<code>Entity</code>都是继承<code>NSManagedObject</code>类或者为其子类，那这个问题就转化为如何取得我们之前早起定义的<code>Entity</code>，也就是<code>NSManagedObject</code>对象呢？</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">let</span> entity =</div><div class="line">    NSEntityDescription.entity(<span class="keyword">for</span>EntityName: <span class="string">"Person"</span>,</div><div class="line">                               <span class="keyword">in</span>: managedContext)!</div></pre></td></tr></table></figure>
<hr>
<ul>
<li>这里是通过<code>NSEntityDescription</code>对象一个类方法<code>entity</code>,传入相应的<code>Entity</code>字符串，但是这里返回并不是我们之前预料的<code>NSManagedObject</code>,而是<code>NSEntityDescription</code>自己。</li>
<li>这里是因为<code>NSEntityDescription</code>= <code>数据模型实体定义</code> 与 <code>NSManagedObject</code> 的链接部分</li>
</ul>
<hr>
<ul>
<li>拿到了<code>Entity</code>,如何来设置值呢？</li>
<li>因为<code>NSManagedObject</code>是用OC来写的，可以通过<code>KVC</code>的方式来设置，这里一定要注定字符串的书写正确，否则就会发生crash</li>
</ul>
<hr>
<ul>
<li>之前说了最后还需要<code>commit</code>,那如何<code>commit</code>的？</li>
<li>直接调用<code>managedContext.save()</code>,这里可能会提交不成功，那就需要catch住相应的错误。</li>
</ul>
<hr>
<h4 id="赋值的代码："><a href="#赋值的代码：" class="headerlink" title="赋值的代码："></a>赋值的代码：</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">save</span><span class="params">(name: String)</span></span> &#123;</div><div class="line">     <span class="keyword">guard</span> <span class="keyword">let</span> appDelegate = <span class="type">UIApplication</span>.shared.delegate <span class="keyword">as</span>? <span class="type">AppDelegate</span> <span class="keyword">else</span> &#123;</div><div class="line">         <span class="keyword">return</span></div><div class="line">     &#125;</div><div class="line"></div><div class="line">     <span class="comment">//1.</span></div><div class="line">     <span class="keyword">let</span> managedContext = appDelegate.persistentContainer.viewContext</div><div class="line"></div><div class="line">     <span class="comment">//2.</span></div><div class="line">     <span class="keyword">let</span> entity = <span class="type">NSEntityDescription</span>.entity(forEntityName: <span class="string">"Person"</span>, <span class="keyword">in</span>: managedContext)!</div><div class="line"></div><div class="line">     <span class="keyword">let</span> person = <span class="type">NSManagedObject</span>(entity: entity, insertInto: managedContext)</div><div class="line"></div><div class="line">     <span class="comment">//3.</span></div><div class="line">     person.setValue(name, forKeyPath: <span class="string">"name"</span>)</div><div class="line"></div><div class="line">     <span class="comment">//4.</span></div><div class="line">     <span class="keyword">do</span> &#123;</div><div class="line">         <span class="keyword">try</span> managedContext.save()</div><div class="line">         people.append(person)</div><div class="line">     &#125; <span class="keyword">catch</span> <span class="keyword">let</span> error <span class="keyword">as</span> <span class="type">NSError</span> &#123;</div><div class="line">         <span class="built_in">print</span>(<span class="string">"Could not save. <span class="subst">\(error)</span>, <span class="subst">\(error.userInfo)</span>"</span>)</div><div class="line">     &#125;</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<h4 id="取值的代码："><a href="#取值的代码：" class="headerlink" title="取值的代码："></a>取值的代码：</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//1</span></div><div class="line">  <span class="keyword">guard</span> <span class="keyword">let</span> appDelegate =</div><div class="line">    <span class="type">UIApplication</span>.shared.delegate <span class="keyword">as</span>? <span class="type">AppDelegate</span> <span class="keyword">else</span> &#123;</div><div class="line"><span class="keyword">return</span></div><div class="line">&#125;</div><div class="line">  <span class="keyword">let</span> managedContext =</div><div class="line">    appDelegate.persistentContainer.viewContext</div><div class="line"><span class="comment">//2</span></div><div class="line">  <span class="keyword">let</span> fetchRequest =</div><div class="line">    <span class="type">NSFetchRequest</span>&lt;<span class="type">NSManagedObject</span>&gt;(entityName: <span class="string">"Person"</span>)</div><div class="line"><span class="comment">//3</span></div><div class="line">  <span class="keyword">do</span> &#123;</div><div class="line">    people = <span class="keyword">try</span> managedContext.fetch(fetchRequest)</div><div class="line">  &#125; <span class="keyword">catch</span> <span class="keyword">let</span> error <span class="keyword">as</span> <span class="type">NSError</span> &#123;</div><div class="line">    <span class="built_in">print</span>(<span class="string">"Could not fetch. <span class="subst">\(error)</span>, <span class="subst">\(error.userInfo)</span>"</span>)</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<ul>
<li>其他都和赋值的操作是一样的，那第二部是什么意思呢？</li>
<li>就如这个<code>NSFetchRequest</code>类名字一样，<code>NSFetchRequest</code>他就是赋值从<code>Core Data中获取数据的东西</code>，这里我们通过传入<code>EntityName</code>来准确告诉<code>context</code>我们需要获取的是什么对象。这里是获取所有符合条件的对象。</li>
<li>最后调用<code>fetch</code>会直接返回所有数据，同样这里也可能会失败，记住catch住错误。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;最近在看Core-Data这本书，很多人都说这个东西多难用，但是很多细节如果不进去细细看的话，也会存在很多懵逼的地方。不得不承认，这个东西还是挺牛逼的。&quot;&gt;&lt;a href=&quot;#最近在看Core-Data这本书，很多人都说这个东西多难用，但是很多细节如果不进去细细看的话，也会存在很多懵逼的地方。不得不承认，这个东西还是挺牛逼的。&quot; class=&quot;headerlink&quot; title=&quot;最近在看Core Data这本书，很多人都说这个东西多难用，但是很多细节如果不进去细细看的话，也会存在很多懵逼的地方。不得不承认，这个东西还是挺牛逼的。&quot;&gt;&lt;/a&gt;最近在看Core Data这本书，很多人都说这个东西多难用，但是很多细节如果不进去细细看的话，也会存在很多懵逼的地方。不得不承认，这个东西还是挺牛逼的。&lt;/h3&gt;
    
    </summary>
    
      <category term="日志" scheme="http://www.ghcoder.com/categories/%E6%97%A5%E5%BF%97/"/>
    
    
      <category term="Core Data, Swift" scheme="http://www.ghcoder.com/tags/Core-Data-Swift/"/>
    
  </entry>
  
  <entry>
    <title>React-Native 0.46 最新环境配置</title>
    <link href="http://www.ghcoder.com/2017/07/31/20170731/"/>
    <id>http://www.ghcoder.com/2017/07/31/20170731/</id>
    <published>2017-07-31T09:07:12.000Z</published>
    <updated>2017-07-31T09:17:08.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="隔了好久，闲来无事，看到自己github上React-Native的项目好久没有更新了，所以想继续搞搞它，但是发现好多坑。"><a href="#隔了好久，闲来无事，看到自己github上React-Native的项目好久没有更新了，所以想继续搞搞它，但是发现好多坑。" class="headerlink" title="隔了好久，闲来无事，看到自己github上React-Native的项目好久没有更新了，所以想继续搞搞它，但是发现好多坑。"></a>隔了好久，闲来无事，看到自己github上React-Native的项目好久没有更新了，所以想继续搞搞它，但是发现好多坑。</h3><ul>
<li>打开官网 <code>https://facebook.github.io/react-native/</code>，我所用的都是最新的版本<code>0.46</code>, 点击链接到<code>https://facebook.github.io/react-native/docs/getting-started.html</code>,点击<code>Build Projects with Native Code</code>，会有一个<code>Demo</code>，按照这个<code>Demo</code>一步步操作，会遇到很多的坑，这里我记录一下：</li>
</ul>
<a id="more"></a>
<p>1.先运行Android的机器，发现会报未找到<code>SDK</code>的问题，具体如下：</p>
<figure class="highlight http"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">FAILURE</span>: Build failed with an exception.</div><div class="line"></div><div class="line"><span class="livecodeserver">* What went wrong:</span></div><div class="line">A problem occurred configuring project <span class="string">':app'</span>.</div><div class="line">&gt; SDK location <span class="keyword">not</span> found. Define location <span class="keyword">with</span> sdk.dir <span class="keyword">in</span> <span class="keyword">the</span> <span class="built_in">local</span>.properties <span class="built_in">file</span> <span class="keyword">or</span> <span class="keyword">with</span> <span class="keyword">an</span> ANDROID_HOME environment <span class="built_in">variable</span>.</div></pre></td></tr></table></figure>
<ul>
<li>解决：以mac为例子，找到<code>~/.bashrc</code>的文件，也有可能是<code>~/.zshrc</code>的文件</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">1. vim ~/.bashrc</div><div class="line"></div><div class="line"></div><div class="line">2.  <span class="built_in">export</span> ANDROID_HOME=~/Library/Android/sdk</div><div class="line">    <span class="built_in">export</span> PATH=<span class="variable">$&#123;PATH&#125;</span>:<span class="variable">$ANDROID_HOME</span>/tools:<span class="variable">$ANDROID_HOME</span>/platform-tools</div></pre></td></tr></table></figure>
<p>2.再次运行<code>react-native run-android</code> 想执行真机的话, 报这如下错误：</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Could not run adb <span class="string">reverse:</span> Command <span class="string">failed:</span> <span class="regexp">/Users/</span>gonghuan<span class="regexp">/Library/</span>Android<span class="regexp">/sdk/</span>platform-tools/adb -s K21GAMN590201150 reverse <span class="string">tcp:</span><span class="number">8081</span> <span class="string">tcp:</span><span class="number">8081</span></div></pre></td></tr></table></figure>
<ul>
<li>这里假如你的系统是<code>Android 5.0</code>以上的话，应该就不会有这个问题了，但是如果你的安卓机器和我的一样，都是低于<code>Android 5.0的话</code>：, 以我的手机为例[安卓4.4.4]，解决：</li>
</ul>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="bullet">1. </span>(Android 5.0以下)通过Wi-Fi连接你的本地开发服务器</div><div class="line">首先确保你的电脑和手机设备在同一个Wi-Fi环境下。</div><div class="line"><span class="bullet">2. </span>在设备上运行你的React Native应用。和打开其它App一样操作。</div><div class="line">你应该会看到一个“红屏”错误提示。这是正常的，下面的步骤会解决这个报错。</div><div class="line"><span class="bullet">3. </span>摇晃设备，或者运行adb shell input keyevent 82，可以打开开发者菜单。</div><div class="line"><span class="bullet">4. </span>点击进入Dev Settings。</div><div class="line"><span class="bullet">5. </span>点击Debug server host for device。</div><div class="line"><span class="bullet">6. </span>输入你电脑的IP地址和端口号（譬如10.0.1.1:8081）。在Mac上，你可以在系统设置/网络里找查询你的IP地址。在Windows上，打开命令提示符并输入ipconfig来查询你的IP地址。在Linux上你可以在终端中输入ifconfig来查询你的IP地址。</div><div class="line"><span class="bullet">7. </span>回到开发者菜单然后选择Reload JS。`</div></pre></td></tr></table></figure>
<p>3.运行<code>react-native run-android</code>的时候，启动模拟器，我这边报这个错误：</p>
<figure class="highlight subunit"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">Error: </span>No available formula with the name "android-sdk"</div></pre></td></tr></table></figure>
<ul>
<li>解决途径：1. 如果你已经按照官网 [<a href="https://facebook.github.io/react-native/docs/getting-started.html" target="_blank" rel="external">https://facebook.github.io/react-native/docs/getting-started.html</a>] 的教程，走完，但是还是报错的话就执行下面的命令：</li>
</ul>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">brew </span>tap caskroom/cask</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">brew </span>cask install <span class="keyword">android-sdk</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">brew </span>cask install <span class="keyword">android-platform-tools</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;隔了好久，闲来无事，看到自己github上React-Native的项目好久没有更新了，所以想继续搞搞它，但是发现好多坑。&quot;&gt;&lt;a href=&quot;#隔了好久，闲来无事，看到自己github上React-Native的项目好久没有更新了，所以想继续搞搞它，但是发现好多坑。&quot; class=&quot;headerlink&quot; title=&quot;隔了好久，闲来无事，看到自己github上React-Native的项目好久没有更新了，所以想继续搞搞它，但是发现好多坑。&quot;&gt;&lt;/a&gt;隔了好久，闲来无事，看到自己github上React-Native的项目好久没有更新了，所以想继续搞搞它，但是发现好多坑。&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;打开官网 &lt;code&gt;https://facebook.github.io/react-native/&lt;/code&gt;，我所用的都是最新的版本&lt;code&gt;0.46&lt;/code&gt;, 点击链接到&lt;code&gt;https://facebook.github.io/react-native/docs/getting-started.html&lt;/code&gt;,点击&lt;code&gt;Build Projects with Native Code&lt;/code&gt;，会有一个&lt;code&gt;Demo&lt;/code&gt;，按照这个&lt;code&gt;Demo&lt;/code&gt;一步步操作，会遇到很多的坑，这里我记录一下：&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="日志" scheme="http://www.ghcoder.com/categories/%E6%97%A5%E5%BF%97/"/>
    
    
      <category term="React-Native" scheme="http://www.ghcoder.com/tags/React-Native/"/>
    
  </entry>
  
  <entry>
    <title>学习设计模式-迭代器模式</title>
    <link href="http://www.ghcoder.com/2017/07/13/20170713/"/>
    <id>http://www.ghcoder.com/2017/07/13/20170713/</id>
    <published>2017-07-13T02:31:12.000Z</published>
    <updated>2017-07-13T02:31:25.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="代码写多了，就想把代码写好，将代码写好，就必然要学习设计模式，今天重点学习一下迭代器模式和组合模式。这里我参照的学习是以JAVA为参照的《Header-First》设计模式，我这里会以Object-c的格式来重写，最后以一个我项目中的实例来说明一下。"><a href="#代码写多了，就想把代码写好，将代码写好，就必然要学习设计模式，今天重点学习一下迭代器模式和组合模式。这里我参照的学习是以JAVA为参照的《Header-First》设计模式，我这里会以Object-c的格式来重写，最后以一个我项目中的实例来说明一下。" class="headerlink" title="代码写多了，就想把代码写好，将代码写好，就必然要学习设计模式，今天重点学习一下迭代器模式和组合模式。这里我参照的学习是以JAVA为参照的《Header First》设计模式，我这里会以Object-c的格式来重写，最后以一个我项目中的实例来说明一下。"></a>代码写多了，就想把代码写好，将代码写好，就必然要学习设计模式，今天重点学习一下迭代器模式和组合模式。这里我参照的学习是以JAVA为参照的《Header First》设计模式，我这里会以Object-c的格式来重写，最后以一个我项目中的实例来说明一下。</h3><h3 id="1-1-迭代器设计模式："><a href="#1-1-迭代器设计模式：" class="headerlink" title="1.1 迭代器设计模式："></a>1.1 迭代器设计模式：</h3><ol>
<li>问题：这里有两个类：一个是煎饼餐厅菜类<code>PancakeHouseMenu</code>(这里假设代码中是以数组的形式来存储),一个是普通餐厅类<code>DinerMenu</code>(这里假设是以字典的形式来存储),他们都有自己原有的代码，以及逻辑，现在如何将这两个菜单类合并成一个类更好给用户调用。</li>
</ol>
<a id="more"></a>
<ul>
<li>这个是PancakeHouseMenu的代码</li>
</ul>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">"PancakeHouseMenu.h"</span></span></div><div class="line"><span class="meta">#import <span class="meta-string">"Pancak.h"</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">PancakeHouseMenu</span> ()</span></div><div class="line"></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">NSMutableArray</span> *items;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">PancakeHouseMenu</span></span></div><div class="line"></div><div class="line">- (<span class="keyword">instancetype</span>)init &#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">self</span> = [<span class="keyword">super</span> init]) &#123;        </div><div class="line">        [<span class="keyword">self</span> addItem:<span class="string">@"cake_A"</span> isVege:<span class="literal">YES</span> price:<span class="number">0.23</span>];</div><div class="line">        [<span class="keyword">self</span> addItem:<span class="string">@"cake_B"</span> isVege:<span class="literal">NO</span> price:<span class="number">0.53</span>];</div><div class="line">        [<span class="keyword">self</span> addItem:<span class="string">@"cake_C"</span> isVege:<span class="literal">YES</span> price:<span class="number">1.2</span>];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)addItem:(<span class="built_in">NSString</span> *)itemName isVege:(<span class="built_in">BOOL</span>)isVege price:(<span class="built_in">CGFloat</span>)price &#123;</div><div class="line">    Pancak *cake  = [Pancak pancakName:itemName isVege:isVege price:price];</div><div class="line">    <span class="keyword">if</span> (cake != <span class="literal">nil</span>) [<span class="keyword">self</span>.items addObject:cake];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="built_in">NSArray</span> &lt;Pancak *&gt;*) menuItems; &#123;</div><div class="line">    <span class="keyword">return</span> [<span class="keyword">self</span>.items <span class="keyword">copy</span>];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">#pragma mark - Getter Methods</span></div><div class="line"></div><div class="line">- (<span class="built_in">NSMutableArray</span> *)items &#123;</div><div class="line">    <span class="keyword">if</span> (_items == <span class="literal">nil</span>) _items = [<span class="built_in">NSMutableArray</span> new];</div><div class="line">    <span class="keyword">return</span> _items;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<ul>
<li>这个是DinerMenu的代码</li>
</ul>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">"DinerMenu.h"</span></span></div><div class="line"><span class="meta">#import <span class="meta-string">"Diner.h"</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">DinerMenu</span> ()</span></div><div class="line"></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">NSMutableDictionary</span> *items;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) <span class="built_in">NSInteger</span>            numberOfItems;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">DinerMenu</span></span></div><div class="line"></div><div class="line">- (<span class="keyword">instancetype</span>)init &#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">self</span> = [<span class="keyword">super</span> init]) &#123;</div><div class="line">        </div><div class="line">        <span class="keyword">self</span>.numberOfItems = <span class="number">0</span>;</div><div class="line">        </div><div class="line">        [<span class="keyword">self</span> addItem:<span class="string">@"Diner_A"</span> isVege:<span class="literal">YES</span> price:<span class="number">2.32</span>];</div><div class="line">        [<span class="keyword">self</span> addItem:<span class="string">@"Diner_B"</span> isVege:<span class="literal">NO</span> price:<span class="number">5.33</span>];</div><div class="line">        [<span class="keyword">self</span> addItem:<span class="string">@"Diner_C"</span> isVege:<span class="literal">YES</span> price:<span class="number">1.27</span>];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="built_in">NSDictionary</span> *) menuItems &#123;</div><div class="line">    <span class="keyword">return</span> [<span class="keyword">self</span>.items <span class="keyword">copy</span>];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)addItem:(<span class="built_in">NSString</span> *)itemName isVege:(<span class="built_in">BOOL</span>)isVege price:(<span class="built_in">CGFloat</span>)price &#123;</div><div class="line">    Diner *diner = [Diner DinerName:itemName isVege:isVege price:price];</div><div class="line">    <span class="keyword">if</span> (diner != <span class="literal">nil</span> &amp;&amp; itemName != <span class="literal">nil</span>) &#123;</div><div class="line">        [<span class="keyword">self</span>.items setObject:diner forKey:@(<span class="keyword">self</span>.numberOfItems)];</div><div class="line">        <span class="keyword">self</span>.numberOfItems ++;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="built_in">NSMutableDictionary</span> *)items &#123;</div><div class="line">    <span class="keyword">if</span> (_items == <span class="literal">nil</span>) _items = [<span class="built_in">NSMutableDictionary</span> new];</div><div class="line">    <span class="keyword">return</span> _items;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<ul>
<li>通过比较就可以看出这两个的区别。存储数据分别用的是<code>NSMutableArray</code>和<code>NSMutableDictionary</code></li>
<li>如果此时我需要分别打印响应的数据的时候的，就需要这样：</li>
</ul>
<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">- (void)printMenu &#123;</div><div class="line">    </div><div class="line">    self.pancakeMenu = [PancakeHouseMenu new]<span class="comment">;</span></div><div class="line">    NSArray *pancakeItems = self.pancakeMenu.menuItems<span class="comment">;</span></div><div class="line">    </div><div class="line">    self.<span class="keyword">dinerMenu </span>= [<span class="keyword">DinerMenu </span>new]<span class="comment">;</span></div><div class="line">    NSDictionary *<span class="keyword">dinerItems </span>= self.<span class="keyword">dinerMenu.menuItems;</span></div><div class="line">    </div><div class="line">    for (int i = <span class="number">0</span> <span class="comment">; i &lt; pancakeItems.count ; i++) &#123;</span></div><div class="line">        Pancak *pancake = pancakeItems[i]<span class="comment">;</span></div><div class="line">        NSLog(@<span class="string">"%@"</span>, pancake)<span class="comment">;</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    NSLog(@<span class="string">"--------------------"</span>)<span class="comment">;</span></div><div class="line">    </div><div class="line">    for (int i = <span class="number">0</span> <span class="comment">; i &lt; dinerItems.count; i ++ ) &#123;</span></div><div class="line">        <span class="keyword">Diner </span>*<span class="keyword">diner </span>= <span class="keyword">dinerItems[@(i)];</span></div><div class="line">        NSLog(@<span class="string">"%@"</span>, <span class="keyword">diner);</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>结果如下：</li>
</ul>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">2017<span class="selector-tag">-07-12</span> 16<span class="selector-pseudo">:54</span><span class="selector-pseudo">:00.992</span> <span class="selector-tag">Learn_Iterator_Composite_Pattern</span><span class="selector-attr">[6245:186657]</span> <span class="selector-tag">pancake</span>:<span class="selector-attr">[name:cake_A--isvege:1--price:0.23]</span></div><div class="line">2017<span class="selector-tag">-07-12</span> 16<span class="selector-pseudo">:54</span><span class="selector-pseudo">:00.992</span> <span class="selector-tag">Learn_Iterator_Composite_Pattern</span><span class="selector-attr">[6245:186657]</span> <span class="selector-tag">pancake</span>:<span class="selector-attr">[name:cake_B--isvege:0--price:0.53]</span></div><div class="line">2017<span class="selector-tag">-07-12</span> 16<span class="selector-pseudo">:54</span><span class="selector-pseudo">:00.992</span> <span class="selector-tag">Learn_Iterator_Composite_Pattern</span><span class="selector-attr">[6245:186657]</span> <span class="selector-tag">pancake</span>:<span class="selector-attr">[name:cake_C--isvege:1--price:1.20]</span></div><div class="line">2017<span class="selector-tag">-07-12</span> 16<span class="selector-pseudo">:54</span><span class="selector-pseudo">:00.992</span> <span class="selector-tag">Learn_Iterator_Composite_Pattern</span><span class="selector-attr">[6245:186657]</span> <span class="selector-tag">--------------------</span></div><div class="line">2017<span class="selector-tag">-07-12</span> 16<span class="selector-pseudo">:54</span><span class="selector-pseudo">:00.993</span> <span class="selector-tag">Learn_Iterator_Composite_Pattern</span><span class="selector-attr">[6245:186657]</span> <span class="selector-tag">diner</span>:<span class="selector-attr">[name:Diner_A--isvege:1--price:2.32]</span></div><div class="line">2017<span class="selector-tag">-07-12</span> 16<span class="selector-pseudo">:54</span><span class="selector-pseudo">:00.993</span> <span class="selector-tag">Learn_Iterator_Composite_Pattern</span><span class="selector-attr">[6245:186657]</span> <span class="selector-tag">diner</span>:<span class="selector-attr">[name:Diner_B--isvege:0--price:5.33]</span></div><div class="line">2017<span class="selector-tag">-07-12</span> 16<span class="selector-pseudo">:54</span><span class="selector-pseudo">:00.993</span> <span class="selector-tag">Learn_Iterator_Composite_Pattern</span><span class="selector-attr">[6245:186657]</span> <span class="selector-tag">diner</span>:<span class="selector-attr">[name:Diner_C--isvege:1--price:1.27]</span></div></pre></td></tr></table></figure>
<ul>
<li>这样第一个问题就出现了，<code>这里两家餐厅的菜单存储的数据结构没法控制，这里需要打印菜单的时候，就需要分别遍历两个数据</code></li>
<li>解决版本：<code>封装变化的部分</code>（这里变化的部分就是循环遍历的地方）</li>
<li>这里创建一个<code>protocol</code>,代码如下：</li>
</ul>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@protocol</span> <span class="title">Iterator</span> &lt;<span class="title">NSObject</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> 是否这个聚合中存在更多的元素</div><div class="line"> </div><div class="line"> @return 返回bool值</div><div class="line"> */</div><div class="line">- (<span class="built_in">BOOL</span>)hasNext;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> 返回下一个对象</div><div class="line"> </div><div class="line"> @return 下一个对象</div><div class="line"> */</div><div class="line">- (<span class="keyword">id</span>)next;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<ul>
<li>创建一个新的类<code>DinerMenuIterator</code>,这个类是<code>Iterator</code>具体实现的类，具体实现：</li>
</ul>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">"DinerMenuIterator.h"</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">DinerMenuIterator</span> ()</span></div><div class="line"></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">NSDictionary</span> *items;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) <span class="built_in">NSInteger</span>    position;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">DinerMenuIterator</span></span></div><div class="line"></div><div class="line">- (<span class="keyword">instancetype</span>)initWithItems:(<span class="built_in">NSDictionary</span> *)items &#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">self</span> = [<span class="keyword">super</span> init]) &#123;</div><div class="line">        <span class="keyword">self</span>.position   = <span class="number">0</span>;</div><div class="line">        <span class="keyword">self</span>.items      = items;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="built_in">BOOL</span>)hasNext &#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>.position &gt;= <span class="keyword">self</span>.items.count) <span class="keyword">return</span> <span class="literal">NO</span>;</div><div class="line">    <span class="keyword">return</span> <span class="literal">YES</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">id</span>)next &#123;</div><div class="line">    <span class="keyword">if</span> ([<span class="keyword">self</span> hasNext]) &#123;</div><div class="line">        <span class="keyword">id</span> item = <span class="keyword">self</span>.items[@(<span class="keyword">self</span>.position)];</div><div class="line">        <span class="keyword">self</span>.position ++;</div><div class="line">        <span class="keyword">return</span> item;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="literal">nil</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<ul>
<li>修改<code>DinerMenu</code>的类：</li>
</ul>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> 返回菜单项</div><div class="line"> </div><div class="line"> <span class="doctag">@return</span> 菜单总数据</div><div class="line"> */</div><div class="line"><span class="comment">//- (NSDictionary *) menuItems;</span></div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> 迭代器的接口</div><div class="line"> </div><div class="line"> <span class="doctag">@return</span> 迭代器对象</div><div class="line"> */</div><div class="line">- (id&lt;Iterator&gt;)iterator;</div></pre></td></tr></table></figure>
<ul>
<li>.m 文件的具体实现：</li>
</ul>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">- (id&lt;Iterator&gt;)iterator &#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">[[DinerMenuIterator alloc] initWithItems:[self.items copy]]</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">//- (NSDictionary *) menuItems &#123;</div><div class="line">//    <span class="keyword">return</span> [self.items copy];</div><div class="line">//&#125;</div></pre></td></tr></table></figure>
<ul>
<li>这样打印代码如下：</li>
</ul>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)printMenu &#123;</div><div class="line">    </div><div class="line">    <span class="keyword">self</span>.pancakeMenu = [PancakeHouseMenu new];</div><div class="line">    <span class="keyword">id</span> &lt;Iterator&gt;pancakIterator = [<span class="keyword">self</span>.pancakeMenu iterator];</div><div class="line">    </div><div class="line">    <span class="keyword">self</span>.dinerMenu = [DinerMenu new];</div><div class="line">    <span class="keyword">id</span> &lt;Iterator&gt;dinerIterator = [<span class="keyword">self</span>.dinerMenu iterator];</div><div class="line">    </div><div class="line">    </div><div class="line">    [<span class="keyword">self</span> iterate_print_menu:pancakIterator];</div><div class="line">    </div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"--------------------"</span>);</div><div class="line">    </div><div class="line">    [<span class="keyword">self</span> iterate_print_menu:dinerIterator];</div><div class="line">    </div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)iterate_print_menu:(<span class="keyword">id</span>&lt;Iterator&gt;)it &#123;</div><div class="line">    <span class="keyword">while</span> (it.hasNext) &#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, it.next);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>这样就解决了游走于每一个元素内部之间，而不需要暴露内部的实现。</li>
<li>迭代器模式：提供一种方法顺序访问聚合对象中各个元素，而又不暴露其内部的实现。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;代码写多了，就想把代码写好，将代码写好，就必然要学习设计模式，今天重点学习一下迭代器模式和组合模式。这里我参照的学习是以JAVA为参照的《Header-First》设计模式，我这里会以Object-c的格式来重写，最后以一个我项目中的实例来说明一下。&quot;&gt;&lt;a href=&quot;#代码写多了，就想把代码写好，将代码写好，就必然要学习设计模式，今天重点学习一下迭代器模式和组合模式。这里我参照的学习是以JAVA为参照的《Header-First》设计模式，我这里会以Object-c的格式来重写，最后以一个我项目中的实例来说明一下。&quot; class=&quot;headerlink&quot; title=&quot;代码写多了，就想把代码写好，将代码写好，就必然要学习设计模式，今天重点学习一下迭代器模式和组合模式。这里我参照的学习是以JAVA为参照的《Header First》设计模式，我这里会以Object-c的格式来重写，最后以一个我项目中的实例来说明一下。&quot;&gt;&lt;/a&gt;代码写多了，就想把代码写好，将代码写好，就必然要学习设计模式，今天重点学习一下迭代器模式和组合模式。这里我参照的学习是以JAVA为参照的《Header First》设计模式，我这里会以Object-c的格式来重写，最后以一个我项目中的实例来说明一下。&lt;/h3&gt;&lt;h3 id=&quot;1-1-迭代器设计模式：&quot;&gt;&lt;a href=&quot;#1-1-迭代器设计模式：&quot; class=&quot;headerlink&quot; title=&quot;1.1 迭代器设计模式：&quot;&gt;&lt;/a&gt;1.1 迭代器设计模式：&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;问题：这里有两个类：一个是煎饼餐厅菜类&lt;code&gt;PancakeHouseMenu&lt;/code&gt;(这里假设代码中是以数组的形式来存储),一个是普通餐厅类&lt;code&gt;DinerMenu&lt;/code&gt;(这里假设是以字典的形式来存储),他们都有自己原有的代码，以及逻辑，现在如何将这两个菜单类合并成一个类更好给用户调用。&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="日志" scheme="http://www.ghcoder.com/categories/%E6%97%A5%E5%BF%97/"/>
    
    
      <category term="OC" scheme="http://www.ghcoder.com/tags/OC/"/>
    
  </entry>
  
  <entry>
    <title>学习《iOS Animations》</title>
    <link href="http://www.ghcoder.com/2017/07/04/20170704/"/>
    <id>http://www.ghcoder.com/2017/07/04/20170704/</id>
    <published>2017-07-04T09:55:12.000Z</published>
    <updated>2017-07-04T02:33:34.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="最近一直在学习《iOS-Animations》这本书，记录一下学习到知识点："><a href="#最近一直在学习《iOS-Animations》这本书，记录一下学习到知识点：" class="headerlink" title="最近一直在学习《iOS Animations》这本书，记录一下学习到知识点："></a>最近一直在学习《iOS Animations》这本书，记录一下学习到知识点：</h2><ul>
<li>这本都快看完了，一直觉得没啥可做笔记的，以为UI动画的一些用法，你知道就是知道，不知道就是不知道，知道了 就觉得很容易，所以觉得这是一个熟能生巧的技能，但是想想，这本书都快看完了，还是要留下一些什么，所以觉得记些东西。</li>
</ul>
<h3 id="Animating-Constraints-如何在动画中修改约束"><a href="#Animating-Constraints-如何在动画中修改约束" class="headerlink" title="Animating Constraints 如何在动画中修改约束"></a>Animating Constraints 如何在动画中修改约束</h3><ul>
<li>最简单的就是获取<code>NSLayoutConstraint!</code>的属性值，直接修改对象的<code>constant</code>可以直接实现约束值的改变。官方的api解释如下：</li>
</ul>
<blockquote>
<p> Unlike the other properties, the constant may be modified after constraint creation.  Setting the constant on an existing constraint performs much better than removing the constraint and adding a new one that’s just like the old but for having a new constant.</p>
</blockquote>
<a id="more"></a>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@IBOutlet</span> weak var <span class="string">menuHeightConstraint:</span> NSLayoutConstraint!</div><div class="line">menuHeightConstraint.constant = isMenuOpen ? 200.0 : <span class="number">60.0</span></div></pre></td></tr></table></figure>
<h4 id="1-1-添加动画"><a href="#1-1-添加动画" class="headerlink" title="1.1 添加动画"></a>1.1 添加动画</h4><ul>
<li>运用类似这些api<code>animate(withDuration:animations:)</code>就可以实现动画。</li>
<li>可以在animations的closure里面添加动画的代码，也可以在外面修改完响应的约束代码，然后直接在closure中调用<code>self.view.layoutIfNeeded()</code></li>
</ul>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">UIView.animate(<span class="string">withDuration:</span> <span class="number">1.0</span>, <span class="string">delay:</span> <span class="number">0.0</span>, <span class="string">usingSpringWithDamping:</span> <span class="number">0.4</span>, <span class="string">initialSpringVelocity:</span> <span class="number">10.0</span>, <span class="string">options:</span> .curveEaseIn, <span class="string">animations:</span> &#123;</div><div class="line">    self.view.layoutIfNeeded()        </div><div class="line">&#125;, <span class="string">completion:</span> nil)</div></pre></td></tr></table></figure>
<h4 id="1-2-遍历修改约束"><a href="#1-2-遍历修改约束" class="headerlink" title="1.2 遍历修改约束"></a>1.2 遍历修改约束</h4><figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">titleLabel.superview?.constraints.<span class="keyword">forEach</span> &#123; <span class="keyword">constraint</span> <span class="keyword">in</span></div><div class="line">	 <span class="keyword">if</span> <span class="keyword">constraint</span>.firstItem === titleLabel &amp;&amp;</div><div class="line">     <span class="keyword">constraint</span>.firstAttribute == .centerX &#123;</div><div class="line">    <span class="keyword">constraint</span>.constant = isMenuOpen ? -100.0 : 0.0</div><div class="line">    <span class="built_in">return</span></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>这里的作用就是遍历<code>titleLabel</code>的父视图的约束.</li>
<li>表达式<code>firstItem.firstAttribute = secondItem.secondAttribute + constant</code></li>
<li>删除某个约束，是通过 <code>isActive</code>的属性来设置的，<code>isActive</code>的属性为<code>false</code>的时候，就代表去除约束, 当设置<code>isActive</code>的属性值为<code>false</code>,视图的层级会删除约束，并且如果没有对象引用它，它就会从内存中去除掉。</li>
</ul>
<h4 id="1-3-添加新的约束"><a href="#1-3-添加新的约束" class="headerlink" title="1.3 添加新的约束"></a>1.3 添加新的约束</h4><ul>
<li>1.在刚才枚举中，可以通过循环，并且创建一个新的约束，并且替换掉：</li>
</ul>
<figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">let newConstraint = NSLayoutConstraint(</div><div class="line"><span class="symbol">  item:</span> titleLabel,</div><div class="line"><span class="symbol">  attribute:</span> .centerY,</div><div class="line"><span class="symbol">  relatedBy:</span> .equal,</div><div class="line"><span class="symbol">  toItem:</span> titleLabel.superview!,</div><div class="line"><span class="symbol">  attribute:</span> .centerY,</div><div class="line"><span class="symbol">  multiplier:</span> isMenuOpen ? <span class="number">0.67</span> : <span class="number">1.0</span>,</div><div class="line"><span class="symbol">  constant:</span> <span class="number">5.0</span>)</div><div class="line">newConstraint.identifier = <span class="string">"TitleCenterY"</span></div><div class="line">newConstraint.isActive = true</div></pre></td></tr></table></figure>
<ul>
<li>通过设置<code>identifier</code>的属性值，来找到视图层级的元素，通过设置<code>isActive</code>来告诉<code>Autolayout</code>将其应用到当前的布局中去。</li>
<li>如果是手动编写<code>autolayout</code>的代码，创建完新的约束后，需要通过<code>addConstraint</code>,将新的约束添加到视图上去。</li>
<li>但是系统更偏向于使用<code>NSLayoutConstraint.activate(_:)</code>的类方法,接受一个 constraint的数组，性能更优，官方api的解释如下:</li>
</ul>
<blockquote>
<p>Convenience method that activates each constraint in the contained array, in the same manner as setting active=YES. This is often more efficient than activating each constraint individually.</p>
</blockquote>
<ul>
<li>2.</li>
</ul>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">let conX = imageView<span class="selector-class">.centerXAnchor</span><span class="selector-class">.constraint</span>(equalTo: view.centerXAnchor)</div><div class="line">let conBottom = imageView<span class="selector-class">.bottomAnchor</span><span class="selector-class">.constraint</span>(equalTo: view<span class="selector-class">.bottomAnchor</span>, constant: imageView<span class="selector-class">.frame</span><span class="selector-class">.height</span>)</div><div class="line">let conWidth  = imageView<span class="selector-class">.widthAnchor</span><span class="selector-class">.constraint</span>(equalTo: view<span class="selector-class">.widthAnchor</span>, multiplier: <span class="number">0.33</span>, constant: -<span class="number">50</span>)</div><div class="line">let conHeight = imageView<span class="selector-class">.heightAnchor</span><span class="selector-class">.constraint</span>(equalTo: imageView.widthAnchor)</div><div class="line">NSLayoutConstraint.activate([conX, conBottom, conWidth, conHeight])</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;最近一直在学习《iOS-Animations》这本书，记录一下学习到知识点：&quot;&gt;&lt;a href=&quot;#最近一直在学习《iOS-Animations》这本书，记录一下学习到知识点：&quot; class=&quot;headerlink&quot; title=&quot;最近一直在学习《iOS Animations》这本书，记录一下学习到知识点：&quot;&gt;&lt;/a&gt;最近一直在学习《iOS Animations》这本书，记录一下学习到知识点：&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;这本都快看完了，一直觉得没啥可做笔记的，以为UI动画的一些用法，你知道就是知道，不知道就是不知道，知道了 就觉得很容易，所以觉得这是一个熟能生巧的技能，但是想想，这本书都快看完了，还是要留下一些什么，所以觉得记些东西。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Animating-Constraints-如何在动画中修改约束&quot;&gt;&lt;a href=&quot;#Animating-Constraints-如何在动画中修改约束&quot; class=&quot;headerlink&quot; title=&quot;Animating Constraints 如何在动画中修改约束&quot;&gt;&lt;/a&gt;Animating Constraints 如何在动画中修改约束&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;最简单的就是获取&lt;code&gt;NSLayoutConstraint!&lt;/code&gt;的属性值，直接修改对象的&lt;code&gt;constant&lt;/code&gt;可以直接实现约束值的改变。官方的api解释如下：&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt; Unlike the other properties, the constant may be modified after constraint creation.  Setting the constant on an existing constraint performs much better than removing the constraint and adding a new one that’s just like the old but for having a new constant.&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="日志" scheme="http://www.ghcoder.com/categories/%E6%97%A5%E5%BF%97/"/>
    
    
      <category term="Swift" scheme="http://www.ghcoder.com/tags/Swift/"/>
    
  </entry>
  
  <entry>
    <title>学习算法</title>
    <link href="http://www.ghcoder.com/2017/06/20/20170620/"/>
    <id>http://www.ghcoder.com/2017/06/20/20170620/</id>
    <published>2017-06-20T09:55:12.000Z</published>
    <updated>2017-07-04T02:33:28.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前两天闲来无事有重新温习了一下算法，用Swift3重写了一下算法：今天先写一下O-n-2-的两种算法：选择排序、插入排序，以及算法复杂度为O-nlogn-的：递归排序"><a href="#前两天闲来无事有重新温习了一下算法，用Swift3重写了一下算法：今天先写一下O-n-2-的两种算法：选择排序、插入排序，以及算法复杂度为O-nlogn-的：递归排序" class="headerlink" title="前两天闲来无事有重新温习了一下算法，用Swift3重写了一下算法：今天先写一下O(n^2)的两种算法：选择排序、插入排序，以及算法复杂度为O(nlogn)的：递归排序"></a>前两天闲来无事有重新温习了一下算法，用<code>Swift3</code>重写了一下算法：今天先写一下<code>O(n^2)</code>的两种算法：<code>选择排序</code>、<code>插入排序</code>，以及算法复杂度为<code>O(nlogn)</code>的：<code>递归排序</code></h3><ul>
<li>项目我已经丢到github上了，可以自己去下载： [<a href="https://github.com/Ghstart/play_with_algorithm" target="_blank" rel="external">https://github.com/Ghstart/play_with_algorithm</a>]</li>
</ul>
<h4 id="1-1-准备工作"><a href="#1-1-准备工作" class="headerlink" title="1.1 准备工作"></a>1.1 准备工作</h4><ul>
<li>首先写算法，我需要有准备为我产生测试用例的方法，因此我定义了了一个类<code>Helper</code>,并且写静态方法：</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">generateSources</span><span class="params">(<span class="built_in">count</span>: Int)</span></span> -&gt; [<span class="type">Int</span>] &#123;</div><div class="line">      <span class="keyword">var</span> sources: [<span class="type">Int</span>] = [<span class="type">Int</span>]()</div><div class="line">      <span class="keyword">for</span> <span class="number">_</span> <span class="keyword">in</span> <span class="number">1</span>...<span class="built_in">count</span> &#123;</div><div class="line">          <span class="keyword">let</span> randomNum: <span class="type">UInt32</span> = arc4random_uniform(<span class="number">1_000_000</span>)</div><div class="line">          sources.append(<span class="type">Int</span>(randomNum))</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">return</span> sources</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<a id="more"></a>
<ul>
<li>学习算法必不可少的，就是需要去验证我的算法，是否正确，这里我写了一个静态方法去验证我的算法是否排序正确：</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">isSorted</span><span class="params">(testSources: [Int])</span></span> -&gt; <span class="type">Bool</span> &#123;</div><div class="line">       </div><div class="line">       <span class="keyword">if</span> testSources.<span class="built_in">count</span> &lt; <span class="number">3</span> &#123;</div><div class="line">           <span class="built_in">assert</span>(<span class="literal">true</span>, <span class="string">"你逗我呢？？就几个自己数"</span>)</div><div class="line">           <span class="keyword">return</span> <span class="literal">false</span></div><div class="line">       &#125;</div><div class="line">       </div><div class="line">       </div><div class="line">       <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>...testSources.<span class="built_in">count</span> - <span class="number">2</span> &#123;</div><div class="line">           <span class="keyword">if</span> testSources[i] &gt; testSources[i + <span class="number">1</span>] &#123;</div><div class="line">               <span class="keyword">return</span> <span class="literal">false</span></div><div class="line">           &#125;</div><div class="line">       &#125;</div><div class="line">       </div><div class="line">       <span class="keyword">return</span> <span class="literal">true</span></div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<ul>
<li>写算法，我必须要去计算每个算法所执行的时间，通过<code>Unit Test</code>的<code>measure</code>可以来看出每个方法执行的时间，这里我也写了一个静态方法：</li>
</ul>
<figure class="highlight livescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">static func executeTime<span class="function"><span class="params">(whichFunctionName: String, testSources: [Int], operation: ([Int]) -&gt; ([Int]))</span> &#123;</span></div><div class="line">      <span class="title">let</span> <span class="title">methodStart</span> = <span class="title">Date</span><span class="params">()</span></div><div class="line">      <span class="title">let</span> <span class="title">tt</span> = <span class="title">operation</span><span class="params">(testSources)</span></div><div class="line">      <span class="title">let</span> <span class="title">methodFinished</span> = <span class="title">Date</span><span class="params">()</span></div><div class="line">      <span class="title">let</span> <span class="title">executionTime</span> = <span class="title">methodFinished</span>.<span class="title">timeIntervalSince</span><span class="params">(methodStart)</span></div><div class="line">      <span class="title">print</span><span class="params">(String(format:<span class="string">"执行%@花费%.9fs"</span>, whichFunctionName, executionTime))</span></div><div class="line">      <span class="title">assert</span><span class="params">(Helper.isSorted(testSources: tt), <span class="string">"排序后还是存在问题！！"</span>)</span></div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<h4 id="1-2-开始coding"><a href="#1-2-开始coding" class="headerlink" title="1.2 开始coding"></a>1.2 开始coding</h4><ul>
<li>选择排序，其实说白了，就找<code>索引</code>, 从当前位置一直往后找，并且判断，如果小，就找出他的索引，再继续往后找，直到到最后一位, <code>这里注意，它是不能提前结束的，所以这就是为什么说他会比插入排序慢了</code>：</li>
</ul>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">     * 选择排序</div><div class="line">     */</div><div class="line">    func selectionSort(sources: [Int]) -&gt; [Int] &#123;</div><div class="line">        </div><div class="line">        <span class="selector-tag">var</span> sources = sources</div><div class="line">        </div><div class="line">        <span class="keyword">for</span> <span class="selector-tag">i</span> <span class="keyword">in</span> <span class="number">0</span>..&lt;sources<span class="selector-class">.count</span> &#123;</div><div class="line">            </div><div class="line">            <span class="selector-tag">var</span> minIndex = <span class="selector-tag">i</span></div><div class="line">            </div><div class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> i+<span class="number">1</span>..&lt;sources<span class="selector-class">.count</span>  &#123;</div><div class="line">                </div><div class="line">                <span class="keyword">if</span> sources[j] &lt; sources[minIndex] &#123;</div><div class="line">                    </div><div class="line">                    minIndex = j</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            </div><div class="line">            <span class="keyword">if</span> minIndex != <span class="selector-tag">i</span> &#123;</div><div class="line">                swap(&amp;sources[minIndex], &amp;sources[i])</div><div class="line">            &#125;</div><div class="line">           </div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        return sources</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<ul>
<li>插入排序，是从第二个位置开始往前找，判断前面的是否比他大，比他大的话，就将前面的数字往后挪，因此类推：</li>
</ul>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">   * 插入排序</div><div class="line">   */</div><div class="line">  func insertionSort(sources: [Int]) -&gt; [Int] &#123;</div><div class="line">      </div><div class="line">      <span class="selector-tag">var</span> sources = sources</div><div class="line">      </div><div class="line">      <span class="keyword">for</span> <span class="selector-tag">i</span> <span class="keyword">in</span> <span class="number">1</span>..&lt;sources<span class="selector-class">.count</span> &#123;</div><div class="line"></div><div class="line">          let e = sources[i]</div><div class="line">          <span class="selector-tag">var</span> j = <span class="selector-tag">i</span> - <span class="number">1</span></div><div class="line">          </div><div class="line">          while ( j &gt;= <span class="number">0</span> &amp;&amp; sources[j] &gt; e) &#123;</div><div class="line">              </div><div class="line">              sources[j + <span class="number">1</span>] = sources[j]</div><div class="line">              </div><div class="line">              j = j - <span class="number">1</span></div><div class="line">          &#125;</div><div class="line">          </div><div class="line">          sources[j+<span class="number">1</span>] = e</div><div class="line">      </div><div class="line">      &#125;</div><div class="line">      </div><div class="line">      return sources</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<ul>
<li>递归排序</li>
</ul>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">   * 归并排序</div><div class="line">   */</div><div class="line">  func mergeSort(sources: [Int]) -&gt; [Int] &#123;</div><div class="line">      </div><div class="line">      <span class="selector-tag">var</span> sources = sources</div><div class="line">      </div><div class="line">      __mergeSort(sources: &amp;sources, l: <span class="number">0</span>, r: sources<span class="selector-class">.count</span> - <span class="number">1</span>)</div><div class="line">      </div><div class="line">      return sources</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  func __mergeSort( sources: inout [Int], l: Int, r: Int) &#123;</div><div class="line">      </div><div class="line">      <span class="keyword">if</span> l &gt;= r &#123;</div><div class="line">          return</div><div class="line">      &#125;</div><div class="line">      </div><div class="line">      let mid: Int = (l + r) / <span class="number">2</span></div><div class="line">      __mergeSort(sources: &amp;sources, l: l, r: mid)</div><div class="line">      __mergeSort(sources: &amp;sources, l: mid+<span class="number">1</span>, r: r)</div><div class="line">      __merge(sources: &amp;sources, l: l, mid: mid, r: r)</div><div class="line">      </div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="comment">// [l...mid]  [mid+1...r]</span></div><div class="line">  func __merge(sources: inout [Int], l: Int, mid: Int, r: Int) &#123;</div><div class="line">      </div><div class="line">      <span class="selector-tag">var</span> aux = [Int]()</div><div class="line">      <span class="keyword">for</span> <span class="selector-tag">i</span> <span class="keyword">in</span> l..<span class="selector-class">.r</span> &#123;</div><div class="line">          aux.insert(sources[i], at: i-l)</div><div class="line">      &#125;</div><div class="line">      </div><div class="line">      <span class="selector-tag">var</span> <span class="selector-tag">i</span>: Int = l</div><div class="line">      <span class="selector-tag">var</span> j: Int = mid + <span class="number">1</span></div><div class="line">      <span class="keyword">for</span> k <span class="keyword">in</span> l..<span class="selector-class">.r</span> &#123;</div><div class="line">          </div><div class="line">          <span class="keyword">if</span> <span class="selector-tag">i</span> &gt; mid &#123;</div><div class="line">              </div><div class="line">              sources[k] = aux[j-l]</div><div class="line">              j = j + <span class="number">1</span></div><div class="line">              </div><div class="line">          &#125; <span class="keyword">else</span> <span class="keyword">if</span> j &gt; r &#123;</div><div class="line">              </div><div class="line">              sources[k] = aux[i-l]</div><div class="line">              <span class="selector-tag">i</span> = <span class="selector-tag">i</span> + <span class="number">1</span></div><div class="line">              </div><div class="line">          &#125; <span class="keyword">else</span> <span class="keyword">if</span> aux[i-l] &lt; aux[j-l] &#123;</div><div class="line">              </div><div class="line">              sources[k] = aux[i-l]</div><div class="line">              <span class="selector-tag">i</span> = <span class="selector-tag">i</span> + <span class="number">1</span></div><div class="line">              </div><div class="line">          &#125; <span class="keyword">else</span> &#123;</div><div class="line">              </div><div class="line">              sources[k] = aux[j-l]</div><div class="line">              j = j + <span class="number">1</span></div><div class="line">          &#125;</div><div class="line">          </div><div class="line">      &#125;</div><div class="line">      </div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<h4 id="1-3-测试："><a href="#1-3-测试：" class="headerlink" title="1.3 测试："></a>1.3 测试：</h4><ul>
<li>如何调用：</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">    <span class="keyword">super</span>.viewDidLoad()</div><div class="line">    </div><div class="line">    <span class="keyword">let</span> arr = <span class="type">Helper</span>.generateSources(<span class="built_in">count</span>: <span class="number">1_000</span>)</div><div class="line">    <span class="keyword">let</span> arr1 = arr</div><div class="line">    </div><div class="line">    <span class="type">Helper</span>.executeTime(whichFunctionName: <span class="string">"插入排序"</span>, testSources: arr, operation: <span class="built_in">insertionSort</span>)</div><div class="line">    <span class="type">Helper</span>.executeTime(whichFunctionName: <span class="string">"选择排序"</span>, testSources: arr1, operation: selectionSort)</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>控制台的打印：</li>
</ul>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">执行插入排序花费0<span class="selector-class">.016882956s</span></div><div class="line">执行选择排序花费0<span class="selector-class">.023320019s</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前两天闲来无事有重新温习了一下算法，用Swift3重写了一下算法：今天先写一下O-n-2-的两种算法：选择排序、插入排序，以及算法复杂度为O-nlogn-的：递归排序&quot;&gt;&lt;a href=&quot;#前两天闲来无事有重新温习了一下算法，用Swift3重写了一下算法：今天先写一下O-n-2-的两种算法：选择排序、插入排序，以及算法复杂度为O-nlogn-的：递归排序&quot; class=&quot;headerlink&quot; title=&quot;前两天闲来无事有重新温习了一下算法，用Swift3重写了一下算法：今天先写一下O(n^2)的两种算法：选择排序、插入排序，以及算法复杂度为O(nlogn)的：递归排序&quot;&gt;&lt;/a&gt;前两天闲来无事有重新温习了一下算法，用&lt;code&gt;Swift3&lt;/code&gt;重写了一下算法：今天先写一下&lt;code&gt;O(n^2)&lt;/code&gt;的两种算法：&lt;code&gt;选择排序&lt;/code&gt;、&lt;code&gt;插入排序&lt;/code&gt;，以及算法复杂度为&lt;code&gt;O(nlogn)&lt;/code&gt;的：&lt;code&gt;递归排序&lt;/code&gt;&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;项目我已经丢到github上了，可以自己去下载： [&lt;a href=&quot;https://github.com/Ghstart/play_with_algorithm&quot;&gt;https://github.com/Ghstart/play_with_algorithm&lt;/a&gt;]&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;1-1-准备工作&quot;&gt;&lt;a href=&quot;#1-1-准备工作&quot; class=&quot;headerlink&quot; title=&quot;1.1 准备工作&quot;&gt;&lt;/a&gt;1.1 准备工作&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;首先写算法，我需要有准备为我产生测试用例的方法，因此我定义了了一个类&lt;code&gt;Helper&lt;/code&gt;,并且写静态方法：&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;generateSources&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;built_in&quot;&gt;count&lt;/span&gt;: Int)&lt;/span&gt;&lt;/span&gt; -&amp;gt; [&lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt;] &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; sources: [&lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt;] = [&lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt;]()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;...&lt;span class=&quot;built_in&quot;&gt;count&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; randomNum: &lt;span class=&quot;type&quot;&gt;UInt32&lt;/span&gt; = arc4random_uniform(&lt;span class=&quot;number&quot;&gt;1_000_000&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          sources.append(&lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt;(randomNum))&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; sources&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="日志" scheme="http://www.ghcoder.com/categories/%E6%97%A5%E5%BF%97/"/>
    
    
      <category term="算法" scheme="http://www.ghcoder.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>学习Android开发基础笔记Tips</title>
    <link href="http://www.ghcoder.com/2017/05/31/20170531/"/>
    <id>http://www.ghcoder.com/2017/05/31/20170531/</id>
    <published>2017-05-31T09:55:12.000Z</published>
    <updated>2017-05-31T09:59:51.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="学习Android-最近正好有时间，可以系统的看看Android的系统开发，记录下学习的笔记，供今后参考。"><a href="#学习Android-最近正好有时间，可以系统的看看Android的系统开发，记录下学习的笔记，供今后参考。" class="headerlink" title="学习Android, 最近正好有时间，可以系统的看看Android的系统开发，记录下学习的笔记，供今后参考。"></a>学习Android, 最近正好有时间，可以系统的看看Android的系统开发，记录下学习的笔记，供今后参考。</h3><h4 id="1-1-基础环境："><a href="#1-1-基础环境：" class="headerlink" title="1.1 基础环境："></a>1.1 基础环境：</h4><ol>
<li>使用的IDE为：Android Studio.</li>
<li>SDK 最低的版本为：Android 4.1.</li>
</ol>
<ul>
<li><code>LinearLayout</code>是布局组件，可以从继承关系上看出关系, 继承自View的子类<code>ViewGroup</code>，并且<code>FrameLayout</code>,<code>TableLayout</code>,<code>RelativeLayout</code>他们都是继承自<code>ViewGroup</code></li>
</ul>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 继承关系</span></div><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">LinearLayout</span> <span class="keyword">extends</span> <span class="title">ViewGroup</span></span></div><div class="line"></div><div class="line">public <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">ViewGroup</span> <span class="keyword">extends</span> <span class="title">View</span> <span class="title">implements</span> <span class="title">ViewParent</span>, <span class="title">ViewManager</span></span></div></pre></td></tr></table></figure>
<a id="more"></a>
<h4 id="1-2-UI属性"><a href="#1-2-UI属性" class="headerlink" title="1.2 UI属性:"></a>1.2 UI属性:</h4><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="string">match_parent:</span> 视图与其父视图大小相同</div><div class="line"><span class="string">wrap_content:</span> 视图将根据展示的内容自动调整大小</div><div class="line"><span class="string">android:</span><span class="string">orientation:</span> LinearLayout 具有的属性，决定子组件是“水平”还是“垂直”排列</div></pre></td></tr></table></figure>
<ul>
<li>字符串，对某个组件setString的时候，你会发现是这样写的：<code>@string/xxxx</code>, 这里需要注意一下：<code>android:text属性值不是字符串值，而是对字符串资源的应用</code>，其实这时候你setString的时候，实际上是去<code>app/res/values</code>的文件夹中查找<code>strings.xml</code>。</li>
</ul>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;<span class="built_in">string</span> <span class="built_in">name</span>=<span class="string">"xxxx"</span>&gt;YYYYYY&lt;/<span class="built_in">string</span>&gt;</div></pre></td></tr></table></figure>
<ul>
<li>随意创建一个文件，系统会默认给我们创建一些代码：</li>
<li>这里的<code>R.java</code>文件是在代码编译的时候创建的:</li>
</ul>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">QuizActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line">		</div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="keyword">protected</span> void onCreate(<span class="type">Bundle</span> savedInstanceState) &#123;</div><div class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">    setContentView(<span class="type">R</span>.layout.activity_quiz);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><code>AppCompatActivity</code>是<code>Activity</code>的子类</li>
<li><code>activity</code>创建完后，需要获取自己的界面：</li>
</ul>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">public</span> <span class="selector-tag">void</span> <span class="selector-tag">setContentView</span>(<span class="variable">@LayoutRes</span> int layoutResID) &#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>这里的<code>layoutResID</code>就是要在资源中来寻找相应的资源。资源文件需要从<code>app/res</code>目录下寻找，和<code>TextView</code>中获取字符串的方法是一样的，需要去<code>app/res/values</code>中的<code>strings.xml</code>中去寻找：</li>
</ul>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">public</span> <span class="selector-tag">final</span> <span class="selector-tag">void</span> <span class="selector-tag">setText</span>(<span class="variable">@StringRes</span> int resid) &#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="1-3-按钮的点击："><a href="#1-3-按钮的点击：" class="headerlink" title="1.3 按钮的点击："></a>1.3 按钮的点击：</h4><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">mNextButton = (Button) findViewById(R.id.next_button);</div><div class="line">     mNextButton.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</div><div class="line">         <span class="meta">@Override</span></div><div class="line">         <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">          </div><div class="line">         &#125;</div><div class="line">     &#125;);</div></pre></td></tr></table></figure>
<h4 id="1-4-Toast的提示信息："><a href="#1-4-Toast的提示信息：" class="headerlink" title="1.4 Toast的提示信息："></a>1.4 Toast的提示信息：</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">Toast</span><span class="selector-class">.makeText</span>(<span class="selector-tag">CurrentActivity</span><span class="selector-class">.this</span>, <span class="selector-tag">R</span><span class="selector-class">.string</span><span class="selector-class">.xxx</span>, <span class="selector-tag">Toast</span><span class="selector-class">.LENGTH_SHORT</span>)<span class="selector-class">.show</span>();</div></pre></td></tr></table></figure>
<h4 id="1-5-生命周期"><a href="#1-5-生命周期" class="headerlink" title="1.5 生命周期"></a>1.5 生命周期</h4><ol>
<li>不存在 -&gt;(onCreate)-&gt; 停止（不可见）-&gt;(onStart)-&gt;暂停（可见）-&gt; (onResume) 运行（可见 &amp; 在前台）</li>
<li>运行（可见 &amp; 在前台）-&gt;(onPause)-&gt; 暂停（可见 -&gt;(onStop)-&gt; 停止（不可见 -&gt;(onDestory)-&gt; 不存在</li>
</ol>
<ul>
<li><p>在创建了Activity之后，并且此实例出现在屏幕之前会调用<code>onCreate</code>的方法</p>
</li>
<li><p>转屏幕的时候，生命周期的改变：</p>
</li>
</ul>
<ol>
<li>当屏幕发生转动的时候，Activity的生命周期会从新再走一遍，也就是 上面的会先按照 2 -&gt; 1,每次转屏都会这样。</li>
</ol>
<ul>
<li>想要在转屏的时候，保存数据，可以调用下面<code>onSaveInstanceState</code>的方法来保存数据，下次在需要的时候，可以获取数据：</li>
</ul>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">void</span> <span class="title">onSaveInstanceState</span><span class="params">(Bundle outState)</span> </span>&#123;</div><div class="line">     <span class="keyword">super</span>.onSaveInstanceState(outState);</div><div class="line">     outState.putInt(KEY_INDEX, mCurrentIndex);</div><div class="line">&#125;</div><div class="line">   </div><div class="line">   </div><div class="line">  <span class="meta">@Override</span></div><div class="line">   <span class="keyword">protected</span> <span class="function"><span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">       <span class="keyword">super</span>.onCreate(savedInstanceState); </div><div class="line">   	   <span class="keyword">if</span> (savedInstanceState != <span class="keyword">null</span>) &#123;</div><div class="line">           mCurrentIndex = savedInstanceState.getInt(KEY_INDEX);</div><div class="line">       &#125;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<ul>
<li>但是转屏并且保存数据的生命周期方法的调用顺序为：</li>
</ul>
<ol>
<li><code>onPause()</code> -&gt; <code>onSaveInstanceState()</code> -&gt; <code>onStop()</code> -&gt; <code>onDestory()</code></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;学习Android-最近正好有时间，可以系统的看看Android的系统开发，记录下学习的笔记，供今后参考。&quot;&gt;&lt;a href=&quot;#学习Android-最近正好有时间，可以系统的看看Android的系统开发，记录下学习的笔记，供今后参考。&quot; class=&quot;headerlink&quot; title=&quot;学习Android, 最近正好有时间，可以系统的看看Android的系统开发，记录下学习的笔记，供今后参考。&quot;&gt;&lt;/a&gt;学习Android, 最近正好有时间，可以系统的看看Android的系统开发，记录下学习的笔记，供今后参考。&lt;/h3&gt;&lt;h4 id=&quot;1-1-基础环境：&quot;&gt;&lt;a href=&quot;#1-1-基础环境：&quot; class=&quot;headerlink&quot; title=&quot;1.1 基础环境：&quot;&gt;&lt;/a&gt;1.1 基础环境：&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;使用的IDE为：Android Studio.&lt;/li&gt;
&lt;li&gt;SDK 最低的版本为：Android 4.1.&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;LinearLayout&lt;/code&gt;是布局组件，可以从继承关系上看出关系, 继承自View的子类&lt;code&gt;ViewGroup&lt;/code&gt;，并且&lt;code&gt;FrameLayout&lt;/code&gt;,&lt;code&gt;TableLayout&lt;/code&gt;,&lt;code&gt;RelativeLayout&lt;/code&gt;他们都是继承自&lt;code&gt;ViewGroup&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight scala&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 继承关系&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;public &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;LinearLayout&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ViewGroup&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;public &lt;span class=&quot;keyword&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ViewGroup&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ViewParent&lt;/span&gt;, &lt;span class=&quot;title&quot;&gt;ViewManager&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="日志" scheme="http://www.ghcoder.com/categories/%E6%97%A5%E5%BF%97/"/>
    
    
      <category term="Android" scheme="http://www.ghcoder.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>学习爬虫Scrapy[官网教程]</title>
    <link href="http://www.ghcoder.com/2017/05/25/20170525/"/>
    <id>http://www.ghcoder.com/2017/05/25/20170525/</id>
    <published>2017-05-25T02:37:12.000Z</published>
    <updated>2017-05-25T02:55:42.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-学习爬虫框架-Scrapy"><a href="#1-学习爬虫框架-Scrapy" class="headerlink" title="1.学习爬虫框架 Scrapy"></a>1.学习爬虫框架 Scrapy</h4><ul>
<li>前几天一直在正Django的框架，现在基本上已经ok了，如果我们需要自己创建属于自己的网站、需要前台展示数据，后台可以编辑数据，可以插入到数据库，可以建立自己的数据类型，使用Django已经够了，那么现在有一个很重要的难题：数据从哪里来？怎么获取？如何存取？-&gt; <code>Scrapy</code>能够很好满足我们这些需求。</li>
<li>目前文档是线上最新的版本:<code>Scrapy 1.3</code>[<a href="https://docs.scrapy.org/en/latest/" target="_blank" rel="external">https://docs.scrapy.org/en/latest/</a>]</li>
</ul>
<h4 id="1-1-什么是Scrapy"><a href="#1-1-什么是Scrapy" class="headerlink" title="1.1 什么是Scrapy"></a>1.1 什么是Scrapy</h4><ul>
<li><code>scrapy</code>是一个web端抓取网站数据的框架，可以用来数据挖掘，信息处理等等</li>
</ul>
<a id="more"></a>
<h4 id="1-2-安装Scrapy"><a href="#1-2-安装Scrapy" class="headerlink" title="1.2 安装Scrapy"></a>1.2 安装Scrapy</h4><ul>
<li>安装scrapy官网建议两种途径：</li>
</ul>
<p>1.使用<code>conda</code>:<br><figure class="highlight cmake"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">conda <span class="keyword">install</span> -c conda-forge scrapy</div></pre></td></tr></table></figure></p>
<p>2.使用<code>pip</code>: </p>
<figure class="highlight cmake"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">pip <span class="keyword">install</span> Scrapy</div></pre></td></tr></table></figure>
<ul>
<li>官方建议，我们在安装<code>Scrapy</code>的时候，最好安装自己创建的虚拟环境中<code>a dedicated virtualenv</code>，这样至少不会与系统的包产生冲突。</li>
<li><code>virtualenv</code>的安装网址为：[<a href="http://sourabhbajaj.com/mac-setup/Python/virtualenv.html" target="_blank" rel="external">http://sourabhbajaj.com/mac-setup/Python/virtualenv.html</a>]</li>
</ul>
<figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//1.</span></div><div class="line">cd myproject/</div><div class="line"><span class="comment">//2.</span></div><div class="line">virtualenv venv </div><div class="line"><span class="comment">// 如果你的系统已经安装了python2已经python3，但是你现在想建立一个python3的环境</span></div><div class="line"><span class="comment">// virtualenv -p python3 envname</span></div><div class="line"><span class="comment">//3.</span></div><div class="line">source venv<span class="meta-keyword">/bin/</span>activate</div><div class="line"><span class="comment">//4.</span></div><div class="line">pip install Scrapy</div></pre></td></tr></table></figure>
<ul>
<li>执行完上面的4行命令，此时应该就可以安装好了<code>Scrapy</code>了。</li>
<li>执行一下<code>pip list</code>，看一下安装<code>scrapy</code>系统默认给我们安装了什么：</li>
</ul>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">(<span class="selector-tag">venv</span>) ➜  <span class="selector-tag">venv</span> <span class="selector-tag">pip</span> <span class="selector-tag">list</span></div><div class="line"><span class="selector-tag">Package</span>          <span class="selector-tag">Version</span></div><div class="line"><span class="selector-tag">----------------</span> <span class="selector-tag">-------</span></div><div class="line"><span class="selector-tag">appdirs</span>          1<span class="selector-class">.4</span><span class="selector-class">.3</span></div><div class="line"><span class="selector-tag">asn1crypto</span>       0<span class="selector-class">.22</span><span class="selector-class">.0</span></div><div class="line"><span class="selector-tag">attrs</span>            17<span class="selector-class">.1</span><span class="selector-class">.0</span></div><div class="line"><span class="selector-tag">Automat</span>          0<span class="selector-class">.6</span><span class="selector-class">.0</span></div><div class="line"><span class="selector-tag">cffi</span>             1<span class="selector-class">.10</span><span class="selector-class">.0</span></div><div class="line"><span class="selector-tag">constantly</span>       15<span class="selector-class">.1</span><span class="selector-class">.0</span></div><div class="line"><span class="selector-tag">cryptography</span>     1<span class="selector-class">.8</span><span class="selector-class">.1</span></div><div class="line"><span class="selector-tag">cssselect</span>        1<span class="selector-class">.0</span><span class="selector-class">.1</span></div><div class="line"><span class="selector-tag">enum34</span>           1<span class="selector-class">.1</span><span class="selector-class">.6</span></div><div class="line"><span class="selector-tag">idna</span>             2<span class="selector-class">.5</span></div><div class="line"><span class="selector-tag">incremental</span>      16<span class="selector-class">.10</span><span class="selector-class">.1</span></div><div class="line"><span class="selector-tag">ipaddress</span>        1<span class="selector-class">.0</span><span class="selector-class">.18</span></div><div class="line"><span class="selector-tag">lxml</span>             3<span class="selector-class">.7</span><span class="selector-class">.3</span></div><div class="line"><span class="selector-tag">packaging</span>        16<span class="selector-class">.8</span></div><div class="line"><span class="selector-tag">parsel</span>           1<span class="selector-class">.2</span><span class="selector-class">.0</span></div><div class="line"><span class="selector-tag">pip</span>              9<span class="selector-class">.0</span><span class="selector-class">.1</span></div><div class="line"><span class="selector-tag">pyasn1</span>           0<span class="selector-class">.2</span><span class="selector-class">.3</span></div><div class="line"><span class="selector-tag">pyasn1-modules</span>   0<span class="selector-class">.0</span><span class="selector-class">.8</span></div><div class="line"><span class="selector-tag">pycparser</span>        2<span class="selector-class">.17</span></div><div class="line"><span class="selector-tag">PyDispatcher</span>     2<span class="selector-class">.0</span><span class="selector-class">.5</span></div><div class="line"><span class="selector-tag">pyOpenSSL</span>        17<span class="selector-class">.0</span><span class="selector-class">.0</span></div><div class="line"><span class="selector-tag">pyparsing</span>        2<span class="selector-class">.2</span><span class="selector-class">.0</span></div><div class="line"><span class="selector-tag">queuelib</span>         1<span class="selector-class">.4</span><span class="selector-class">.2</span></div><div class="line"><span class="selector-tag">Scrapy</span>           1<span class="selector-class">.3</span><span class="selector-class">.3</span></div><div class="line"><span class="selector-tag">service-identity</span> 16<span class="selector-class">.0</span><span class="selector-class">.0</span></div><div class="line"><span class="selector-tag">setuptools</span>       35<span class="selector-class">.0</span><span class="selector-class">.2</span></div><div class="line"><span class="selector-tag">six</span>              1<span class="selector-class">.10</span><span class="selector-class">.0</span></div><div class="line"><span class="selector-tag">Twisted</span>          17<span class="selector-class">.1</span><span class="selector-class">.0</span></div><div class="line"><span class="selector-tag">w3lib</span>            1<span class="selector-class">.17</span><span class="selector-class">.0</span></div><div class="line"><span class="selector-tag">wheel</span>            0<span class="selector-class">.29</span><span class="selector-class">.0</span></div><div class="line"><span class="selector-tag">zope</span><span class="selector-class">.interface</span>   4<span class="selector-class">.4</span><span class="selector-class">.1</span></div></pre></td></tr></table></figure>
<ul>
<li><code>lxml</code>[<a href="http://lxml.de/" target="_blank" rel="external">http://lxml.de/</a>], 高效的<code>xml</code>和<code>html</code>的解析框架，最低版本为<code>3.4</code></li>
<li><code>parsel</code>[<a href="https://pypi.python.org/pypi/parsel" target="_blank" rel="external">https://pypi.python.org/pypi/parsel</a>] ,在lxml的封装，解析<code>html/xml</code>的数据</li>
<li><code>w3lib</code>[<a href="https://pypi.python.org/pypi/w3lib" target="_blank" rel="external">https://pypi.python.org/pypi/w3lib</a>], 处理页面的url以及encodings</li>
<li><code>twisted</code>[<a href="https://twistedmatrix.com/trac/" target="_blank" rel="external">https://twistedmatrix.com/trac/</a>], 异步的网络请求框架。最低版本为：<code>14.0</code></li>
<li><code>cryptography</code>和<code>pyOpenSSL</code>(最低版本为<code>0.14</code>) 多重网络安全</li>
</ul>
<h4 id="1-3-开始抓取数据："><a href="#1-3-开始抓取数据：" class="headerlink" title="1.3 开始抓取数据："></a>1.3 开始抓取数据：</h4><ul>
<li>现在我们开始爬取页面，这里就爬取一下这个页面：<code>http://quotes.toscrape.com/</code>，这个网站列举了很多著名的导演，这个抓取的目的有下面几个：</li>
</ul>
<ol>
<li>创建一个新的<code>Scrapy</code>对象.</li>
<li>写一个<code>spider</code>对象抓取网站，并且解析数据</li>
<li>用命令行导出抓取的数据</li>
<li>改变规则，递归的抓取数据</li>
<li>运用<code>spider</code>的参数</li>
</ol>
<h4 id="1-3-1-新建scrapy项目"><a href="#1-3-1-新建scrapy项目" class="headerlink" title="1.3.1 新建scrapy项目"></a>1.3.1 新建scrapy项目</h4><figure class="highlight crystal"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">/<span class="regexp">/1.</span></div><div class="line">scrapy startproject tutorial</div><div class="line"></div><div class="line">/<span class="regexp">/2.</span></div><div class="line">New Scrapy project 'tutorial', using template directory '/Users/gonghuan/Desktop/myproject/venv/<span class="class"><span class="keyword">lib</span>/<span class="title">python2</span>.7/<span class="title">site</span>-<span class="title">packages</span>/<span class="title">scrapy</span>/<span class="title">templates</span>/<span class="title">project</span>', <span class="title">created</span> <span class="title">in</span>:</span></div><div class="line">    /Users/gonghuan/Desktop/myproject/venv/tutorial</div><div class="line"></div><div class="line">You can start your first spider <span class="symbol">with:</span></div><div class="line">    cd tutorial</div><div class="line">    scrapy genspider example example.com</div></pre></td></tr></table></figure>
<h4 id="1-3-2-创建我们第一个spider"><a href="#1-3-2-创建我们第一个spider" class="headerlink" title="1.3.2 创建我们第一个spider"></a>1.3.2 创建我们第一个spider</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> scrapy</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">QuotesSpider</span><span class="params">(scrapy.Spider)</span>:</span></div><div class="line">    name = <span class="string">"quotes"</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">start_requests</span><span class="params">(self)</span>:</span></div><div class="line">        urls = [</div><div class="line">            <span class="string">'http://quotes.toscrape.com/page/1/'</span>,</div><div class="line">            <span class="string">'http://quotes.toscrape.com/page/2/'</span>,</div><div class="line">        ]</div><div class="line">        <span class="keyword">for</span> url <span class="keyword">in</span> urls:</div><div class="line">            <span class="keyword">yield</span> scrapy.Request(url=url, callback=self.parse)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span></div><div class="line">        page = response.url.split(<span class="string">"/"</span>)[<span class="number">-2</span>]</div><div class="line">        filename = <span class="string">'quotes-%s.html'</span> % page</div><div class="line">        <span class="keyword">with</span> open(filename, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</div><div class="line">            f.write(response.body)</div><div class="line">        self.log(<span class="string">'Saved file %s'</span> % filename)</div></pre></td></tr></table></figure>
<ul>
<li><code>spider</code>是<code>Scrapy</code>用来抓取数据的类</li>
<li>必须要继承<code>scrapy.Spider</code>，并且要初始化请求，抓取规则，解析数据的规则等等</li>
<li><code>name</code>被赋值为<code>quotes</code>,这是作为项目的唯一标示符，必须唯一的。</li>
<li><code>start_requests</code>的方法，必须要返回一个可以递归的<code>request</code>请求。</li>
<li><code>parse</code>的方法，用来处理下载下来的<code>response</code>，<code>response</code>的参数保存在<code>TextResponse</code>的实例中。</li>
<li><code>parse</code>的作用：1: 解析<code>response</code>,并将爬去下来的<code>dics</code>解析成我们需要的数据，2: 并且找到新的url数据，并且创建新的<code>request</code></li>
<li>最后执行<code>scrapy crawl quotes</code>,这个命令<code>quotes</code>就是我们刚才定义的name,然后他们将会向<code>quotes.toscrape.com</code>这个域名发起请求,终端也会出现下面的返回：</li>
</ul>
<figure class="highlight subunit"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">... (omitted for brevity)</div><div class="line">2016<span class="string">-12</span><span class="string">-16</span> 21:24:05 [scrapy.core.engine] INFO: Spider opened</div><div class="line">2016<span class="string">-12</span><span class="string">-16</span> 21:24:05 [scrapy.extensions.logstats] INFO: Crawled 0 pages (at 0 pages/min), scraped 0 items (at 0 items/min)</div><div class="line">2016<span class="string">-12</span><span class="string">-16</span> 21:24:05 [scrapy.extensions.telnet] DEBUG: Telnet console listening on 127.0.0.1:6023</div><div class="line">2016<span class="string">-12</span><span class="string">-16</span> 21:24:05 [scrapy.core.engine] DEBUG: Crawled (404) &lt;GET http://quotes.toscrape.com/robots.txt&gt; (referer: None)</div><div class="line">2016<span class="string">-12</span><span class="string">-16</span> 21:24:05 [scrapy.core.engine] DEBUG: Crawled (200) &lt;GET http://quotes.toscrape.com/page/1/&gt; (referer: None)</div><div class="line">2016<span class="string">-12</span><span class="string">-16</span> 21:24:05 [scrapy.core.engine] DEBUG: Crawled (200) &lt;GET http://quotes.toscrape.com/page/2/&gt; (referer: None)</div><div class="line">2016<span class="string">-12</span><span class="string">-16</span> 21:24:05 [quotes] DEBUG: Saved file quotes<span class="string">-1</span>.html</div><div class="line">2016<span class="string">-12</span><span class="string">-16</span> 21:24:05 [quotes] DEBUG: Saved file quotes<span class="string">-2</span>.html</div><div class="line">2016<span class="string">-12</span><span class="string">-16</span> 21:24:05 [scrapy.core.engine] INFO: Closing spider (finished)</div><div class="line">...</div></pre></td></tr></table></figure>
<ul>
<li>此时检查项目的文件夹，会出现<code>quotes-1.html、quotes-2.html</code>这样的两个文件，就代表已经成功抓取下来了。</li>
<li>刚才在<code>start_requests</code>的函数中，我们返回了<code>scrapy.Request</code>的对象，当这些请求一旦接受到服务器返回的<code>response</code>的时候，就会立刻调用callback的方法，也就是<code>parse</code>的方法，这个方法会包含刚才我们的请求的<code>url</code>以及相应的参数。</li>
</ul>
<h4 id="1-3-3-简写代码"><a href="#1-3-3-简写代码" class="headerlink" title="1.3.3 简写代码"></a>1.3.3 简写代码</h4><ul>
<li>其实我们发现<code>start_requests</code>其实就是通过对于的<code>url</code>生成相应的<code>scrapy.Request</code>的对象，但其实我们可以不用实现<code>start_requests</code>的方法，我们可以直接定义一个<code>start_urls</code>的列表，里面的元素就是相应的请求<code>url</code>,一旦你定义了这个对象，<code>start_requests</code>会默认从<code>start_urls</code>来获取<code>url</code></li>
<li>即使在你的代码中没有指定的callback函数，<code>parse</code>的函数也会默认来处理每个url发起的请求，主要也是因为<code>parse</code>是系统默认的方法（当你没有准确的指定callback）</li>
<li>修改为如下的代码：</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> scrapy</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">QuotesSpider</span><span class="params">(scrapy.Spider)</span>:</span></div><div class="line">    name = <span class="string">"quotes"</span></div><div class="line">    start_urls = [</div><div class="line">        <span class="string">'http://quotes.toscrape.com/page/1/'</span>,</div><div class="line">        <span class="string">'http://quotes.toscrape.com/page/2/'</span>,</div><div class="line">    ]</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span></div><div class="line">        page = response.url.split(<span class="string">"/"</span>)[<span class="number">-2</span>]</div><div class="line">        filename = <span class="string">'quotes-%s.html'</span> % page</div><div class="line">        <span class="keyword">with</span> open(filename, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</div><div class="line">            f.write(response.body)</div></pre></td></tr></table></figure>
<h4 id="1-3-4-解析数据"><a href="#1-3-4-解析数据" class="headerlink" title="1.3.4 解析数据"></a>1.3.4 解析数据</h4><ul>
<li>官方的建议，最好的解析是在<code>shell</code> [<a href="https://docs.scrapy.org/en/latest/topics/shell.html#topics-shell" target="_blank" rel="external">https://docs.scrapy.org/en/latest/topics/shell.html#topics-shell</a>] 的操作下，在我们刚才创建的虚拟环境下执行如下的脚本<code>scrapy shell &quot;http://quotes.toscrape.com/page/1/&quot;</code></li>
<li>看到如下的终端返回：</li>
</ul>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">[ ... Scrapy log here ... ]</div><div class="line"><span class="number">2016</span><span class="number">-09</span><span class="number">-19</span> <span class="number">12</span>:09:27 [<span class="name">scrapy.core.engine</span>] DEBUG: Crawled (<span class="name">200</span>) &lt;GET http://quotes.toscrape.com/page/1/&gt; (<span class="name">referer:</span> None)</div><div class="line">[<span class="name">s</span>] Available Scrapy objects:</div><div class="line">[<span class="name">s</span>]   scrapy     scrapy module (<span class="name">contains</span> scrapy.Request, scrapy.Selector, etc)</div><div class="line">[<span class="name">s</span>]   crawler    &lt;scrapy.crawler.Crawler object at <span class="number">0</span>x7fa91d888c90&gt;</div><div class="line">[<span class="name">s</span>]   item       &#123;&#125;</div><div class="line">[<span class="name">s</span>]   request    &lt;GET http://quotes.toscrape.com/page/1/&gt;</div><div class="line">[<span class="name">s</span>]   response   &lt;200 http://quotes.toscrape.com/page/1/&gt;</div><div class="line">[<span class="name">s</span>]   settings   &lt;scrapy.settings.Settings object at <span class="number">0</span>x7fa91d888c10&gt;</div><div class="line">[<span class="name">s</span>]   spider     &lt;DefaultSpider <span class="symbol">'default</span>' at <span class="number">0</span>x7fa91c8af990&gt;</div><div class="line">[<span class="name">s</span>] Useful shortcuts:</div><div class="line">[<span class="name">s</span>]   shelp()           Shell help (<span class="name">print</span> this help)</div><div class="line">[<span class="name">s</span>]   fetch(<span class="name">req_or_url</span>) Fetch request (<span class="name"><span class="builtin-name">or</span></span> URL) and update local objects</div><div class="line">[<span class="name">s</span>]   view(<span class="name">response</span>)    View response in a browser</div><div class="line">&gt;&gt;&gt;</div></pre></td></tr></table></figure>
<ul>
<li>我们如何获取<code>response</code>里面的元素呢？可以通过<code>css</code> [<a href="https://www.w3.org/TR/selectors/" target="_blank" rel="external">https://www.w3.org/TR/selectors/</a>]</li>
<li>执行<code>response.css(&#39;title&#39;)</code>,就可以在终端看到如下的返回：</li>
</ul>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">[&lt;Selector xpath='descendant-or-self::title' data='&lt;title&gt;Quotes to Scrape&lt;/title&gt;'&gt;]</span></div></pre></td></tr></table></figure>
<ul>
<li>执行<code>response.css(&#39;title&#39;)</code>返回的是一个类似列表的一个东西，这个东西叫做<code>SelectorList</code>,这个列表里面就是搜索的对象，这些对象是<code>Selector</code>,这些<code>Selector</code>就是包装这些<code>XML/HTML</code>的外壳。你可以直接通过<code>Selector</code>直接获得里面的值：</li>
</ul>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;</span>&gt; response.css(<span class="string">'title'</span>).extract()</div><div class="line">[<span class="string">'&lt;title&gt;Quotes to Scrape&lt;/title&gt;'</span>]</div></pre></td></tr></table></figure>
<ul>
<li>你会发现还是一个列表，不是我们想要的值，这时我们就需要对css进行过滤，添加<code>::text</code>，就表示我们想要的只是<code>&lt;title&gt;</code>标签中对应的值</li>
</ul>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;</span>&gt; response.css(<span class="string">'title::text'</span>).extract()</div><div class="line">[<span class="string">'Quotes to Scrape'</span>]</div></pre></td></tr></table></figure>
<ul>
<li>返回的还是一个列表，但是你确定你需要的是第一个元素的话，可以这样直接使用<code>extract_first</code>取得列表中的元素,这样为了避免产生<code>IndexError</code>：</li>
</ul>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;</span>&gt; response.css(<span class="string">'title::text'</span>).extract_first()</div><div class="line"><span class="string">'Quotes to Scrape'</span></div></pre></td></tr></table></figure>
<ul>
<li>除了使用<code>extract()</code>以及<code>extract_first()</code>,还是可以使用<code>re()</code>，就是通过正则来筛选解析的数据</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>response.css(<span class="string">'title::text'</span>).re(<span class="string">r'Quotes.*'</span>)</div><div class="line">[<span class="string">'Quotes to Scrape'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>response.css(<span class="string">'title::text'</span>).re(<span class="string">r'Q\w+'</span>)</div><div class="line">[<span class="string">'Quotes'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>response.css(<span class="string">'title::text'</span>).re(<span class="string">r'(\w+) to (\w+)'</span>)</div><div class="line">[<span class="string">'Quotes'</span>, <span class="string">'Scrape'</span>]</div></pre></td></tr></table></figure>
<h4 id="1-3-4-除了使用CSS，你也可以使用XPath来查找元素"><a href="#1-3-4-除了使用CSS，你也可以使用XPath来查找元素" class="headerlink" title="1.3.4 除了使用CSS，你也可以使用XPath来查找元素"></a>1.3.4 除了使用<code>CSS</code>，你也可以使用<code>XPath</code>来查找元素</h4><ul>
<li>例如：</li>
</ul>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; response.xpath('<span class="comment">//title')</span></div><div class="line"><span class="meta">[&lt;Selector xpath='//title' data='&lt;title&gt;Quotes to Scrape&lt;/title&gt;'&gt;]</span></div><div class="line">&gt;&gt;&gt; response.xpath('<span class="comment">//title/text()').extract_first()</span></div><div class="line">'Quotes <span class="keyword">to</span> Scrape'</div></pre></td></tr></table></figure>
<ul>
<li><code>XPath</code>是非常形象具体，并且功能强大的，<code>CSS</code>的选择器也是通过一些接口来转化为<code>XPath</code>的，虽然<code>XPath</code>没有<code>CSS</code>那么出名，但是它还是非常强大的，官方也是建议学习使用<code>XPath</code>，给出相关的链接：</li>
</ul>
<ol>
<li>[<a href="https://docs.scrapy.org/en/latest/topics/selectors.html#topics-selectors" target="_blank" rel="external">https://docs.scrapy.org/en/latest/topics/selectors.html#topics-selectors</a>]</li>
<li>[<a href="http://zvon.org/comp/r/tut-XPath_1.html" target="_blank" rel="external">http://zvon.org/comp/r/tut-XPath_1.html</a>]</li>
<li>[<a href="http://plasmasturm.org/log/xpath101/" target="_blank" rel="external">http://plasmasturm.org/log/xpath101/</a>]</li>
</ol>
<h4 id="1-3-5-解析数据"><a href="#1-3-5-解析数据" class="headerlink" title="1.3.5 解析数据"></a>1.3.5 解析数据</h4><ul>
<li>现在你已经知道了一些关于选择器，获取数据的方法，现在就可以完善我们之前的爬虫了</li>
<li>刚才我们爬去的的页面中，你会发现每个<code>http://quotes.toscrape.com</code>都含有一下的<code>html</code>：</li>
</ul>
<figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&lt;<span class="keyword">div</span> class=<span class="string">"quote"</span>&gt;</div><div class="line">    &lt;span class=<span class="string">"text"</span>&gt;“The world <span class="keyword">as</span> we have created <span class="keyword">it</span> is <span class="keyword">a</span> <span class="built_in">process</span> <span class="keyword">of</span> our</div><div class="line">    thinking. It cannot be changed <span class="keyword">without</span> changing our thinking.”&lt;/span&gt;</div><div class="line">    &lt;span&gt;</div><div class="line">        <span class="keyword">by</span> &lt;small class=<span class="string">"author"</span>&gt;Albert Einstein&lt;/small&gt;</div><div class="line">        &lt;<span class="keyword">a</span> href=<span class="string">"/author/Albert-Einstein"</span>&gt;(about)&lt;/<span class="keyword">a</span>&gt;</div><div class="line">    &lt;/span&gt;</div><div class="line">    &lt;<span class="keyword">div</span> class=<span class="string">"tags"</span>&gt;</div><div class="line">        Tags:</div><div class="line">        &lt;<span class="keyword">a</span> class=<span class="string">"tag"</span> href=<span class="string">"/tag/change/page/1/"</span>&gt;change&lt;/<span class="keyword">a</span>&gt;</div><div class="line">        &lt;<span class="keyword">a</span> class=<span class="string">"tag"</span> href=<span class="string">"/tag/deep-thoughts/page/1/"</span>&gt;deep-thoughts&lt;/<span class="keyword">a</span>&gt;</div><div class="line">        &lt;<span class="keyword">a</span> class=<span class="string">"tag"</span> href=<span class="string">"/tag/thinking/page/1/"</span>&gt;thinking&lt;/<span class="keyword">a</span>&gt;</div><div class="line">        &lt;<span class="keyword">a</span> class=<span class="string">"tag"</span> href=<span class="string">"/tag/world/page/1/"</span>&gt;world&lt;/<span class="keyword">a</span>&gt;</div><div class="line">    &lt;/<span class="keyword">div</span>&gt;</div><div class="line">&lt;/<span class="keyword">div</span>&gt;</div></pre></td></tr></table></figure>
<ul>
<li>还是通过<code>shell</code>的方法来测试，执行下面的代码:</li>
</ul>
<figure class="highlight gauss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//1.</span></div><div class="line">scrapy <span class="built_in">shell</span> 'http:<span class="comment">//quotes.toscrape.com</span></div><div class="line"><span class="comment">//2.</span></div><div class="line">response.css(<span class="string">"div.quote"</span>)</div></pre></td></tr></table></figure>
<ul>
<li>当然也可以把筛选后的数据，复制给每个变量：</li>
</ul>
<figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attr">quote</span> = response.css(<span class="string">"div.quote"</span>)[<span class="number">0</span>]</div></pre></td></tr></table></figure>
<ul>
<li>现在也可以通过解析<code>quote</code>来获得下面的值：<code>title</code>/<code>author</code>/<code>tag</code></li>
</ul>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;</span>&gt; title = quote.css(<span class="string">"span.text::text"</span>).extract_first()</div><div class="line"><span class="meta">&gt;&gt;</span>&gt; title</div><div class="line"><span class="string">'“The world as we have created it is a process of our thinking. It cannot be changed without changing our thinking.”'</span></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; author = quote.css(<span class="string">"small.author::text"</span>).extract_first()</div><div class="line"><span class="meta">&gt;&gt;</span>&gt; author</div><div class="line"><span class="string">'Albert Einstein'</span></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; tags = quote.css(<span class="string">"div.tags a.tag::text"</span>).extract()</div><div class="line"><span class="meta">&gt;&gt;</span>&gt; tags</div><div class="line">[<span class="string">'change'</span>, <span class="string">'deep-thoughts'</span>, <span class="string">'thinking'</span>, <span class="string">'world'</span>]</div></pre></td></tr></table></figure>
<ul>
<li>已经可以知道我们是如何来获取数据的了，现在我们就可以遍历循环，并且将爬去下来的数据插入到我们的Python的字典数据结构中：</li>
</ul>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; <span class="keyword">for</span> <span class="selector-tag">quote</span> <span class="keyword">in</span> response.css(<span class="string">"div.quote"</span>):</div><div class="line">...     text = <span class="selector-tag">quote</span>.css(<span class="string">"span.text::text"</span>).extract_first()</div><div class="line">...     author = <span class="selector-tag">quote</span>.css(<span class="string">"small.author::text"</span>).extract_first()</div><div class="line">...     tags = <span class="selector-tag">quote</span>.css(<span class="string">"div.tags a.tag::text"</span>).extract()</div><div class="line">...     print(dict(text=text, author=author, tags=tags))</div><div class="line">&#123;<span class="string">'tags'</span>: [<span class="string">'change'</span>, <span class="string">'deep-thoughts'</span>, <span class="string">'thinking'</span>, <span class="string">'world'</span>], <span class="string">'author'</span>: <span class="string">'Albert Einstein'</span>, <span class="string">'text'</span>: <span class="string">'“The world as we have created it is a process of our thinking. It cannot be changed without changing our thinking.”'</span>&#125;</div><div class="line">&#123;<span class="string">'tags'</span>: [<span class="string">'abilities'</span>, <span class="string">'choices'</span>], <span class="string">'author'</span>: <span class="string">'J.K. Rowling'</span>, <span class="string">'text'</span>: <span class="string">'“It is our choices, Harry, that show what we truly are, far more than our abilities.”'</span>&#125;</div><div class="line">    ... <span class="selector-tag">a</span> few more of these, omitted <span class="keyword">for</span> brevity</div><div class="line">&gt;&gt;&gt;</div></pre></td></tr></table></figure>
<h4 id="1-3-5-更新我们的spide代码："><a href="#1-3-5-更新我们的spide代码：" class="headerlink" title="1.3.5 更新我们的spide代码："></a>1.3.5 更新我们的spide代码：</h4><ul>
<li>现在回到我们之前新建的<code>spider</code>的项目中去，到目前为止，我们还真正去获取任何的数据，我们只是做了一件事情，就是讲页面的<code>html</code>的代码保存在本地，我们可以将每个页面的数据，爬去下来，并且将这些数据放下Python的字典的数据结构中，并且返回回去。代码如下：</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> scrapy</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">QuotesSpider</span><span class="params">(scrapy.Spider)</span>:</span></div><div class="line">    name = <span class="string">"quotes"</span></div><div class="line">    start_urls = [</div><div class="line">        <span class="string">'http://quotes.toscrape.com/page/1/'</span>,</div><div class="line">        <span class="string">'http://quotes.toscrape.com/page/2/'</span>,</div><div class="line">    ]</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span></div><div class="line">        <span class="keyword">for</span> quote <span class="keyword">in</span> response.css(<span class="string">'div.quote'</span>):</div><div class="line">            <span class="keyword">yield</span> &#123;</div><div class="line">                <span class="string">'text'</span>: quote.css(<span class="string">'span.text::text'</span>).extract_first(),</div><div class="line">                <span class="string">'author'</span>: quote.css(<span class="string">'small.author::text'</span>).extract_first(),</div><div class="line">                <span class="string">'tags'</span>: quote.css(<span class="string">'div.tags a.tag::text'</span>).extract(),</div><div class="line">            &#125;</div></pre></td></tr></table></figure>
<ul>
<li>运行之后看到如下的返回：</li>
</ul>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="number">2016</span>-<span class="number">09</span>-<span class="number">19</span> <span class="number">18</span>:<span class="number">57</span>:<span class="number">19</span> [scrapy<span class="selector-class">.core</span><span class="selector-class">.scraper</span>] DEBUG: Scraped from &lt;<span class="number">200</span> http:<span class="comment">//quotes.toscrape.com/page/1/&gt;</span></div><div class="line">&#123;<span class="string">'tags'</span>: [<span class="string">'life'</span>, <span class="string">'love'</span>], <span class="string">'author'</span>: <span class="string">'André Gide'</span>, <span class="string">'text'</span>: <span class="string">'“It is better to be hated for what you are than to be loved for what you are not.”'</span>&#125;</div><div class="line"><span class="number">2016</span>-<span class="number">09</span>-<span class="number">19</span> <span class="number">18</span>:<span class="number">57</span>:<span class="number">19</span> [scrapy<span class="selector-class">.core</span><span class="selector-class">.scraper</span>] DEBUG: Scraped from &lt;<span class="number">200</span> http:<span class="comment">//quotes.toscrape.com/page/1/&gt;</span></div><div class="line">&#123;<span class="string">'tags'</span>: [<span class="string">'edison'</span>, <span class="string">'failure'</span>, <span class="string">'inspirational'</span>, <span class="string">'paraphrased'</span>], <span class="string">'author'</span>: <span class="string">'Thomas A. Edison'</span>, <span class="string">'text'</span>: <span class="string">"“I have not failed. I've just found 10,000 ways that won't work.”"</span>&#125;</div></pre></td></tr></table></figure>
<h4 id="1-3-6-保存数据"><a href="#1-3-6-保存数据" class="headerlink" title="1.3.6 保存数据"></a>1.3.6 保存数据</h4><ul>
<li>最简单的保存形式就是通过<code>Feed exports</code> [<a href="https://docs.scrapy.org/en/latest/topics/feed-exports.html#topics-feed-exports" target="_blank" rel="external">https://docs.scrapy.org/en/latest/topics/feed-exports.html#topics-feed-exports</a>]</li>
<li>这里我们可以执行下面的代码保存为<code>json</code>的格式：</li>
</ul>
<figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">scrapy crawl <span class="attribute">quotes</span> -o <span class="attribute">quotes</span><span class="selector-class">.json</span></div></pre></td></tr></table></figure>
<ul>
<li>此时在文件中就会出现一个名叫<code>quotes.json</code>的文件，其实就是我们刚才爬去下来的数据。</li>
<li>其实在一些简单的爬虫项目中，这样写，其实已经足够了，但是在一些复杂的大型项目中，可以写<code>Item Pipeline</code>[<a href="https://docs.scrapy.org/en/latest/topics/item-pipeline.html#topics-item-pipeline" target="_blank" rel="external">https://docs.scrapy.org/en/latest/topics/item-pipeline.html#topics-item-pipeline</a>], 其实这个功能就是对应的项目的中<code>tutorial/pipelines.py</code>, <code>scrapy</code>项目默认会帮你创建的。</li>
</ul>
<h4 id="1-3-7-获取更多的url"><a href="#1-3-7-获取更多的url" class="headerlink" title="1.3.7 获取更多的url"></a>1.3.7 获取更多的url</h4><ul>
<li>其实刚才在项目中，我们只是爬去了两个url，并且也知道如何去解析他们，但是可能我们需要的是爬去整个网站的url，比如我们在爬去一个页面的时候，遇到这样的<code>html</code>,我们就需要计算并且获取对应的<code>url</code>:</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;ul <span class="class"><span class="keyword">class</span></span>=<span class="string">"pager"</span>&gt;</div><div class="line">    <span class="xml"><span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"next"</span>&gt;</span></span></div><div class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/page/2/"</span>&gt;</span>Next <span class="tag">&lt;<span class="name">span</span> <span class="attr">aria-hidden</span>=<span class="string">"true"</span>&gt;</span>&amp;rarr;<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">&lt;<span class="regexp">/ul&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>此时你可能需要获取的是<code>a</code>里面对应的<code>href</code>的值：</li>
</ul>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;</span>&gt; response.css(<span class="string">'li.next a::attr(href)'</span>).extract_first()</div><div class="line"><span class="string">'/page/2/'</span></div></pre></td></tr></table></figure>
<ul>
<li>现在我们可以修改我们的spider的代码了，并且不需要指定几个url了，我们需要将这些逻辑都放到<code>parse</code>的函数中去：</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> scrapy</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">QuotesSpider</span><span class="params">(scrapy.Spider)</span>:</span></div><div class="line">    name = <span class="string">"quotes"</span></div><div class="line">    start_urls = [</div><div class="line">        <span class="string">'http://quotes.toscrape.com/page/1/'</span>,</div><div class="line">    ]</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span></div><div class="line">        <span class="keyword">for</span> quote <span class="keyword">in</span> response.css(<span class="string">'div.quote'</span>):</div><div class="line">            <span class="keyword">yield</span> &#123;</div><div class="line">                <span class="string">'text'</span>: quote.css(<span class="string">'span.text::text'</span>).extract_first(),</div><div class="line">                <span class="string">'author'</span>: quote.css(<span class="string">'small.author::text'</span>).extract_first(),</div><div class="line">                <span class="string">'tags'</span>: quote.css(<span class="string">'div.tags a.tag::text'</span>).extract(),</div><div class="line">            &#125;</div><div class="line"></div><div class="line">        next_page = response.css(<span class="string">'li.next a::attr(href)'</span>).extract_first()</div><div class="line">        <span class="keyword">if</span> next_page <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</div><div class="line">            next_page = response.urljoin(next_page)</div><div class="line">            <span class="keyword">yield</span> scrapy.Request(next_page, callback=self.parse)</div></pre></td></tr></table></figure>
<ul>
<li>上面的代码很容易看出，当解析完数据之后，我们就会寻找<code>下一页</code>的<code>url</code>,并且发现这里写的是一个相对的url，这里可以通过<code>urljoin()</code>这个函数来拼接url，并且<code>yields</code>回去一个新的request，当拿到的<code>respsonse</code>又会回到<code>parse</code>的函数中来解析</li>
<li>scrapy的下载机制：当你<code>yields</code>一个新的请求，scrapy会发送改请求，并注册一个回调方法，以便在完成的时候能够解析他。</li>
</ul>
<h4 id="1-3-8-简化发送的请求"><a href="#1-3-8-简化发送的请求" class="headerlink" title="1.3.8 简化发送的请求"></a>1.3.8 简化发送的请求</h4><ul>
<li>为了简化发送的请求，我们可以用<code>response.follow</code>, 而不是新建一个新的<code>Request</code></li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> scrapy</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">QuotesSpider</span><span class="params">(scrapy.Spider)</span>:</span></div><div class="line">    name = <span class="string">"quotes"</span></div><div class="line">    start_urls = [</div><div class="line">        <span class="string">'http://quotes.toscrape.com/page/1/'</span>,</div><div class="line">    ]</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span></div><div class="line">        <span class="keyword">for</span> quote <span class="keyword">in</span> response.css(<span class="string">'div.quote'</span>):</div><div class="line">            <span class="keyword">yield</span> &#123;</div><div class="line">                <span class="string">'text'</span>: quote.css(<span class="string">'span.text::text'</span>).extract_first(),</div><div class="line">                <span class="string">'author'</span>: quote.css(<span class="string">'span small::text'</span>).extract_first(),</div><div class="line">                <span class="string">'tags'</span>: quote.css(<span class="string">'div.tags a.tag::text'</span>).extract(),</div><div class="line">            &#125;</div><div class="line"></div><div class="line">        next_page = response.css(<span class="string">'li.next a::attr(href)'</span>).extract_first()</div><div class="line">        <span class="keyword">if</span> next_page <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</div><div class="line">            <span class="keyword">yield</span> response.follow(next_page, callback=self.parse)</div></pre></td></tr></table></figure>
<ul>
<li>与<code>scrapy.Request</code>不同，<code>response.follow</code>是支持相对路径，其实就是这个<code>follow</code>它会替我们做<code>response.urljoin</code>,并且<code>response.follow</code>返回是一个<code>Request</code>的实例。</li>
<li>之前的代码，取的是列表中的第一项元素，但是我们也可以枚举这个列表，来调用<code>response.follow</code></li>
</ul>
<figure class="highlight rust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> href <span class="keyword">in</span> response.css(<span class="symbol">'li</span>.next a::attr(href)'):</div><div class="line">    <span class="keyword">yield</span> response.follow(href, callback=<span class="keyword">self</span>.parse)</div><div class="line">    </div><div class="line"><span class="comment">// 也可以进行简写</span></div><div class="line"><span class="keyword">for</span> a <span class="keyword">in</span> response.css(<span class="symbol">'li</span>.next a'):</div><div class="line">    <span class="keyword">yield</span> response.follow(a, callback=<span class="keyword">self</span>.parse)</div></pre></td></tr></table></figure>
<ul>
<li>对于抓取作者信息，我们可以自定义自己的回调函数</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> scrapy</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">AuthorSpider</span><span class="params">(scrapy.Spider)</span>:</span></div><div class="line">    name = <span class="string">'author'</span></div><div class="line"></div><div class="line">    start_urls = [<span class="string">'http://quotes.toscrape.com/'</span>]</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span></div><div class="line">        <span class="comment"># follow links to author pages</span></div><div class="line">        <span class="keyword">for</span> href <span class="keyword">in</span> response.css(<span class="string">'.author + a::attr(href)'</span>):</div><div class="line">            <span class="keyword">yield</span> response.follow(href, self.parse_author)</div><div class="line"></div><div class="line">        <span class="comment"># follow pagination links</span></div><div class="line">        <span class="keyword">for</span> href <span class="keyword">in</span> response.css(<span class="string">'li.next a::attr(href)'</span>):</div><div class="line">            <span class="keyword">yield</span> response.follow(href, self.parse)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse_author</span><span class="params">(self, response)</span>:</span></div><div class="line">        <span class="function"><span class="keyword">def</span> <span class="title">extract_with_css</span><span class="params">(query)</span>:</span></div><div class="line">            <span class="keyword">return</span> response.css(query).extract_first().strip()</div><div class="line"></div><div class="line">        <span class="keyword">yield</span> &#123;</div><div class="line">            <span class="string">'name'</span>: extract_with_css(<span class="string">'h3.author-title::text'</span>),</div><div class="line">            <span class="string">'birthdate'</span>: extract_with_css(<span class="string">'.author-born-date::text'</span>),</div><div class="line">            <span class="string">'bio'</span>: extract_with_css(<span class="string">'.author-description::text'</span>),</div><div class="line">        &#125;</div></pre></td></tr></table></figure>
<ul>
<li>这里当找到<code>author</code>相关的链接，我们会回调我们自定义的函数<code>parse_author</code>,在这个函数里，我们顶一个帮助函数，帮助我们具体还获取里面的值，在<code>parse</code>函数中，我们会找到下一页的请求，然后继续发送请求，回调函数还是我们的<code>parse</code>的函数.</li>
<li>这里有个关键的问题，我们不需要担心同一个<code>url</code>发送多次，易导致进入死循环，<code>Scrapy</code>默认是能够过滤已经请求过的url，并且你还可以通过在<code>settings.py</code>的文件中设置<code>DUPEFILTER_CLASS</code> [<a href="https://docs.scrapy.org/en/latest/topics/settings.html#std:setting-DUPEFILTER_CLASS]。" target="_blank" rel="external">https://docs.scrapy.org/en/latest/topics/settings.html#std:setting-DUPEFILTER_CLASS]。</a></li>
</ul>
<h4 id="1-3-9-在spider中传递参数"><a href="#1-3-9-在spider中传递参数" class="headerlink" title="1.3.9 在spider中传递参数"></a>1.3.9 在spider中传递参数</h4><ul>
<li>我们可以通过下面的<code>-a</code>来传递参数，这些参数默认是传递到Spider中的<code>__init__</code>函数中去，并且能够成为spider的属性值</li>
</ul>
<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">scrapy </span>crawl quotes -o quotes-humor.<span class="keyword">json </span>-a tag=humor</div></pre></td></tr></table></figure>
<ul>
<li>例如上面的命令，我传递了<code>tag</code>的值，这样我就可以在我的spider项目中能够通过<code>self.tag</code>来获取传进来的值，也可以通过这样的值来请求准确url,其实就是请求的是这样的url: <code>http://quotes.toscrape.com/tag/humor</code></li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> scrapy</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">QuotesSpider</span><span class="params">(scrapy.Spider)</span>:</span></div><div class="line">    name = <span class="string">"quotes"</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">start_requests</span><span class="params">(self)</span>:</span></div><div class="line">        url = <span class="string">'http://quotes.toscrape.com/'</span></div><div class="line">        tag = getattr(self, <span class="string">'tag'</span>, <span class="keyword">None</span>)</div><div class="line">        <span class="keyword">if</span> tag <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</div><div class="line">            url = url + <span class="string">'tag/'</span> + tag</div><div class="line">        <span class="keyword">yield</span> scrapy.Request(url, self.parse)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span></div><div class="line">        <span class="keyword">for</span> quote <span class="keyword">in</span> response.css(<span class="string">'div.quote'</span>):</div><div class="line">            <span class="keyword">yield</span> &#123;</div><div class="line">                <span class="string">'text'</span>: quote.css(<span class="string">'span.text::text'</span>).extract_first(),</div><div class="line">                <span class="string">'author'</span>: quote.css(<span class="string">'small.author::text'</span>).extract_first(),</div><div class="line">            &#125;</div><div class="line"></div><div class="line">        next_page = response.css(<span class="string">'li.next a::attr(href)'</span>).extract_first()</div><div class="line">        <span class="keyword">if</span> next_page <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;1-学习爬虫框架-Scrapy&quot;&gt;&lt;a href=&quot;#1-学习爬虫框架-Scrapy&quot; class=&quot;headerlink&quot; title=&quot;1.学习爬虫框架 Scrapy&quot;&gt;&lt;/a&gt;1.学习爬虫框架 Scrapy&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;前几天一直在正Django的框架，现在基本上已经ok了，如果我们需要自己创建属于自己的网站、需要前台展示数据，后台可以编辑数据，可以插入到数据库，可以建立自己的数据类型，使用Django已经够了，那么现在有一个很重要的难题：数据从哪里来？怎么获取？如何存取？-&amp;gt; &lt;code&gt;Scrapy&lt;/code&gt;能够很好满足我们这些需求。&lt;/li&gt;
&lt;li&gt;目前文档是线上最新的版本:&lt;code&gt;Scrapy 1.3&lt;/code&gt;[&lt;a href=&quot;https://docs.scrapy.org/en/latest/&quot;&gt;https://docs.scrapy.org/en/latest/&lt;/a&gt;]&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;1-1-什么是Scrapy&quot;&gt;&lt;a href=&quot;#1-1-什么是Scrapy&quot; class=&quot;headerlink&quot; title=&quot;1.1 什么是Scrapy&quot;&gt;&lt;/a&gt;1.1 什么是Scrapy&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;scrapy&lt;/code&gt;是一个web端抓取网站数据的框架，可以用来数据挖掘，信息处理等等&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="日志" scheme="http://www.ghcoder.com/categories/%E6%97%A5%E5%BF%97/"/>
    
    
      <category term="Python、Scrapy" scheme="http://www.ghcoder.com/tags/Python%E3%80%81Scrapy/"/>
    
  </entry>
  
  <entry>
    <title>学习Django第五/六部分，基本的测试用例[官网教程]</title>
    <link href="http://www.ghcoder.com/2017/05/17/20170517/"/>
    <id>http://www.ghcoder.com/2017/05/17/20170517/</id>
    <published>2017-05-17T10:37:12.000Z</published>
    <updated>2017-05-18T02:39:18.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="经过前四部分的学习，此时我们已经创建了我们第一个app：polls-并且根据我们自己的需求，修改了url，修改了对应的view函数，连接数据库，插入数据库相应的数据，并将数据库里的数据捞出来，显示在模板上，这似乎就是我们在前四部分做的事情，说起来简单，但是做好、做精细却不容易。下面我们会为我们的app提供测试的功能。"><a href="#经过前四部分的学习，此时我们已经创建了我们第一个app：polls-并且根据我们自己的需求，修改了url，修改了对应的view函数，连接数据库，插入数据库相应的数据，并将数据库里的数据捞出来，显示在模板上，这似乎就是我们在前四部分做的事情，说起来简单，但是做好、做精细却不容易。下面我们会为我们的app提供测试的功能。" class="headerlink" title="经过前四部分的学习，此时我们已经创建了我们第一个app：polls, 并且根据我们自己的需求，修改了url，修改了对应的view函数，连接数据库，插入数据库相应的数据，并将数据库里的数据捞出来，显示在模板上，这似乎就是我们在前四部分做的事情，说起来简单，但是做好、做精细却不容易。下面我们会为我们的app提供测试的功能。"></a>经过前四部分的学习，此时我们已经创建了我们第一个app：polls, 并且根据我们自己的需求，修改了url，修改了对应的view函数，连接数据库，插入数据库相应的数据，并将数据库里的数据捞出来，显示在模板上，这似乎就是我们在前四部分做的事情，说起来简单，但是做好、做精细却不容易。下面我们会为我们的app提供测试的功能。</h3><h4 id="1-1-什么是自动测试"><a href="#1-1-什么是自动测试" class="headerlink" title="1.1 什么是自动测试"></a>1.1 什么是自动测试</h4><ul>
<li>测试是对代码对好检测，测试能够针对不同层面进行测试(1.对某个特定的方法是否按照预期返回都能够进行测试。2.有的人会对整个项目的整体操作做相应的测试<code>用户输入具体的某些值，得到预期的一些值</code>)，其实这里的测试与第二部分运用<code>shell</code>的操作是差不多的。</li>
<li>而自动化测试区别在于，一旦你的自动化测试生成了之后，当你修改了代码之后，你不需要再花时间人工去测试，自动可以测试你的代码。</li>
</ul>
<a id="more"></a>
<h4 id="1-2-写第一个测试用例"><a href="#1-2-写第一个测试用例" class="headerlink" title="1.2 写第一个测试用例"></a>1.2 写第一个测试用例</h4><ul>
<li><code>polls</code>的应用存在一些小bug，在<code>Question</code>的Model中定义了这样一个方法，这个方法能够判断我们发布的时间是不是在一天之内的，如果在一天之内就会返回<code>True</code>，否则就是<code>False</code>：</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">was_published_recently</span><span class="params">(self)</span>:</span>                                                                                          </div><div class="line">         <span class="keyword">return</span> self.pub_date &gt;= timezone.now() - datetime.timedelta(days=<span class="number">1</span>)</div></pre></td></tr></table></figure>
<ul>
<li>运用<code>shell</code>,在终端输入<code>python manager.py shell</code>，然后再输入下面的代码：</li>
</ul>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;</span>&gt; import datetime</div><div class="line"><span class="meta">&gt;&gt;</span>&gt; from django.utils import timezone</div><div class="line"><span class="meta">&gt;&gt;</span>&gt; from polls.models import Question</div><div class="line"><span class="meta">&gt;&gt;</span>&gt; <span class="comment"># create a Question instance with pub_date 30 days in the future</span></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; future_question = Question(pub_date=timezone.now() + datetime.timedelta(days=<span class="number">30</span>))</div><div class="line"><span class="meta">&gt;&gt;</span>&gt; <span class="comment"># was it published recently?</span></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; future_question.was_published_recently()</div><div class="line">True</div></pre></td></tr></table></figure>
<ul>
<li>这个显然是错误的，距离我发布的时间30天，应该返回<code>false</code></li>
<li>开始写自动化测试来发现暴露这个bug，至少在今后，不会再出现类似的问题了。</li>
<li>打开<code>polls/tests.py</code>的文件，添加如下的代码：</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> datetime</div><div class="line"></div><div class="line"><span class="keyword">from</span> django.utils <span class="keyword">import</span> timezone</div><div class="line"><span class="keyword">from</span> django.test <span class="keyword">import</span> TestCase</div><div class="line"></div><div class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Question</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">QuestionMethodTests</span><span class="params">(TestCase)</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_was_published_recently_with_future_question</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        was_published_recently() should return False for questions whose</div><div class="line">        pub_date is in the future.</div><div class="line">        """</div><div class="line">        time = timezone.now() + datetime.timedelta(days=<span class="number">30</span>)</div><div class="line">        future_question = Question(pub_date=time)</div><div class="line">        self.assertIs(future_question.was_published_recently(), <span class="keyword">False</span>)</div></pre></td></tr></table></figure>
<ul>
<li>这里创建了一个<code>django.test.TestCase</code>的子类，实例化了一个<code>Question</code>的对象，通过传入一个<code>time</code>的参数，然后断言<code>question</code>的<code>was_published_recently()</code>返回的为<code>false</code></li>
<li>执行<code>python manage.py test polls</code></li>
</ul>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">Creating test database for alias 'default'...</div><div class="line">System <span class="keyword">check</span> <span class="keyword">identified</span> <span class="keyword">no</span> issues (<span class="number">0</span> silenced).</div><div class="line">F</div><div class="line">======================================================================</div><div class="line">FAIL: test_was_published_recently_with_future_question (polls.tests.QuestionMethodTests)</div><div class="line"><span class="comment">----------------------------------------------------------------------</span></div><div class="line">Traceback (most recent <span class="keyword">call</span> <span class="keyword">last</span>):</div><div class="line">  <span class="keyword">File</span> <span class="string">"/path/to/mysite/polls/tests.py"</span>, line <span class="number">16</span>, <span class="keyword">in</span> test_was_published_recently_with_future_question</div><div class="line">    self.assertIs(future_question.was_published_recently(), <span class="literal">False</span>)</div><div class="line">AssertionError: <span class="literal">True</span> <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">False</span></div><div class="line"></div><div class="line"><span class="comment">----------------------------------------------------------------------</span></div><div class="line">Ran <span class="number">1</span> <span class="keyword">test</span> <span class="keyword">in</span> <span class="number">0.001</span>s</div><div class="line"></div><div class="line"><span class="keyword">FAILED</span> (failures=<span class="number">1</span>)</div><div class="line">Destroying <span class="keyword">test</span> <span class="keyword">database</span> <span class="keyword">for</span> <span class="keyword">alias</span> <span class="string">'default'</span>...</div></pre></td></tr></table></figure>
<ul>
<li>执行<code>python manage.py test polls</code>是让Django去在<code>polls</code>这个app 应用中查找<code>你写的测试用例</code>，当<code>Django</code>查找到<code>django.test.TestCase</code>的子类，Django将会为这个测试创建一些数据，Django接着去寻找以<code>test</code>开头的测试方法,在刚才我们创建的<code>test_was_published_recently_with_future_question</code>这个函数，第二行中，传入了一个<code>pub_date</code>创建了一个<code>Question</code>的实例对象，接着就断言<code>question</code>的<code>was_published_recently()</code>返回为<code>False</code>, 但是实际上返回的是<code>True</code>,这也就是导致我们断言失败的原因所在。</li>
</ul>
<h4 id="1-3-修改bug"><a href="#1-3-修改bug" class="headerlink" title="1.3 修改bug"></a>1.3 修改bug</h4><ul>
<li>此时我们已经知道了如果我们设置的<code>pub_date</code>是将来的时间的话，<code>Question.was_published_recently()</code>就应该返回的是<code>False</code>,所以打开<code>polls/models.py</code>修改为：</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">was_published_recently</span><span class="params">(self)</span>:</span></div><div class="line">    now = timezone.now()</div><div class="line">    <span class="keyword">return</span> now - datetime.timedelta(days=<span class="number">1</span>) &lt;= self.pub_date &lt;= now</div></pre></td></tr></table></figure>
<ul>
<li>再次执行<code>python manage.py test polls</code>就会得到下面的正确反馈：</li>
</ul>
<figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">GhCoder_Site python manage.py test polls</div><div class="line"><span class="function"><span class="title">Creating</span></span> test database <span class="keyword">for</span> <span class="keyword">alias</span> <span class="string">'default'</span>...</div><div class="line"><span class="keyword">System</span> check identified <span class="keyword">no</span> issues (<span class="number">0</span> silenced).</div><div class="line">.</div><div class="line">----------------------------------------------------------------------</div><div class="line">Ran <span class="number">1</span> test in <span class="number">0.002</span>s</div><div class="line"></div><div class="line">OK</div><div class="line"><span class="function"><span class="title">Destroying</span></span> test database <span class="keyword">for</span> <span class="keyword">alias</span> <span class="string">'default'</span>...</div></pre></td></tr></table></figure>
<h4 id="1-4-更全面的测试"><a href="#1-4-更全面的测试" class="headerlink" title="1.4 更全面的测试"></a>1.4 更全面的测试</h4><ul>
<li>依旧测试<code>was_published_recently()</code>这个函数，让我们的测试更加全面，添加如下的两个方法：</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_was_published_recently_with_old_question</span><span class="params">(self)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    was_published_recently() should return False for questions whose</div><div class="line">    pub_date is older than 1 day.</div><div class="line">    """</div><div class="line">    time = timezone.now() - datetime.timedelta(days=<span class="number">30</span>)</div><div class="line">    old_question = Question(pub_date=time)</div><div class="line">    self.assertIs(old_question.was_published_recently(), <span class="keyword">False</span>)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_was_published_recently_with_recent_question</span><span class="params">(self)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    was_published_recently() should return True for questions whose</div><div class="line">    pub_date is within the last day.</div><div class="line">    """</div><div class="line">    time = timezone.now() - datetime.timedelta(hours=<span class="number">1</span>)</div><div class="line">    recent_question = Question(pub_date=time)</div><div class="line">    self.assertIs(recent_question.was_published_recently(), <span class="keyword">True</span>)</div></pre></td></tr></table></figure>
<ul>
<li>这里我们添加了超过一天的数据，以及一天之内的数据，测试返回回来都和我们的断言是一样的，这样我就能更加保证我们的代码没有问题了。</li>
</ul>
<h4 id="1-5-测试View"><a href="#1-5-测试View" class="headerlink" title="1.5 测试View"></a>1.5 测试View</h4><ul>
<li>之前我们的测试都是测试驱动的标准来写测试的，但是这也并不能涵盖我们所有的代码，<code>测试驱动</code>我们重点去关心具体的代码实现，但是<code>测试view</code>的话，我们重点是通过浏览器来模拟用户进行测试。</li>
</ul>
<h5 id="1-5-1-Django测试客户端"><a href="#1-5-1-Django测试客户端" class="headerlink" title="1.5.1 Django测试客户端"></a>1.5.1 Django测试客户端</h5><ul>
<li>Django是提供测试客户端来模拟用户来具体与<code>view</code>进行交互，我们可以在<code>tests.py</code>文件中写代码，也可以通过<code>shell</code>来完成。</li>
<li>其实说白了就是看不到界面，完全是通过<code>shell</code>脚本来模拟请求，能够正常解析到<code>response</code>、<code>response_code</code>、<code>response.content</code>、<code>response.context</code>等等</li>
<li>我们先通过<code>shell</code>来完成<code>测试环境</code>的设置:</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">//<span class="number">1.</span></div><div class="line">python manager.py shell</div><div class="line"></div><div class="line">//<span class="number">2.</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> django.test.utils <span class="keyword">import</span> setup_test_environment</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>setup_test_environment()</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> django.test <span class="keyword">import</span> Client</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># create an instance of the client for our use</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>client = Client()</div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># get a response from '/'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>response = client.get(<span class="string">'/'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># we should expect a 404 from that address; if you instead see an</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># "Invalid HTTP_HOST header" error and a 400 response, you probably</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># omitted the setup_test_environment() call described earlier.</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>response.status_code</div><div class="line"><span class="number">404</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># on the other hand we should expect to find something at '/polls/'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># we'll use 'reverse()' rather than a hardcoded URL</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> django.urls <span class="keyword">import</span> reverse</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>response = client.get(reverse(<span class="string">'polls:index'</span>))</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>response.status_code</div><div class="line"><span class="number">200</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>response.content</div><div class="line"><span class="string">b'\n    &lt;ul&gt;\n    \n        &lt;li&gt;&lt;a href="/polls/1/"&gt;What&amp;#39;s up?&lt;/a&gt;&lt;/li&gt;\n    \n    &lt;/ul&gt;\n\n'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>response.context[<span class="string">'latest_question_list'</span>]</div><div class="line">&lt;QuerySet [&lt;Question: What<span class="string">'s up?&gt;]&gt;</span></div></pre></td></tr></table></figure>
<h5 id="1-5-2-改善我们的View"><a href="#1-5-2-改善我们的View" class="headerlink" title="1.5.2 改善我们的View"></a>1.5.2 改善我们的View</h5><ul>
<li>在第四部分的时候，我们依据类的形式来创建了view,在<code>polls/views.py</code>的文件中：</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">IndexView</span><span class="params">(generic.ListView)</span>:</span></div><div class="line">    template_name = <span class="string">'polls/index.html'</span></div><div class="line">    context_object_name = <span class="string">'latest_question_list'</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_queryset</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="string">"""Return the last five published questions."""</span></div><div class="line">        <span class="keyword">return</span> Question.objects.order_by(<span class="string">'-pub_date'</span>)[:<span class="number">5</span>]</div></pre></td></tr></table></figure>
<ul>
<li>这是之前的代码，我们现在想修改<code>get_queryset</code>这个方法，之前是返回最后的5条数据，现在我们希望通过时间来过滤：</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">//<span class="number">1.</span></div><div class="line"><span class="keyword">from</span> django.utils <span class="keyword">import</span> timezone</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_queryset</span><span class="params">(self)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    Return the last five published questions (not including those set to be</div><div class="line">    published in the future).</div><div class="line">    """</div><div class="line">    <span class="keyword">return</span> Question.objects.filter(</div><div class="line">        pub_date__lte=timezone.now()</div><div class="line">    ).order_by(<span class="string">'-pub_date'</span>)[:<span class="number">5</span>]</div></pre></td></tr></table></figure>
<ul>
<li><code>Question.objects.filter(pub_date__lte=timezone.now())</code>意思是：<code>查找Question,并且他们的pub_date&lt;=现在的时候</code>。</li>
</ul>
<h5 id="1-5-3-测试我们新的页面"><a href="#1-5-3-测试我们新的页面" class="headerlink" title="1.5.3 测试我们新的页面"></a>1.5.3 测试我们新的页面</h5><ul>
<li>在<code>polls/tests.py</code>的文件中添加如下的代码：</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div></pre></td><td class="code"><pre><div class="line">//<span class="number">1.</span></div><div class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> reverse</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_question</span><span class="params">(question_text, days)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    Creates a question with the given `question_text` and published the</div><div class="line">    given number of `days` offset to now (negative for questions published</div><div class="line">    in the past, positive for questions that have yet to be published).</div><div class="line">    """</div><div class="line">    time = timezone.now() + datetime.timedelta(days=days)</div><div class="line">    <span class="keyword">return</span> Question.objects.create(question_text=question_text, pub_date=time)</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">QuestionViewTests</span><span class="params">(TestCase)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_index_view_with_no_questions</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        If no questions exist, an appropriate message should be displayed.</div><div class="line">        """</div><div class="line">        response = self.client.get(reverse(<span class="string">'polls:index'</span>))</div><div class="line">        self.assertEqual(response.status_code, <span class="number">200</span>)</div><div class="line">        self.assertContains(response, <span class="string">"No polls are available."</span>)</div><div class="line">        self.assertQuerysetEqual(response.context[<span class="string">'latest_question_list'</span>], [])</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_index_view_with_a_past_question</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        Questions with a pub_date in the past should be displayed on the</div><div class="line">        index page.</div><div class="line">        """</div><div class="line">        create_question(question_text=<span class="string">"Past question."</span>, days=<span class="number">-30</span>)</div><div class="line">        response = self.client.get(reverse(<span class="string">'polls:index'</span>))</div><div class="line">        self.assertQuerysetEqual(</div><div class="line">            response.context[<span class="string">'latest_question_list'</span>],</div><div class="line">            [<span class="string">'&lt;Question: Past question.&gt;'</span>]</div><div class="line">        )</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_index_view_with_a_future_question</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        Questions with a pub_date in the future should not be displayed on</div><div class="line">        the index page.</div><div class="line">        """</div><div class="line">        create_question(question_text=<span class="string">"Future question."</span>, days=<span class="number">30</span>)</div><div class="line">        response = self.client.get(reverse(<span class="string">'polls:index'</span>))</div><div class="line">        self.assertContains(response, <span class="string">"No polls are available."</span>)</div><div class="line">        self.assertQuerysetEqual(response.context[<span class="string">'latest_question_list'</span>], [])</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_index_view_with_future_question_and_past_question</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        Even if both past and future questions exist, only past questions</div><div class="line">        should be displayed.</div><div class="line">        """</div><div class="line">        create_question(question_text=<span class="string">"Past question."</span>, days=<span class="number">-30</span>)</div><div class="line">        create_question(question_text=<span class="string">"Future question."</span>, days=<span class="number">30</span>)</div><div class="line">        response = self.client.get(reverse(<span class="string">'polls:index'</span>))</div><div class="line">        self.assertQuerysetEqual(</div><div class="line">            response.context[<span class="string">'latest_question_list'</span>],</div><div class="line">            [<span class="string">'&lt;Question: Past question.&gt;'</span>]</div><div class="line">        )</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_index_view_with_two_past_questions</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        The questions index page may display multiple questions.</div><div class="line">        """</div><div class="line">        create_question(question_text=<span class="string">"Past question 1."</span>, days=<span class="number">-30</span>)</div><div class="line">        create_question(question_text=<span class="string">"Past question 2."</span>, days=<span class="number">-5</span>)</div><div class="line">        response = self.client.get(reverse(<span class="string">'polls:index'</span>))</div><div class="line">        self.assertQuerysetEqual(</div><div class="line">            response.context[<span class="string">'latest_question_list'</span>],</div><div class="line">            [<span class="string">'&lt;Question: Past question 2.&gt;'</span>, <span class="string">'&lt;Question: Past question 1.&gt;'</span>]</div><div class="line">        )</div></pre></td></tr></table></figure>
<ul>
<li>仔细看一下你就会发现：</li>
</ul>
<ol>
<li>这里<code>create_question</code>是一个快生产<code>question</code>的函数。</li>
<li><code>test_index_view_with_a_past_question</code>我们不创建任何的<code>question</code>对象，我们的的一些断言，这个测试就素在测试<code>如果数据库里面没有我们需要的数据</code>，我们该如何处理，检测了<code>response</code>以及<code>response.context</code>。这里用到了<code>assertContains()</code> and <code>assertQuerysetEqual()</code></li>
<li>在下面的测试同样。</li>
</ol>
<h5 id="1-5-4-测试详情页面"><a href="#1-5-4-测试详情页面" class="headerlink" title="1.5.4 测试详情页面"></a>1.5.4 测试详情页面</h5><ul>
<li>打开<code>polls/views.py</code>修改为,详情页面也要过滤掉将来的时间点的数据：</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">DetailView</span><span class="params">(generic.DetailView)</span>:</span></div><div class="line">    ...</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_queryset</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        Excludes any questions that aren't published yet.</div><div class="line">        """</div><div class="line">        <span class="keyword">return</span> Question.objects.filter(pub_date__lte=timezone.now())</div></pre></td></tr></table></figure>
<ul>
<li>此时再添加一下测试数据，打开<code>polls/tests.py</code>：</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">QuestionIndexDetailTests</span><span class="params">(TestCase)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_detail_view_with_a_future_question</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        The detail view of a question with a pub_date in the future should</div><div class="line">        return a 404 not found.</div><div class="line">        """</div><div class="line">        future_question = create_question(question_text=<span class="string">'Future question.'</span>, days=<span class="number">5</span>)</div><div class="line">        url = reverse(<span class="string">'polls:detail'</span>, args=(future_question.id,))</div><div class="line">        response = self.client.get(url)</div><div class="line">        self.assertEqual(response.status_code, <span class="number">404</span>)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_detail_view_with_a_past_question</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        The detail view of a question with a pub_date in the past should</div><div class="line">        display the question's text.</div><div class="line">        """</div><div class="line">        past_question = create_question(question_text=<span class="string">'Past Question.'</span>, days=<span class="number">-5</span>)</div><div class="line">        url = reverse(<span class="string">'polls:detail'</span>, args=(past_question.id,))</div><div class="line">        response = self.client.get(url)</div><div class="line">        self.assertContains(response, past_question.question_text)</div></pre></td></tr></table></figure>
<figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">GhCoder_Site python manage.py test polls</div><div class="line"><span class="function"><span class="title">Creating</span></span> test database <span class="keyword">for</span> <span class="keyword">alias</span> <span class="string">'default'</span>...</div><div class="line"><span class="keyword">System</span> check identified <span class="keyword">no</span> issues (<span class="number">0</span> silenced).</div><div class="line">..........</div><div class="line">----------------------------------------------------------------------</div><div class="line">Ran <span class="number">10</span> tests in <span class="number">0.058</span>s</div><div class="line"></div><div class="line">OK</div><div class="line"><span class="function"><span class="title">Destroying</span></span> test database <span class="keyword">for</span> <span class="keyword">alias</span> <span class="string">'default'</span>...</div></pre></td></tr></table></figure>
<ul>
<li>还有一些进阶的测试工具：</li>
</ul>
<ol>
<li><code>Selenium</code>[<a href="http://seleniumhq.org/" target="_blank" rel="external">http://seleniumhq.org/</a>]</li>
<li><code>LiveServerTestCase</code> [<a href="https://docs.djangoproject.com/en/1.11/topics/testing/tools/#django.test.LiveServerTestCase" target="_blank" rel="external">https://docs.djangoproject.com/en/1.11/topics/testing/tools/#django.test.LiveServerTestCase</a>]</li>
</ol>
<h5 id="1-5-5-自定义项目app"><a href="#1-5-5-自定义项目app" class="headerlink" title="1.5.5 自定义项目app"></a>1.5.5 自定义项目app</h5><p>1.添加<code>css</code>样式：</p>
<ul>
<li>在创建项目的时候，项目中的<code>HTML</code>/<code>JavaScript</code>/<code>CSS</code>都是用来呈现页面以及布局的时候需要用到，我们应该把这些文件统一放到<code>static files</code>的文件里面去。这里<code>django.contrib.staticfiles</code>替我们都做好了。</li>
<li>首先在<code>polls</code>的目录中添加<code>static</code>的文件夹，Django将会自动去找<code>static</code>文件夹中的文件。</li>
<li>在<code>static</code>下面在添加<code>polls</code>文件夹，再在<code>polls</code>文件夹里面再添加<code>style.css</code>,里面添加如下的操作：</li>
</ul>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">li</span> <span class="selector-tag">a</span> &#123;</div><div class="line">    <span class="attribute">color</span>: green;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>然后在<code>polls/templates/polls/index.html</code>文件里面添加如下的代码：</li>
</ul>
<figure class="highlight dust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="xml"></span><span class="template-variable">&#123; % load static % &#125;</span><span class="xml"></span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"</span></span><span class="template-variable">&#123; % static 'polls/style.css' % &#125;</span><span class="xml"><span class="tag"><span class="string">"</span> /&gt;</span></span></div></pre></td></tr></table></figure>
<ul>
<li><code>{ % static % }</code>tag能够生成static文件夹的绝对url。</li>
</ul>
<p>2.添加图片的样式</p>
<ul>
<li>创建一个<code>images</code>文件夹，路径为<code>polls/static/polls/images/xxx.png</code>,然后就可以在<code>css</code>的文件中添加如下的代码</li>
</ul>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">body</span> &#123;</div><div class="line">    <span class="attribute">background</span>: white <span class="built_in">url</span>(<span class="string">"images/xxx.png"</span>) no-repeat right bottom;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;经过前四部分的学习，此时我们已经创建了我们第一个app：polls-并且根据我们自己的需求，修改了url，修改了对应的view函数，连接数据库，插入数据库相应的数据，并将数据库里的数据捞出来，显示在模板上，这似乎就是我们在前四部分做的事情，说起来简单，但是做好、做精细却不容易。下面我们会为我们的app提供测试的功能。&quot;&gt;&lt;a href=&quot;#经过前四部分的学习，此时我们已经创建了我们第一个app：polls-并且根据我们自己的需求，修改了url，修改了对应的view函数，连接数据库，插入数据库相应的数据，并将数据库里的数据捞出来，显示在模板上，这似乎就是我们在前四部分做的事情，说起来简单，但是做好、做精细却不容易。下面我们会为我们的app提供测试的功能。&quot; class=&quot;headerlink&quot; title=&quot;经过前四部分的学习，此时我们已经创建了我们第一个app：polls, 并且根据我们自己的需求，修改了url，修改了对应的view函数，连接数据库，插入数据库相应的数据，并将数据库里的数据捞出来，显示在模板上，这似乎就是我们在前四部分做的事情，说起来简单，但是做好、做精细却不容易。下面我们会为我们的app提供测试的功能。&quot;&gt;&lt;/a&gt;经过前四部分的学习，此时我们已经创建了我们第一个app：polls, 并且根据我们自己的需求，修改了url，修改了对应的view函数，连接数据库，插入数据库相应的数据，并将数据库里的数据捞出来，显示在模板上，这似乎就是我们在前四部分做的事情，说起来简单，但是做好、做精细却不容易。下面我们会为我们的app提供测试的功能。&lt;/h3&gt;&lt;h4 id=&quot;1-1-什么是自动测试&quot;&gt;&lt;a href=&quot;#1-1-什么是自动测试&quot; class=&quot;headerlink&quot; title=&quot;1.1 什么是自动测试&quot;&gt;&lt;/a&gt;1.1 什么是自动测试&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;测试是对代码对好检测，测试能够针对不同层面进行测试(1.对某个特定的方法是否按照预期返回都能够进行测试。2.有的人会对整个项目的整体操作做相应的测试&lt;code&gt;用户输入具体的某些值，得到预期的一些值&lt;/code&gt;)，其实这里的测试与第二部分运用&lt;code&gt;shell&lt;/code&gt;的操作是差不多的。&lt;/li&gt;
&lt;li&gt;而自动化测试区别在于，一旦你的自动化测试生成了之后，当你修改了代码之后，你不需要再花时间人工去测试，自动可以测试你的代码。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="日志" scheme="http://www.ghcoder.com/categories/%E6%97%A5%E5%BF%97/"/>
    
    
      <category term="Python、Django" scheme="http://www.ghcoder.com/tags/Python%E3%80%81Django/"/>
    
  </entry>
  
  <entry>
    <title>学习Django第四部分，细化系统模板[官网教程]</title>
    <link href="http://www.ghcoder.com/2017/05/16/20170516/"/>
    <id>http://www.ghcoder.com/2017/05/16/20170516/</id>
    <published>2017-05-16T04:05:12.000Z</published>
    <updated>2017-05-16T04:06:21.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-8：细化views页面的功能"><a href="#1-8：细化views页面的功能" class="headerlink" title="1.8：细化views页面的功能"></a>1.8：细化views页面的功能</h4><ul>
<li>打开<code>polls/detail.html</code>的文件，将其中的代码修改一下：</li>
</ul>
<figure class="highlight dust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><span class="template-variable">&#123; &#123; question.question_text &#125;</span><span class="xml"> &#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></div><div class="line"></div><div class="line"><span class="template-variable">&#123; % <span class="keyword">if</span> error_message % &#125;</span><span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">strong</span>&gt;</span></span><span class="template-variable">&#123; &#123; error_message &#125;</span><span class="xml"> &#125;<span class="tag">&lt;/<span class="name">strong</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><span class="template-variable">&#123; % endif % &#125;</span><span class="xml"></span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"</span></span><span class="template-variable">&#123; % url 'polls:vote' question.id % &#125;</span><span class="xml"><span class="tag"><span class="string">"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span></div><div class="line"><span class="template-variable">&#123; % csrf_token % &#125;</span><span class="xml"></span></div><div class="line"><span class="template-variable">&#123; % for choice in question.choice_set.all % &#125;</span><span class="xml"></span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"choice"</span> <span class="attr">id</span>=<span class="string">"choice</span></span><span class="template-variable">&#123; &#123; forloop.counter &#125;</span><span class="xml"><span class="tag"><span class="string"> &#125;"</span> <span class="attr">value</span>=<span class="string">"</span></span></span><span class="template-variable">&#123; &#123; choice.id &#125;</span><span class="xml"><span class="tag"><span class="string"> &#125;"</span> /&gt;</span></span></div><div class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"choice</span></span><span class="template-variable">&#123; &#123; forloop.counter &#125;</span><span class="xml"><span class="tag"><span class="string"> &#125;"</span>&gt;</span></span><span class="template-variable">&#123; &#123; choice.choice_text &#125;</span><span class="xml"> &#125;<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span></div><div class="line"><span class="template-variable">&#123; % endfor % &#125;</span><span class="xml"></span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"Vote"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div></pre></td></tr></table></figure>
<a id="more"></a>
<ul>
<li>这里的改动比较大,在页面上显示了勾选按钮，<code>value</code>与<code>question.id</code>类型关联起来了，<code>name</code>的值写死为<code>choice</code>,当某人勾选了一个，并且点击的提交的按钮，那么就会post的数据为：<code>choice=#</code>。</li>
<li>定义了一个<code>form</code>, 并且<code>method=post</code></li>
<li><code>forloop.counter</code>就指明了多少次循环</li>
<li>因为我们运用了<code>post</code>的请求，所以我们需要防止他们跨域请求，并且篡改数据，这里我们需要感谢Django,他给我们定义了{ % csrf_token % }这个标记，就是为了防止被篡改数据</li>
<li>现在来处理post过来的请求，并且做出相应的处理。打开<code>polls/urls.py</code></li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> get_object_or_404, render</div><div class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponseRedirect, HttpResponse</div><div class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> reverse</div><div class="line"></div><div class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Choice, Question</div><div class="line"><span class="comment"># ...</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">vote</span><span class="params">(request, question_id)</span>:</span></div><div class="line">    question = get_object_or_404(Question, pk=question_id)</div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        selected_choice = question.choice_set.get(pk=request.POST[<span class="string">'choice'</span>])</div><div class="line">    <span class="keyword">except</span> (KeyError, Choice.DoesNotExist):</div><div class="line">        <span class="comment"># Redisplay the question voting form.</span></div><div class="line">        <span class="keyword">return</span> render(request, <span class="string">'polls/detail.html'</span>, &#123;</div><div class="line">            <span class="string">'question'</span>: question,</div><div class="line">            <span class="string">'error_message'</span>: <span class="string">"You didn't select a choice."</span>,</div><div class="line">        &#125;)</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        selected_choice.votes += <span class="number">1</span></div><div class="line">        selected_choice.save()</div><div class="line">        <span class="comment"># Always return an HttpResponseRedirect after successfully dealing</span></div><div class="line">        <span class="comment"># with POST data. This prevents data from being posted twice if a</span></div><div class="line">        <span class="comment"># user hits the Back button.</span></div><div class="line">        <span class="keyword">return</span> HttpResponseRedirect(reverse(<span class="string">'polls:results'</span>, args=(question.id,)))</div></pre></td></tr></table></figure>
<ul>
<li>这里的<code>request.POST</code>就是个字典类型的数据，通过取<code>request.POST[&#39;choice&#39;]</code>得到的是选中的id，并且以字符串的形式返回。</li>
<li>在<code>request.POST</code>中，提供了<code>KeyError</code>的错误，当你要去的key不在post的字段里面，就会拿到这样的错误。</li>
<li>注意到当成功之后，相应的votes加1之后，我们返回的不是<code>HttpResponse</code>,而是<code>HttpResponseRedirect</code>,接受一个参数，这个参数就是成功之后调教的url。并且官网提出了，当成功完成post之后，就是应该跳转页面，这不仅仅是Django要求的，而是作为web开发所必须要养成的好习惯。</li>
<li>最后注意到我们在<code>HttpResponseRedirect</code>里面用到了<code>reverse()</code>，其实他的作用就是为了解决硬编码的问题，其实<code>reverse(&#39;polls:results&#39;, args=(question.id,)</code> = <code>/polls/3/results/</code></li>
<li>看到成功返回的页面为<code>results</code>的函数：</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> get_object_or_404, render</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">results</span><span class="params">(request, question_id)</span>:</span></div><div class="line">    question = get_object_or_404(Question, pk=question_id)</div><div class="line">    <span class="keyword">return</span> render(request, <span class="string">'polls/results.html'</span>, &#123;<span class="string">'question'</span>: question&#125;)</div></pre></td></tr></table></figure>
<ul>
<li>在这里需要创建<code>polls/results.html</code>的模板页面</li>
</ul>
<figure class="highlight dust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><span class="template-variable">&#123; &#123; question.question_text &#125;</span><span class="xml"> &#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line"><span class="template-variable">&#123; % for choice in question.choice_set.all % &#125;</span><span class="xml"></span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="template-variable">&#123; &#123; choice.choice_text &#125;</span><span class="xml"> &#125; -- </span><span class="template-variable">&#123; &#123; choice.votes &#125;</span><span class="xml"> &#125; vote</span><span class="template-variable">&#123; &#123; choice.votes|pluralize &#125;</span><span class="xml"> &#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></div><div class="line"><span class="template-variable">&#123; % endfor % &#125;</span><span class="xml"></span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"</span></span><span class="template-variable">&#123; % url 'polls:detail' question.id % &#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span>Vote again?<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></div></pre></td></tr></table></figure>
<ul>
<li>此时选中之后的结果页面就可以正常显示的了：</li>
</ul>
<figure class="highlight ada"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">What<span class="symbol">'s</span> up?</div><div class="line"></div><div class="line">    <span class="keyword">Not</span> much <span class="comment">-- 4 vote s</span></div><div class="line">    The sky <span class="comment">-- 1 vote</span></div><div class="line">    Just hacking again <span class="comment">-- 0 vote s</span></div><div class="line">    Just kidding <span class="comment">-- 0 vote s</span></div></pre></td></tr></table></figure>
<ul>
<li>这里官网提了一个意见，就是<code>selected_choice = question.choice_set.get(pk=request.POST[&#39;choice&#39;])</code>,这个数据是从数据库中取出来的，但是如果两个用户同一时间做次操作，并且进行投票的话，这里会存在一个竞争的关系，这里官网给出的意见是用函数<code>F()</code>来避免这种情况 [<a href="https://docs.djangoproject.com/en/1.11/ref/models/expressions/#avoiding-race-conditions-using-f" target="_blank" rel="external">https://docs.djangoproject.com/en/1.11/ref/models/expressions/#avoiding-race-conditions-using-f</a>]</li>
</ul>
<h4 id="1-9：使用通用视图让代码少点"><a href="#1-9：使用通用视图让代码少点" class="headerlink" title="1.9：使用通用视图让代码少点"></a>1.9：使用通用视图让代码少点</h4><ul>
<li>可能你已经发现了，<code>detail</code>和<code>results</code>的页面非常的相近，这里我们会做出改变</li>
<li>这些<code>views</code>页面都做了一些类似的事情，<code>根据URL从数据库中得到数据</code>,<code>加载模板，并且显示出来</code>，这些操作都是雷同的，此时我们可以通过<code>通用视图</code>来减少我们的代码量</li>
</ul>
<h5 id="1-9-1-修改URLconf"><a href="#1-9-1-修改URLconf" class="headerlink" title="1.9.1 修改URLconf"></a>1.9.1 修改URLconf</h5><ul>
<li>打开<code>polls/urls.py</code>文件修改为：</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> url</div><div class="line"></div><div class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</div><div class="line"></div><div class="line">app_name = <span class="string">'polls'</span></div><div class="line">urlpatterns = [</div><div class="line">    url(<span class="string">r'^$'</span>, views.IndexView.as_view(), name=<span class="string">'index'</span>),</div><div class="line">    url(<span class="string">r'^(?P&lt;pk&gt;[0-9]+)/$'</span>, views.DetailView.as_view(), name=<span class="string">'detail'</span>),</div><div class="line">    url(<span class="string">r'^(?P&lt;pk&gt;[0-9]+)/results/$'</span>, views.ResultsView.as_view(), name=<span class="string">'results'</span>),</div><div class="line">    url(<span class="string">r'^(?P&lt;question_id&gt;[0-9]+)/vote/$'</span>, views.vote, name=<span class="string">'vote'</span>),</div><div class="line">]</div></pre></td></tr></table></figure>
<ul>
<li>这里做了两个改变1：一个是讲参数的名字丢该为了<code>pk</code>, 2:将views只想的函数方式修改了，只是是在同一个类中调用不同的属性是使用方法，现在是调用不同类的方式，或许是类是更好的条件继承、重用代码的吧。</li>
</ul>
<h5 id="1-9-2-修改views"><a href="#1-9-2-修改views" class="headerlink" title="1.9.2 修改views"></a>1.9.2 修改views</h5><ul>
<li>打开<code>polls/views.py</code>文件修改为：</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> get_object_or_404, render</div><div class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponseRedirect</div><div class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> reverse</div><div class="line"><span class="keyword">from</span> django.views <span class="keyword">import</span> generic</div><div class="line"></div><div class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Choice, Question</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">IndexView</span><span class="params">(generic.ListView)</span>:</span></div><div class="line">    template_name = <span class="string">'polls/index.html'</span></div><div class="line">    context_object_name = <span class="string">'latest_question_list'</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_queryset</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="string">"""Return the last five published questions."""</span></div><div class="line">        <span class="keyword">return</span> Question.objects.order_by(<span class="string">'-pub_date'</span>)[:<span class="number">5</span>]</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">DetailView</span><span class="params">(generic.DetailView)</span>:</span></div><div class="line">    model = Question</div><div class="line">    template_name = <span class="string">'polls/detail.html'</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ResultsView</span><span class="params">(generic.DetailView)</span>:</span></div><div class="line">    model = Question</div><div class="line">    template_name = <span class="string">'polls/results.html'</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">vote</span><span class="params">(request, question_id)</span>:</span></div><div class="line">    ... <span class="comment"># same as above, no changes needed.</span></div></pre></td></tr></table></figure>
<ul>
<li>这里用到了<code>ListView</code>和<code>DetailView</code>，分别需要去去继承他们，他们其实都是一些抽象的概念。</li>
<li>每个通用视图都需要一个model的字段，因此你需要丢一个Model字段。</li>
<li><code>DetailView</code>显示需要从URL中获取<code>pk</code>的字段，所以我们在写url的时候，将<code>quesiton_id</code>的参数名字修改为了<code>pk</code>。</li>
<li><code>DetailView</code>需要使用的模板名字为：<code>&lt;app name&gt;/&lt;module name&gt;_detail.name</code>，在我们现在的项目中，模板的名字为：<code>polls/question_detail.html</code>,这里模板名字的存在是为告诉Django需要使用特定名称的模板，而不是使用默认生成的模板，这里你就会发现<code>detail</code>和<code>result</code>虽然继承的都是<code>DetailView</code>,但是他们指定了不同模板名字，这就让显示不同的模板名字。</li>
<li>类似的<code>ListView</code>也是一样的，默认Django会去找<code>&lt;app name&gt;/&lt;model name&gt;_list.html</code>，但是由于我们定义了<code>template_name</code>,因此他只会找<code>polls/index.html</code></li>
<li>在之前我们都是通过丢一个名叫<code>question</code>以及<code>latest_question_list</code>的值给模板的，对<code>DetailView</code>而言：<code>question</code>的值是默认会被生成的，因为我们运用了Django model(Question),Django 是能够通过名字自动检测的。</li>
<li>而在<code>ListView</code>中，我们用到了<code>latest_question_list</code>,Django默认会生成<code>question_list</code>,但是我们需要的是<code>latest_question_list</code>,因此我们需要覆写这个属性<code>context_object_name</code>，将它准确定义为我们需要的名字<code>latest_question_list</code></li>
<li>模板这部分 确实还是挺复杂的，主要是我们不太熟悉一些字段的用法、含义，可以自行参考 [<a href="https://docs.djangoproject.com/en/1.11/topics/class-based-views/" target="_blank" rel="external">https://docs.djangoproject.com/en/1.11/topics/class-based-views/</a>]</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;1-8：细化views页面的功能&quot;&gt;&lt;a href=&quot;#1-8：细化views页面的功能&quot; class=&quot;headerlink&quot; title=&quot;1.8：细化views页面的功能&quot;&gt;&lt;/a&gt;1.8：细化views页面的功能&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;打开&lt;code&gt;polls/detail.html&lt;/code&gt;的文件，将其中的代码修改一下：&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight dust&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;h1&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;template-variable&quot;&gt;&amp;#123; &amp;#123; question.question_text &amp;#125;&lt;/span&gt;&lt;span class=&quot;xml&quot;&gt; &amp;#125;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;h1&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/span&gt;&lt;span class=&quot;template-variable&quot;&gt;&amp;#123; % &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; error_message % &amp;#125;&lt;/span&gt;&lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;strong&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;template-variable&quot;&gt;&amp;#123; &amp;#123; error_message &amp;#125;&lt;/span&gt;&lt;span class=&quot;xml&quot;&gt; &amp;#125;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;strong&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;template-variable&quot;&gt;&amp;#123; % endif % &amp;#125;&lt;/span&gt;&lt;span class=&quot;xml&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;form&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;action&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;template-variable&quot;&gt;&amp;#123; % url &#39;polls:vote&#39; question.id % &amp;#125;&lt;/span&gt;&lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;method&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;post&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/span&gt;&lt;span class=&quot;template-variable&quot;&gt;&amp;#123; % csrf_token % &amp;#125;&lt;/span&gt;&lt;span class=&quot;xml&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/span&gt;&lt;span class=&quot;template-variable&quot;&gt;&amp;#123; % for choice in question.choice_set.all % &amp;#125;&lt;/span&gt;&lt;span class=&quot;xml&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;radio&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;choice&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;choice&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;template-variable&quot;&gt;&amp;#123; &amp;#123; forloop.counter &amp;#125;&lt;/span&gt;&lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&lt;span class=&quot;string&quot;&gt; &amp;#125;&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;template-variable&quot;&gt;&amp;#123; &amp;#123; choice.id &amp;#125;&lt;/span&gt;&lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&lt;span class=&quot;string&quot;&gt; &amp;#125;&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;label&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;for&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;choice&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;template-variable&quot;&gt;&amp;#123; &amp;#123; forloop.counter &amp;#125;&lt;/span&gt;&lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&lt;span class=&quot;string&quot;&gt; &amp;#125;&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;template-variable&quot;&gt;&amp;#123; &amp;#123; choice.choice_text &amp;#125;&lt;/span&gt;&lt;span class=&quot;xml&quot;&gt; &amp;#125;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;label&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;br&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/span&gt;&lt;span class=&quot;template-variable&quot;&gt;&amp;#123; % endfor % &amp;#125;&lt;/span&gt;&lt;span class=&quot;xml&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;submit&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;Vote&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;form&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="日志" scheme="http://www.ghcoder.com/categories/%E6%97%A5%E5%BF%97/"/>
    
    
      <category term="Python、Django" scheme="http://www.ghcoder.com/tags/Python%E3%80%81Django/"/>
    
  </entry>
  
  <entry>
    <title>学习Django第三部分，重点关注如何运用系统模板,并且自定义URL[官网教程]</title>
    <link href="http://www.ghcoder.com/2017/05/15/20170515/"/>
    <id>http://www.ghcoder.com/2017/05/15/20170515/</id>
    <published>2017-05-15T06:15:12.000Z</published>
    <updated>2017-05-15T07:09:21.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-开始写新的Views"><a href="#1-开始写新的Views" class="headerlink" title="1.开始写新的Views"></a>1.开始写新的Views</h3><ul>
<li>打开<code>polls/views.py</code>文件，写views的函数和写其他的函数略有不同，因为他们可以接受参数，写入下面的代码：</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">detail</span><span class="params">(request, question_id)</span>:</span></div><div class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">"You're looking at question %s."</span> % question_id)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">results</span><span class="params">(request, question_id)</span>:</span></div><div class="line">    response = <span class="string">"You're looking at the results of question %s."</span></div><div class="line">    <span class="keyword">return</span> HttpResponse(response % question_id)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">vote</span><span class="params">(request, question_id)</span>:</span></div><div class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">"You're voting on question %s."</span> % question_id)</div></pre></td></tr></table></figure>
<a id="more"></a>
<ul>
<li>写完了views的这些函数，其实这些函数只是简单的返回一些字符串，下面来出来一些关于url的函数处理<code>polls/urls.py</code>：</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> url</div><div class="line"></div><div class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</div><div class="line"></div><div class="line">urlpatterns = [</div><div class="line">    <span class="comment"># ex: /polls/</span></div><div class="line">    url(<span class="string">r'^$'</span>, views.index, name=<span class="string">'index'</span>),</div><div class="line">    <span class="comment"># ex: /polls/5/</span></div><div class="line">    url(<span class="string">r'^(?P&lt;question_id&gt;[0-9]+)/$'</span>, views.detail, name=<span class="string">'detail'</span>),</div><div class="line">    <span class="comment"># ex: /polls/5/results/</span></div><div class="line">    url(<span class="string">r'^(?P&lt;question_id&gt;[0-9]+)/results/$'</span>, views.results, name=<span class="string">'results'</span>),</div><div class="line">    <span class="comment"># ex: /polls/5/vote/</span></div><div class="line">    url(<span class="string">r'^(?P&lt;question_id&gt;[0-9]+)/vote/$'</span>, views.vote, name=<span class="string">'vote'</span>),</div><div class="line">]</div></pre></td></tr></table></figure>
<ul>
<li>现在当你再去访问<code>/polls/34</code>、<code>/polls/34/results/</code>、<code>/polls/34/vote/</code>你就可以看到，这些能够对应到刚才你写的几个函数了。</li>
<li>当你访问的url为<code>/polls/34/</code>的时候，此时Django将先找到项目中的<code>urls</code>模块，（其实就是加载项目中的urls.py的文件），它将会找到名为<code>urlpatterns</code>这个列表，看看在你的列表的项目中，有没有出现你访问的url的条目，当系统找到<code>^polls/</code>之后，就会去掉<code>^polls/</code>,然后将剩下的<code>34/</code>发送给<code>polls.urls</code>进行更深的解析，终于在<code>polls/urls.py的urlpatterns</code>列表中找到了这行代码<code>url(r&#39;^(?P&lt;question_id&gt;[0-9]+)/$&#39;, views.detail, name=&#39;detail&#39;)</code>,因为这行代码的第二个参数是指向的<code>views.detail</code>函数句柄，这里其实执行的是下面的代码：</li>
</ul>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="title">detail</span><span class="params">(request=&lt;HttpRequest object&gt;, question_id=<span class="string">'34'</span>)</span></span></div></pre></td></tr></table></figure>
<ul>
<li>而这里的<code>question_id=&#39;34&#39;</code>,部分是因为我们写的这部分正则:<code>(?P&lt;question_id&gt;[0-9]+)</code>,括号所包含的内容将作为一个参数传给对应的函数, <code>?P&lt;question_id&gt;</code>定义了传给函数的形参名</li>
</ul>
<h4 id="1-1-具体处理一些页面的请求"><a href="#1-1-具体处理一些页面的请求" class="headerlink" title="1.1:具体处理一些页面的请求"></a>1.1:具体处理一些页面的请求</h4><ul>
<li>每个页面应该可以做1-2件事情，返回http的请求，可以通过HttpResponse[<a href="https://docs.djangoproject.com/en/1.11/ref/request-response/#django.http.HttpResponse" target="_blank" rel="external">https://docs.djangoproject.com/en/1.11/ref/request-response/#django.http.HttpResponse</a>], 还有些未找到页面Django也给了响应的便利返回Http404[<a href="https://docs.djangoproject.com/en/1.11/topics/http/views/#django.http.Http404" target="_blank" rel="external">https://docs.djangoproject.com/en/1.11/topics/http/views/#django.http.Http404</a>], 其实说白了每个页面它希望得到的是HttpResponse能够处理正常的逻辑，要不然就是<code>exception</code>，打开polls/views.py</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</div><div class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Question</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(request)</span>:</span></div><div class="line">    latest_question_list = Question.objects.order_by(<span class="string">'-pub_date'</span>)[:<span class="number">5</span>]</div><div class="line">    output = <span class="string">', '</span>.join([q.question_text <span class="keyword">for</span> q <span class="keyword">in</span> latest_question_list])</div><div class="line">    <span class="keyword">return</span> HttpResponse(output)</div></pre></td></tr></table></figure>
<ul>
<li>这里当你再次访问<code>/polls/</code>的时候，你就可以看到在第二部分数据库操作插入的数据了，但是我们如何让我们的界面显示的好看一点呢，这里就需要引入<code>template</code>模板，现在我们<code>polls</code>的文件夹中创建<code>templates</code>文件夹，Django将会自动去这个文件夹中去寻找模板。</li>
<li>这里还要说一下，如果在<code>settings.py</code>文件中<code>APP_DIRS</code>设置的是<code>TRUE</code>的话，Django的模板默认就会去INSTALL_APPS去寻找对应的<code>templates</code>的文件夹。</li>
<li>系统给我们的意见是，让我们在<code>templates</code>文件夹下面再创建一个<code>polls</code>的文件夹，在<code>polls</code>的文件夹内再创建<code>index.html</code>,总的路径应该是这样的：<code>polls/templates/polls/index.html</code>，这样创建的是为了方便我们在调用模板的时候方便、易读<code>polls/index.html</code></li>
<li>下面再刚创建的<code>index.html</code>中添加如下的代码：</li>
</ul>
<figure class="highlight dust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="xml"></span><span class="template-variable">&#123; % <span class="keyword">if</span> latest_question_list % &#125;</span><span class="xml"></span></div><div class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">    <span class="template-variable">&#123; % for question in latest_question_list % &#125;</span><span class="xml"></span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/polls/</span></span><span class="template-variable">&#123; &#123; question.id &#125;</span><span class="xml"><span class="tag"><span class="string"> &#125;/"</span>&gt;</span></span><span class="template-variable">&#123; &#123; question.question_text &#125;</span><span class="xml"> &#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></div><div class="line">    <span class="template-variable">&#123; % endfor % &#125;</span><span class="xml"></span></div><div class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"><span class="template-variable">&#123; % else % &#125;</span><span class="xml"></span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>No polls are available.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="template-variable">&#123; % endif % &#125;</span><span class="xml"></span></div></pre></td></tr></table></figure>
<ul>
<li>显示的模板已经写完了，下面再将之前的<code>views.py</code>的函数修改一下：</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</div><div class="line"><span class="keyword">from</span> django.template <span class="keyword">import</span> loader</div><div class="line"></div><div class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Question</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(request)</span>:</span></div><div class="line">    latest_question_list = Question.objects.order_by(<span class="string">'-pub_date'</span>)[:<span class="number">5</span>]</div><div class="line">    template = loader.get_template(<span class="string">'polls/index.html'</span>)</div><div class="line">    context = &#123;</div><div class="line">        <span class="string">'latest_question_list'</span>: latest_question_list,</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> HttpResponse(template.render(context, request))</div></pre></td></tr></table></figure>
<h4 id="1-2：render-函数"><a href="#1-2：render-函数" class="headerlink" title="1.2：render()函数"></a>1.2：render()函数</h4><ul>
<li>这里我们可以通过<code>render()</code>函数来简写我们的模板，直接可以通过<code>render函数</code>,并且也不需要放回<code>HttpResponse</code>,也不需要<code>loader</code>函数来载入我们的模板了</li>
<li><code>render()</code>函数将<code>request</code>作为第一个参数，模板的名字作为第二个参数，第三个参数为可选参数，返回的是<code>HttpResponse</code>的对象。</li>
<li>用render之后，代码改变为：</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</div><div class="line"></div><div class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Question</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(request)</span>:</span></div><div class="line">    latest_question_list = Question.objects.order_by(<span class="string">'-pub_date'</span>)[:<span class="number">5</span>]</div><div class="line">    context = &#123;<span class="string">'latest_question_list'</span>: latest_question_list&#125;</div><div class="line">    <span class="keyword">return</span> render(request, <span class="string">'polls/index.html'</span>, context)</div></pre></td></tr></table></figure>
<h4 id="1-3：下面来处理一下404的错误页面"><a href="#1-3：下面来处理一下404的错误页面" class="headerlink" title="1.3：下面来处理一下404的错误页面"></a>1.3：下面来处理一下404的错误页面</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> Http404</div><div class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</div><div class="line"></div><div class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Question</div><div class="line"><span class="comment"># ...</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">detail</span><span class="params">(request, question_id)</span>:</span></div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        question = Question.objects.get(pk=question_id)</div><div class="line">    <span class="keyword">except</span> Question.DoesNotExist:</div><div class="line">        <span class="keyword">raise</span> Http404(<span class="string">"Question does not exist"</span>)</div><div class="line">    <span class="keyword">return</span> render(request, <span class="string">'polls/detail.html'</span>, &#123;<span class="string">'question'</span>: question&#125;)</div></pre></td></tr></table></figure>
<ul>
<li>这里的在详情页面的时候，如果访问主键不存在的话，我们应该抛出404的错误，让我们能够捕捉到错误。</li>
<li>同时在<code>polls/detail.html</code>的文件中添加如在下代码：</li>
</ul>
<figure class="highlight clojure"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123; &#123; question &#125; &#125;</div></pre></td></tr></table></figure>
<h4 id="1-4：404函数的缩写get-object-or-404"><a href="#1-4：404函数的缩写get-object-or-404" class="headerlink" title="1.4：404函数的缩写get_object_or_404()"></a>1.4：404函数的缩写get_object_or_404()</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> get_object_or_404, render</div><div class="line"></div><div class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Question</div><div class="line"><span class="comment"># ...</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">detail</span><span class="params">(request, question_id)</span>:</span></div><div class="line">    question = get_object_or_404(Question, pk=question_id)</div><div class="line">    <span class="keyword">return</span> render(request, <span class="string">'polls/detail.html'</span>, &#123;<span class="string">'question'</span>: question&#125;)</div></pre></td></tr></table></figure>
<ul>
<li><code>get_object_or_404()</code>函数第一个参数为：Django的Model, 第二个参数，是一个列表，是任意数量参数的列表,当get不到任何东西的时候，就会返回Http404的对象。</li>
</ul>
<h4 id="1-5-使用系统模板"><a href="#1-5-使用系统模板" class="headerlink" title="1.5:使用系统模板"></a>1.5:使用系统模板</h4><ul>
<li>回到我们之前写的<code>polls/detail.html</code>，改为这样：</li>
</ul>
<figure class="highlight dust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><span class="template-variable">&#123; &#123; question.question_text &#125;</span><span class="xml"> &#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></div><div class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line"><span class="template-variable">&#123; % for choice in question.choice_set.all % &#125;</span><span class="xml"></span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="template-variable">&#123; &#123; choice.choice_text &#125;</span><span class="xml"> &#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></div><div class="line"><span class="template-variable">&#123; % endfor % &#125;</span><span class="xml"></span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>当我们运用系统的模板的时候，可以看到系统是用的<code>点语法</code>,例如<code>{ { question.question_text } }</code>，Django 先去寻找<code>question</code>这个对象是否存在，然后再去寻找<code>question</code>是否存在<code>question_text</code>的这个属性值。</li>
<li><code>{ % for % }</code>这是一个for循环，<code>question.choice_set.all</code>=<code>question.choice_set.all()</code>这个返回的是一个包含<code>Choice</code>，可迭代的集合。</li>
<li>系统模板更多信息[<a href="https://docs.djangoproject.com/en/1.11/topics/templates/" target="_blank" rel="external">https://docs.djangoproject.com/en/1.11/topics/templates/</a>]</li>
</ul>
<h4 id="1-6：去除系统模板中的硬编码"><a href="#1-6：去除系统模板中的硬编码" class="headerlink" title="1.6：去除系统模板中的硬编码"></a>1.6：去除系统模板中的硬编码</h4><ul>
<li>我们在写<code>index.html</code>模板的时候，我们写到这样一段代码<code>&lt;li&gt;&lt;a href=&quot;/polls/{ { question.id } }/&quot;&gt;{ { question.question_text } }&lt;/a&gt;&lt;/li&gt;</code>，通过我们在<code>views.py</code>的函数中将<code>question</code>的数据中传递到模板上，并且在模板上这样使用，道理上来说是没毛病的。</li>
<li>这样写的问题，在于模板和数据，紧密耦合在一起，在很多模板中，假如我一旦修改了URL，我们就得去一堆的模板中修改这个写死的url。</li>
<li>因为我们在<code>polls/urls.py</code>中已经用到了<code>url</code>的模块,那么我们就能够通过之前定义的url,并且知道下面将要跳转url。</li>
</ul>
<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">urlpatterns = [</div><div class="line">               url(<span class="string">r'^(?P&lt;question_id&gt;[0-9]+)/$'</span>, views.detail, name=<span class="string">'detail'</span>),</div><div class="line">          ]</div></pre></td></tr></table></figure>
<ul>
<li>因此可以修改为：</li>
</ul>
<figure class="highlight dust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="xml">//修改前</span></div><div class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/polls/</span></span><span class="template-variable">&#123; &#123; question.id &#125;</span><span class="xml"><span class="tag"><span class="string"> &#125;/"</span>&gt;</span></span><span class="template-variable">&#123; &#123; question.question_text &#125;</span><span class="xml"> &#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></div><div class="line">//修改后</div><div class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"</span></span><span class="template-variable">&#123; % url 'detail' question.id % &#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span></span><span class="template-variable">&#123; &#123; question.question_text &#125;</span><span class="xml"> &#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></div></pre></td></tr></table></figure>
<ul>
<li>如果你想要修改详情页面的url，假如现在的url不是之前的<code>polls/12</code>,而是最新的url：<code>polls/specifics/12</code>,此时你只需要在你的url中加一个一个url，例如：</li>
</ul>
<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line">url(<span class="string">r'^specifics/(?P&lt;question_id&gt;[0-9]+)/$'</span>, views.detail, name=<span class="string">'detail'</span>),</div><div class="line">...</div></pre></td></tr></table></figure>
<h4 id="1-7-URL的命名空间"><a href="#1-7-URL的命名空间" class="headerlink" title="1.7:URL的命名空间"></a>1.7:URL的命名空间</h4><ul>
<li>在这个项目中，我们仅仅只是创建了一个app，叫做<code>polls</code>,但是在实际的Django的项目中，其实会有10、20几个app, 那么我们在使用之前提到的<code>{ % url % }</code>,Django如何区分url呢？比如我<code>polls</code>下面有一个<code>detail</code>，假如我还有个新的app，下面也有一个<code>detail</code>,我改怎么区分呢？</li>
<li>官方的意思是去定义<code>app_name</code>,打开<code>polls/url.py</code></li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> url</div><div class="line"></div><div class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</div><div class="line"></div><div class="line">app_name = <span class="string">'polls'</span></div><div class="line">urlpatterns = [</div><div class="line">    url(<span class="string">r'^$'</span>, views.index, name=<span class="string">'index'</span>),</div><div class="line">    url(<span class="string">r'^(?P&lt;question_id&gt;[0-9]+)/$'</span>, views.detail, name=<span class="string">'detail'</span>),</div><div class="line">    url(<span class="string">r'^(?P&lt;question_id&gt;[0-9]+)/results/$'</span>, views.results, name=<span class="string">'results'</span>),</div><div class="line">    url(<span class="string">r'^(?P&lt;question_id&gt;[0-9]+)/vote/$'</span>, views.vote, name=<span class="string">'vote'</span>),</div><div class="line">]</div></pre></td></tr></table></figure>
<ul>
<li>并且家模板里面的代码也做一下修改：</li>
</ul>
<figure class="highlight dust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="xml">//未使用app_name</span></div><div class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"</span></span><span class="template-variable">&#123; % url 'detail' question.id % &#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span></span><span class="template-variable">&#123; &#123; question.question_text &#125;</span><span class="xml"> &#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></div><div class="line"></div><div class="line">//使用app_name = 'polls'</div><div class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"</span></span><span class="template-variable">&#123; % url 'polls:detail' question.id % &#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span></span><span class="template-variable">&#123; &#123; question.question_text &#125;</span><span class="xml"> &#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></div></pre></td></tr></table></figure>
<h4 id="ps-最后说一下，hexo好坑呐！在markdown格式中不能出现”-“-以及-“-”-必须要在中间添加个空格。哎！无语。。。"><a href="#ps-最后说一下，hexo好坑呐！在markdown格式中不能出现”-“-以及-“-”-必须要在中间添加个空格。哎！无语。。。" class="headerlink" title="ps: 最后说一下，hexo好坑呐！在markdown格式中不能出现”{ {“ 以及 “{ %”,必须要在中间添加个空格。哎！无语。。。"></a>ps: 最后说一下，hexo好坑呐！在markdown格式中不能出现”{ {“ 以及 “{ %”,必须要在中间添加个空格。哎！无语。。。</h4>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-开始写新的Views&quot;&gt;&lt;a href=&quot;#1-开始写新的Views&quot; class=&quot;headerlink&quot; title=&quot;1.开始写新的Views&quot;&gt;&lt;/a&gt;1.开始写新的Views&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;打开&lt;code&gt;polls/views.py&lt;/code&gt;文件，写views的函数和写其他的函数略有不同，因为他们可以接受参数，写入下面的代码：&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;detail&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(request, question_id)&lt;/span&gt;:&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; HttpResponse(&lt;span class=&quot;string&quot;&gt;&quot;You&#39;re looking at question %s.&quot;&lt;/span&gt; % question_id)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;results&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(request, question_id)&lt;/span&gt;:&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    response = &lt;span class=&quot;string&quot;&gt;&quot;You&#39;re looking at the results of question %s.&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; HttpResponse(response % question_id)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;vote&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(request, question_id)&lt;/span&gt;:&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; HttpResponse(&lt;span class=&quot;string&quot;&gt;&quot;You&#39;re voting on question %s.&quot;&lt;/span&gt; % question_id)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="日志" scheme="http://www.ghcoder.com/categories/%E6%97%A5%E5%BF%97/"/>
    
    
      <category term="Python、Django" scheme="http://www.ghcoder.com/tags/Python%E3%80%81Django/"/>
    
  </entry>
  
  <entry>
    <title>学习Django第二部分[官网教程]</title>
    <link href="http://www.ghcoder.com/2017/05/14/20170514/"/>
    <id>http://www.ghcoder.com/2017/05/14/20170514/</id>
    <published>2017-05-14T03:32:12.000Z</published>
    <updated>2017-05-15T06:18:07.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="学习Django的第二部分-对官网Demo教程的翻译，以及自己的一些认识"><a href="#学习Django的第二部分-对官网Demo教程的翻译，以及自己的一些认识" class="headerlink" title="学习Django的第二部分[对官网Demo教程的翻译，以及自己的一些认识]"></a>学习Django的第二部分[对官网Demo教程的翻译，以及自己的一些认识]</h3><h4 id="第一部分，已经使用了Django写了一个简单View，并且配置了我们的url，是的我们能够正常访问到我们新建的View页面。今天开始第二部分："><a href="#第一部分，已经使用了Django写了一个简单View，并且配置了我们的url，是的我们能够正常访问到我们新建的View页面。今天开始第二部分：" class="headerlink" title="第一部分，已经使用了Django写了一个简单View，并且配置了我们的url，是的我们能够正常访问到我们新建的View页面。今天开始第二部分："></a>第一部分，已经使用了Django写了一个简单View，并且配置了我们的url，是的我们能够正常访问到我们新建的View页面。今天开始第二部分：</h4><a id="more"></a>
<ol>
<li>我们需要到<code>xxxProject/settings.py</code>文件去修改配置，我们这里主要讲的是数据库的配置。</li>
<li>Django默认是安装了SQLite，这里不需要额外下载什么。</li>
<li>如果需要用到别的数据库，可以去<code>settings</code>文件去修改。默认是这样的：</li>
</ol>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">DATABASES = &#123;</div><div class="line">      <span class="string">'default'</span>: &#123;</div><div class="line">          <span class="string">'ENGINE'</span>: <span class="string">'django.db.backends.sqlite3'</span>,</div><div class="line">          <span class="string">'NAME'</span>: os<span class="selector-class">.path</span><span class="selector-class">.join</span>(BASE_DIR, <span class="string">'db.sqlite3'</span>),</div><div class="line">      &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<h4 id="这里解释一下："><a href="#这里解释一下：" class="headerlink" title="这里解释一下："></a>这里解释一下：</h4><ul>
<li><code>ENGINE</code>字段根据选用数据库的不同，Django已经给我们做好了数据的枚举：<code>django.db.backends.sqlite3</code>,<code>django.db.backends.postgresql</code>,<code>django.db.backends.mysql</code>,<code>django.db.backends.oracle</code></li>
<li><code>NAME</code>数据库的名字</li>
<li>如果你和我一样，不是选用的Django默认的使用的sqlite的话，除此之外，还需要配置<code>USER</code>,<code>PASSWORD</code>,<code>HOST</code>,我用的mysql,这里如果需要正常使用mysql的话，可能还需要安装其他的一些依赖库，这里可以参考 [<a href="https://docs.djangoproject.com/en/1.11/topics/install/#database-installation" target="_blank" rel="external">https://docs.djangoproject.com/en/1.11/topics/install/#database-installation</a>]</li>
<li><p>官方给出了demo，可以根据自己的需求进行修改</p>
<figure class="highlight xquery"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"> DATABASES = &#123;</div><div class="line">    <span class="string">'default'</span>: &#123;</div><div class="line">        <span class="string">'ENGINE'</span>: <span class="string">'django.db.backends.postgresql'</span>,</div><div class="line">        <span class="string">'NAME'</span>: <span class="string">'mydatabase'</span>,</div><div class="line">        <span class="string">'USER'</span>: <span class="string">'mydatabaseuser'</span>,</div><div class="line">        <span class="string">'PASSWORD'</span>: <span class="string">'mypassword'</span>,</div><div class="line">        <span class="string">'HOST'</span>: <span class="string">'127.0.0.1'</span>,</div><div class="line">        <span class="string">'PORT'</span>: <span class="string">'5432'</span>,</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="数据库配置好之后，然后我们开始配置TIME-ZONE-默认值为America-Chicago-如果在中国的话，应该是Asia-Shanghai北京时间吧，至于时区的列表：-https-en-wikipedia-org-wiki-List-of-tz-database-time-zones-。"><a href="#数据库配置好之后，然后我们开始配置TIME-ZONE-默认值为America-Chicago-如果在中国的话，应该是Asia-Shanghai北京时间吧，至于时区的列表：-https-en-wikipedia-org-wiki-List-of-tz-database-time-zones-。" class="headerlink" title="数据库配置好之后，然后我们开始配置TIME_ZONE,默认值为America/Chicago,如果在中国的话，应该是Asia/Shanghai北京时间吧，至于时区的列表： [https://en.wikipedia.org/wiki/List_of_tz_database_time_zones]。"></a>数据库配置好之后，然后我们开始配置<code>TIME_ZONE</code>,默认值为<code>America/Chicago</code>,如果在中国的话，应该是<code>Asia/Shanghai</code>北京时间吧，至于时区的列表： [<a href="https://en.wikipedia.org/wiki/List_of_tz_database_time_zones]。" target="_blank" rel="external">https://en.wikipedia.org/wiki/List_of_tz_database_time_zones]。</a></h4><h4 id="这里重点说一下INSTALLED-APPS的配置，放在这个选项中的列表的字符串，代表运行Django同事需要激活这些对应的Django应用，app能够在不同的project中使用，并且你也能够打包、分发给别人来使用。"><a href="#这里重点说一下INSTALLED-APPS的配置，放在这个选项中的列表的字符串，代表运行Django同事需要激活这些对应的Django应用，app能够在不同的project中使用，并且你也能够打包、分发给别人来使用。" class="headerlink" title="这里重点说一下INSTALLED_APPS的配置，放在这个选项中的列表的字符串，代表运行Django同事需要激活这些对应的Django应用，app能够在不同的project中使用，并且你也能够打包、分发给别人来使用。"></a>这里重点说一下<code>INSTALLED_APPS</code>的配置，放在这个选项中的列表的字符串，代表运行Django同事需要激活这些对应的Django应用，app能够在不同的project中使用，并且你也能够打包、分发给别人来使用。</h4><figure class="highlight vala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># Application definition</span></div><div class="line">  </div><div class="line">  INSTALLED_APPS = [                                                                                                                                                                                      </div><div class="line">      <span class="string">'django.contrib.admin'</span>,<span class="comment">//Django 的默认后台系统</span></div><div class="line">      <span class="string">'django.contrib.auth'</span>, <span class="comment">//Django 的认证系统</span></div><div class="line">      <span class="string">'django.contrib.contenttypes'</span>, <span class="comment">// 管理内容类型</span></div><div class="line">      <span class="string">'django.contrib.sessions'</span>, <span class="comment">// 管理sessions</span></div><div class="line">      <span class="string">'django.contrib.messages'</span>, <span class="comment">// 管理消息</span></div><div class="line">      <span class="string">'django.contrib.staticfiles'</span>, <span class="comment">// 管理静态文件</span></div><div class="line">  ]</div></pre></td></tr></table></figure>
<ul>
<li>这些已经安装的，默认的app，至少会在后台建立1的表（现在还没有建立表呢），在执行了<code>python manage.py migrate</code>才会在我们的数据库里建立这里app的表。</li>
<li>这里我在linux环境下安装的时候，遇到点问题：包了很多奇葩的错误，这里我就说几个，我遇到的，其他我没有列出来的，可能你直接google就能找到了：</li>
</ul>
<ol>
<li>通过<code>sudo pip install MySQL-python</code>来安装mysql的时候包这个错</li>
</ol>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Command <span class="string">"python setup.py egg_info"</span> failed <span class="keyword">with</span> <span class="keyword">error</span> code <span class="number">1</span> <span class="keyword">in</span> /tmp/pip-build<span class="number">-7696</span>Ic/MySQL-python/</div></pre></td></tr></table></figure>
<h4 id="直接在命令行运行"><a href="#直接在命令行运行" class="headerlink" title="直接在命令行运行:"></a>直接在命令行运行:</h4><figure class="highlight cmake"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo apt <span class="keyword">install</span> libmysqlclient-dev</div><div class="line">pip <span class="keyword">install</span> mysql</div></pre></td></tr></table></figure>
<h4 id="还有其他的一些小问题：-http-stackoverflow-com-questions-35991403-python-pip-install-gives-command-python-setup-py-egg-info-failed-with-error-c"><a href="#还有其他的一些小问题：-http-stackoverflow-com-questions-35991403-python-pip-install-gives-command-python-setup-py-egg-info-failed-with-error-c" class="headerlink" title="还有其他的一些小问题： [http://stackoverflow.com/questions/35991403/python-pip-install-gives-command-python-setup-py-egg-info-failed-with-error-c]"></a>还有其他的一些小问题： [<a href="http://stackoverflow.com/questions/35991403/python-pip-install-gives-command-python-setup-py-egg-info-failed-with-error-c" target="_blank" rel="external">http://stackoverflow.com/questions/35991403/python-pip-install-gives-command-python-setup-py-egg-info-failed-with-error-c</a>]</h4><h4 id="执行完-python-manage-py-migrate-就会看到终端出现这些字样，就代表你的表已经成功生成了-如果不信，你也可以打开自己mysql数据库，就会发现Django已经为我生成好了表了。"><a href="#执行完-python-manage-py-migrate-就会看到终端出现这些字样，就代表你的表已经成功生成了-如果不信，你也可以打开自己mysql数据库，就会发现Django已经为我生成好了表了。" class="headerlink" title="执行完 python manage.py migrate 就会看到终端出现这些字样，就代表你的表已经成功生成了, 如果不信，你也可以打开自己mysql数据库，就会发现Django已经为我生成好了表了。"></a>执行完 <code>python manage.py migrate</code> 就会看到终端出现这些字样，就代表你的表已经成功生成了, 如果不信，你也可以打开自己mysql数据库，就会发现Django已经为我生成好了表了。</h4><figure class="highlight lasso"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">Operations <span class="keyword">to</span> perform:</div><div class="line">  Apply <span class="literal">all</span> migrations: admin, auth, contenttypes, sessions</div><div class="line">Running migrations:</div><div class="line">  Applying contenttypes<span class="number">.0001</span>_initial<span class="params">...</span> OK</div><div class="line">  Applying auth<span class="number">.0001</span>_initial<span class="params">...</span> OK</div><div class="line">  Applying admin<span class="number">.0001</span>_initial<span class="params">...</span> OK</div><div class="line">  Applying admin<span class="number">.0002</span>_logentry_remove_auto_add<span class="params">...</span> OK</div><div class="line">  Applying contenttypes<span class="number">.0002</span>_remove_content_type_name<span class="params">...</span> OK</div><div class="line">  Applying auth<span class="number">.0002</span>_alter_permission_name_max_length<span class="params">...</span> OK</div><div class="line">  Applying auth<span class="number">.0003</span>_alter_user_email_max_length<span class="params">...</span> OK</div><div class="line">  Applying auth<span class="number">.0004</span>_alter_user_username_opts<span class="params">...</span> OK</div><div class="line">  Applying auth<span class="number">.0005</span>_alter_user_last_login_null<span class="params">...</span> OK</div><div class="line">  Applying auth<span class="number">.0006</span>_require_contenttypes_0002<span class="params">...</span> OK</div><div class="line">  Applying auth<span class="number">.0007</span>_alter_validators_add_error_messages<span class="params">...</span> OK</div><div class="line">  Applying auth<span class="number">.0008</span>_alter_user_username_max_length<span class="params">...</span> OK</div><div class="line">  Applying sessions<span class="number">.0001</span>_initial<span class="params">...</span> OK</div></pre></td></tr></table></figure>
<h4 id="官方给出了关于migrate命令的作用，Django会去project中找我的settings-py文件，并且找到INSTALL-APPS，为这些安装的app创建必要的表-并且官方也说了，这些默认的INSTALL-APPS并不是每个人都需要他，当不需要的时候，删除掉xxxProject-settings-py文件中对应的app，然后执行migrate就可以了。"><a href="#官方给出了关于migrate命令的作用，Django会去project中找我的settings-py文件，并且找到INSTALL-APPS，为这些安装的app创建必要的表-并且官方也说了，这些默认的INSTALL-APPS并不是每个人都需要他，当不需要的时候，删除掉xxxProject-settings-py文件中对应的app，然后执行migrate就可以了。" class="headerlink" title="官方给出了关于migrate命令的作用，Django会去project中找我的settings.py文件，并且找到INSTALL_APPS，为这些安装的app创建必要的表, 并且官方也说了，这些默认的INSTALL_APPS并不是每个人都需要他，当不需要的时候，删除掉xxxProject/settings.py文件中对应的app，然后执行migrate就可以了。"></a>官方给出了关于<code>migrate</code>命令的作用，Django会去project中找我的settings.py文件，并且找到INSTALL_APPS，为这些安装的app创建必要的表, 并且官方也说了，这些默认的INSTALL_APPS并不是每个人都需要他，当不需要的时候，删除掉xxxProject/settings.py文件中对应的app，然后执行<code>migrate</code>就可以了。</h4><h3 id="创建Model"><a href="#创建Model" class="headerlink" title="创建Model"></a>创建Model</h3><h4 id="好了，现在开始我们需要创建Model了，这也是我为什么喜欢Django的最最根本的原因，Django中的Model不同于其他语言中的Model对象，而是实质性的涉及到数据库的数据。"><a href="#好了，现在开始我们需要创建Model了，这也是我为什么喜欢Django的最最根本的原因，Django中的Model不同于其他语言中的Model对象，而是实质性的涉及到数据库的数据。" class="headerlink" title="好了，现在开始我们需要创建Model了，这也是我为什么喜欢Django的最最根本的原因，Django中的Model不同于其他语言中的Model对象，而是实质性的涉及到数据库的数据。"></a>好了，现在开始我们需要创建Model了，这也是我为什么喜欢Django的最最根本的原因，Django中的Model不同于其他语言中的Model对象，而是实质性的涉及到数据库的数据。</h4><ol>
<li>之前在第一章的时候，我们创建了一个属于我们自己的app，名字叫做<code>polls</code>的app,我们现在围绕这个app创建属于这个app的Model，我们创建两个Model，一个叫做<code>Question</code>,一个叫<code>Choice</code>,<code>Question</code>含有一个问题字段和发布时间的字段，<code>Choice</code>含有两个字段一个choice的Text的字段、一个vote的字段，<strong>并且一个choice会关联一个question字段</strong>，现在开始编辑<code>polls/models.py</code>文件：</li>
</ol>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="title">from</span> django.db <span class="keyword">import</span> models</div><div class="line"><span class="class"></span></div><div class="line"></div><div class="line"><span class="keyword">class</span> <span class="type">Question</span>(<span class="title">models</span>.<span class="type">Model</span>):</div><div class="line">    question_text = models.<span class="type">CharField</span>(<span class="title">max_length</span>=200)</div><div class="line">    pub_date = models.<span class="type">DateTimeField</span>('<span class="title">date</span> <span class="title">published'</span>)</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">class</span> <span class="type">Choice</span>(<span class="title">models</span>.<span class="type">Model</span>):</div><div class="line">    question = models.<span class="type">ForeignKey</span>(<span class="type">Question</span>, <span class="title">on_delete</span>=<span class="title">models</span>.<span class="type">CASCADE</span>)</div><div class="line">    choice_text = models.<span class="type">CharField</span>(<span class="title">max_length</span>=200)</div><div class="line">    votes = models.<span class="type">IntegerField</span>(<span class="title">default</span>=0)</div></pre></td></tr></table></figure>
<ul>
<li>这些model的类都是<code>django.db.models.Model</code>的子类。</li>
<li>这里的每个字段对应的就是数据库中的每个字段。</li>
<li>一些字段是需要必须的参数的，比如<code>CharField</code>必须有参数<code>max_length</code>的存在。</li>
<li>一些字段也可以传入一些可选的参数: 比如：<code>IntegerField</code>的<code>default</code>的字段。</li>
<li><p><code>ForeignKey</code>可以通过外键的形式，将<code>choice</code>的类型关联到<code>Question</code>的类型上去，在Django的model数据中，是支持一对多，一对一，多对多的。</p>
<h3 id="激活Model"><a href="#激活Model" class="headerlink" title="激活Model"></a>激活Model</h3><h4 id="上面虽然外面已经创建了这两个Model，但是目前为止，还没有和我现在有Django项目关联上，在此之前，我们必须要先激活Model-并且根据我们的model代码创建出对应的数据库表的信息。"><a href="#上面虽然外面已经创建了这两个Model，但是目前为止，还没有和我现在有Django项目关联上，在此之前，我们必须要先激活Model-并且根据我们的model代码创建出对应的数据库表的信息。" class="headerlink" title="上面虽然外面已经创建了这两个Model，但是目前为止，还没有和我现在有Django项目关联上，在此之前，我们必须要先激活Model,并且根据我们的model代码创建出对应的数据库表的信息。"></a>上面虽然外面已经创建了这两个Model，但是目前为止，还没有和我现在有Django项目关联上，在此之前，我们必须要先激活Model,并且根据我们的model代码创建出对应的数据库表的信息。</h4><ul>
<li>首先我们先要将我们的<code>polls</code>的app安装上。去<code>settings.py</code>的INSTALL_APPS的列表中，将我们的<code>polls</code>app添加进去。</li>
</ul>
<figure class="highlight sml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">  <span class="type">INSTALLED_APPS</span> = [</div><div class="line">  </div><div class="line">    <span class="symbol">'polls</span>.apps.<span class="type">PollsConfig'</span>,</div><div class="line">    </div><div class="line">    <span class="symbol">'django</span>.contrib.admin',</div><div class="line">    <span class="symbol">'django</span>.contrib.auth',</div><div class="line">    <span class="symbol">'django</span>.contrib.contenttypes',</div><div class="line">    <span class="symbol">'django</span>.contrib.sessions',</div><div class="line">    <span class="symbol">'django</span>.contrib.messages',</div><div class="line">    <span class="symbol">'django</span>.contrib.staticfiles',</div><div class="line">]</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li>现在执行<code>python manage.py makemigrations polls</code>得到下面的信息：</li>
</ul>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">polls/migrations/0001_initial.py</div><div class="line">   - <span class="keyword">Create</span> <span class="keyword">model</span> Choice</div><div class="line">   - <span class="keyword">Create</span> <span class="keyword">model</span> Question</div><div class="line">   - <span class="keyword">Add</span> <span class="keyword">field</span> question <span class="keyword">to</span> choice</div></pre></td></tr></table></figure>
<ul>
<li>执行<code>makemigrations</code>的目的是告诉Django，你已经对你Model对了一些改变，你希望Django能够保存你的这些改变。</li>
<li><code>Migrations</code>对你Model的变化仅仅只是将这些变化以文件的形式保存在磁盘中，这些文件，你都是可以看到的<code>polls/migrations/0001_initial.py</code></li>
<li>下面要执行<code>migrate</code>,将你之前Model的改变同步到数据库表中去。我们为了能够看到具体做了那些<code>SQL</code>上的改变，可以运行<code>sqlmigrate</code>,这个命令会返回对应SQL语句。执行之后，你会看到下面的返回：</li>
</ul>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">GhCoder_Site python manage.py sqlmigrate polls 0001</div><div class="line"><span class="keyword">BEGIN</span>;</div><div class="line"><span class="comment">--</span></div><div class="line"><span class="comment">-- Create model Choice</span></div><div class="line"><span class="comment">--</span></div><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`polls_choice`</span> (<span class="string">`id`</span> <span class="built_in">integer</span> AUTO_INCREMENT <span class="keyword">NOT</span> <span class="literal">NULL</span> PRIMARY <span class="keyword">KEY</span>, <span class="string">`choice_text`</span> <span class="built_in">varchar</span>(<span class="number">200</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>, <span class="string">`votes`</span> <span class="built_in">integer</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>);</div><div class="line"><span class="comment">--</span></div><div class="line"><span class="comment">-- Create model Question</span></div><div class="line"><span class="comment">--</span></div><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`polls_question`</span> (<span class="string">`id`</span> <span class="built_in">integer</span> AUTO_INCREMENT <span class="keyword">NOT</span> <span class="literal">NULL</span> PRIMARY <span class="keyword">KEY</span>, <span class="string">`question_text`</span> <span class="built_in">varchar</span>(<span class="number">200</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>, <span class="string">`pub_date`</span> datetime(<span class="number">6</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>);</div><div class="line"><span class="comment">--</span></div><div class="line"><span class="comment">-- Add field question to choice</span></div><div class="line"><span class="comment">--</span></div><div class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="string">`polls_choice`</span> <span class="keyword">ADD</span> <span class="keyword">COLUMN</span> <span class="string">`question_id`</span> <span class="built_in">integer</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>;</div><div class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="string">`polls_choice`</span> <span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> <span class="string">`polls_choice_question_id_c5b4b260_fk_polls_question_id`</span> FOREIGN <span class="keyword">KEY</span> (<span class="string">`question_id`</span>) <span class="keyword">REFERENCES</span> <span class="string">`polls_question`</span> (<span class="string">`id`</span>);</div><div class="line"><span class="keyword">COMMIT</span>;</div></pre></td></tr></table></figure>
<h4 id="注意到下面一些关键的点："><a href="#注意到下面一些关键的点：" class="headerlink" title="注意到下面一些关键的点："></a>注意到下面一些关键的点：</h4><ul>
<li>首先表的名字是 <code>AppName_ModelName</code>。</li>
<li>每个表中为我们自动创建了主键：<code>id</code>类型，并且默认不为空，且自增。</li>
<li>外键的添加是<code>ModelName_id</code>。</li>
<li><code>sqlmigrate</code>其实并没有对数据库做出相应的操作，他只是告诉你这是他将要对数据库所做出的操作，并且能够让你检查是否正确。</li>
</ul>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">//执行下面的命令</div><div class="line"><span class="keyword">python</span> manage.<span class="keyword">py</span> migrate</div><div class="line"></div><div class="line">//得到下面的信息</div><div class="line">GhCoder_Site <span class="keyword">python</span> manage.<span class="keyword">py</span> migrate </div><div class="line">Operations <span class="keyword">to</span> perform:</div><div class="line">  Apply <span class="keyword">all</span> migration<span class="variable">s:</span> admin, auth, contenttypes, polls, sessions</div><div class="line">Running migration<span class="variable">s:</span></div><div class="line">  Applying polls.<span class="number">0001</span>_initial... OK</div></pre></td></tr></table></figure>
<h4 id="现在你也可以通过phpmyadmin，可以看到数据库中的表都已经如我们之前model定义的那样，创建好了，这就是migragte的魅力所在，可能你在以后的开发中，你根本不需要时不时的去修改数据库，增加修改某个字段，通过migrate就能够实现，只要三个步骤，你就可以显示了了。"><a href="#现在你也可以通过phpmyadmin，可以看到数据库中的表都已经如我们之前model定义的那样，创建好了，这就是migragte的魅力所在，可能你在以后的开发中，你根本不需要时不时的去修改数据库，增加修改某个字段，通过migrate就能够实现，只要三个步骤，你就可以显示了了。" class="headerlink" title="现在你也可以通过phpmyadmin，可以看到数据库中的表都已经如我们之前model定义的那样，创建好了，这就是migragte的魅力所在，可能你在以后的开发中，你根本不需要时不时的去修改数据库，增加修改某个字段，通过migrate就能够实现，只要三个步骤，你就可以显示了了。"></a>现在你也可以通过<code>phpmyadmin</code>，可以看到数据库中的表都已经如我们之前model定义的那样，创建好了，这就是<code>migragte</code>的魅力所在，可能你在以后的开发中，你根本不需要时不时的去修改数据库，增加修改某个字段，通过<code>migrate</code>就能够实现，只要三个步骤，你就可以显示了了。</h4><ol>
<li>改变Model，增加修改字段都可以。</li>
<li>执行<code>python manage.py makemigrations</code>来为这些变化创建<code>migrations</code>。</li>
<li>执行<code>python manage.py migrate</code>来修改数据库表。</li>
</ol>
<h3 id="运用API来操作Model"><a href="#运用API来操作Model" class="headerlink" title="运用API来操作Model"></a>运用API来操作Model</h3><h4 id="Django非常贴心地为我们提供shell的命令来操作数据。"><a href="#Django非常贴心地为我们提供shell的命令来操作数据。" class="headerlink" title="Django非常贴心地为我们提供shell的命令来操作数据。"></a>Django非常贴心地为我们提供shell的命令来操作数据。</h4><ol>
<li>在操作shell之前，我们首先要运行<code>python manage.py shell</code>。</li>
<li>然后我们就进入到了python的运行环境。下面这段代码是官网给我的，我觉得很详细，也很具体，我只是翻译了一下：</li>
</ol>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line">// 从polls.models文件中导入Question、Choice</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> polls.models <span class="keyword">import</span> Question, Choice   <span class="comment"># Import the model classes we just wrote.</span></div><div class="line"></div><div class="line">// 在系统的内存中是否存在Question类型的数据</div><div class="line"><span class="comment"># No questions are in the system yet.</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>Question.objects.all()</div><div class="line">&lt;QuerySet []&gt;</div><div class="line"></div><div class="line"><span class="comment"># Create a new Question.</span></div><div class="line"><span class="comment"># Support for time zones is enabled in the default settings file, so</span></div><div class="line"><span class="comment"># Django expects a datetime with tzinfo for pub_date. Use timezone.now()</span></div><div class="line"><span class="comment"># instead of datetime.datetime.now() and it will do the right thing.</span></div><div class="line"></div><div class="line">// 这里创建了Question的数据结构，这个数据结构需要两个字段，一个是字符串，一个date的数据类型，date的数据类型，我这里用timezone来创建，因此这里导入了timezone的模块</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> django.utils <span class="keyword">import</span> timezone</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>q = Question(question_text=<span class="string">"What's new?"</span>, pub_date=timezone.now())</div><div class="line"></div><div class="line">// q的实例执行保存的方法</div><div class="line"><span class="comment"># Save the object into the database. You have to call save() explicitly.</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>q.save()</div><div class="line"></div><div class="line">// 直接返回里q的id，这里返回的是int，还是long，是根据你选择的数据库来定的。</div><div class="line"><span class="comment"># Now it has an ID. Note that this might say "1L" instead of "1", depending</span></div><div class="line"><span class="comment"># on which database you're using. That's no biggie; it just means your</span></div><div class="line"><span class="comment"># database backend prefers to return integers as Python long integer</span></div><div class="line"><span class="comment"># objects.</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>q.id</div><div class="line"><span class="number">1</span></div><div class="line"></div><div class="line">// 返回question的实例的属性值</div><div class="line"><span class="comment"># Access model field values via Python attributes.</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>q.question_text</div><div class="line"><span class="string">"What's new?"</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>q.pub_date</div><div class="line">datetime.datetime(<span class="number">2012</span>, <span class="number">2</span>, <span class="number">26</span>, <span class="number">13</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">775217</span>, tzinfo=&lt;UTC&gt;)</div><div class="line"></div><div class="line">// 同时也可以修改question实例的属性值，但是要记住保存</div><div class="line"><span class="comment"># Change values by changing the attributes, then calling save().</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>q.question_text = <span class="string">"What's up?"</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>q.save()</div><div class="line"></div><div class="line">// 返回内存中所有的Question类型的数据</div><div class="line"><span class="comment"># objects.all() displays all the questions in the database.</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>Question.objects.all()</div><div class="line">&lt;QuerySet [&lt;Question: Question object&gt;]&gt;</div></pre></td></tr></table></figure>
<h4 id="这里在执行Question-objects-all-，返回是-lt-QuerySet-lt-Question-Question-object-gt-gt-，这样可读性不是很好，官方的意思说：只要分别在model文件中覆写def-str-self-方法就可以了。"><a href="#这里在执行Question-objects-all-，返回是-lt-QuerySet-lt-Question-Question-object-gt-gt-，这样可读性不是很好，官方的意思说：只要分别在model文件中覆写def-str-self-方法就可以了。" class="headerlink" title="这里在执行Question.objects.all()，返回是&lt;QuerySet [&lt;Question: Question object&gt;]&gt;，这样可读性不是很好，官方的意思说：只要分别在model文件中覆写def __str__(self):方法就可以了。"></a>这里在执行<code>Question.objects.all()</code>，返回是<code>&lt;QuerySet [&lt;Question: Question object&gt;]&gt;</code>，这样可读性不是很好，官方的意思说：只要分别在model文件中覆写<code>def __str__(self):</code>方法就可以了。</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</div><div class="line"><span class="keyword">from</span> django.utils.encoding <span class="keyword">import</span> python_2_unicode_compatible</div><div class="line"></div><div class="line"><span class="meta">@python_2_unicode_compatible  # only if you need to support Python 2</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Question</span><span class="params">(models.Model)</span>:</span></div><div class="line">    <span class="comment"># ...</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> self.question_text</div><div class="line"></div><div class="line"><span class="meta">@python_2_unicode_compatible  # only if you need to support Python 2</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Choice</span><span class="params">(models.Model)</span>:</span></div><div class="line">    <span class="comment"># ...</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> self.choice_text</div></pre></td></tr></table></figure>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; from polls.models import Question, Choice</div><div class="line"></div><div class="line"># Make sure our __str__() addition worked.</div><div class="line"><span class="comment">// 从这里就可以看到我们刚才覆写“def __str__(self):”的作用了</span></div><div class="line">&gt;&gt;&gt; Question.objects.all()</div><div class="line">&lt;QuerySet <span class="meta">[&lt;Question: What's up?&gt;]</span>&gt;</div><div class="line"></div><div class="line"># Django provides a rich database lookup API that's entirely driven by</div><div class="line"># keyword arguments.</div><div class="line"><span class="comment">// Django 可以通过filter字段来过滤</span></div><div class="line"><span class="comment">// 也可以通过双下划线来自定义过滤条件</span></div><div class="line">&gt;&gt;&gt; Question.objects.filter(id=<span class="number">1</span>)</div><div class="line">&lt;QuerySet <span class="meta">[&lt;Question: What's up?&gt;]</span>&gt;</div><div class="line">&gt;&gt;&gt; Question.objects.filter(question_text__startswith='What')</div><div class="line">&lt;QuerySet <span class="meta">[&lt;Question: What's up?&gt;]</span>&gt;</div><div class="line"></div><div class="line"># Get the question that was published this year.</div><div class="line"><span class="comment">// 导入一些自定义的模块</span></div><div class="line"><span class="comment">// 生成响应的实例对象，并且用来过滤</span></div><div class="line">&gt;&gt;&gt; from django.utils import timezone</div><div class="line">&gt;&gt;&gt; current_year = timezone.now().year</div><div class="line">&gt;&gt;&gt; Question.objects.get(pub_date__year=current_year)</div><div class="line">&lt;Question: What's up?&gt;</div><div class="line"></div><div class="line"># Request an ID that doesn't exist, this will raise an <span class="keyword">exception</span>.</div><div class="line"><span class="comment">// 如果直接通过get的方式来获取某些对象的话，如果对象不存在的话，就会抛出异常</span></div><div class="line">&gt;&gt;&gt; Question.objects.get(id=<span class="number">2</span>)</div><div class="line">Traceback (most recent call last):</div><div class="line">    ...</div><div class="line">DoesNotExist: Question matching query does not exist.</div><div class="line"></div><div class="line"># Lookup by a primary key is the most common case, so Django provides a</div><div class="line"># shortcut <span class="keyword">for</span> primary-key exact lookups.</div><div class="line"># The following is identical <span class="keyword">to</span> Question.objects.get(id=<span class="number">1</span>).</div><div class="line"><span class="comment">// 查询主键</span></div><div class="line">&gt;&gt;&gt; Question.objects.get(pk=<span class="number">1</span>)</div><div class="line">&lt;Question: What's up?&gt;</div><div class="line"></div><div class="line"># Make sure our custom method worked.</div><div class="line">&gt;&gt;&gt; q = Question.objects.get(pk=<span class="number">1</span>)</div><div class="line"><span class="comment">// 调用自定义的方法</span></div><div class="line">&gt;&gt;&gt; q.was_published_recently()</div><div class="line">True</div><div class="line"></div><div class="line"># Give the Question a couple <span class="keyword">of</span> Choices. The create call constructs a <span class="keyword">new</span></div><div class="line"># Choice object, does the INSERT statement, adds the choice <span class="keyword">to</span> the set</div><div class="line"># <span class="keyword">of</span> available choices <span class="keyword">and</span> returns the <span class="keyword">new</span> Choice object. Django creates</div><div class="line"># a set <span class="keyword">to</span> hold the <span class="string">"other side"</span> <span class="keyword">of</span> a ForeignKey relation</div><div class="line"># (e.g. a question's choice) which can be accessed via the API.</div><div class="line">&gt;&gt;&gt; q = Question.objects.get(pk=<span class="number">1</span>)</div><div class="line"></div><div class="line"># Display any choices from the related object set -- none so far.</div><div class="line"><span class="comment">// 通过set能过找到有没有对应的外键对象存在</span></div><div class="line">&gt;&gt;&gt; q.choice_set.all()</div><div class="line">&lt;QuerySet []&gt;</div><div class="line"></div><div class="line"># Create three choices.</div><div class="line"><span class="comment">// 通过create能够创建关联的对象，创建的方法其实就是就可以把它看做是简单的实例化方法，传入对应的字段就可以了。</span></div><div class="line">&gt;&gt;&gt; q.choice_set.create(choice_text='Not much', votes=<span class="number">0</span>)</div><div class="line">&lt;Choice: Not much&gt;</div><div class="line">&gt;&gt;&gt; q.choice_set.create(choice_text='The sky', votes=<span class="number">0</span>)</div><div class="line">&lt;Choice: The sky&gt;</div><div class="line">&gt;&gt;&gt; c = q.choice_set.create(choice_text='Just hacking again', votes=<span class="number">0</span>)</div><div class="line"></div><div class="line"># Choice objects have API access <span class="keyword">to</span> their related Question objects.</div><div class="line">&gt;&gt;&gt; c.question</div><div class="line">&lt;Question: What's up?&gt;</div><div class="line"></div><div class="line"># And vice versa: Question objects get access <span class="keyword">to</span> Choice objects.</div><div class="line"><span class="comment">// 取得所有区这个Question 关联的 Choice的对象</span></div><div class="line">&gt;&gt;&gt; q.choice_set.all()</div><div class="line">&lt;QuerySet <span class="meta">[&lt;Choice: Not much&gt;, &lt;Choice: The sky&gt;, &lt;Choice: Just hacking again&gt;]</span>&gt;</div><div class="line">&gt;&gt;&gt; q.choice_set.count()</div><div class="line"><span class="number">3</span></div><div class="line"></div><div class="line"># The API automatically follows relationships <span class="keyword">as</span> far <span class="keyword">as</span> you need.</div><div class="line"># Use double underscores <span class="keyword">to</span> separate relationships.</div><div class="line"># This works <span class="keyword">as</span> many levels deep <span class="keyword">as</span> you want; there's no limit.</div><div class="line"># Find all Choices <span class="keyword">for</span> any question whose pub_date is <span class="keyword">in</span> this year</div><div class="line"># (reusing the 'current_year' variable we created above).</div><div class="line"><span class="comment">// 可以通过双下划线，在数据结构中找到关系</span></div><div class="line">&gt;&gt;&gt; Choice.objects.filter(question__pub_date__year=current_year)</div><div class="line">&lt;QuerySet <span class="meta">[&lt;Choice: Not much&gt;, &lt;Choice: The sky&gt;, &lt;Choice: Just hacking again&gt;]</span>&gt;</div><div class="line"></div><div class="line"><span class="comment">// 删除数据</span></div><div class="line"># Let's delete one <span class="keyword">of</span> the choices. Use delete() <span class="keyword">for</span> that.</div><div class="line">&gt;&gt;&gt; c = q.choice_set.filter(choice_text__startswith='Just hacking')</div><div class="line">&gt;&gt;&gt; c.delete()</div></pre></td></tr></table></figure>
<ul>
<li>这些<code>shell</code>的操作，你以为都只是在内存里操作的话，你就错了。<strong>打开你的数据库，你会发现你的这些shell的操作会实际操作到数据库的</strong></li>
<li>系统更多关于<code>shell</code>的操作在这里，你可以自己去查阅</li>
</ul>
<ol>
<li>[<a href="https://docs.djangoproject.com/en/1.11/ref/models/relations/" target="_blank" rel="external">https://docs.djangoproject.com/en/1.11/ref/models/relations/</a>]</li>
<li>[<a href="https://docs.djangoproject.com/en/1.11/topics/db/queries/" target="_blank" rel="external">https://docs.djangoproject.com/en/1.11/topics/db/queries/</a>]</li>
<li>[<a href="https://docs.djangoproject.com/en/1.11/topics/db/queries/#field-lookups-intro" target="_blank" rel="external">https://docs.djangoproject.com/en/1.11/topics/db/queries/#field-lookups-intro</a>]</li>
</ol>
<h3 id="下面介绍Django的一个牛逼的后台，他叫admin"><a href="#下面介绍Django的一个牛逼的后台，他叫admin" class="headerlink" title="下面介绍Django的一个牛逼的后台，他叫admin"></a>下面介绍Django的一个牛逼的后台，他叫<code>admin</code></h3><ul>
<li>首先我们得先创建我们的最高权限的用户。</li>
<li>执行<code>python manage.py createsuperuser</code></li>
</ul>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">GhCoder_Site python manage<span class="selector-class">.py</span> createsuperuser</div><div class="line">Username (leave blank to use <span class="string">'parallels'</span>): gonghuan</div><div class="line">Email <span class="selector-tag">address</span>: <span class="number">11</span>@<span class="number">11</span><span class="selector-class">.com</span></div><div class="line">Password: </div><div class="line">Password (again): </div><div class="line">Superuser created successfully.</div></pre></td></tr></table></figure>
<ul>
<li>再次执行<code>python manage.py runserver</code>,然后打开<code>http://127.0.0.1:8000/admin/</code>，你就会看到admin的后台登录系统了。</li>
<li>登录进去，你只会看见<code>user</code>,<code>group</code>的模块，那如何把我们之前创建的<code>polls</code>的app，展现在后台呢？方便我编辑数据？</li>
<li>打开<code>polls/admin.py</code>,并且我们需要告诉admin，Question这个数据类型，admin是有数据接口的，可以控制他。编辑如下代码：</li>
</ul>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">from django<span class="selector-class">.contrib</span> import admin</div><div class="line"></div><div class="line">from <span class="selector-class">.models</span> import Question</div><div class="line"></div><div class="line">admin<span class="selector-class">.site</span><span class="selector-class">.register</span>(Question)</div></pre></td></tr></table></figure>
<p>*此时我们就可以看到我们的Question的配置出现在后台了，并且可以增删改查了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;学习Django的第二部分-对官网Demo教程的翻译，以及自己的一些认识&quot;&gt;&lt;a href=&quot;#学习Django的第二部分-对官网Demo教程的翻译，以及自己的一些认识&quot; class=&quot;headerlink&quot; title=&quot;学习Django的第二部分[对官网Demo教程的翻译，以及自己的一些认识]&quot;&gt;&lt;/a&gt;学习Django的第二部分[对官网Demo教程的翻译，以及自己的一些认识]&lt;/h3&gt;&lt;h4 id=&quot;第一部分，已经使用了Django写了一个简单View，并且配置了我们的url，是的我们能够正常访问到我们新建的View页面。今天开始第二部分：&quot;&gt;&lt;a href=&quot;#第一部分，已经使用了Django写了一个简单View，并且配置了我们的url，是的我们能够正常访问到我们新建的View页面。今天开始第二部分：&quot; class=&quot;headerlink&quot; title=&quot;第一部分，已经使用了Django写了一个简单View，并且配置了我们的url，是的我们能够正常访问到我们新建的View页面。今天开始第二部分：&quot;&gt;&lt;/a&gt;第一部分，已经使用了Django写了一个简单View，并且配置了我们的url，是的我们能够正常访问到我们新建的View页面。今天开始第二部分：&lt;/h4&gt;
    
    </summary>
    
      <category term="日志" scheme="http://www.ghcoder.com/categories/%E6%97%A5%E5%BF%97/"/>
    
    
      <category term="Python、Django" scheme="http://www.ghcoder.com/tags/Python%E3%80%81Django/"/>
    
  </entry>
  
</feed>
