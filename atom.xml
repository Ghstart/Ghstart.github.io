<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Ghcoder</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.ghcoder.com/"/>
  <updated>2017-11-09T02:19:26.000Z</updated>
  <id>http://www.ghcoder.com/</id>
  
  <author>
    <name>Ghcoder</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>关于RxSwift信息量的一些问题(二)</title>
    <link href="http://www.ghcoder.com/2017/10/11/20171011/"/>
    <id>http://www.ghcoder.com/2017/10/11/20171011/</id>
    <published>2017-10-11T08:50:12.000Z</published>
    <updated>2017-11-09T02:19:26.000Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li>在之前的文章中，已经介绍了一些，过滤、筛选信号量的操作符，现在列举一些复杂操作符。</li>
</ul>
<hr>
<ul>
<li>首先要说的一个操作符叫做<code>Scan</code>，看到在官方文档中，<code>Scan</code>是属于在<code>Transforming</code>，也就可以猜到，这个操作符，其实也是信号转换的部分。</li>
</ul>
<a id="more"></a>
<ul>
<li>先看一下官方的介绍</li>
</ul>
<blockquote>
<p>The Scan operator applies a function to the first item emitted by the source Observable and then emits the result of that function as its own first emission. It also feeds the result of the function back into the function along with the second item emitted by the source Observable in order to generate its second emission. It continues to feed back its own subsequent emissions along with the subsequent emissions from the source Observable in order to create the rest of its sequence.</p>
</blockquote>
<ul>
<li>在看一下github上代码的：</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">scan</span>&lt;A&gt;<span class="params">(<span class="number">_</span> seed: A, accumulator: @escaping <span class="params">(A, E)</span></span></span> <span class="keyword">throws</span> -&gt; <span class="type">A</span>)</div><div class="line">    -&gt; <span class="type">Observable</span>&lt;<span class="type">A</span>&gt; &#123;</div><div class="line">    <span class="keyword">return</span> <span class="type">Scan</span>(source: <span class="keyword">self</span>.asObservable(), seed: seed, accumulator: accumulator)</div><div class="line">&#125;</div><div class="line"></div><div class="line">...</div><div class="line"></div><div class="line"><span class="keyword">final</span> fileprivate <span class="class"><span class="keyword">class</span> <span class="title">Scan</span>&lt;<span class="title">Element</span>, <span class="title">Accumulate</span>&gt;: <span class="title">Producer</span>&lt;<span class="title">Accumulate</span>&gt; </span>&#123;</div><div class="line"><span class="keyword">typealias</span> <span class="type">Accumulator</span> = (<span class="type">Accumulate</span>, <span class="type">Element</span>) <span class="keyword">throws</span> -&gt; <span class="type">Accumulate</span></div><div class="line">    </div><div class="line">fileprivate <span class="keyword">let</span> _source: <span class="type">Observable</span>&lt;<span class="type">Element</span>&gt;</div><div class="line">fileprivate <span class="keyword">let</span> _seed: <span class="type">Accumulate</span></div><div class="line">fileprivate <span class="keyword">let</span> _accumulator: <span class="type">Accumulator</span></div><div class="line">    </div><div class="line"><span class="keyword">init</span>(source: <span class="type">Observable</span>&lt;<span class="type">Element</span>&gt;, seed: <span class="type">Accumulate</span>, accumulator: @escaping <span class="type">Accumulator</span>) &#123;</div><div class="line">    _source = source</div><div class="line">    _seed = seed</div><div class="line">    _accumulator = accumulator</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>这就可以根据官方的介绍可以知道，什么是<code>Scan</code></li>
<li><code>Scan</code>操作符，需要接受两个参数，一个参数是泛型A, 第二个参数是<code>block</code>，<code>block</code>的参数类型以及返回值的类型是<code>(A, Element) -&gt; A</code>.</li>
<li>这里的<code>Element</code>，是在也不是随编的泛型，可以看源码中知道，<code>Scan</code>在实例化的时候，出入了三个参数，其中第一个参数，是讲自己转化为可订阅的对象<code>self.asObservable()</code>,在入参中<code>Observable&lt;Element&gt;</code>,这就说明了，这个<code>Element</code>的类型，和你起初的订阅的对象的订阅类型是同一个类型。</li>
<li>看一下demo：</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">// 这里只是将字符打印出来</div><div class="line">let bag = DisposeBag()</div><div class="line">let subject = PublishSubject&lt;String&gt;()</div><div class="line">    </div><div class="line">_ = subject</div><div class="line">    .subscribe(onNext: &#123;print($<span class="number">0</span>)&#125;)</div><div class="line">    .addDisposableTo(bag)</div><div class="line">    </div><div class="line">subject.onNext(<span class="string">"gong"</span>)</div><div class="line">subject.onNext(<span class="string">"h"</span>)</div><div class="line"></div><div class="line">//终端输出</div><div class="line">gong</div><div class="line">h</div><div class="line"></div><div class="line"><span class="meta">---</span></div><div class="line"></div><div class="line">// 这里是用来计算我输入字符长度的累加</div><div class="line">let bag = DisposeBag()</div><div class="line">let subject = PublishSubject&lt;String&gt;()</div><div class="line">    </div><div class="line">_ = subject</div><div class="line">    .scan(<span class="number">0</span>) &#123;(count: Int, content: String) in</div><div class="line">        return count + content.characters.count</div><div class="line">    &#125;</div><div class="line">    .subscribe(onNext: &#123;print($<span class="number">0</span>)&#125;)</div><div class="line">    .addDisposableTo(bag)</div><div class="line">    </div><div class="line">subject.onNext(<span class="string">"gong"</span>)</div><div class="line">subject.onNext(<span class="string">"h"</span>)</div><div class="line">//终端输出</div><div class="line"><span class="number">4</span></div><div class="line"><span class="number">5</span></div><div class="line"></div><div class="line"><span class="meta">---</span></div></pre></td></tr></table></figure>
<ul>
<li>你可以试试，看看能不能将Content的类型修改任意类型呢？答案是肯定不行的，之前在看源码的时候，我已经解释过为什么了，这里的<code>content</code>的类型必须要和我们制定定义<code>subject</code>的类型相同。</li>
</ul>
<hr>
<ul>
<li><code>skpiWhile</code>之前一直没有绕清楚，今天还是打算看一下源码，这只我已经说了，这个是用来筛选信号的时候用的，之前一直不清楚为什么为true的时候，就会过滤信号呢？</li>
<li>查看github上代码，可以看到在，关键的代码：</li>
</ul>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="function">func <span class="title">on</span>(<span class="params">_ <span class="keyword">event</span>: Event&lt;Element&gt;</span>) </span>&#123;</div><div class="line">    <span class="keyword">switch</span> <span class="keyword">event</span> &#123;</div><div class="line">    <span class="keyword">case</span> .next(<span class="keyword">let</span> <span class="keyword">value</span>):</div><div class="line">        <span class="keyword">if</span> !_running &#123;</div><div class="line">            <span class="keyword">do</span> &#123;</div><div class="line">                _running = <span class="keyword">try</span> !_parent._predicate(<span class="keyword">value</span>)</div><div class="line">            &#125; <span class="keyword">catch</span> <span class="keyword">let</span> e &#123;</div><div class="line">                forwardOn(.error(e))</div><div class="line">                dispose()</div><div class="line">                <span class="keyword">return</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> _running &#123;</div><div class="line">            forwardOn(.next(<span class="keyword">value</span>))</div><div class="line">        &#125;</div><div class="line">    <span class="keyword">case</span> .error, .completed:</div><div class="line">        forwardOn(<span class="keyword">event</span>)</div><div class="line">        dispose()</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>看到代码就知道，除非是<code>.onError()/onCompleted()</code>事件，其他<code>.onNext()</code>的时间，都会先执行，你传入的<code>block</code>,看看你的返回值是什么？如果是true的话，就会执行<code>forwardOn()</code>的函数：</li>
</ul>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function">final func <span class="title">forwardOn</span>(<span class="params">_ <span class="keyword">event</span>: Event&lt;O.E&gt;</span>) </span>&#123;</div><div class="line">    <span class="meta">#<span class="meta-keyword">if</span> DEBUG</span></div><div class="line">        <span class="function"><span class="keyword">if</span> <span class="title">AtomicIncrement</span>(<span class="params">&amp;_numberOfConcurrentCalls</span>) &gt; 1 </span>&#123;</div><div class="line">            rxFatalError(<span class="string">"Warning: Recursive call or synchronization error!"</span>)</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        defer &#123;</div><div class="line">            _ = AtomicDecrement(&amp;_numberOfConcurrentCalls)</div><div class="line">        &#125;</div><div class="line">    <span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    <span class="keyword">if</span> _disposed &#123;</div><div class="line">        <span class="keyword">return</span></div><div class="line">    &#125;</div><div class="line">    _observer.<span class="keyword">on</span>(<span class="keyword">event</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>这里可以看到，他讲下一个值有递归传到同一个函数中了，这样就起到了过滤的效果。</li>
</ul>
<hr>
<ul>
<li>还有一些关于信号转换的问题，如何转化为数组类型,这里我用到<code>toArray()</code>,Demo:</li>
<li>这种转化是一次性的，并当你下次发送<code>.onNext()</code>的时候，他是不会转化，也就不会接受到<code>.onNext()</code>的回调.</li>
<li>如果在调用<code>.onNext()</code>值之前，你已经转化为Array，在你下次转化的时候，就无法再转化了。</li>
</ul>
<figure class="highlight haml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">Observable.of(1,2,3,4)</div><div class="line">	.toArray()</div><div class="line">    .subscribe(onNext: &#123;</div><div class="line">        dump(type(of: $0))</div><div class="line">        dump($0)</div><div class="line">    &#125;)</div><div class="line"><span class="comment"> </span></div><div class="line"> //终端输出</div><div class="line">-<span class="ruby"> Swift.Array&lt;Swift.Int&gt; <span class="comment">#0</span></span></div><div class="line">▿ 4 elements</div><div class="line">-<span class="ruby"> <span class="number">1</span></span></div><div class="line">-<span class="ruby"> <span class="number">2</span></span></div><div class="line">-<span class="ruby"> <span class="number">3</span></span></div><div class="line">-<span class="ruby"> <span class="number">4</span></span></div></pre></td></tr></table></figure>
<hr>
<ul>
<li>操作符<code>map</code>的操作，也是接受一个block，这里直接上代码：</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">on</span><span class="params">(<span class="number">_</span> event: Event&lt;SourceType&gt;)</span></span> &#123;</div><div class="line">    <span class="keyword">switch</span> event &#123;</div><div class="line">    <span class="keyword">case</span> .next(<span class="keyword">let</span> element):</div><div class="line">        <span class="keyword">do</span> &#123;</div><div class="line">            <span class="keyword">let</span> mappedElement = <span class="keyword">try</span> _transform(element)</div><div class="line">            forwardOn(.next(mappedElement))</div><div class="line">        &#125;</div><div class="line">        ....</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>这里可以看到我们出入的block 就像一个加工厂一样，会将接受到的<code>element</code>的参数，经过我们传入的block加工后，会返回一个新的值，然后又会回传给自己。这样每次接受到的就是新值了。</li>
</ul>
<hr>
<ul>
<li>而操作符<code>mapWithIndex会回传回来两个参数，一个value值，一个是index值</code>，这里又是什么意思呢？看一下源代码：</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">....</div><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="keyword">var</span> _index = <span class="number">0</span></div><div class="line"></div><div class="line">...</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">on</span><span class="params">(<span class="number">_</span> event: Event&lt;SourceType&gt;)</span></span> &#123;</div><div class="line">    <span class="keyword">switch</span> event &#123;</div><div class="line">    <span class="keyword">case</span> .next(<span class="keyword">let</span> element):</div><div class="line">        <span class="keyword">do</span> &#123;</div><div class="line">            <span class="keyword">let</span> mappedElement = <span class="keyword">try</span> _selector(element, <span class="keyword">try</span> incrementChecked(&amp;_index))</div><div class="line">            forwardOn(.next(mappedElement))</div><div class="line">        &#125;</div><div class="line">        ...</div><div class="line">    </div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">incrementChecked</span><span class="params">(<span class="number">_</span> i: <span class="keyword">inout</span> Int)</span></span> <span class="keyword">throws</span> -&gt; <span class="type">Int</span> &#123;</div><div class="line">	<span class="keyword">if</span> i == <span class="type">Int</span>.<span class="built_in">max</span> &#123;</div><div class="line">		<span class="keyword">throw</span> <span class="type">RxError</span>.overflow</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">defer</span> &#123; i += <span class="number">1</span> &#125;</div><div class="line">	<span class="keyword">return</span> i</div><div class="line">&#125;</div><div class="line">        </div><div class="line">        ...</div></pre></td></tr></table></figure>
<ul>
<li>很明显了，index初始值是从0开始，每次都会拿到指针，进行累加，然后回传回去，也就是我们所说的index了。</li>
</ul>
<hr>
<ul>
<li>下面一个比较难理解的操作符叫做<code>flatMap</code>,看官网上的介绍为是这样的：</li>
</ul>
<blockquote>
<p>transform the items emitted by an Observable into Observables, then flatten the emissions from those into a single Observable</p>
</blockquote>
<ul>
<li>这句话其实非常绕，可能不理解的人可能一直读不懂。首先理解第一句话，<code>transform the items emitted by an Observable into Observables</code>: 我的理解是，由<em>一个</em><code>可被订阅的对象</code>发出的多个值，通过我们传入的<code>block</code>,来变换为多个<code>可订阅的对象</code></li>
</ul>
<figure class="highlight ceylon"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> bag = DisposeBag()</div><div class="line"><span class="keyword">let</span> subject = PublishSubject&lt;GHObject&gt;()</div><div class="line">    </div><div class="line"><span class="number">_</span> = subject</div><div class="line">    .flatMap&#123;</div><div class="line">        <span class="number">$0</span>.gh<span class="number">_</span><span class="keyword">value</span>.asObservable()</div><div class="line">    &#125;</div><div class="line">    .subscribe(onNext: &#123;</div><div class="line">        print(type(<span class="keyword">of</span>: <span class="number">$0</span>))</div><div class="line">        dump(<span class="number">$0</span>)</div><div class="line">    &#125;).addDisposableTo(bag)</div><div class="line">    </div><div class="line"><span class="keyword">let</span> gh<span class="number">1</span> = GHObject(gh<span class="number">_</span><span class="keyword">value</span>: Variable(<span class="number">10</span>))</div><div class="line">    </div><div class="line">subject.onNext(gh<span class="number">1</span>)</div><div class="line">gh<span class="number">1</span>.gh<span class="number">_</span><span class="keyword">value</span>.<span class="keyword">value</span> = <span class="number">11</span></div><div class="line"></div><div class="line">...</div><div class="line">struct GHObject &#123;</div><div class="line">    var gh<span class="number">_</span><span class="keyword">value</span>: Variable&lt;Int&gt;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//终端输出</span></div><div class="line">- <span class="number">10</span></div><div class="line">- <span class="number">11</span></div></pre></td></tr></table></figure>
<ul>
<li>那第二句话怎么理解呢？<code>then flatten the emissions from those into a single Observable</code>,通过上面的代码已经知道了，我们通过<code>flatMap</code>操作符，已经将<code>GHObject</code>-&gt;<code>Int</code>，如果我存在多个<code>GHObject</code>的对象，同事发出值，此时我们就可以看做是将多个<code>Int</code>的值发送了出来，至于是哪个<code>GHObject</code>发送出来的，我们不需要关心：</li>
</ul>
<figure class="highlight ceylon"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> bag = DisposeBag()</div><div class="line"><span class="keyword">let</span> subject = PublishSubject&lt;GHObject&gt;()</div><div class="line">    </div><div class="line"><span class="number">_</span> = subject</div><div class="line">    .flatMap&#123;</div><div class="line">        <span class="number">$0</span>.gh<span class="number">_</span><span class="keyword">value</span>.asObservable()</div><div class="line">    &#125;</div><div class="line">    .subscribe(onNext: &#123;</div><div class="line">        dump(<span class="number">$0</span>)</div><div class="line">    &#125;).addDisposableTo(bag)</div><div class="line">    </div><div class="line"><span class="keyword">let</span> gh<span class="number">1</span> = GHObject(gh<span class="number">_</span><span class="keyword">value</span>: Variable(<span class="number">10</span>))</div><div class="line">    </div><div class="line">subject.onNext(gh<span class="number">1</span>)</div><div class="line">gh<span class="number">1</span>.gh<span class="number">_</span><span class="keyword">value</span>.<span class="keyword">value</span> = <span class="number">11</span></div><div class="line">    </div><div class="line"><span class="keyword">let</span> gh<span class="number">2</span> = GHObject(gh<span class="number">_</span><span class="keyword">value</span>: Variable(<span class="number">100</span>))</div><div class="line">subject.onNext(gh<span class="number">2</span>)</div><div class="line">    </div><div class="line">gh<span class="number">1</span>.gh<span class="number">_</span><span class="keyword">value</span>.<span class="keyword">value</span> = <span class="number">12</span></div><div class="line">gh<span class="number">2</span>.gh<span class="number">_</span><span class="keyword">value</span>.<span class="keyword">value</span> = <span class="number">101</span></div><div class="line">gh<span class="number">2</span>.gh<span class="number">_</span><span class="keyword">value</span>.<span class="keyword">value</span> = <span class="number">102</span></div><div class="line"></div><div class="line"><span class="comment">//终端输出</span></div><div class="line">- <span class="number">10</span></div><div class="line">- <span class="number">11</span></div><div class="line">- <span class="number">100</span></div><div class="line">- <span class="number">12</span></div><div class="line">- <span class="number">101</span></div><div class="line">- <span class="number">102</span></div></pre></td></tr></table></figure>
<ul>
<li>至于和<code>flatMap</code>类似的一个操作符,我们叫做<code>flatMapLatest</code>,我是这么李操操作符的：<code>一点接受了一个新的GHObject发的gh_value值之后，之前旧的GHObject_value发出的gh_value我们都会统统过滤掉</code>，Demo:</li>
</ul>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">let bag = DisposeBag()</div><div class="line">let subject = PublishSubject&lt;GHObject&gt;()</div><div class="line">    </div><div class="line">_ = subject</div><div class="line">    .flatMapLatest&#123;</div><div class="line">        $<span class="number">0</span><span class="selector-class">.gh_value</span><span class="selector-class">.asObservable</span>()</div><div class="line">    &#125;</div><div class="line">    .subscribe(onNext: &#123;</div><div class="line">        dump($<span class="number">0</span>)</div><div class="line">    &#125;).addDisposableTo(bag)</div><div class="line">    </div><div class="line">let gh1 = GHObject(gh_value: Variable(<span class="number">10</span>))</div><div class="line">    </div><div class="line">subject.onNext(gh1)</div><div class="line">gh1<span class="selector-class">.gh_value</span><span class="selector-class">.value</span> = <span class="number">11</span></div><div class="line">    </div><div class="line">let gh2 = GHObject(gh_value: Variable(<span class="number">100</span>))</div><div class="line"></div><div class="line">subject.onNext(gh2)</div><div class="line">    </div><div class="line">gh1<span class="selector-class">.gh_value</span><span class="selector-class">.value</span> = <span class="number">12</span></div><div class="line">gh2<span class="selector-class">.gh_value</span><span class="selector-class">.value</span> = <span class="number">101</span></div><div class="line">gh2<span class="selector-class">.gh_value</span><span class="selector-class">.value</span> = <span class="number">102</span></div><div class="line">    </div><div class="line">gh1<span class="selector-class">.gh_value</span><span class="selector-class">.value</span> = <span class="number">13</span></div><div class="line">gh1<span class="selector-class">.gh_value</span><span class="selector-class">.value</span> = <span class="number">14</span></div><div class="line">gh1<span class="selector-class">.gh_value</span><span class="selector-class">.value</span> = <span class="number">15</span></div><div class="line"></div><div class="line"><span class="comment">//终端输出</span></div><div class="line">- <span class="number">10</span></div><div class="line">- <span class="number">11</span></div><div class="line">- <span class="number">100</span></div><div class="line">- <span class="number">101</span></div><div class="line">- <span class="number">102</span></div></pre></td></tr></table></figure>
<ul>
<li>这个<code>flatMapLatest</code>听上去比较绕，但是一旦拿起笔画画，就会很清晰了。</li>
</ul>
<hr>
<ul>
<li>在获取某些信号量的时候，我们需要在此之前获取其他的信号，这里我们可以用到<code>.startWith(_ elements: E ...)</code>，看一下github中的源码，就会发现了：</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">startWith</span><span class="params">(<span class="number">_</span> elements: E ...)</span></span></div><div class="line">    -&gt; <span class="type">Observable</span>&lt;<span class="type">E</span>&gt; &#123;</div><div class="line">        <span class="keyword">return</span> <span class="type">StartWith</span>(source: <span class="keyword">self</span>.asObservable(), elements: elements)</div><div class="line">&#125;</div><div class="line"></div><div class="line">...</div><div class="line"></div><div class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">run</span>&lt;O : ObserverType&gt;<span class="params">(<span class="number">_</span> observer: O, cancel: Cancelable)</span></span> -&gt; (sink: <span class="type">Disposable</span>, subscription: <span class="type">Disposable</span>) <span class="keyword">where</span> <span class="type">O</span>.<span class="type">E</span> == <span class="type">Element</span> &#123;</div><div class="line">    <span class="keyword">for</span> e <span class="keyword">in</span> elements &#123;</div><div class="line">        observer.on(.next(e))</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> (sink: <span class="type">Disposables</span>.create(), subscription: source.subscribe(observer))</div><div class="line">&#125;</div><div class="line"></div><div class="line">...</div></pre></td></tr></table></figure>
<ul>
<li>看到这里，你应该也就知道了，这个startWith接受的是一个可变参数，在正在订阅到自己想要的数据之前，会先遍历打印之前的信号。看一下Demo:</li>
</ul>
<figure class="highlight gauss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> bag = DisposeBag()</div><div class="line"><span class="keyword">let</span> subject = PublishSubject&lt;<span class="keyword">String</span>&gt;()</div><div class="line">    </div><div class="line">subject</div><div class="line">    .startWith(<span class="string">"Step1"</span>, <span class="string">"Step2"</span>, <span class="string">"Step3"</span>)</div><div class="line">    .subscribe(onNext: &#123;</div><div class="line">        <span class="keyword">print</span>($<span class="number">0</span>)</div><div class="line">    &#125;).addDisposableTo(bag)</div><div class="line">    </div><div class="line">subject.onNext(<span class="string">"Do somethingA"</span>)</div><div class="line"><span class="keyword">print</span>(<span class="string">"----"</span>)</div><div class="line">subject.onNext(<span class="string">"Do somethingB"</span>)</div><div class="line"></div><div class="line"><span class="comment">//终端输出</span></div><div class="line">Step1</div><div class="line">Step2</div><div class="line">Step3</div><div class="line"><span class="keyword">Do</span> somethingA</div><div class="line">----</div><div class="line"><span class="keyword">Do</span> somethingB</div></pre></td></tr></table></figure>
<ul>
<li>可以看出，他不是每次订阅的时候，都会将startWith中的值打印一遍，只会打印一次。</li>
</ul>
<hr>
<ul>
<li>串联链接多个事件的操作符，我们可以使用<code>concat</code>,调用方式有很多种，看一下源码：</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">ObservableType</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     Concatenates the second observable sequence to `self` upon successful termination of `self`.</div><div class="line"></div><div class="line">     - seealso: [concat operator on reactivex.io](http://reactivex.io/documentation/operators/concat.html)</div><div class="line"></div><div class="line">     - parameter second: Second observable sequence.</div><div class="line">     - returns: An observable sequence that contains the elements of `self`, followed by those of the second sequence.</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">concat</span>&lt;O: ObservableConvertibleType&gt;<span class="params">(<span class="number">_</span> second: O)</span></span> -&gt; <span class="type">Observable</span>&lt;<span class="type">E</span>&gt; <span class="keyword">where</span> <span class="type">O</span>.<span class="type">E</span> == <span class="type">E</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="type">Observable</span>.concat([<span class="keyword">self</span>.asObservable(), second.asObservable()])</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>看这种定义的方式，我们可以这样实现<code>concat</code>:</li>
</ul>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">let</span> <span class="keyword">bag </span>= DisposeBag()</div><div class="line">    </div><div class="line"><span class="symbol">let</span> <span class="keyword">subjectA </span>= PublishSubject&lt;<span class="keyword">String&gt;()</span></div><div class="line"><span class="symbol">let</span> <span class="keyword">subjectB </span>= PublishSubject&lt;<span class="keyword">String&gt;()</span></div><div class="line"><span class="symbol">let</span> <span class="keyword">subjectC </span>= PublishSubject&lt;<span class="keyword">String&gt;()</span></div><div class="line">    </div><div class="line">_ = <span class="keyword">subjectA.concat(subjectB.concat(subjectC)).subscribe(onNext: </span>&#123;</div><div class="line">    print(<span class="number">$0</span>)</div><div class="line">&#125;).<span class="keyword">addDisposableTo(bag)</span></div><div class="line">    </div><div class="line"><span class="keyword">subjectA.onNext("A1")</span></div><div class="line"><span class="keyword">subjectA.onCompleted()</span></div><div class="line"><span class="keyword">subjectB.onNext("B1")</span></div><div class="line"><span class="keyword">subjectB.onCompleted()</span></div><div class="line"><span class="keyword">subjectC.onNext("C1")</span></div><div class="line"></div><div class="line">//终端的输出</div><div class="line"><span class="symbol">A1</span></div><div class="line"><span class="keyword">B1</span></div><div class="line"><span class="symbol">C1</span></div></pre></td></tr></table></figure>
<ul>
<li>这里你可以将<code>subjectA.onCompleted()</code>注释掉，你会发现终端的输出只有<code>A1</code>,这也就解释了<code>串行队列</code>，只有在<code>subjectA</code>完成的时候，他才会订阅下一个时间。</li>
<li>系统还给<code>Observable</code>写了个<code>extension</code>，这样在正在调用的时候，更加方便、直观。看源码：</li>
</ul>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line">extension Observable &#123;</div><div class="line">    /**</div><div class="line">     Concatenates <span class="keyword">all</span> observable sequences in the given sequence, <span class="keyword">as</span> long <span class="keyword">as</span> the <span class="keyword">previous</span> observable sequence terminated successfully.</div><div class="line"></div><div class="line">     This operator <span class="built_in">has</span> tail recursive optimizations that will prevent stack overflow.</div><div class="line"></div><div class="line">     Optimizations will <span class="keyword">be</span> performed in cases equivalent <span class="keyword">to</span> followin<span class="variable">g:</span></div><div class="line"></div><div class="line">     [<span class="number">1</span>, [<span class="number">2</span>, [<span class="number">3</span>, .....].concat()].concat].concat()</div><div class="line"></div><div class="line">     - seealso: [concat operator <span class="keyword">on</span> reactivex.io](http://reactivex.io/documentation/operators/concat.html)</div><div class="line"></div><div class="line">     - <span class="keyword">return</span><span class="variable">s:</span> An observable sequence that contains the elements of each given sequence, in sequential order.</div><div class="line">     */</div><div class="line">    public static func concat&lt;S: Sequence &gt;(_ sequence: S) -&gt; Observable<span class="symbol">&lt;Element&gt;</span></div><div class="line">        where S.Iterator.Element == Observable<span class="symbol">&lt;Element&gt;</span> &#123;</div><div class="line">            <span class="keyword">return</span> Concat(<span class="keyword">source</span><span class="variable">s:</span> sequence, coun<span class="variable">t:</span> nil)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     Concatenates <span class="keyword">all</span> observable sequences in the given collection, <span class="keyword">as</span> long <span class="keyword">as</span> the <span class="keyword">previous</span> observable sequence terminated successfully.</div><div class="line"></div><div class="line">     This operator <span class="built_in">has</span> tail recursive optimizations that will prevent stack overflow.</div><div class="line"></div><div class="line">     Optimizations will <span class="keyword">be</span> performed in cases equivalent <span class="keyword">to</span> followin<span class="variable">g:</span></div><div class="line"></div><div class="line">     [<span class="number">1</span>, [<span class="number">2</span>, [<span class="number">3</span>, .....].concat()].concat].concat()</div><div class="line"></div><div class="line">     - seealso: [concat operator <span class="keyword">on</span> reactivex.io](http://reactivex.io/documentation/operators/concat.html)</div><div class="line"></div><div class="line">     - <span class="keyword">return</span><span class="variable">s:</span> An observable sequence that contains the elements of each given sequence, in sequential order.</div><div class="line">     */</div><div class="line">    public static func concat&lt;S: Collection &gt;(_ collection: S) -&gt; Observable<span class="symbol">&lt;Element&gt;</span></div><div class="line">        where S.Iterator.Element == Observable<span class="symbol">&lt;Element&gt;</span> &#123;</div><div class="line">            <span class="keyword">return</span> Concat(<span class="keyword">source</span><span class="variable">s:</span> collection, coun<span class="variable">t:</span> collection.<span class="built_in">count</span>.toIntMax())</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     Concatenates <span class="keyword">all</span> observable sequences in the given collection, <span class="keyword">as</span> long <span class="keyword">as</span> the <span class="keyword">previous</span> observable sequence terminated successfully.</div><div class="line"></div><div class="line">     This operator <span class="built_in">has</span> tail recursive optimizations that will prevent stack overflow.</div><div class="line"></div><div class="line">     Optimizations will <span class="keyword">be</span> performed in cases equivalent <span class="keyword">to</span> followin<span class="variable">g:</span></div><div class="line"></div><div class="line">     [<span class="number">1</span>, [<span class="number">2</span>, [<span class="number">3</span>, .....].concat()].concat].concat()</div><div class="line"></div><div class="line">     - seealso: [concat operator <span class="keyword">on</span> reactivex.io](http://reactivex.io/documentation/operators/concat.html)</div><div class="line"></div><div class="line">     - <span class="keyword">return</span><span class="variable">s:</span> An observable sequence that contains the elements of each given sequence, in sequential order.</div><div class="line">     */</div><div class="line">    public static func concat(_ <span class="keyword">source</span><span class="variable">s:</span> Observable<span class="symbol">&lt;Element&gt;</span> ...) -&gt; Observable<span class="symbol">&lt;Element&gt;</span> &#123;</div><div class="line">        <span class="keyword">return</span> Concat(<span class="keyword">source</span><span class="variable">s:</span> sources, coun<span class="variable">t:</span> sources.<span class="built_in">count</span>.toIntMax())</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>这里可以接受自定义的、系统的集合类型，以及一个可变的类型，都是可以这样使用的。上面的代码就可以按照Demo所写的那样完成:</li>
</ul>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">Observable.concat</span>([<span class="keyword">subjectA, </span><span class="keyword">subjectB, </span><span class="keyword">subjectC])</span></div><div class="line">        .<span class="keyword">subscribe(onNext: </span>&#123;</div><div class="line">            print(<span class="number">$0</span>)</div><div class="line">        &#125;).<span class="keyword">addDisposableTo(bag)</span></div><div class="line">        </div><div class="line"><span class="symbol">Observable.concat</span>(<span class="keyword">subjectA, </span><span class="keyword">subjectB, </span><span class="keyword">subjectC)</span></div><div class="line">    .<span class="keyword">subscribe(onNext: </span>&#123;print(<span class="number">$0</span>)&#125;)</div><div class="line">    .<span class="keyword">addDisposableTo(bag)</span></div></pre></td></tr></table></figure>
<hr>
<ul>
<li>如果是并行操作时间的话，我们可以选用<code>.merge()</code>的操作符:</li>
</ul>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">Observable</span><span class="selector-class">.merge</span>(subjectA, subjectB, subjectC)</div><div class="line">    <span class="selector-class">.subscribe</span>(<span class="attribute">onNext</span>: &#123;<span class="selector-tag">print</span>($<span class="number">0</span>)&#125;)</div><div class="line">    <span class="selector-class">.addDisposableTo</span>(bag)</div><div class="line">    </div><div class="line">    </div><div class="line"><span class="selector-tag">subjectA</span><span class="selector-class">.onNext</span>(<span class="string">"A1"</span>)</div><div class="line"><span class="comment">//subjectA.onCompleted()</span></div><div class="line"><span class="selector-tag">subjectB</span><span class="selector-class">.onNext</span>(<span class="string">"B1"</span>)</div><div class="line"><span class="comment">//subjectB.onCompleted()</span></div><div class="line"><span class="selector-tag">subjectC</span><span class="selector-class">.onNext</span>(<span class="string">"C1"</span>)</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// 终端输出</span></div><div class="line"><span class="selector-tag">A1</span></div><div class="line"><span class="selector-tag">B1</span></div><div class="line"><span class="selector-tag">C1</span></div></pre></td></tr></table></figure>
<ul>
<li>这样可以看出来，及时在之前的时间不完成的情况下，事件的打印依旧。</li>
</ul>
<hr>
<ul>
<li>为了方便控制并行的个数，我们也可以这样使用</li>
</ul>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">Observable</span><span class="selector-class">.of</span>(subjectA, subjectB, subjectC)</div><div class="line">       <span class="selector-class">.merge</span>(<span class="attribute">maxConcurrent</span>: <span class="number">2</span>)</div><div class="line">       <span class="selector-class">.subscribe</span>(<span class="attribute">onNext</span>: &#123;<span class="selector-tag">print</span>($<span class="number">0</span>)&#125;)</div><div class="line">       <span class="selector-class">.addDisposableTo</span>(bag)</div></pre></td></tr></table></figure>
<hr>
<ul>
<li>合并多个事件的操作符我们可以使用<code>combineLatest</code>,Demo：</li>
</ul>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">let</span> <span class="keyword">subjectA </span>= PublishSubject&lt;<span class="keyword">String&gt;()</span></div><div class="line"><span class="symbol">let</span> <span class="keyword">subjectB </span>= PublishSubject&lt;<span class="keyword">String&gt;()</span></div><div class="line">    </div><div class="line"><span class="symbol">Observable.combineLatest</span>(<span class="keyword">subjectA, </span><span class="keyword">subjectB) </span>&#123;</div><div class="line">    a, <span class="keyword">b </span>in</div><div class="line">    </div><div class="line">    a + <span class="string">","</span> + <span class="keyword">b</span></div><div class="line">    </div><div class="line">&#125;.<span class="keyword">subscribe(onNext: </span>&#123;</div><div class="line">    dump(<span class="number">$0</span>)</div><div class="line">&#125;).<span class="keyword">addDisposableTo(bag)</span></div><div class="line">    </div><div class="line"><span class="keyword">subjectA.onNext("A1")</span></div><div class="line"><span class="keyword">subjectB.onNext("B1")</span></div><div class="line"><span class="keyword">subjectA.onNext("A2")</span></div><div class="line"><span class="keyword">subjectB.onNext("B2")</span></div><div class="line"></div><div class="line">//终端输出</div><div class="line">- <span class="string">"A1,B1"</span></div><div class="line">- <span class="string">"A2,B1"</span></div><div class="line">- <span class="string">"A2,B2"</span></div></pre></td></tr></table></figure>
<ul>
<li>如果是个时间的合并。类似下面：</li>
</ul>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">let</span> <span class="keyword">subjectA </span>= PublishSubject&lt;<span class="keyword">String&gt;()</span></div><div class="line"><span class="symbol">let</span> <span class="keyword">subjectB </span>= PublishSubject&lt;<span class="keyword">String&gt;()</span></div><div class="line"><span class="symbol">let</span> <span class="keyword">subjectC </span>= PublishSubject&lt;<span class="keyword">String&gt;()</span></div><div class="line">    </div><div class="line"><span class="symbol">Observable.combineLatest</span>([<span class="keyword">subjectA, </span><span class="keyword">subjectB, </span><span class="keyword">subjectC]) </span>&#123;</div><div class="line">    events in</div><div class="line">    </div><div class="line">    events.joined(separator: <span class="string">"--"</span>)</div><div class="line">    </div><div class="line">&#125;.<span class="keyword">subscribe(onNext: </span>&#123;</div><div class="line">    dump(<span class="number">$0</span>)</div><div class="line">&#125;).<span class="keyword">addDisposableTo(bag)</span></div><div class="line">    </div><div class="line"><span class="keyword">subjectA.onNext("A1")</span></div><div class="line"><span class="keyword">subjectB.onNext("B1")</span></div><div class="line"><span class="keyword">subjectA.onNext("A2")</span></div><div class="line"><span class="keyword">subjectB.onNext("B2")</span></div><div class="line"><span class="keyword">subjectC.onNext("C1")</span></div><div class="line">//终端输出</div><div class="line">- <span class="string">"A2--B2--C1"</span></div></pre></td></tr></table></figure>
<ul>
<li><code>combineLatest</code>合并的时间中，必须至少都发生了一次事件发送。</li>
<li>任一一个时间发生更新的时候，都会发生回调。</li>
<li>每次获取的值，都是当前事件的最新的值。</li>
<li><code>combineLatest</code>接受的合并事件也可以是不同的值类型 例如下面：</li>
</ul>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">let</span> <span class="keyword">bag </span>= DisposeBag()</div><div class="line">    </div><div class="line"><span class="symbol">let</span> <span class="keyword">subjectA </span>= PublishSubject&lt;<span class="keyword">String&gt;()</span></div><div class="line"><span class="symbol">let</span> <span class="keyword">subjectB </span>= PublishSubject&lt;Int&gt;()</div><div class="line">    </div><div class="line"><span class="symbol">Observable.combineLatest</span>(<span class="keyword">subjectA, </span><span class="keyword">subjectB) </span>&#123;</div><div class="line">    a, <span class="keyword">b </span>in</div><div class="line">    </div><div class="line">    a + <span class="string">","</span> + <span class="string">"\(b)"</span></div><div class="line">    </div><div class="line">&#125;.<span class="keyword">subscribe(onNext: </span>&#123;</div><div class="line">    dump(<span class="number">$0</span>)</div><div class="line">&#125;).<span class="keyword">addDisposableTo(bag)</span></div><div class="line">    </div><div class="line"><span class="keyword">subjectA.onNext("A1")</span></div><div class="line"><span class="keyword">subjectB.onNext(11)</span></div><div class="line"><span class="keyword">subjectA.onNext("A2")</span></div><div class="line"><span class="keyword">subjectB.onNext(22)</span></div><div class="line">/、终端输出</div><div class="line">- <span class="string">"A1,11"</span></div><div class="line">- <span class="string">"A2,11"</span></div><div class="line">- <span class="string">"A2,22"</span></div></pre></td></tr></table></figure>
<hr>
<ul>
<li>每次只会合并多个最新的时间话，这里我可以使用<code>.zip()</code>的操作符:</li>
</ul>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">let</span> <span class="keyword">bag </span>= DisposeBag()</div><div class="line">    </div><div class="line"><span class="symbol">let</span> <span class="keyword">subjectA </span>= PublishSubject&lt;<span class="keyword">String&gt;()</span></div><div class="line"><span class="symbol">let</span> <span class="keyword">subjectB </span>= PublishSubject&lt;Int&gt;()</div><div class="line">//let <span class="keyword">subjectC </span>= PublishSubject&lt;<span class="keyword">String&gt;()</span></div><div class="line">    </div><div class="line"><span class="symbol">Observable.zip</span>(<span class="keyword">subjectA, </span><span class="keyword">subjectB) </span>&#123;</div><div class="line">    a, <span class="keyword">b </span>in</div><div class="line">    </div><div class="line">    a + <span class="string">","</span> + <span class="string">"\(b)"</span></div><div class="line">    </div><div class="line">&#125;.<span class="keyword">subscribe(onNext: </span>&#123;</div><div class="line">    dump(<span class="number">$0</span>)</div><div class="line">&#125;).<span class="keyword">addDisposableTo(bag)</span></div><div class="line">    </div><div class="line"><span class="keyword">subjectA.onNext("A1")</span></div><div class="line"><span class="keyword">subjectB.onNext(11)</span></div><div class="line"><span class="keyword">subjectA.onNext("A2")</span></div><div class="line"><span class="keyword">subjectB.onNext(22)</span></div><div class="line"></div><div class="line">//终端的输出</div><div class="line">- <span class="string">"A1,11"</span></div><div class="line">- <span class="string">"A2,22"</span></div></pre></td></tr></table></figure>
<ul>
<li>如果存在多个<code>observable</code>,并且存在一定的依赖关系，在某件事情发送的时候，会去获取另一时间的最新值:</li>
</ul>
<figure class="highlight nix"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> <span class="attr">bag</span> = DisposeBag()</div><div class="line">    </div><div class="line"><span class="keyword">let</span> <span class="attr">triggerSubject</span> = PublishSubject&lt;Void&gt;()</div><div class="line"><span class="keyword">let</span> <span class="attr">contentSubject</span> = BehaviorSubject&lt;String&gt;(value: <span class="string">"Default value"</span>)</div><div class="line"></div><div class="line">    </div><div class="line"><span class="attr">_</span> = triggerSubject.withLatestFrom(contentSubject)</div><div class="line">.subscribe(onNext: &#123;</div><div class="line">    print($<span class="number">0</span>)</div><div class="line">&#125;).addDisposableTo(bag)</div><div class="line">    </div><div class="line">triggerSubject.onNext(())</div><div class="line">contentSubject.onNext(<span class="string">"Input Extra Content"</span>)</div><div class="line">triggerSubject.onNext(())</div><div class="line"></div><div class="line">//终端输出</div><div class="line">Default value</div><div class="line">Input Extra Content</div></pre></td></tr></table></figure>
<ul>
<li>在不同的<code>observable</code>中，我们可以随意切换任意的时间，使用操作符<code>.switchLatest()</code>,这样只能在指定的模式下，做指定的事件：</li>
</ul>
<figure class="highlight pf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">let bag = DisposeBag()</div><div class="line">    </div><div class="line">let reading = PublishSubject<span class="variable">&lt;String&gt;</span>()</div><div class="line">let writing = PublishSubject<span class="variable">&lt;String&gt;</span>()</div><div class="line">    </div><div class="line">let work = PublishSubject<span class="variable">&lt;Observable&lt;String&gt;</span>&gt;()</div><div class="line"></div><div class="line">work.switchLatest()</div><div class="line">    .subscribe(<span class="keyword">on</span>Next: &#123;</div><div class="line">        print(<span class="variable">$0</span>)</div><div class="line">    &#125;).addDisposableTo(bag)</div><div class="line"></div><div class="line">    </div><div class="line">work.<span class="keyword">on</span>Next(reading)</div><div class="line">reading.<span class="keyword">on</span>Next(<span class="string">"Read 1"</span>)</div><div class="line">    </div><div class="line">work.<span class="keyword">on</span>Next(writing)</div><div class="line">writing.<span class="keyword">on</span>Next(<span class="string">"Write 1"</span>)</div><div class="line">    </div><div class="line">reading.<span class="keyword">on</span>Next(<span class="string">"Read Extra"</span>)</div><div class="line">    </div><div class="line">work.<span class="keyword">on</span>Next(reading)</div><div class="line">reading.<span class="keyword">on</span>Next(<span class="string">"Read 2"</span>)</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;在之前的文章中，已经介绍了一些，过滤、筛选信号量的操作符，现在列举一些复杂操作符。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;首先要说的一个操作符叫做&lt;code&gt;Scan&lt;/code&gt;，看到在官方文档中，&lt;code&gt;Scan&lt;/code&gt;是属于在&lt;code&gt;Transforming&lt;/code&gt;，也就可以猜到，这个操作符，其实也是信号转换的部分。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="日志" scheme="http://www.ghcoder.com/categories/%E6%97%A5%E5%BF%97/"/>
    
    
      <category term="Swift" scheme="http://www.ghcoder.com/tags/Swift/"/>
    
  </entry>
  
  <entry>
    <title>关于RxSwift信息量的一些问题</title>
    <link href="http://www.ghcoder.com/2017/10/08/20171007/"/>
    <id>http://www.ghcoder.com/2017/10/08/20171007/</id>
    <published>2017-10-08T08:12:12.000Z</published>
    <updated>2017-10-08T10:59:24.000Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li>之前的文章中，介绍了RxSwift中，将之前传统的模式修改为更<code>Rx</code>的模式，在转换的过程中，我们会发现，其实<code>RxSwift</code>只是将之前分散处理的恭喜，收拢起来，之前我们或许关心的是<code>block的回调</code>、<code>代理方法</code>、<code>function()调用</code>，而现在我们或许只需要关心一件事情<code>信号量</code>，可想而知，伴随着项目的庞大、功能的复杂，整个项目中充斥着的都是这些信号，此时我们就要学会分析、过滤、转化信号。</li>
</ul>
<a id="more"></a>
<ul>
<li>先不去深究下面列举的每个操作符的源代码，在碰到一些特别难以理解的操作符，我们再去查看一下源代码</li>
</ul>
<hr>
<ul>
<li>忽略信号的操作：</li>
<li>1.先来看一下最最普通的订阅模式：</li>
</ul>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">let</span> <span class="keyword">subject </span>= PublishSubject&lt;Int&gt;()</div><div class="line"><span class="symbol">let</span> <span class="keyword">bag </span>= DisposeBag()</div><div class="line">    </div><div class="line">_ = <span class="keyword">subject.subscribe(</span></div><div class="line"><span class="symbol">    onNext:</span> &#123; print(<span class="number">$0</span>) &#125;,</div><div class="line"><span class="symbol">    onCompleted:</span> &#123; print(<span class="string">"Completed"</span>) &#125;</div><div class="line">).<span class="keyword">addDisposableTo(bag)</span></div><div class="line">    </div><div class="line"><span class="keyword">subject.onNext(1)</span></div><div class="line"><span class="keyword">subject.onNext(2)</span></div><div class="line"><span class="keyword">subject.onNext(3)</span></div><div class="line"><span class="keyword">subject.onNext(4)</span></div><div class="line"><span class="keyword">subject.onCompleted()</span></div><div class="line"></div><div class="line">// 终端输入</div><div class="line"><span class="number">1</span></div><div class="line"><span class="number">2</span></div><div class="line"><span class="number">3</span></div><div class="line"><span class="number">4</span></div><div class="line"><span class="symbol">Completed</span></div></pre></td></tr></table></figure>
<ul>
<li><ol>
<li>如果我们需要忽略所有的<code>.onNext()</code>的时间话，我们可以用<code>.ignoreElements()</code>操作符</li>
</ol>
</li>
</ul>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">let</span> <span class="keyword">subject </span>= PublishSubject&lt;Int&gt;()</div><div class="line"><span class="symbol">let</span> <span class="keyword">bag </span>= DisposeBag()</div><div class="line">    </div><div class="line">_ = <span class="keyword">subject</span></div><div class="line">    .ignoreElements()</div><div class="line">    .<span class="keyword">subscribe(</span></div><div class="line"><span class="symbol">        onNext:</span> &#123; print(<span class="number">$0</span>) &#125;,</div><div class="line"><span class="symbol">        onCompleted:</span> &#123; print(<span class="string">"Completed"</span>) &#125;</div><div class="line">    ).<span class="keyword">addDisposableTo(bag)</span></div><div class="line">    </div><div class="line"><span class="keyword">subject.onNext(1)</span></div><div class="line"><span class="keyword">subject.onNext(2)</span></div><div class="line"><span class="keyword">subject.onNext(3)</span></div><div class="line"><span class="keyword">subject.onNext(4)</span></div><div class="line"><span class="keyword">subject.onCompleted()</span></div><div class="line"></div><div class="line">//终端输出</div><div class="line"><span class="symbol">Completed</span></div></pre></td></tr></table></figure>
<ul>
<li><ol>
<li>如果忽略前几个<code>.onNext()</code>事件信号量，我们可以使用<code>.skip()</code>操作符,例如<code>.skip(2)</code>如果不足2个的话，那就都跳过,直接<code>.onCompleted()</code>或者<code>.onError()</code>:</li>
</ol>
</li>
</ul>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">_ = <span class="keyword">subject</span></div><div class="line">    <span class="meta">.skip</span>(<span class="number">2</span>)</div><div class="line">    .<span class="keyword">subscribe(</span></div><div class="line"><span class="symbol">        onNext:</span> &#123; print(<span class="number">$0</span>) &#125;,</div><div class="line"><span class="symbol">        onCompleted:</span> &#123; print(<span class="string">"Completed"</span>) &#125;</div><div class="line">    ).<span class="keyword">addDisposableTo(bag)</span></div><div class="line">    </div><div class="line"><span class="keyword">subject.onNext(1)</span></div><div class="line"><span class="keyword">subject.onNext(2)</span></div><div class="line"><span class="keyword">subject.onNext(3)</span></div><div class="line"><span class="keyword">subject.onNext(4)</span></div><div class="line"><span class="keyword">subject.onCompleted()</span></div><div class="line"></div><div class="line">//终端输出</div><div class="line"><span class="number">3</span></div><div class="line"><span class="number">4</span></div><div class="line"><span class="symbol">Completed</span></div></pre></td></tr></table></figure>
<ul>
<li>指定条件过滤数据，我们可以选用<code>.skipWhile()</code>，这里<code>.skipWhile()</code>接受的是一个<code>block</code>，理解起来可能会比较绕，但是看一下github上的解释：</li>
</ul>
<figure class="highlight dart"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment"><span class="markdown">/**</span></span></div><div class="line"> Bypasses elements in an<span class="markdown"> observable sequence as long as </span>a<span class="markdown"> specified condition is true and then returns </span>the<span class="markdown"> remaining elements.</span></div><div class="line"> - seealso: [<span class="string">skipWhile operator on reactivex.io</span>](<span class="link">http://reactivex.io/documentation/operators/skipwhile.html</span>)</div><div class="line"> - parameter predicate: A function to test each element for a<span class="markdown"> condition.</span></div><div class="line"> - returns: An observable sequence that contains the<span class="markdown"> elements from </span>the<span class="markdown"> input sequence starting at </span>the<span class="markdown"> first element in </span>the<span class="markdown"> linear series that does not pass </span>the<span class="markdown"> test specified by predicate.</span></div><div class="line"> */</div><div class="line">public func skipWhile(_ predicate: <span class="meta">@escaping</span> (E) throws -&gt; Bool) -&gt; Observable&lt;E&gt; &#123;</div><div class="line">    <span class="keyword">return</span> SkipWhile(source: asObservable(), predicate: predicate)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>只要条件为<code>true</code>，我们就会绕过发出的信号，看一下Demo：</li>
</ul>
<figure class="highlight livescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> subject = PublishSubject&lt;Int&gt;()</div><div class="line"><span class="keyword">let</span> bag = DisposeBag()</div><div class="line">    </div><div class="line">_ = subject</div><div class="line">    .skipWhile<span class="function"><span class="params">(&#123; (item) -&gt; Bool <span class="keyword">in</span></span></span></div><div class="line">        <span class="keyword">return</span> item != <span class="number">3</span></div><div class="line">    &#125;)</div><div class="line">    .<span class="title">subscribe</span><span class="params">(</span></div><div class="line">        onNext: &#123; <span class="built_in">print</span>($<span class="number">0</span>) &#125;,</div><div class="line">        onCompleted: &#123; <span class="built_in">print</span>(<span class="string">"Completed"</span>) &#125;</div><div class="line">    ).<span class="title">addDisposableTo</span><span class="params">(bag)</span></div><div class="line">    </div><div class="line"><span class="title">subject</span>.<span class="title">onNext</span><span class="params">(<span class="number">1</span>)</span></div><div class="line"><span class="title">subject</span>.<span class="title">onNext</span><span class="params">(<span class="number">2</span>)</span></div><div class="line"><span class="title">subject</span>.<span class="title">onNext</span><span class="params">(<span class="number">3</span>)</span></div><div class="line"><span class="title">subject</span>.<span class="title">onNext</span><span class="params">(<span class="number">4</span>)</span></div><div class="line"><span class="title">subject</span>.<span class="title">onCompleted</span><span class="params">()</span></div><div class="line"></div><div class="line">//终端输出</div><div class="line">3</div><div class="line">4</div><div class="line"><span class="title">Completed</span></div></pre></td></tr></table></figure>
<ul>
<li>依赖某个信号量的时候，我们可以选用<code>.skipUntil()</code>,这里的入参是例外一个信号量：</li>
</ul>
<figure class="highlight pf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">let subject = PublishSubject<span class="variable">&lt;Int&gt;</span>()</div><div class="line">let dependOnSubject = PublishSubject<span class="variable">&lt;Void&gt;</span>()</div><div class="line">let bag = DisposeBag()</div><div class="line">    </div><div class="line">_ = subject</div><div class="line">    .<span class="keyword">skip</span>Until(dependOnSubject)</div><div class="line">    .subscribe(</div><div class="line">        <span class="keyword">on</span>Next: &#123; print(<span class="variable">$0</span>) &#125;,</div><div class="line">        <span class="keyword">on</span>Completed: &#123; print(<span class="string">"Completed"</span>) &#125;</div><div class="line">    ).addDisposableTo(bag)</div><div class="line">    </div><div class="line">subject.<span class="keyword">on</span>Next(<span class="number">1</span>)</div><div class="line">subject.<span class="keyword">on</span>Next(<span class="number">2</span>)</div><div class="line">subject.<span class="keyword">on</span>Next(<span class="number">3</span>)</div><div class="line">dependOnSubject.<span class="keyword">on</span>Next(())</div><div class="line">subject.<span class="keyword">on</span>Next(<span class="number">4</span>)</div><div class="line">subject.<span class="keyword">on</span>Completed()</div><div class="line"></div><div class="line">//终端输出</div><div class="line"><span class="number">4</span></div><div class="line">Completed</div></pre></td></tr></table></figure>
<ul>
<li>忽略重复出现的相邻的信号量，我们可以使用<code>.distinctUntilChanged()</code>, demo:</li>
</ul>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">let</span> <span class="keyword">subject </span>= PublishSubject&lt;Int&gt;()</div><div class="line"><span class="symbol">let</span> <span class="keyword">bag </span>= DisposeBag()</div><div class="line">    </div><div class="line">_ = <span class="keyword">subject</span></div><div class="line">    .distinctUntilChanged()</div><div class="line">    .<span class="keyword">subscribe(</span></div><div class="line"><span class="symbol">        onNext:</span> &#123; print(<span class="number">$0</span>) &#125;,</div><div class="line"><span class="symbol">        onCompleted:</span> &#123; print(<span class="string">"Completed"</span>) &#125;</div><div class="line">    ).<span class="keyword">addDisposableTo(bag)</span></div><div class="line">    </div><div class="line"><span class="keyword">subject.onNext(1)</span></div><div class="line"><span class="keyword">subject.onNext(2)</span></div><div class="line"><span class="keyword">subject.onNext(2)</span></div><div class="line"><span class="keyword">subject.onNext(3)</span></div><div class="line"><span class="keyword">subject.onNext(3)</span></div><div class="line"><span class="keyword">subject.onNext(3)</span></div><div class="line"><span class="keyword">subject.onNext(4)</span></div><div class="line"><span class="keyword">subject.onNext(2)</span></div><div class="line"><span class="keyword">subject.onNext(3)</span></div><div class="line"><span class="keyword">subject.onCompleted()</span></div><div class="line"></div><div class="line">//终端输出</div><div class="line"><span class="number">1</span></div><div class="line"><span class="number">2</span></div><div class="line"><span class="number">3</span></div><div class="line"><span class="number">4</span></div><div class="line"><span class="number">2</span></div><div class="line"><span class="number">3</span></div><div class="line"><span class="symbol">Completed</span></div></pre></td></tr></table></figure>
<hr>
<ul>
<li>选择信号的操作</li>
<li>选择指定第几个信号量的操作符，我们可以选用<code>.elementAt()</code>,当选择的个数超过了存在的信号量，此时就会报<code>.onError()</code>的错误，Demo：</li>
</ul>
<figure class="highlight pf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">let subject = PublishSubject<span class="variable">&lt;Int&gt;</span>()</div><div class="line">let bag = DisposeBag()</div><div class="line">    </div><div class="line">_ = subject</div><div class="line">    .elementAt(<span class="number">2</span>)</div><div class="line">    .subscribe(</div><div class="line">        <span class="keyword">on</span>Next: &#123; print(<span class="variable">$0</span>) &#125;,</div><div class="line">        <span class="keyword">on</span>Error: &#123;_ <span class="keyword">in</span> print(<span class="string">"Error"</span>) &#125;,</div><div class="line">        <span class="keyword">on</span>Completed: &#123; print(<span class="string">"Completed"</span>) &#125;</div><div class="line">    ).addDisposableTo(bag)</div><div class="line">    </div><div class="line">subject.<span class="keyword">on</span>Next(<span class="number">1</span>)</div><div class="line">subject.<span class="keyword">on</span>Next(<span class="number">2</span>)</div><div class="line">subject.<span class="keyword">on</span>Next(<span class="number">3</span>)</div><div class="line">subject.<span class="keyword">on</span>Next(<span class="number">4</span>)</div><div class="line">subject.<span class="keyword">on</span>Completed()</div><div class="line">//终端的输出</div><div class="line"><span class="number">3</span></div><div class="line">Completed</div></pre></td></tr></table></figure>
<ul>
<li>根据某些条件，筛选过滤出自己想要的数据，我们可以选用<code>.filter()</code>的操作符：</li>
</ul>
<figure class="highlight livescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> subject = PublishSubject&lt;Int&gt;()</div><div class="line"><span class="keyword">let</span> bag = DisposeBag()</div><div class="line">    </div><div class="line">_ = subject</div><div class="line">    .filter<span class="function"><span class="params">(&#123; (item) -&gt; Bool <span class="keyword">in</span></span></span></div><div class="line">        item == <span class="number">2</span></div><div class="line">    &#125;)</div><div class="line">    .<span class="title">subscribe</span><span class="params">(</span></div><div class="line">        onNext: &#123; <span class="built_in">print</span>($<span class="number">0</span>) &#125;,</div><div class="line">        onError: &#123;_ <span class="keyword">in</span> <span class="built_in">print</span>(<span class="string">"Error"</span>) &#125;,</div><div class="line">        onCompleted: &#123; <span class="built_in">print</span>(<span class="string">"Completed"</span>) &#125;</div><div class="line">    ).<span class="title">addDisposableTo</span><span class="params">(bag)</span></div><div class="line">    </div><div class="line"><span class="title">subject</span>.<span class="title">onNext</span><span class="params">(<span class="number">1</span>)</span></div><div class="line"><span class="title">subject</span>.<span class="title">onNext</span><span class="params">(<span class="number">2</span>)</span></div><div class="line"><span class="title">subject</span>.<span class="title">onNext</span><span class="params">(<span class="number">3</span>)</span></div><div class="line"><span class="title">subject</span>.<span class="title">onNext</span><span class="params">(<span class="number">4</span>)</span></div><div class="line"><span class="title">subject</span>.<span class="title">onCompleted</span><span class="params">()</span></div><div class="line">//终端输出</div><div class="line">2</div><div class="line"><span class="title">Completed</span></div></pre></td></tr></table></figure>
<ul>
<li>获取指定数量的操作符，我们也可以选用<code>.take()</code>,当入参的数字大于已有的数据，就会把所有的<code>.onNext()</code>事件都打印出来:</li>
</ul>
<figure class="highlight pf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">let subject = PublishSubject<span class="variable">&lt;Int&gt;</span>()</div><div class="line">let bag = DisposeBag()</div><div class="line">    </div><div class="line">_ = subject</div><div class="line">    .take(<span class="number">2</span>)</div><div class="line">    .subscribe(</div><div class="line">        <span class="keyword">on</span>Next: &#123; print(<span class="variable">$0</span>) &#125;,</div><div class="line">        <span class="keyword">on</span>Error: &#123;_ <span class="keyword">in</span> print(<span class="string">"Error"</span>) &#125;,</div><div class="line">        <span class="keyword">on</span>Completed: &#123; print(<span class="string">"Completed"</span>) &#125;</div><div class="line">    ).addDisposableTo(bag)</div><div class="line">    </div><div class="line">subject.<span class="keyword">on</span>Next(<span class="number">1</span>)</div><div class="line">subject.<span class="keyword">on</span>Next(<span class="number">2</span>)</div><div class="line">subject.<span class="keyword">on</span>Next(<span class="number">3</span>)</div><div class="line">subject.<span class="keyword">on</span>Next(<span class="number">4</span>)</div><div class="line">subject.<span class="keyword">on</span>Completed()</div><div class="line">//终端输出</div><div class="line"><span class="number">1</span></div><div class="line"><span class="number">2</span></div><div class="line">Completed</div></pre></td></tr></table></figure>
<ul>
<li>还有一个比较绕的操作符，叫做<code>takeWhile()</code>,和<code>skipWhile()</code>类似，只要<code>block</code>中返回的是<code>true</code>的话，就会选取这儿元素，一旦false就结束</li>
</ul>
<figure class="highlight livescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> subject = PublishSubject&lt;Int&gt;()</div><div class="line"><span class="keyword">let</span> bag = DisposeBag()</div><div class="line">    </div><div class="line">_ = subject</div><div class="line">    .takeWhile<span class="function"><span class="params">(&#123; (item) -&gt; Bool <span class="keyword">in</span></span></span></div><div class="line">        item != <span class="number">2</span></div><div class="line">    &#125;)</div><div class="line">    .<span class="title">subscribe</span><span class="params">(</span></div><div class="line">        onNext: &#123; <span class="built_in">print</span>($<span class="number">0</span>) &#125;,</div><div class="line">        onError: &#123;_ <span class="keyword">in</span> <span class="built_in">print</span>(<span class="string">"Error"</span>) &#125;,</div><div class="line">        onCompleted: &#123; <span class="built_in">print</span>(<span class="string">"Completed"</span>) &#125;</div><div class="line">    ).<span class="title">addDisposableTo</span><span class="params">(bag)</span></div><div class="line">    </div><div class="line"><span class="title">subject</span>.<span class="title">onNext</span><span class="params">(<span class="number">1</span>)</span></div><div class="line"><span class="title">subject</span>.<span class="title">onNext</span><span class="params">(<span class="number">2</span>)</span></div><div class="line"><span class="title">subject</span>.<span class="title">onNext</span><span class="params">(<span class="number">3</span>)</span></div><div class="line"><span class="title">subject</span>.<span class="title">onNext</span><span class="params">(<span class="number">4</span>)</span></div><div class="line"><span class="title">subject</span>.<span class="title">onCompleted</span><span class="params">()</span></div><div class="line">//终端输入</div><div class="line">1</div><div class="line"><span class="title">Completed</span></div></pre></td></tr></table></figure>
<ul>
<li>准备定位到第几个的话，可以选用下面的操作符<code>takeWhileWithIndex</code>, 它接受两个参数，一个index,一个value,同样为true，就会选取，为false，就立刻结束</li>
</ul>
<figure class="highlight livescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> subject = PublishSubject&lt;Int&gt;()</div><div class="line"><span class="keyword">let</span> bag = DisposeBag()</div><div class="line">    </div><div class="line">_ = subject</div><div class="line">    .takeWhileWithIndex<span class="function"><span class="params">(&#123; (item, index) -&gt; Bool <span class="keyword">in</span></span></span></div><div class="line">        item != <span class="number">2</span> &amp;&amp; index != <span class="number">3</span></div><div class="line">    &#125;)</div><div class="line">    .<span class="title">subscribe</span><span class="params">(</span></div><div class="line">        onNext: &#123; <span class="built_in">print</span>($<span class="number">0</span>) &#125;,</div><div class="line">        onError: &#123;_ <span class="keyword">in</span> <span class="built_in">print</span>(<span class="string">"Error"</span>) &#125;,</div><div class="line">        onCompleted: &#123; <span class="built_in">print</span>(<span class="string">"Completed"</span>) &#125;</div><div class="line">    ).<span class="title">addDisposableTo</span><span class="params">(bag)</span></div><div class="line">    </div><div class="line"><span class="title">subject</span>.<span class="title">onNext</span><span class="params">(<span class="number">1</span>)</span></div><div class="line"><span class="title">subject</span>.<span class="title">onNext</span><span class="params">(<span class="number">2</span>)</span></div><div class="line"><span class="title">subject</span>.<span class="title">onNext</span><span class="params">(<span class="number">3</span>)</span></div><div class="line"><span class="title">subject</span>.<span class="title">onNext</span><span class="params">(<span class="number">4</span>)</span></div><div class="line"><span class="title">subject</span>.<span class="title">onCompleted</span><span class="params">()</span></div><div class="line">//终端输出</div><div class="line">1</div><div class="line"><span class="title">Completed</span></div></pre></td></tr></table></figure>
<ul>
<li>依赖于某个信号，来获取信号量，可以选用<code>.takeUntil()</code>,Demo</li>
</ul>
<figure class="highlight pf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">let subject = PublishSubject<span class="variable">&lt;Int&gt;</span>()</div><div class="line">let dependOnSubject = PublishSubject<span class="variable">&lt;Void&gt;</span>()</div><div class="line">let bag = DisposeBag()</div><div class="line">    </div><div class="line">_ = subject</div><div class="line">    .takeUntil(dependOnSubject)</div><div class="line">    .subscribe(</div><div class="line">        <span class="keyword">on</span>Next: &#123; print(<span class="variable">$0</span>) &#125;,</div><div class="line">        <span class="keyword">on</span>Error: &#123;_ <span class="keyword">in</span> print(<span class="string">"Error"</span>) &#125;,</div><div class="line">        <span class="keyword">on</span>Completed: &#123; print(<span class="string">"Completed"</span>) &#125;</div><div class="line">    ).addDisposableTo(bag)</div><div class="line">    </div><div class="line">subject.<span class="keyword">on</span>Next(<span class="number">1</span>)</div><div class="line">subject.<span class="keyword">on</span>Next(<span class="number">2</span>)</div><div class="line">dependOnSubject.<span class="keyword">on</span>Next(())</div><div class="line">subject.<span class="keyword">on</span>Next(<span class="number">3</span>)</div><div class="line">subject.<span class="keyword">on</span>Next(<span class="number">4</span>)</div><div class="line">subject.<span class="keyword">on</span>Completed()</div><div class="line">//终端输出</div><div class="line"><span class="number">1</span></div><div class="line"><span class="number">2</span></div><div class="line">Completed</div></pre></td></tr></table></figure>
<hr>
<ul>
<li>为了同时订阅同个数据的不同信号量，节约开销，我们可以使用这个<code>.share()</code></li>
</ul>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">let object = Observable.of(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>).share()</div><div class="line"></div><div class="line">_ = object.subscribe(&#123; print($<span class="number">0</span> )&#125;)</div><div class="line">_ = object.subscribe(&#123; print($<span class="number">0</span> )&#125;)</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;之前的文章中，介绍了RxSwift中，将之前传统的模式修改为更&lt;code&gt;Rx&lt;/code&gt;的模式，在转换的过程中，我们会发现，其实&lt;code&gt;RxSwift&lt;/code&gt;只是将之前分散处理的恭喜，收拢起来，之前我们或许关心的是&lt;code&gt;block的回调&lt;/code&gt;、&lt;code&gt;代理方法&lt;/code&gt;、&lt;code&gt;function()调用&lt;/code&gt;，而现在我们或许只需要关心一件事情&lt;code&gt;信号量&lt;/code&gt;，可想而知，伴随着项目的庞大、功能的复杂，整个项目中充斥着的都是这些信号，此时我们就要学会分析、过滤、转化信号。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="日志" scheme="http://www.ghcoder.com/categories/%E6%97%A5%E5%BF%97/"/>
    
    
      <category term="Swift" scheme="http://www.ghcoder.com/tags/Swift/"/>
    
  </entry>
  
  <entry>
    <title>实际项目中从传统模式切换为RxSwift模式</title>
    <link href="http://www.ghcoder.com/2017/10/05/20171005/"/>
    <id>http://www.ghcoder.com/2017/10/05/20171005/</id>
    <published>2017-10-05T05:57:12.000Z</published>
    <updated>2017-10-05T10:51:56.080Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li><p>举一个简单的例子，来实现RxSwift的功能：</p>
</li>
<li><p>列表Controller里面的代码:</p>
</li>
</ul>
<a id="more"></a>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> UIKit</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestRxSwiftViewController</span>: <span class="title">UIViewController</span>, <span class="title">UITableViewDataSource</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">var</span> datas = [<span class="type">TestRxSwiftItemObject</span>]()</div><div class="line">    <span class="meta">@IBOutlet</span> <span class="keyword">weak</span> <span class="keyword">var</span> <span class="type">ItemTableview</span>: <span class="type">UITableView</span>!</div><div class="line"></div><div class="line">    <span class="comment">// MARK: -- Life Cycle</span></div><div class="line"></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.viewDidLoad()</div><div class="line"></div><div class="line">        loadDatas()</div><div class="line">        <span class="type">ItemTableview</span>.reloadData()</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">prepare</span><span class="params">(<span class="keyword">for</span> segue: UIStoryboardSegue, sender: Any?)</span></span> &#123;</div><div class="line">        <span class="keyword">if</span> segue.identifier == <span class="string">"testRx"</span> &#123;</div><div class="line">            <span class="keyword">let</span> detail: <span class="type">TestRxSwiftDetailViewController</span> = segue.destination <span class="keyword">as</span>! <span class="type">TestRxSwiftDetailViewController</span></div><div class="line">            <span class="keyword">if</span> <span class="keyword">let</span> index = <span class="type">ItemTableview</span>.indexPath(<span class="keyword">for</span>: sender <span class="keyword">as</span>! <span class="type">UITableViewCell</span>) &#123;</div><div class="line">                detail.<span class="type">Item</span> = datas[index.row]</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// MARK: -- Private Methods</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">loadDatas</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">1</span>..&lt;<span class="number">10</span> &#123;</div><div class="line">            <span class="keyword">let</span> itemObject = <span class="type">TestRxSwiftItemObject</span>(name: <span class="string">"Index-<span class="subst">\(i)</span>"</span>, isClicked: i % <span class="number">2</span> == <span class="number">0</span> ? <span class="literal">true</span> : <span class="literal">false</span>)</div><div class="line">            datas.append(itemObject)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// MARK: -- UITableView DataSource</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(<span class="number">_</span> tableView: UITableView, numberOfRowsInSection section: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</div><div class="line">        <span class="keyword">return</span> datas.<span class="built_in">count</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(<span class="number">_</span> tableView: UITableView, cellForRowAt indexPath: IndexPath)</span></span> -&gt; <span class="type">UITableViewCell</span> &#123;</div><div class="line">        <span class="keyword">let</span> cell = tableView.dequeueReusableCell(withIdentifier: <span class="string">"cell"</span>, <span class="keyword">for</span>: indexPath)</div><div class="line"></div><div class="line">        <span class="keyword">let</span> itemObject = datas[indexPath.row]</div><div class="line">        cell.textLabel?.text = itemObject.name</div><div class="line">        cell.accessoryType   = itemObject.isClicked ? .checkmark : .<span class="keyword">none</span></div><div class="line"></div><div class="line">        <span class="keyword">return</span> cell</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<ul>
<li>详情Controller里面的代码：</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestRxSwiftDetailViewController</span>: <span class="title">UIViewController</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@IBOutlet</span> <span class="keyword">weak</span> <span class="keyword">var</span> content: <span class="type">UITextField</span>!</div><div class="line">    <span class="meta">@IBOutlet</span> <span class="keyword">weak</span> <span class="keyword">var</span> isOn: <span class="type">UISwitch</span>!</div><div class="line"></div><div class="line">    <span class="keyword">var</span> <span class="type">Item</span>: <span class="type">TestRxSwiftItemObject</span>?</div><div class="line"></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.viewDidLoad()</div><div class="line"></div><div class="line">        <span class="comment">// Do any additional setup after loading the view.</span></div><div class="line">        <span class="keyword">if</span> <span class="keyword">let</span> <span class="type">Item</span> = <span class="type">Item</span> &#123;</div><div class="line">            content.text = <span class="type">Item</span>.name</div><div class="line">            isOn.isOn    = <span class="type">Item</span>.isClicked</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<ul>
<li>切换为RxSwift的模式</li>
<li><ol>
<li>首先我们将我们在列表控制器里面的<code>Array</code>, 更换为可以订阅的变量，这里我们用<code>Variable</code>来代替:</li>
</ol>
</li>
</ul>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">//之前</div><div class="line">var datas = [<span class="string">TestRxSwiftItemObject</span>](<span class="link"></span>)</div><div class="line">//之后</div><div class="line">var datas = Variable<span class="xml"><span class="tag">&lt;<span class="name">[TestRxSwiftItemObject]</span>&gt;</span></span>([])</div></pre></td></tr></table></figure>
<ul>
<li>并且将所有的去数据中的对象的方法切换一下：</li>
</ul>
<figure class="highlight ceylon"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//之前</span></div><div class="line"><span class="keyword">let</span> itemObject = datas[indexPath.row]</div><div class="line"><span class="comment">//之后</span></div><div class="line"><span class="keyword">let</span> itemObject = datas.<span class="keyword">value</span>[indexPath.row]</div></pre></td></tr></table></figure>
<ul>
<li>然后我们只需要更加、删除数据，关于UI的切换，我们可以统一做处理，如下：</li>
<li>以为之前我们已经将<code>data</code>，切换为<code>Variable</code>了，这样我们可以通过调用<code>asObservable()</code>就可以改为可定于的订阅的对象，并且可以接受到回调。</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="number">_</span> = datas.asObservable().subscribe(</div><div class="line">    onNext: &#123; [<span class="keyword">weak</span> <span class="keyword">self</span>] todos <span class="keyword">in</span></div><div class="line">        <span class="keyword">self</span>?.updateUI(todos: todos)</div><div class="line">    &#125;</div><div class="line">).addDisposableTo(bag)</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">updateUI</span><span class="params">(todos: [TestRxSwiftItemObject])</span></span> &#123;</div><div class="line">    title = todos.isEmpty ? <span class="string">"Todos"</span> : <span class="string">"<span class="subst">\(todos.<span class="built_in">count</span>)</span> Todos"</span></div><div class="line">    addBtn.isEnabled = todos.<span class="built_in">filter</span> &#123; !$<span class="number">0</span>.isClicked &#125;.<span class="built_in">count</span> &lt; <span class="number">6</span></div><div class="line"></div><div class="line">    <span class="type">ItemTableview</span>.reloadData()</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>关于的数据的传递，涉及到两点，第一个：我们如何从首页数据传递给第二个控制器呢？<code>通过公开的属性传递</code>：</li>
</ul>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">let detail: TestRxSwiftDetailViewController = segue<span class="selector-class">.destination</span> as! TestRxSwiftDetailViewController</div><div class="line"><span class="keyword">if</span> let index = ItemTableview.indexPath(<span class="keyword">for</span>: sender as! UITableViewCell) &#123;</div><div class="line">detail<span class="selector-class">.Item</span> = datas<span class="selector-class">.value</span>[index.row]</div></pre></td></tr></table></figure>
<ul>
<li>第二点我们如何将第二个控制器里面的属性回传给首页控制器呢？，我们在第二页控制器里公开出一个可以订阅的对象，这样我们只要在第二个控制前里面修改数据值，并且传递，就能再第一个控制器里面接收到回调了。这里有个两点：</li>
</ul>
<figure class="highlight golo"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">fileprivate <span class="keyword">var</span> itemSubject = PublishSubject&lt;TestRxSwiftItemObject&gt;()</div><div class="line"><span class="keyword">var</span> item: <span class="keyword">Observable</span>&lt;TestRxSwiftItemObject&gt; &#123;</div><div class="line">    <span class="keyword">return</span> itemSubject.asObservable()</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>首先定义的<code>fileprivate</code>,阻止了外部给这个变量发送数据。而仅仅只是给外部暴露了一个<code>item</code>的对像。</li>
<li>而在对象内部，我们依旧可以通过<code>itemSubject</code>来发送数据，并且外部也能够接受到回调。</li>
<li>点击保存，第二个页面<code>dismiss之前</code>，我执行如下的保存操作：</li>
</ul>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> let <span class="built_in">item</span> = Item &#123;</div><div class="line">    <span class="built_in">item</span>.<span class="built_in">name</span> = content.<span class="built_in">text</span>!</div><div class="line">    <span class="built_in">item</span>.isClicked = isOn.isOn</div><div class="line"></div><div class="line">    itemSubject.onNext(<span class="built_in">item</span>)</div><div class="line">    itemSubject.onCompleted()</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>这样在首页我们就可以这样接受到回调了：</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> detail: <span class="type">TestRxSwiftDetailViewController</span> = segue.destination <span class="keyword">as</span>! <span class="type">TestRxSwiftDetailViewController</span></div><div class="line"><span class="keyword">if</span> <span class="keyword">let</span> index = <span class="type">ItemTableview</span>.indexPath(<span class="keyword">for</span>: sender <span class="keyword">as</span>! <span class="type">UITableViewCell</span>) &#123;</div><div class="line">    detail.<span class="type">Item</span> = datas.value[index.row]</div><div class="line">    <span class="number">_</span> = detail.item.subscribe(</div><div class="line">        onNext: &#123; [<span class="keyword">weak</span> <span class="keyword">self</span>] newTodo <span class="keyword">in</span></div><div class="line">            <span class="keyword">self</span>?.datas.value[index.row] = newTodo</div><div class="line">        &#125;,</div><div class="line">        onDisposed: &#123;</div><div class="line">            <span class="built_in">print</span>(<span class="string">"Finishing changing item content"</span>)</div><div class="line">        &#125;</div><div class="line">    )</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>关于最后一点异步的回调操作，简单的来说，我们将之前返回值<code>Void</code>-&gt;<code>Observable&lt;Void&gt;</code>或者<code>URL</code>-&gt;<code>Observable&lt;URL&gt;</code>,Demo:</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">enum</span> <span class="title">CustomError</span>: <span class="title">Error</span> </span>&#123;</div><div class="line">    <span class="keyword">case</span> someOptionErrors</div><div class="line">    <span class="keyword">case</span> urlIsNullError</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">syncToSaveDatas</span><span class="params">()</span></span> -&gt; <span class="type">Observable</span>&lt;<span class="type">URL</span>&gt; &#123;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="type">Observable</span>.create &#123; observer <span class="keyword">in</span></div><div class="line"></div><div class="line">        <span class="keyword">var</span> testURL: <span class="type">URL</span>?</div><div class="line">        <span class="keyword">var</span> someOptions: <span class="type">Bool</span></div><div class="line"></div><div class="line">        testURL     = <span class="type">URL</span>(string: <span class="string">""</span>)</div><div class="line">        someOptions = <span class="literal">true</span></div><div class="line"></div><div class="line">        <span class="comment">// Error 1</span></div><div class="line">        <span class="keyword">guard</span> someOptions <span class="keyword">else</span> &#123;</div><div class="line">            observer.onError(<span class="type">CustomError</span>.someOptionErrors)</div><div class="line">            <span class="keyword">return</span> <span class="type">Disposables</span>.create()</div><div class="line">        &#125;</div><div class="line"></div><div class="line"></div><div class="line">        <span class="keyword">if</span> <span class="keyword">let</span> testURL = testURL &#123;</div><div class="line">            <span class="comment">// success</span></div><div class="line">            observer.onNext(testURL)</div><div class="line">            observer.onCompleted()</div><div class="line"></div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="comment">// Error 2</span></div><div class="line">            observer.onError(<span class="type">CustomError</span>.urlIsNullError)</div><div class="line">            <span class="keyword">return</span> <span class="type">Disposables</span>.create()</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> <span class="type">Disposables</span>.create()</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@IBAction</span> <span class="function"><span class="keyword">func</span> <span class="title">saveDatas</span><span class="params">(<span class="number">_</span> sender: Any)</span></span> &#123;</div><div class="line">    <span class="number">_</span> = syncToSaveDatas().subscribe(</div><div class="line">        onNext: &#123; url <span class="keyword">in</span></div><div class="line">            <span class="built_in">print</span>(url)</div><div class="line">        &#125;,</div><div class="line">        onError: &#123;</div><div class="line">            <span class="built_in">print</span>(<span class="string">"error is <span class="subst">\($<span class="number">0</span>)</span>"</span>)</div><div class="line">        &#125;,</div><div class="line">        onCompleted: &#123;</div><div class="line">            <span class="built_in">print</span>(<span class="string">"Success"</span>)</div><div class="line">        &#125;</div><div class="line">    )</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;&lt;p&gt;举一个简单的例子，来实现RxSwift的功能：&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;列表Controller里面的代码:&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="日志" scheme="http://www.ghcoder.com/categories/%E6%97%A5%E5%BF%97/"/>
    
    
      <category term="Swift" scheme="http://www.ghcoder.com/tags/Swift/"/>
    
  </entry>
  
  <entry>
    <title>学习RxSwift</title>
    <link href="http://www.ghcoder.com/2017/10/03/20171003/"/>
    <id>http://www.ghcoder.com/2017/10/03/20171003/</id>
    <published>2017-10-03T03:57:12.000Z</published>
    <updated>2017-10-03T13:06:48.967Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li>创建可以订阅的对象，在RxSwift中称之为<code>Observable</code>,我们可以通过系统介绍给我的方法来创建(我们称之为Operators)。</li>
</ul>
<a id="more"></a>
<hr>
<ul>
<li>这里我们通过<code>Create</code>的<code>Operators</code>的方法来创建，先看一下官网[<a href="http://reactivex.io/documentation/operators/create.html" target="_blank" rel="external">http://reactivex.io/documentation/operators/create.html</a>] 的介绍:</li>
</ul>
<blockquote>
<p>You can create an Observable from scratch by using the Create operator. You pass this operator a function that accepts the observer as its parameter. Write this function so that it behaves as an Observable — by calling the observer’s onNext, onError, and onCompleted methods appropriately.<br>A well-formed finite Observable must attempt to call either the observer’s onCompleted method exactly once or its onError method exactly once, and must not thereafter attempt to call any of the observer’s other methods.</p>
</blockquote>
<ul>
<li>再看一下<code>github</code>上源码：</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Observable</span> </span>&#123;</div><div class="line">    <span class="comment">// MARK: create</span></div><div class="line">    <span class="comment">/**</span></div><div class="line">     Creates an observable sequence from a specified subscribe method implementation.</div><div class="line">     - seealso: [create operator on reactivex.io](http://reactivex.io/documentation/operators/create.html)</div><div class="line">     - parameter subscribe: Implementation of the resulting observable sequence's `subscribe` method.</div><div class="line">     - returns: The observable sequence with the specified implementation for the `subscribe` method.</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">create</span><span class="params">(<span class="number">_</span> subscribe: @escaping <span class="params">(AnyObserver&lt;E&gt;)</span></span></span> -&gt; <span class="type">Disposable</span>) -&gt; <span class="type">Observable</span>&lt;<span class="type">E</span>&gt; &#123;</div><div class="line">        <span class="keyword">return</span> <span class="type">AnonymousObservable</span>(subscribe)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>按照官网的介绍，我们就可以通过<code>Create</code>来创建一个可被订阅的对象，这个对象的入参是一个block，任意对象的<code>Observer</code>,他可以发送<code>.onNext()/.onComplete()/.onError()</code></li>
<li>第二段的注释的意思，就是这个<code>Observer</code>可以发送<code>.onNext()</code>,但是这个对象一旦发送了一次<code>.onComplete()</code>或者<code>.onError()</code>,然后就不能尝试调用任何观察者的其他方法了。看一下Demo：</li>
</ul>
<figure class="highlight pf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">enum CustomeError: Error &#123;</div><div class="line">    case somethingError</div><div class="line">&#125;</div><div class="line"></div><div class="line">	let customOB = Observable<span class="variable">&lt;Int&gt;</span>.create &#123; observer <span class="keyword">in</span></div><div class="line"></div><div class="line">	observer.<span class="keyword">on</span>Next(<span class="number">1</span>)</div><div class="line">	observer.<span class="keyword">on</span>Next(<span class="number">2</span>)</div><div class="line"></div><div class="line">	//observer.<span class="keyword">on</span>Error(CustomeError.somethingError)</div><div class="line"></div><div class="line">	observer.<span class="keyword">on</span>Completed()</div><div class="line"></div><div class="line">	return  Disposables.create()</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">let disposeBag1 = DisposeBag()</div><div class="line">customOB.subscribe(</div><div class="line">    <span class="keyword">on</span>Next: &#123; print(<span class="variable">$0</span>) &#125;,</div><div class="line">    <span class="keyword">on</span>Error: &#123; print(<span class="variable">$0</span>) &#125;,</div><div class="line">    <span class="keyword">on</span>Completed: &#123; print(<span class="string">"onCompleted"</span>) &#125;,</div><div class="line">    <span class="keyword">on</span>Disposed: &#123; print(<span class="string">"onDisposed"</span>) &#125;</div><div class="line">).addDisposableTo(disposeBag1)</div></pre></td></tr></table></figure>
<ul>
<li>这创建的依旧是一个<code>Observer</code>的对象，也可以调用其他的<code>Operator</code>,这里为了方便的调试，我们可以使用<code>.debug()</code>。使用如下：</li>
</ul>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> disposeBag1 = DisposeBag()</div><div class="line">customOB</div><div class="line">	.<span class="keyword">debug</span>()</div><div class="line">	.subscribe(</div><div class="line">	    onNex<span class="variable">t:</span> &#123; <span class="keyword">print</span>($<span class="number">0</span>) &#125;,</div><div class="line">	    onError: &#123; <span class="keyword">print</span>($<span class="number">0</span>) &#125;,</div><div class="line">	    onCompleted: &#123; <span class="keyword">print</span>(<span class="string">"onCompleted"</span>) &#125;,</div><div class="line">	    onDisposed: &#123; <span class="keyword">print</span>(<span class="string">"onDisposed"</span>) &#125;</div><div class="line">	).addDisposableTo(disposeBag1)</div><div class="line"></div><div class="line">	// 控制台的打印信息如下：</div><div class="line"><span class="number">2017</span>-<span class="number">10</span>-<span class="number">03</span> <span class="number">13</span>:<span class="number">58</span>:<span class="number">23.488</span>: ViewController.swif<span class="variable">t:35</span> (viewDidLoad()) -&gt; subscribed</div><div class="line"><span class="number">2017</span>-<span class="number">10</span>-<span class="number">03</span> <span class="number">13</span>:<span class="number">58</span>:<span class="number">23.493</span>: ViewController.swif<span class="variable">t:35</span> (viewDidLoad()) -&gt; Event <span class="keyword">next</span>(<span class="number">1</span>)</div><div class="line"><span class="number">1</span></div><div class="line"><span class="number">2017</span>-<span class="number">10</span>-<span class="number">03</span> <span class="number">13</span>:<span class="number">58</span>:<span class="number">23.493</span>: ViewController.swif<span class="variable">t:35</span> (viewDidLoad()) -&gt; Event <span class="keyword">next</span>(<span class="number">2</span>)</div><div class="line"><span class="number">2</span></div><div class="line"><span class="number">2017</span>-<span class="number">10</span>-<span class="number">03</span> <span class="number">13</span>:<span class="number">58</span>:<span class="number">23.493</span>: ViewController.swif<span class="variable">t:35</span> (viewDidLoad()) -&gt; Event completed</div><div class="line">onCompleted</div><div class="line">onDisposed</div><div class="line"><span class="number">2017</span>-<span class="number">10</span>-<span class="number">03</span> <span class="number">13</span>:<span class="number">58</span>:<span class="number">23.493</span>: ViewController.swif<span class="variable">t:35</span> (viewDidLoad()) -&gt; isDisposed</div></pre></td></tr></table></figure>
<ul>
<li>在我们真是的项目中，我们可能需要不仅仅是一个订阅者或者发布者，我们需要的是一个不仅可以订阅、也可以发布的对象，在<code>RxSwift</code>中，我们称之为<code>Subjects</code>:</li>
</ul>
<hr>
<ul>
<li>首选我们要说的<code>Subjects</code>对象叫做<code>PublishSubject</code>,看一下github上的源码：</li>
</ul>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/// Represents an object that is both an observable sequence as well as an observer.</span></div><div class="line"><span class="comment">///</span></div><div class="line"><span class="comment">/// Each notification is broadcasted to all subscribed observers.</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">PublishSubject</span>&lt;<span class="type">Element</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>再看官网上对<code>PublishSubject</code>对象的介绍：</li>
</ul>
<blockquote>
<p>PublishSubject emits to an observer only those items that are emitted by the source Observable(s) subsequent to the time of the subscription.</p>
<p>Note that a PublishSubject may begin emitting items immediately upon creation (unless you have taken steps to prevent this), and so there is a risk that one or more items may be lost between the time the Subject is created and the observer subscribes to it. If you need to guarantee delivery of all items from the source Observable, you’ll need either to form that Observable with Create so that you can manually reintroduce “cold” Observable behavior (checking to see that all observers have subscribed before beginning to emit items), or switch to using a ReplaySubject instead.</p>
<p>If the source Observable terminates with an error, the PublishSubject will not emit any items to subsequent observers, but will simply pass along the error notification from the source Observable.</p>
</blockquote>
<ul>
<li><em>只有先订阅消息，再发送消息，才能接受到消息</em></li>
<li>首先可以看出来，这个对象是<code>Cold Sign</code>,这里所谓的<code>Cold</code>，就代表，当创建完这个对象的时候，并不会立刻发送数据，而只有在有订阅者订阅它的时候，它才会发送数据。</li>
<li>而这里还有一点很重要的是，<em>PublishSubject只能够订阅在它之后发送的数据</em>，这一点也就是说，在这个订阅消息之前，不管我们发送了多少数据，在真正订阅之后，这些之前订阅的数据是不会发送的。</li>
<li>并且在约到失败的时候，这个对象就将被终止，除了在回调的<code>.onError()</code>方法之外，以后所有的数据都将无法接受。看一下Demo：</li>
</ul>
<figure class="highlight pf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">let subject = PublishSubject<span class="variable">&lt;String&gt;</span>()</div><div class="line"></div><div class="line">subject.<span class="keyword">on</span>Next(<span class="string">"Test1"</span>)</div><div class="line">subject.<span class="keyword">on</span>Next(<span class="string">"Test2"</span>)</div><div class="line"></div><div class="line">let sub1 = subject.subscribe(</div><div class="line">    <span class="keyword">on</span>Next: &#123; print(<span class="string">"1:) \($0)"</span>)&#125;</div><div class="line">)</div><div class="line"></div><div class="line">subject.<span class="keyword">on</span>Next(<span class="string">"Test3"</span>)</div><div class="line"></div><div class="line">subject.<span class="keyword">on</span>Next(<span class="string">"Test4"</span>)</div><div class="line"></div><div class="line">sub1.dispose()</div><div class="line"></div><div class="line">subject.<span class="keyword">on</span>Next(<span class="string">"Test5"</span>)</div><div class="line"></div><div class="line">let sub2 = subject.subscribe(</div><div class="line">    <span class="keyword">on</span>Next: &#123; print(<span class="string">"2:) \($0)"</span>)&#125;</div><div class="line">)</div><div class="line"></div><div class="line">subject.<span class="keyword">on</span>Next(<span class="string">"Test6"</span>)</div><div class="line">subject.<span class="keyword">on</span>Next(<span class="string">"Test7"</span>)</div><div class="line"></div><div class="line">sub2.dispose()</div><div class="line"></div><div class="line">// 终端输出为</div><div class="line"><span class="number">1</span>:) Test3</div><div class="line"><span class="number">1</span>:) Test4</div><div class="line"><span class="number">2</span>:) Test6</div><div class="line"><span class="number">2</span>:) Test7</div></pre></td></tr></table></figure>
<hr>
<ul>
<li>第二种同时即可以订阅，也可以发送消息的对象，我们这里叫做<code>BehaviorSubject</code>。这里我们先看一下github中代码:</li>
</ul>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/// Represents a value that changes over time.</span></div><div class="line"><span class="comment">///</span></div><div class="line"><span class="comment">/// Observers can subscribe to the subject to receive the last (or initial) value and all subsequent notifications.</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">BehaviorSubject</span>&lt;<span class="type">Element</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>再看一下官网上的介绍：</li>
</ul>
<blockquote>
<p>When an observer subscribes to a BehaviorSubject, it begins by emitting the item most recently emitted by the source Observable (or a seed/default value if none has yet been emitted) and then continues to emit any other items emitted later by the source Observable(s).</p>
<p>However, if the source Observable terminates with an error, the BehaviorSubject will not emit any items to subsequent observers, but will simply pass along the error notification from the source Observable.</p>
</blockquote>
<ul>
<li>看到注释以及代码的意思，这种<code>Subject</code>的对象的特点就是，<em>订阅这种对象，它就可以接收到最近的一次值或者是初始化的默认值</em></li>
<li>同样，这个<code>Subject</code>的对象，，一旦接受到<code>.onError()</code>或者<code>.onComplete()</code>, 这个对象将不会再发送任何值了。看一下Demo：</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">let subject = BehaviorSubject&lt;String&gt;(value: <span class="string">"Default Value"</span>)</div><div class="line"></div><div class="line">let sub1 = subject.subscribe(</div><div class="line"><span class="attr">    onNext:</span> &#123; print(<span class="string">"From1:\($0)"</span>) &#125;</div><div class="line">)</div><div class="line"></div><div class="line">subject.onNext(<span class="string">"Test1"</span>)</div><div class="line"></div><div class="line">sub1.dispose()</div><div class="line"></div><div class="line">let sub2 = subject.subscribe(</div><div class="line"><span class="attr">    onNext:</span> &#123;print(<span class="string">"From2:\($0)"</span>)&#125;</div><div class="line">)</div><div class="line"></div><div class="line">subject.onNext(<span class="string">"Test2"</span>)</div><div class="line">subject.onNext(<span class="string">"Test3"</span>)</div><div class="line"></div><div class="line">sub2.dispose()</div><div class="line"></div><div class="line">// 终端输出</div><div class="line"><span class="attr">From1:</span>Default Value</div><div class="line"><span class="attr">From1:</span>Test1</div><div class="line"><span class="meta">---</span></div><div class="line"><span class="attr">From2:</span>Test1</div><div class="line"><span class="attr">From2:</span>Test2</div><div class="line"><span class="attr">From2:</span>Test3</div></pre></td></tr></table></figure>
<hr>
<ul>
<li>这里可以通过<code>BehaviorSubject</code>可以查看最近一次发送数据，如果是第一次，就会接受到默认的数据，但是如果我们想要接受指定数目的历史数据，我们可以使用另外一种subject，我们叫做：<code>ReplaySubject</code>.</li>
<li>看一下github上代码的：</li>
</ul>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">/// Each notification <span class="keyword">is</span> broadcasted <span class="keyword">to</span> <span class="keyword">all</span> subscribed <span class="built_in">and</span> future observers, subject <span class="keyword">to</span> <span class="keyword">buffer</span> trimming policies.</div><div class="line">public class ReplaySubject<span class="symbol">&lt;Element&gt;</span></div></pre></td></tr></table></figure>
<blockquote>
<p>ReplaySubject emits to any observer all of the items that were emitted by the source Observable(s), regardless of when the observer subscribes.</p>
<p>There are also versions of ReplaySubject that will throw away old items once the replay buffer threatens to grow beyond a certain size, or when a specified timespan has passed since the items were originally emitted.</p>
<p>If you use a ReplaySubject as an observer, take care not to call its onNext method (or its other on methods) from multiple threads, as this could lead to coincident (non-sequential) calls, which violates the Observable contract and creates an ambiguity in the resulting Subject as to which item or notification should be replayed first.</p>
</blockquote>
<ul>
<li><em>ReplaySubject对象不能初始化默认值、并且每次打印历史数据的值是可以控制的</em>，看一下Demo：</li>
</ul>
<figure class="highlight coq"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> subject = ReplaySubject&lt;String&gt;.create(bufferSize: <span class="number">2</span>)</div><div class="line"></div><div class="line"><span class="keyword">let</span> sub1 = subject.subscribe(</div><div class="line">    onNext: &#123; print(<span class="string">"From 1:| \($0)"</span>)&#125;</div><div class="line">)</div><div class="line"></div><div class="line">subject.onNext(<span class="string">"Test1"</span>)</div><div class="line">subject.onNext(<span class="string">"Test2"</span>)</div><div class="line">subject.onNext(<span class="string">"Test3"</span>)</div><div class="line"></div><div class="line">sub1.dispose()</div><div class="line"></div><div class="line"><span class="keyword">let</span> sub2 = subject.subscribe(</div><div class="line">    onNext: &#123; print(<span class="string">"From 2:| \($0)"</span>)&#125;</div><div class="line">)</div><div class="line"></div><div class="line">subject.onNext(<span class="string">"Test4"</span>)</div><div class="line"></div><div class="line">sub2.dispose()</div><div class="line"></div><div class="line">// 终端输出</div><div class="line"><span class="keyword">From</span> <span class="number">1</span>:| <span class="type">Test1</span></div><div class="line"><span class="keyword">From</span> <span class="number">1</span>:| <span class="type">Test2</span></div><div class="line"><span class="keyword">From</span> <span class="number">1</span>:| <span class="type">Test3</span></div><div class="line"><span class="keyword">From</span> <span class="number">2</span>:| <span class="type">Test2</span></div><div class="line"><span class="keyword">From</span> <span class="number">2</span>:| <span class="type">Test3</span></div><div class="line"><span class="keyword">From</span> <span class="number">2</span>:| <span class="type">Test4</span></div></pre></td></tr></table></figure>
<hr>
<ul>
<li>第三种<code>Subjects</code>, 我们叫做<code>Variable</code>, 看一下github上的注释:</li>
</ul>
<figure class="highlight dart"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"><span class="markdown">/// Variable is </span>a<span class="markdown"> wrapper for <span class="code">`BehaviorSubject`</span>.</span></span></div><div class="line"><span class="comment"><span class="markdown">///</span></span></div><div class="line"><span class="comment"><span class="markdown">/// Unlike <span class="code">`BehaviorSubject`</span> it can't terminate with error, and when variable is deallocated</span></span></div><div class="line"><span class="comment"><span class="markdown">/// it </span>will<span class="markdown"> complete its observable sequence (<span class="code">`asObservable`</span>).</span></span></div><div class="line">public <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Variable</span>&lt;<span class="title">Element</span>&gt; </span>&#123;</div></pre></td></tr></table></figure>
<ul>
<li>特点：<em>1.这个对象是对BehaviorSubject的上层封装。2.对象不能通过发送Error而终止对象发送数据。3.通过调用asObservable，可以转化为Observer对象。</em> Demo:</li>
</ul>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">let subject = Variable(<span class="string">"Test1"</span>)</div><div class="line"></div><div class="line">let _ = subject.asObservable().subscribe(</div><div class="line">    onNext: &#123;print(<span class="string">"1:\($0)"</span>)&#125;</div><div class="line">)</div><div class="line"></div><div class="line">subject<span class="selector-class">.value</span> = <span class="string">"Changed"</span></div><div class="line"></div><div class="line"><span class="function"><span class="title">print</span><span class="params">(subject.value)</span></span></div><div class="line"></div><div class="line"><span class="comment">// 终端输出</span></div><div class="line"><span class="number">1</span>:Test1</div><div class="line"><span class="number">1</span>:Changed</div><div class="line">Changed</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;创建可以订阅的对象，在RxSwift中称之为&lt;code&gt;Observable&lt;/code&gt;,我们可以通过系统介绍给我的方法来创建(我们称之为Operators)。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="日志" scheme="http://www.ghcoder.com/categories/%E6%97%A5%E5%BF%97/"/>
    
    
      <category term="Swift" scheme="http://www.ghcoder.com/tags/Swift/"/>
    
  </entry>
  
  <entry>
    <title>学习Swift Tips(三)</title>
    <link href="http://www.ghcoder.com/2017/09/14/20170914/"/>
    <id>http://www.ghcoder.com/2017/09/14/20170914/</id>
    <published>2017-09-14T06:51:12.000Z</published>
    <updated>2017-09-15T08:09:45.000Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li><code>final</code>修饰的<code>class</code>/<code>func</code>/<code>var</code>,表示内容不允许进行继承或者重写</li>
</ul>
<hr>
<ul>
<li><code>lazy</code>简单赋值：<code>lazy var str1: String = &quot;Hello&quot;</code></li>
<li><code>lazy</code>计算赋值：</li>
</ul>
<a id="more"></a>
<figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">lazy var <span class="built_in">str</span>: <span class="keyword">String</span> = &#123;</div><div class="line"></div><div class="line">      let <span class="built_in">str</span> = <span class="string">"Hello"</span></div><div class="line">      <span class="built_in">print</span>(<span class="string">"只有首次访问输出"</span>)</div><div class="line">      <span class="keyword">return</span> <span class="built_in">str</span></div><div class="line"></div><div class="line">  &#125;()</div></pre></td></tr></table></figure>
<ul>
<li><code>lazy</code>用在一些<code>map</code>/<code>filter</code>：</li>
</ul>
<figure class="highlight livescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> result = data.lazy.map &#123;</div><div class="line">    <span class="function"><span class="params">(i: Int)</span> -&gt;</span> Int <span class="keyword">in</span></div><div class="line"></div><div class="line">    <span class="built_in">print</span>(<span class="string">"正在处理 \(i)"</span>)</div><div class="line"></div><div class="line">    <span class="keyword">return</span> i * <span class="number">2</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<ul>
<li>Swift 中的镜像以及反射的问题：我们可以通过<code>Mirror</code>来实现：</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> xiaoming = <span class="type">Person</span>(name: <span class="string">"XiaoMing"</span>, age: <span class="number">16</span>)</div><div class="line"><span class="keyword">let</span> r = <span class="type">Mirror</span>(reflecting: xiaoming)</div><div class="line"></div><div class="line"><span class="keyword">if</span> <span class="keyword">let</span> name = valueFrom(xiaoming, key: <span class="string">"name"</span>) <span class="keyword">as</span>? <span class="type">String</span> &#123;</div><div class="line">    <span class="built_in">print</span>(<span class="string">"通过key 得到值:<span class="subst">\(name)</span>"</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">dump</span>(xiaoming)</div><div class="line"></div><div class="line"><span class="built_in">print</span>(<span class="string">"xiaoming 是<span class="subst">\(r.displayStyle!)</span>"</span>)</div><div class="line"></div><div class="line"><span class="built_in">print</span>(<span class="string">"属性个数:<span class="subst">\(r.children.<span class="built_in">count</span>)</span>"</span>)</div><div class="line"></div><div class="line"><span class="keyword">for</span> child <span class="keyword">in</span> r.children &#123;</div><div class="line">    <span class="built_in">print</span>(<span class="string">"属性名:<span class="subst">\(String(describing: child.label)</span>),值:<span class="subst">\(child.value)</span>"</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">valueFrom</span><span class="params">(<span class="number">_</span> object: Any, key: String)</span></span> -&gt; <span class="type">Any</span>? &#123;</div><div class="line"></div><div class="line">    <span class="keyword">let</span> mirror = <span class="type">Mirror</span>(reflecting: object)</div><div class="line"></div><div class="line">    <span class="keyword">for</span> child <span class="keyword">in</span> mirror.children &#123;</div><div class="line"></div><div class="line">        <span class="keyword">let</span> (targetKey, targetMirror) = (child.label, child.value)</div><div class="line">        <span class="keyword">if</span> key == targetKey &#123;</div><div class="line">            <span class="keyword">return</span> targetMirror</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="literal">nil</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<ul>
<li>隐式解包并不能确保属性一定有值，或者一定安全，而是在获取属性值的时候，自动强制解包，如果该值是<code>nil</code>的话，在调用的时候，也是会crash的。</li>
</ul>
<hr>
<ul>
<li>optional定义其实就是个枚举：</li>
</ul>
<figure class="highlight gauss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> aNil: <span class="keyword">String</span>? = nil</div><div class="line"></div><div class="line"><span class="keyword">let</span> anotherNil: <span class="keyword">String</span>?? = aNil</div><div class="line"><span class="keyword">let</span> literalNil: <span class="keyword">String</span>?? = nil</div><div class="line"></div><div class="line"><span class="keyword">if</span> <span class="keyword">let</span> _ = anotherNil &#123;</div><div class="line">    <span class="keyword">print</span>(<span class="string">"anotherNil"</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">if</span> <span class="keyword">let</span> _ = literalNil &#123;</div><div class="line">    <span class="keyword">print</span>(<span class="string">"literalNil"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>打印<code>optional</code>可以通过<code>fr v -R xxx</code></li>
</ul>
<hr>
<ul>
<li><code>map</code>的使用，我见的最多的就是在数组等集合中的<code>map</code>使用，先来看一下<code>map</code>的定义:</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/// Returns an array containing the results of mapping the given closure</span></div><div class="line"><span class="comment">/// over the sequence's elements.</span></div><div class="line"><span class="comment">///</span></div><div class="line"><span class="comment">/// In this example, `map` is used first to convert the names in the array</span></div><div class="line"><span class="comment">/// to lowercase strings and then to count their characters.</span></div><div class="line"><span class="comment">///</span></div><div class="line"><span class="comment">///     let cast = ["Vivien", "Marlon", "Kim", "Karl"]</span></div><div class="line"><span class="comment">///     let lowercaseNames = cast.map &#123; $0.lowercaseString &#125;</span></div><div class="line"><span class="comment">///     // 'lowercaseNames' == ["vivien", "marlon", "kim", "karl"]</span></div><div class="line"><span class="comment">///     let letterCounts = cast.map &#123; $0.characters.count &#125;</span></div><div class="line"><span class="comment">///     // 'letterCounts' == [6, 6, 3, 4]</span></div><div class="line"><span class="comment">///</span></div><div class="line"><span class="comment">/// - Parameter transform: A mapping closure. `transform` accepts an</span></div><div class="line"><span class="comment">///   element of this sequence as its parameter and returns a transformed</span></div><div class="line"><span class="comment">///   value of the same or of a different type.</span></div><div class="line"><span class="comment">/// - Returns: An array containing the transformed elements of this</span></div><div class="line"><span class="comment">///   sequence.</span></div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">map</span>&lt;T&gt;<span class="params">(<span class="number">_</span> transform: <span class="params">(Element)</span></span></span> <span class="keyword">throws</span> -&gt; <span class="type">T</span>) <span class="keyword">rethrows</span> -&gt; [<span class="type">T</span>]</div></pre></td></tr></table></figure>
<ul>
<li>清晰明了，这里定义的泛型为T, 函数内部的block，将另外一种泛型Element转化为T，最后还是生成一个[T]类型的数组。</li>
<li>除了数组的map外，这里作者还说了一下<code>Optional</code>的<code>map</code>行数，效果一样：</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/// Evaluates the given closure when this `Optional` instance is not `nil`,</span></div><div class="line"><span class="comment">/// passing the unwrapped value as a parameter.</span></div><div class="line"><span class="comment">///</span></div><div class="line"><span class="comment">/// Use the `map` method with a closure that returns a nonoptional value.</span></div><div class="line"><span class="comment">/// This example performs an arithmetic operation on an</span></div><div class="line"><span class="comment">/// optional integer.</span></div><div class="line"><span class="comment">///</span></div><div class="line"><span class="comment">///     let possibleNumber: Int? = Int("42")</span></div><div class="line"><span class="comment">///     let possibleSquare = possibleNumber.map &#123; $0 * $0 &#125;</span></div><div class="line"><span class="comment">///     print(possibleSquare)</span></div><div class="line"><span class="comment">///     // Prints "Optional(1746)"</span></div><div class="line"><span class="comment">///</span></div><div class="line"><span class="comment">///     let noNumber: Int? = nil</span></div><div class="line"><span class="comment">///     let noSquare = noNumber.map &#123; $0 * $0 &#125;</span></div><div class="line"><span class="comment">///     print(noSquare)</span></div><div class="line"><span class="comment">///     // Prints "nil"</span></div><div class="line"><span class="comment">///</span></div><div class="line"><span class="comment">/// - Parameter transform: A closure that takes the unwrapped value</span></div><div class="line"><span class="comment">///   of the instance.</span></div><div class="line"><span class="comment">/// - Returns: The result of the given closure. If this instance is `nil`,</span></div><div class="line"><span class="comment">///   returns `nil`.</span></div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">map</span>&lt;U&gt;<span class="params">(<span class="number">_</span> transform: <span class="params">(Wrapped)</span></span></span> <span class="keyword">throws</span> -&gt; <span class="type">U</span>) <span class="keyword">rethrows</span> -&gt; <span class="type">U</span>?</div><div class="line"></div><div class="line"><span class="comment">// 例子如下：</span></div><div class="line"><span class="keyword">let</span> num: <span class="type">Int</span>? = <span class="number">3</span></div><div class="line"><span class="keyword">let</span> result = num.<span class="built_in">map</span> &#123;</div><div class="line">    $<span class="number">0</span> * <span class="number">2</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">print</span>(result) <span class="comment">// Optional(6)</span></div></pre></td></tr></table></figure>
<hr>
<ul>
<li><code>protocol</code>的<code>extension</code>的功能，为协议完成了方法的默认实现。这也，即使遵循了协议，你也可以不用写任何实现的代码。</li>
<li>如果类型推断是实际的类型： 如果类型中没有实现，就会调用拓展中的方法实现。</li>
<li>如果类型推断的是协议：1. 如果在协议中定义过，如果类型中没有实现，那就调用拓展中的实现。 2.如果在协议中没用定义过的话，拓展中的方法默认会被调用。</li>
</ul>
<hr>
<ul>
<li><code>where</code>字段的使用，目前已经不能再<code>if</code>/<code>guard</code>中使用<code>where</code>,但是在<code>swich</code>/<code>foreach</code>/<code>for</code>循环中，我们还是可以使用的。</li>
</ul>
<hr>
<ul>
<li><p>对于如果需要在<code>enum</code>中循环需要嵌套定义的话，这里我需要用的<code>indirect</code>,例如这样我们就可以这样定义一个单向连边的结构了：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">indirect</span> <span class="class"><span class="keyword">enum</span> <span class="title">LinkedList</span>&lt;<span class="title">Element</span>: <span class="title">Comparable</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">   <span class="keyword">case</span> empty</div><div class="line">   <span class="keyword">case</span> node(<span class="type">Element</span>, <span class="type">LinkedList</span>&lt;<span class="type">Element</span>&gt;)</div><div class="line"></div><div class="line">   <span class="comment">// 删除链表中某个元素</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">removing</span><span class="params">(<span class="number">_</span> element: Element)</span></span> -&gt; <span class="type">LinkedList</span>&lt;<span class="type">Element</span>&gt; &#123;</div><div class="line">   <span class="keyword">guard</span> <span class="keyword">case</span> <span class="keyword">let</span> .node(value, next) = <span class="keyword">self</span> <span class="keyword">else</span> &#123; <span class="keyword">return</span> .empty &#125;</div><div class="line"></div><div class="line">   <span class="keyword">return</span> value == element ? next : <span class="type">LinkedList</span>.node(value, next.removing(element))</div><div class="line">&#125;    </div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">  <span class="keyword">let</span> linkedList = <span class="type">LinkedList</span>.node(<span class="number">1</span>, .node(<span class="number">2</span>, .node(<span class="number">3</span>, .node(<span class="number">4</span>, .empty))))</div><div class="line">  <span class="keyword">let</span> result = linkedList.removing(<span class="number">2</span>)</div><div class="line">  <span class="built_in">print</span>(result)</div></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<ul>
<li><p>在<code>Object-c</code>中，返回<code>SEL</code>，我们会直接调用<code>@selector</code>，但是在<code>Swift</code>中我们已经不能这样调用了，我们需要用到一个字段<code>#selector</code>,使用方法类似：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"> <span class="function"><span class="keyword">func</span> <span class="title">callMe</span><span class="params">()</span></span> &#123;&#125;</div><div class="line"></div><div class="line"> <span class="function"><span class="keyword">func</span> <span class="title">callMeWithParam</span><span class="params">(obj: AnyObject!)</span></span> &#123;&#125;</div><div class="line"></div><div class="line"> <span class="function"><span class="keyword">func</span> <span class="title">turn</span><span class="params">(by angle: Int, speed: Int)</span></span> &#123;&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> someMethod = #selector(callMe)</div><div class="line"><span class="keyword">let</span> anotherMethod = #selector(callMeWithParam)</div><div class="line"></div><div class="line"><span class="keyword">let</span> method = #selector(turn)</div><div class="line"></div><div class="line"><span class="comment">// 如果名字相同，我们这里需要定义类型：</span></div><div class="line"></div><div class="line"><span class="keyword">let</span> method11 = #selector(comonFunc <span class="keyword">as</span> () -&gt;())</div><div class="line"><span class="keyword">let</span> method22 = #selector(commonFunc(input:) <span class="keyword">as</span> (<span class="type">Int</span>) -&gt; <span class="type">Int</span>)</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"> <span class="function"><span class="keyword">func</span> <span class="title">comonFunc</span><span class="params">()</span></span> &#123;&#125;</div><div class="line"></div><div class="line"> <span class="function"><span class="keyword">func</span> <span class="title">commonFunc</span><span class="params">(input: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</div><div class="line">     <span class="keyword">return</span> input</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<ul>
<li>实例化方法的动态调用：1.通过类获取方法，2.再传入实例得到方法，3.在根据情况传入参数</li>
</ul>
<figure class="highlight oxygene"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> MyClass <span class="comment">&#123;</span></div><div class="line">    func method(number: Int) -&gt; Int &#123;</div><div class="line">        return number + 1</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">class</span> func <span class="function"><span class="keyword">method</span><span class="params">(number: Int)</span> -&gt; <span class="title">Int</span> <span class="comment">&#123;</span></span></div><div class="line">        return number</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="title">let</span> <span class="title">f</span> = <span class="title">MyClass</span>.<span class="title">method</span></div><div class="line"><span class="title">let</span> <span class="title">object</span> = <span class="title">MyClass</span><span class="params">()</span></div><div class="line"><span class="title">let</span> <span class="title">result</span> = <span class="title">f</span><span class="params">(object)</span><span class="params">(1)</span></div><div class="line"><span class="title">print</span><span class="params">(<span class="keyword">result</span>)</span></div></pre></td></tr></table></figure>
<ul>
<li>如果存在相同名字的函数，可以显示定义类型来区分:</li>
</ul>
<figure class="highlight livescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> f1 = MyClass.method</div><div class="line"></div><div class="line"><span class="keyword">let</span> f2: <span class="function"><span class="params">(Int)</span> -&gt;</span> Int = MyClass.method</div><div class="line"></div><div class="line"><span class="keyword">let</span> f3: <span class="function"><span class="params">(MyClass)</span> -&gt;</span> <span class="function"><span class="params">(Int)</span> -&gt;</span> Int = MyClass.method</div></pre></td></tr></table></figure>
<hr>
<ul>
<li>单例：</li>
</ul>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> <span class="title">Manager</span> &#123;</div><div class="line">	<span class="keyword">static</span> <span class="keyword">let</span> shared = Manager()</div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="title">init</span>(<span class="params"></span>) </span>&#123;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<ul>
<li>自定义编译符号，在<code>Build Settings</code>中，找到<code>Swift Compiler - Custom Flag</code>,并且在<code>Other Swift Flags</code>中加上<code>-D FREE_VERSION</code></li>
</ul>
<hr>
<ul>
<li>编译符号： <code>// MARK:</code>、<code>// TODO:</code>、<code>// FIXME:</code></li>
</ul>
<hr>
<ul>
<li>app入口文件，这里默认创建app的时候，项目会自动为我们创建main的文件，在<code>swift</code>中，系统自动创建<code>@UIApplicationMain</code>,代表系统会自动将这个类标记为启动文件，但是这里我们可以通过如下的方法，可以将启动的文件指定为我们自定义的类，也可以将事件的接受者指定为我们想要的文件类：</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 创建一个main.swift 的文件</span></div><div class="line"><span class="keyword">import</span> UIKit</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApplication</span>: <span class="title">UIApplication</span> </span>&#123;</div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">sendEvent</span><span class="params">(<span class="number">_</span> event: UIEvent)</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.sendEvent(event)</div><div class="line">        <span class="built_in">print</span>(<span class="string">"Event sent: <span class="subst">\(event)</span>"</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="type">UIApplicationMain</span>(</div><div class="line">    <span class="type">CommandLine</span>.argc,</div><div class="line">    <span class="type">UnsafeMutableRawPointer</span>(<span class="type">CommandLine</span>.unsafeArgv)</div><div class="line">        .bindMemory(</div><div class="line">            to: <span class="type">UnsafeMutablePointer</span>&lt;<span class="type">Int8</span>&gt;.<span class="keyword">self</span>,</div><div class="line">            capacity: <span class="type">Int</span>(<span class="type">CommandLine</span>.argc)),</div><div class="line">    <span class="literal">nil</span>,</div><div class="line">    <span class="type">NSStringFromClass</span>(<span class="type">AppDelegate</span>.<span class="keyword">self</span>)</div><div class="line">)</div></pre></td></tr></table></figure>
<hr>
<ul>
<li>在<code>Swift</code>中的协议默认都是必须要实现的，但是如果用在<code>Object-c</code>中，协议的方法是可选的，我们可以这样实现：</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@objc</span> <span class="class"><span class="keyword">protocol</span> <span class="title">OptionalProtocol</span> </span>&#123;</div><div class="line">    <span class="meta">@objc</span> <span class="keyword">optional</span> <span class="function"><span class="keyword">func</span> <span class="title">optionalMethod</span><span class="params">()</span></span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>但是有了<code>Protocol Extension</code>，我也可以以<code>Swift</code>的方式来实现,对于<code>OC</code>中可选的协议方法，我们可以通过写protocol extension 来实现可选的功能。</li>
</ul>
<hr>
<ul>
<li><code>Swift</code>中的<code>unowned</code>和以前的<code>unsafe_unretained</code>: 即使它原来引用的内容已经被释放了，它仍然会保持对被释放对象的一个无效引用，它不是optional值，也不能被指向nil,如果调用属性或者方法的时候就会crash。作者建议:</li>
<li>如果确定在访问的时候，不会被释放的话，就使用<code>unowned</code>，如果存在释放的可能，那就用<code>weak</code></li>
</ul>
<hr>
<ul>
<li>在<code>swift</code>中，<code>Int</code>/<code>Bool</code>/<code>String</code>/<code>Array</code>/<code>Dictionary</code>都是值类型。</li>
<li>这些类型只是在简单的赋值的时候，在物理内存上都是同一个东西。</li>
<li>而当发生一个数据改变的时候，他们的内存地址才会发生变化。</li>
<li>值类型在赋值的时候，会将储存其中的值类型一并进行复制，而对其中的引用类型，则只是复制了一份引用。</li>
</ul>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">let myObject = MyObject()</div><div class="line">let <span class="selector-tag">a</span> = [myObject]</div><div class="line"><span class="selector-tag">var</span> <span class="selector-tag">b</span> = <span class="selector-tag">a</span></div><div class="line"></div><div class="line"><span class="selector-tag">b</span>.append(myObject)</div><div class="line"></div><div class="line">myObject<span class="selector-class">.number</span> = <span class="number">100</span></div><div class="line"></div><div class="line"><span class="function"><span class="title">print</span><span class="params">(b[<span class="number">0</span>].number)</span></span> <span class="comment">//100</span></div><div class="line"><span class="function"><span class="title">print</span><span class="params">(b[<span class="number">1</span>].number)</span></span> <span class="comment">//100</span></div></pre></td></tr></table></figure>
<ul>
<li>处理大量数据并且频繁操作其中的元素的时候，我们需要使用<code>NSMutableArray</code>、<code>NSMutableDictionary</code>会更好。</li>
<li>对于容器内条目少、容器本身数目多的情况下，我们需要使用<code>Array</code>、<code>Dictionary</code></li>
</ul>
<hr>
<ul>
<li><code>swift</code>版本配合<code>range</code>的使用：</li>
</ul>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">let levels = <span class="string">"ABCDE"</span></div><div class="line"></div><div class="line"></div><div class="line">let nsRange = NSMakeRange(<span class="number">1</span>, <span class="number">4</span>)</div><div class="line"><span class="function"><span class="title">print</span><span class="params">((levels as NSString)</span></span>.replacingCharacters(<span class="keyword">in</span>: nsRange, with: <span class="string">"AAAA"</span>))</div><div class="line"></div><div class="line">let indexPositionOne = levels<span class="selector-class">.characters</span><span class="selector-class">.index</span>(levels<span class="selector-class">.startIndex</span>, offsetBy: <span class="number">1</span>)</div><div class="line">let swiftRange = indexPositionOne ..&lt; levels<span class="selector-class">.characters</span><span class="selector-class">.index</span>(levels<span class="selector-class">.startIndex</span>, offsetBy: <span class="number">5</span>)</div><div class="line"></div><div class="line"><span class="function"><span class="title">print</span><span class="params">(levels.replacingCharacters(in: swiftRange, with: <span class="string">"AAAA"</span>)</span></span>)</div></pre></td></tr></table></figure>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;&lt;code&gt;final&lt;/code&gt;修饰的&lt;code&gt;class&lt;/code&gt;/&lt;code&gt;func&lt;/code&gt;/&lt;code&gt;var&lt;/code&gt;,表示内容不允许进行继承或者重写&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;lazy&lt;/code&gt;简单赋值：&lt;code&gt;lazy var str1: String = &amp;quot;Hello&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;lazy&lt;/code&gt;计算赋值：&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="日志" scheme="http://www.ghcoder.com/categories/%E6%97%A5%E5%BF%97/"/>
    
    
      <category term="Swift" scheme="http://www.ghcoder.com/tags/Swift/"/>
    
  </entry>
  
  <entry>
    <title>学习Swift Tips(二)</title>
    <link href="http://www.ghcoder.com/2017/09/08/20170908/"/>
    <id>http://www.ghcoder.com/2017/09/08/20170908/</id>
    <published>2017-09-08T02:53:12.000Z</published>
    <updated>2017-09-13T06:47:06.000Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li>在介绍（Tuple）的时候，说了交换输入的方法书写，在Object-C中，有很多方法，我们传入的是指针，这个问题主要的来源就是因为受制约C语言，单一返回，有了Tuple的时候，我们就可以方便的调用了。</li>
</ul>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">let rect = CGRect(<span class="string">x:</span> <span class="number">0</span>, <span class="string">y:</span> <span class="number">0</span>, <span class="string">width:</span> <span class="number">100</span>, <span class="string">height:</span> <span class="number">100</span>)</div><div class="line">let (small, large) = rect.divided(<span class="string">atDistance:</span> <span class="number">20</span>, <span class="string">from:</span> .minXEdge)</div></pre></td></tr></table></figure>
<a id="more"></a>
<hr>
<ul>
<li>在写swift的时候，我们常常需要和Optional打交道，这时候我们就需要常常用到解包，这里就提到了一个快速解包的方式<code>??</code>,首先看一下如何使用：</li>
</ul>
<figure class="highlight excel"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">var</span> lev<span class="symbol">el:</span> <span class="built_in">Int</span>?</div><div class="line"><span class="built_in">var</span> startLevel = <span class="number">1</span></div><div class="line"></div><div class="line"><span class="built_in">var</span> currentLevel = level ?? startLevel</div></pre></td></tr></table></figure>
<ul>
<li>这里很简单，但是还是要说一下，这里的<code>??</code>判断左边的值，如果是非nil的<code>optional</code>的值，那就直接返回左边的value值，否则就返回右边的值,但是细细往下看一下源码的定义会发现：</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> ??&lt;T&gt;<span class="params">(<span class="keyword">optional</span>: T?, defaultValue: @autoclosure <span class="params">()</span></span></span> <span class="keyword">throws</span> -&gt; <span class="type">T</span>) <span class="keyword">rethrows</span> -&gt; <span class="type">T</span></div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> ??&lt;T&gt;<span class="params">(<span class="keyword">optional</span>: T?, defaultValue: @autoclosure <span class="params">()</span></span></span> <span class="keyword">throws</span> -&gt; <span class="type">T</span>?) <span class="keyword">rethrows</span> -&gt; <span class="type">T</span>?</div></pre></td></tr></table></figure>
<ul>
<li>看到这里，我就有点疑惑了，这个<code>??</code>其实就是一个函数，那么问题来了，<code>函数的调用方式为什么那么另类呢？</code>,按照我们的理解，这个函数的调用方式不应该是这样的吗？<code>??(optional, xxx)</code>,但是发现这样写，会报错，所以这里我就决定把函数的定义直接copy下来，然后自己去实现，带入如下：</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">th</span>&lt;T&gt;<span class="params">(<span class="number">_</span> <span class="keyword">optional</span>: T?, <span class="number">_</span> defaultValue: @autoclosure <span class="params">()</span></span></span> <span class="keyword">throws</span> -&gt; <span class="type">T</span>) <span class="keyword">rethrows</span> -&gt; <span class="type">T</span> &#123;</div><div class="line">    <span class="keyword">if</span> <span class="keyword">let</span> <span class="keyword">optional</span> = <span class="keyword">optional</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">optional</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">try</span> defaultValue()</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">var</span> level: <span class="type">Int</span>?</div><div class="line"><span class="keyword">var</span> startLevel = <span class="number">1</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> test = th(level, startLevel)</div></pre></td></tr></table></figure>
<ul>
<li>看到这里我就开始猜测了，这或许是<code>swift</code>为了方便的我们的调用，所以它又定义了一个语法糖吧！</li>
</ul>
<hr>
<ul>
<li>@autoclosure 符号的意思，就是直接将：入参T 转化为 ()-&gt;T</li>
</ul>
<hr>
<ul>
<li>@escaping 符号的意思就是说明，这个参数是异步的，不是属于这个局部的函数，可以在这个函数执行完成之后再执行这里的回调，不加任何参数的block默认就是同步的，函数执行完成之前，这个block就会被收回。</li>
</ul>
<hr>
<ul>
<li>optional Chaining 如果某个属性是nil的话，会提前返回回来。</li>
</ul>
<hr>
<ul>
<li>重载符号的做法，用的比较少：</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">precedencegroup <span class="type">DotProductPrecedence</span> &#123;</div><div class="line">    <span class="keyword">associativity</span>: <span class="keyword">none</span></div><div class="line">    higherThan: <span class="type">MultiplicationPrecedence</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">infix</span> <span class="keyword">operator</span> +*: <span class="type">DotProductPrecedence</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> +*<span class="params">(<span class="keyword">left</span>: Vector2D, <span class="keyword">right</span>: Vector2D)</span></span> -&gt; <span class="type">Double</span> &#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">left</span>.x * <span class="keyword">right</span>.x + <span class="keyword">left</span>.y * <span class="keyword">right</span>.y</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<ul>
<li>外部传入的参数，如果需要在函数内部修改的话，需要在参数前面加上<code>inout</code>，这样传入参数的时候，就需要将之前传入的值改为地址，类似:</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">incrementor</span><span class="params">(variable: <span class="keyword">inout</span> Int)</span></span> -&gt; <span class="type">Int</span> &#123;</div><div class="line">       variable += <span class="number">1</span></div><div class="line">       <span class="keyword">return</span> variable</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<hr>
<ul>
<li>字面量的作用，我就觉得很鸡肋，但是还是看一下，说白了，字面量的意思就是说：<code>可同直接实例化的时候，传入一个String、Int、Bool, 而返回的确实我们自定义的类型</code>，例如：</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>: <span class="title">ExpressibleByStringLiteral</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">let</span> name: <span class="type">String</span></div><div class="line"></div><div class="line">    <span class="keyword">init</span>(name value: <span class="type">String</span>) &#123;</div><div class="line">        <span class="keyword">self</span>.name = value</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">required</span> <span class="keyword">convenience</span> <span class="keyword">init</span>(stringLiteral value: <span class="type">String</span>) &#123;</div><div class="line">        <span class="keyword">self</span>.<span class="keyword">init</span>(name: value)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">required</span> <span class="keyword">convenience</span> <span class="keyword">init</span>(extendedGraphemeClusterLiteral value: <span class="type">String</span>) &#123;</div><div class="line">        <span class="keyword">self</span>.<span class="keyword">init</span>(name: value)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">required</span> <span class="keyword">convenience</span> <span class="keyword">init</span>(unicodeScalarLiteral value: <span class="type">String</span>) &#123;</div><div class="line">        <span class="keyword">self</span>.<span class="keyword">init</span>(name: value)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"> <span class="keyword">let</span> p: <span class="type">Person</span> = <span class="string">"xiaoming"</span></div><div class="line"> <span class="built_in">print</span>(p.name)</div></pre></td></tr></table></figure>
<hr>
<ul>
<li>数组下标说实话，还是蛮不错的内容，用的好的话，可以节省很多的时间，通过对下面两个方法写一下拓展，就可以实现自定义的下标功能：</li>
</ul>
<figure class="highlight fortran"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> subscript(<span class="built_in">index</span>: <span class="built_in">Int</span>) -&gt; Element</div><div class="line"></div><div class="line"><span class="keyword">public</span> subscript(bounds: <span class="built_in">Range</span>&lt;<span class="built_in">Int</span>&gt;) -&gt; ArraySlice&lt;Element&gt;</div></pre></td></tr></table></figure>
<ul>
<li>onvcate 的例子中举出了下面的例子，方便我们通过下标来获取数组的数据：</li>
</ul>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</div><div class="line"><span class="function"><span class="title">print</span><span class="params">(arr[[<span class="number">0</span>,<span class="number">2</span>,<span class="number">3</span>]])</span></span></div><div class="line">arr[[<span class="number">0</span>,<span class="number">2</span>,<span class="number">3</span>]] = [-<span class="number">1</span>, -<span class="number">3</span>, -<span class="number">4</span>]</div><div class="line"><span class="function"><span class="title">print</span><span class="params">(arr)</span></span></div><div class="line"></div><div class="line"></div><div class="line">extension Array &#123;</div><div class="line"></div><div class="line">    subscript(<span class="selector-tag">input</span>: [Int]) -&gt; ArraySlice&lt;Element&gt; &#123;</div><div class="line">        get&#123;</div><div class="line">            <span class="selector-tag">var</span> result = ArraySlice&lt;Element&gt;()</div><div class="line">            <span class="keyword">for</span> <span class="selector-tag">i</span> <span class="keyword">in</span> <span class="selector-tag">input</span> &#123;</div><div class="line">                assert(<span class="selector-tag">i</span> &lt; self<span class="selector-class">.count</span>, <span class="string">"Index out of range"</span>)</div><div class="line">                result.append(self[i])</div><div class="line">            &#125;</div><div class="line">            return result</div><div class="line">        &#125;</div><div class="line">        set&#123;</div><div class="line">            <span class="keyword">for</span>(index,i) <span class="keyword">in</span> <span class="selector-tag">input</span>.enumerated() &#123;</div><div class="line">                assert(<span class="selector-tag">i</span> &lt; self<span class="selector-class">.count</span>, <span class="string">"Index out of range"</span>)</div><div class="line">                self[i] = newValue[index]</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>下面作者也说了，这个方式调用起来不是很优雅，然后就有了下面的拓展，是我自己写的：</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Array</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">subscript</span>(first: <span class="type">Int</span>, second: <span class="type">Int</span>, other: <span class="type">Int</span>...) -&gt; <span class="type">ArraySlice</span>&lt;<span class="type">Element</span>&gt; &#123;</div><div class="line">        <span class="keyword">get</span>&#123;</div><div class="line">            <span class="keyword">var</span> result = <span class="type">ArraySlice</span>&lt;<span class="type">Element</span>&gt;()</div><div class="line"></div><div class="line">            <span class="keyword">if</span> first &lt; <span class="keyword">self</span>.<span class="built_in">count</span> &#123;</div><div class="line">                result.append(<span class="keyword">self</span>[first])</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">if</span> second &lt; <span class="keyword">self</span>.<span class="built_in">count</span> &#123;</div><div class="line">                result.append(<span class="keyword">self</span>[second])</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> other &#123;</div><div class="line">                <span class="built_in">assert</span>(i &lt; <span class="keyword">self</span>.<span class="built_in">count</span>, <span class="string">"Index out of range"</span>)</div><div class="line">                result.append(<span class="keyword">self</span>[i])</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">return</span> result</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">set</span>&#123;</div><div class="line">            <span class="keyword">var</span> tempDatas = other.<span class="built_in">count</span> &gt; <span class="number">0</span> ? other : [<span class="type">Int</span>]()</div><div class="line">            <span class="keyword">if</span> (first &lt; <span class="keyword">self</span>.<span class="built_in">count</span>) &#123;</div><div class="line">                tempDatas.append(first)</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (second &lt; <span class="keyword">self</span>.<span class="built_in">count</span>) &#123;</div><div class="line">                tempDatas.append(second)</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">for</span>(index,i) <span class="keyword">in</span> tempDatas.enumerated() &#123;</div><div class="line">                <span class="built_in">assert</span>(i &lt; <span class="keyword">self</span>.<span class="built_in">count</span>, <span class="string">"Index out of range"</span>)</div><div class="line">                <span class="keyword">self</span>[i] = newValue[index]</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> t = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</div><div class="line"><span class="built_in">print</span>( t[<span class="number">0</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>])</div><div class="line">t[<span class="number">0</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>] = [<span class="number">99</span>,<span class="number">99</span>,<span class="number">99</span>,<span class="number">99</span>]</div><div class="line"><span class="built_in">print</span>(t)</div></pre></td></tr></table></figure>
<hr>
<ul>
<li>函数作为一等公民，就是你可以把函数作为参数，返回值，或者可以在函数中定义任意多个函数，这样也可以控制代码的访问权限的问题。</li>
</ul>
<hr>
<ul>
<li>在不同的target(一个叫<code>GG</code>,一个叫<code>HH</code>)中，调用同一个类的，同一个方法，例如我们定义了一个<code>My</code>的类，里面定义了一个<code>hello</code>的类方法:</li>
</ul>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">GG<span class="selector-class">.My</span><span class="selector-class">.hello</span>()</div><div class="line">HH<span class="selector-class">.My</span><span class="selector-class">.hello</span>()</div></pre></td></tr></table></figure>
<hr>
<ul>
<li>typealias 除了用在给变量、实例、属性定义别名外，还可以用在协议上，我认为这样的用户很大:</li>
</ul>
<figure class="highlight puppet"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">protocol <span class="keyword">Cat</span> &#123;&#125;</div><div class="line"><span class="keyword">protocol</span> <span class="keyword">Dog</span> &#123;&#125;</div><div class="line"><span class="keyword">typealias</span> <span class="keyword">Pat</span> = Cat &amp; Dog</div><div class="line"></div><div class="line"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UIViewController</span>, <span class="title">Pat</span> &#123;&#125;</div></pre></td></tr></table></figure>
<hr>
<ul>
<li>如果想对协议添加限定的话，我们就可以定义一个<code>associatedtype xx</code>,这样在遵循了协议的时候，就需要制定我们type的类型，这就和之前看官方<code>Array</code>定义的效果医院，需要我们制定类型，这样就能够更好的限制遵循协议的对象。</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">Animal</span> </span>&#123;</div><div class="line">    associatedtype <span class="type">F</span></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">eat</span><span class="params">(<span class="number">_</span> food: F)</span></span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Meat</span>: <span class="title">Food</span> </span>&#123;&#125;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Crass</span>: <span class="title">Food</span> </span>&#123;&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Tiger</span>: <span class="title">Animal</span> </span>&#123;</div><div class="line">    <span class="keyword">typealias</span> <span class="type">F</span> = <span class="type">Meat</span></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">eat</span><span class="params">(<span class="number">_</span> food: Meat)</span></span> &#123;</div><div class="line">        <span class="built_in">print</span>(<span class="string">"eat <span class="subst">\(food)</span>"</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>但是一旦我们这样限制了协议之后，在进行独立判断的时候，我们就不能像之前那样直接进行判断了，例如：</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">isDangerous</span><span class="params">(animal: Animal)</span></span> -&gt; <span class="type">Bool</span> &#123;</div><div class="line">    <span class="keyword">if</span> animal <span class="keyword">is</span> <span class="type">Tiger</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="literal">true</span></div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="literal">false</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>这里错误的原因，是因为我们没有在编译的时候，限制协议中的type类型，在这种情况下，我们只能按照泛型的类型来书写了：</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">isDangerous</span>&lt;T: Animal&gt;<span class="params">(animal: T)</span></span> -&gt; <span class="type">Bool</span> &#123;</div><div class="line">    <span class="keyword">if</span> animal <span class="keyword">is</span> <span class="type">Tiger</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="literal">true</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="literal">false</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<ul>
<li>可变参数的调用，不限制在指定哪个位置，接受可变参数的函数内部，把可变参数看作是对应数据的数组，但是每个函数只能接受一个可变参数，并且可变参数的类型必须是一致的。</li>
</ul>
<hr>
<ul>
<li>方法的调用顺序问题:</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> name: <span class="type">String</span></div><div class="line">    <span class="keyword">init</span>() &#123;</div><div class="line">        name = <span class="string">"cat"</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tiger</span>: <span class="title">Cat</span> </span>&#123;</div><div class="line">    <span class="keyword">let</span> power: <span class="type">Int</span></div><div class="line">    <span class="keyword">override</span> <span class="keyword">init</span>() &#123;</div><div class="line">        power = <span class="number">10</span></div><div class="line">        <span class="keyword">super</span>.<span class="keyword">init</span>()</div><div class="line">        name = <span class="string">"gh"</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>类在初始化的时候，必须要保证该类的所有成员都完成了初始化。</li>
<li>存在继承关系的类，必须要确保当前子类实例的所有成员完成初始化后才会调用父类的初始化。</li>
<li>可以显示的调用<code>super.init()</code>，如果不显示的调用的<code>super.init()</code>的时候，当我们完成子类的实例化方法的时候，就会自己调用<code>super.init()</code>,当然如果存在复写的情况的话，还是需要显示的调用的。</li>
</ul>
<hr>
<ul>
<li>Designated、Convenience、Required 使用注意点：</li>
</ul>
<ol>
<li>Swift的<code>init</code>只能被调用一次，而且是线程安全的，可以对let属性变量进行赋值。</li>
<li>在<code>init</code>前面加了<code>convenience</code>的初始化方法必须调用同一个类的<code>init</code>的方法。</li>
<li><code>convenience</code>的实例化方法不能被重写，并且也不能够被子类通过<code>super</code>的方式调用。</li>
<li>只要子类重写了<code>convenience</code>方法所需的<code>init</code>的方法后，子类就可以使用<code>convenience</code>的初始化方法。</li>
<li>当子类含有异于父类的初始化方法时（初始化方法参数类型和数量异于父类），子类必须要实现父类的required初始化方法，并且也要使用required修饰符而不是override。</li>
<li>当子类没有初始化方法时，可以不用实现父类的required初始化方法。</li>
</ol>
<hr>
<ul>
<li>对于可以返回nil的初始化方法，我们需要在<code>init?(xxx)</code>，加入<code>?</code></li>
</ul>
<hr>
<ul>
<li>如果想在protocol 里定义一个类型域上的方法或者计算属性，我们需要在定义的时候用<code>static</code>进行定义。</li>
</ul>
<hr>
<ul>
<li>在Swift中的集合类型，在定义中可以看出，我们可以将同一种类型的数据存放在集合中，但是如果类型不同呢？我们应该怎么办呢？</li>
</ul>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Any 类型可以隐式转化</span></div><div class="line"><span class="keyword">let</span> mixed: [CustomStringConvertible] = [<span class="number">1</span>, <span class="string">"two"</span>, <span class="literal">false</span>]</div><div class="line"></div><div class="line"><span class="comment">// 转化为[NSObject]</span></div><div class="line"><span class="keyword">let</span> objectArray = [<span class="number">1</span> <span class="keyword">as</span> NSObject, <span class="string">"two"</span> <span class="keyword">as</span> NSObject, <span class="literal">false</span> <span class="keyword">as</span> NSObject]</div><div class="line"></div><div class="line"><span class="keyword">let</span> any = mixed[<span class="number">2</span>]</div><div class="line"></div><div class="line"><span class="keyword">let</span> nsObject = objectArray[<span class="number">2</span>]</div></pre></td></tr></table></figure>
<ul>
<li>这样存储是没啥问题的，但是也会存在一个问题，那就是可能数据会部分丢失，这其实也是不建议的，因为既然你能存放在同一个集合中，那这些元素，就应该存在一定的共同点。</li>
</ul>
<figure class="highlight crystal"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">enum</span> <span class="title">IntOrString</span> &#123;</span></div><div class="line">    <span class="keyword">case</span> IntValue(Int)</div><div class="line">    <span class="keyword">case</span> StringValue(String)</div><div class="line">    <span class="keyword">case</span> BoolValue(Bool)</div><div class="line">&#125;</div><div class="line"></div><div class="line">let mixed = [IntOrString.IntValue(<span class="number">1</span>), IntOrString.StringValue(<span class="string">"two"</span>), IntOrString.BoolValue(<span class="literal">false</span>)]</div></pre></td></tr></table></figure>
<hr>
<ul>
<li>默认参数可以在任意的位置:</li>
</ul>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">func</span> sayHello1(<span class="keyword">str1: </span><span class="keyword">String </span>= <span class="string">"Hello"</span>, <span class="keyword">str2: </span><span class="keyword">String, </span><span class="keyword">str3: </span><span class="keyword">String) </span>&#123;</div><div class="line">    print(<span class="keyword">str1 </span>+ <span class="keyword">str2 </span>+ <span class="keyword">str3)</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="symbol">func</span> sayHello2(<span class="keyword">str1: </span><span class="keyword">String, </span><span class="keyword">str2: </span><span class="keyword">String, </span><span class="keyword">str3: </span><span class="keyword">String </span>= <span class="string">"World"</span>) &#123;</div><div class="line">    print(<span class="keyword">str1 </span>+ <span class="keyword">str2 </span>+ <span class="keyword">str3)</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="symbol">sayHello1</span>(<span class="keyword">str2: </span><span class="string">" "</span>, <span class="keyword">str3: </span><span class="string">"World"</span>)</div><div class="line"><span class="symbol">sayHello2</span>(<span class="keyword">str1: </span><span class="string">"Hello"</span>, <span class="keyword">str2: </span><span class="string">" "</span>)</div></pre></td></tr></table></figure>
<hr>
<ul>
<li>swift 中没有专门的用来正则匹配的东西，但是围绕<code>NSRegularExpression</code>也是可以在swift上做一下拓展:</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">RegexHelper</span> </span>&#123;</div><div class="line">    <span class="keyword">let</span> regex: <span class="type">NSRegularExpression</span></div><div class="line"></div><div class="line">    <span class="keyword">init</span>(<span class="number">_</span> pattern: <span class="type">String</span>) <span class="keyword">throws</span> &#123;</div><div class="line">        <span class="keyword">try</span> regex = <span class="type">NSRegularExpression</span>(pattern: pattern, options: .caseInsensitive)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">match</span><span class="params">(<span class="number">_</span> input: String)</span></span> -&gt; <span class="type">Bool</span> &#123;</div><div class="line">        <span class="keyword">let</span> matches = regex.matches(<span class="keyword">in</span>: input,</div><div class="line">                                    options: [],</div><div class="line">                                    range: <span class="type">NSMakeRange</span>(<span class="number">0</span>, input.utf16.<span class="built_in">count</span>))</div><div class="line">        <span class="keyword">return</span> matches.<span class="built_in">count</span> &gt; <span class="number">0</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">let</span> mailPattern = <span class="string">"^([a-z0-9\\.-]+)@([\\da-z\\.-]+)\\.([a-z\\.]&#123;2,6&#125;)$"</span></div><div class="line"></div><div class="line"><span class="keyword">let</span> matcher: <span class="type">RegexHelper</span></div><div class="line"><span class="keyword">do</span> &#123;</div><div class="line">    matcher = <span class="keyword">try</span> <span class="type">RegexHelper</span>(mailPattern)</div><div class="line"></div><div class="line">    <span class="keyword">let</span> maybeMailAddress = <span class="string">"onev@onevcat.com"</span></div><div class="line"></div><div class="line">    <span class="keyword">if</span> matcher.match(maybeMailAddress) &#123;</div><div class="line">        <span class="built_in">print</span>(<span class="string">"有效的邮箱地址"</span>)</div><div class="line">    &#125;</div><div class="line">&#125; <span class="keyword">catch</span> &#123;</div><div class="line">    <span class="built_in">print</span>(error)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<ul>
<li><code>...</code>(闭区间)和<code>..&lt;</code>(开区间)，除了可以生成一个数字类型的范围外，还是可以生成字符串和ASCII编码：</li>
</ul>
<figure class="highlight nix"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> <span class="attr">interval</span> = <span class="string">"a"</span>...<span class="string">"z"</span></div><div class="line"><span class="keyword">let</span> <span class="attr">xx</span> = \<span class="number">0</span>...~</div></pre></td></tr></table></figure>
<hr>
<ul>
<li>任意的类型有：<code>Any/AnyObject/AnyClass</code>, 而 <code>typealias AnyClass = AnyObject.Type</code>, <code>.self</code>用在类型后面取得类型本身，用在某实例后面表示取得实例本事</li>
<li>通过<code>AnyObject.Type</code>获取得到的是一个元类型， 也就是<code>AnyClass</code>,这时候我们需要调用<code>.self</code>来获取元类。</li>
</ul>
<hr>
<ul>
<li>在协议中返回值，我们可以返回<code>Self</code>,这个类型的意思是，遵循这个协议的类调用这个方法可以返回一个同样遵循该协议并且相同的类：</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">Copyable</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">copy</span><span class="params">()</span></span> -&gt; <span class="type">Self</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span>: <span class="title">Copyable</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> num = <span class="number">1</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">copy</span><span class="params">()</span></span> -&gt; <span class="type">Self</span> &#123;</div><div class="line">        <span class="keyword">let</span> result = type(of: <span class="keyword">self</span>).<span class="keyword">init</span>()</div><div class="line">        result.num = num</div><div class="line">        <span class="keyword">return</span> result</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">required</span> <span class="keyword">init</span>() &#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>这样书写之后，不管是<code>MyClass</code>还是<code>MyClass</code>的子类都可以同样适用该协议方法。</li>
<li>并且需要使用<code>required</code>来定义初始化方法，确保该类及其子类都能响应这个初始化方法。</li>
</ul>
<hr>
<ul>
<li>swift 是不支持动态派发的，所以他不会根据继承的关系，在运行时改变方法的执行：</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pet</span> </span>&#123;&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span>: <span class="title">Pet</span> </span>&#123;&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span>: <span class="title">Pet</span> </span>&#123;&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">printPet</span><span class="params">(<span class="number">_</span> pet: Pet)</span></span> &#123;</div><div class="line">    <span class="built_in">print</span>(<span class="string">"Pet"</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">printPet</span><span class="params">(<span class="number">_</span> cat: Cat)</span></span> &#123;</div><div class="line">    <span class="built_in">print</span>(<span class="string">"Meow"</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">printPet</span><span class="params">(<span class="number">_</span> dog: Dog)</span></span> &#123;</div><div class="line">    <span class="built_in">print</span>(<span class="string">"Bark"</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">printThem</span><span class="params">(<span class="number">_</span> pet: Pet, <span class="number">_</span> cat: Cat)</span></span> &#123;</div><div class="line">    printPet(pet) <span class="comment">// Pet</span></div><div class="line">    printPet(cat) <span class="comment">// Meow</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">printThem(<span class="type">Dog</span>(), <span class="type">Cat</span>())</div></pre></td></tr></table></figure>
<ul>
<li>虽然我这里传入的是<code>Dog()</code>的实例，但是在函数内部，我们定义的确实它的父类，所以在实际调用的时候，不管你传入的是什么，在编译的时候，就已经决定了，函数调用的入参是<code>pet</code>，如果想要区分的话，只能通过类型的判断去执行：</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">printThem</span><span class="params">(<span class="number">_</span> pet: Pet, <span class="number">_</span> cat: Cat)</span></span> &#123;</div><div class="line">    <span class="keyword">if</span> <span class="keyword">let</span> aCat = pet <span class="keyword">as</span>? <span class="type">Cat</span> &#123;</div><div class="line">        printPet(aCat)</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> <span class="keyword">let</span> aDog = pet <span class="keyword">as</span>? <span class="type">Dog</span> &#123;</div><div class="line">        printPet(aDog)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    printPet(cat)</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<ul>
<li>属性的监听在<code>willSet</code>是将<code>date</code>-&gt;<code>newValue</code>, 而<code>didSet</code>是从<code>oldValue</code>-&gt;<code>date</code>。</li>
<li>基本上在同一个类中对同一个属性值，不可能存在<code>set</code>/<code>willSet</code>/<code>didSet</code>, 但是如果复写父类的属性值的时候，我们就可以同时实现三个属性值：</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> number: <span class="type">Int</span> &#123;</div><div class="line">        <span class="keyword">get</span> &#123;</div><div class="line">            <span class="built_in">print</span>(<span class="string">"get"</span>)</div><div class="line">            <span class="keyword">return</span> <span class="number">1</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">set</span> &#123;</div><div class="line">            <span class="built_in">print</span>(<span class="string">"set"</span>)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>: <span class="title">A</span> </span>&#123;</div><div class="line">    <span class="keyword">override</span> <span class="keyword">var</span> number: <span class="type">Int</span> &#123;</div><div class="line">        <span class="keyword">willSet</span> &#123; <span class="built_in">print</span>(<span class="string">"willset"</span>) &#125;</div><div class="line">        <span class="keyword">didSet</span>  &#123; <span class="built_in">print</span>(<span class="string">"didSet"</span>) &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">let</span> b = <span class="type">B</span>()</div><div class="line">b.number = <span class="number">0</span></div><div class="line"></div><div class="line"><span class="comment">// 输出</span></div><div class="line"><span class="comment">// get</span></div><div class="line"><span class="comment">// willSet</span></div><div class="line"><span class="comment">// set</span></div><div class="line"><span class="comment">// didSet</span></div></pre></td></tr></table></figure>
<ul>
<li>这里首先打印<code>get</code>,是因为这里实现了<code>didSet</code>,在<code>didSet</code>中用到了<code>oldValue</code>, 而这个值需要在整个set动作之前进行获取并存储代用。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;在介绍（Tuple）的时候，说了交换输入的方法书写，在Object-C中，有很多方法，我们传入的是指针，这个问题主要的来源就是因为受制约C语言，单一返回，有了Tuple的时候，我们就可以方便的调用了。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight groovy&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;let rect = CGRect(&lt;span class=&quot;string&quot;&gt;x:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;y:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;width:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;height:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;let (small, large) = rect.divided(&lt;span class=&quot;string&quot;&gt;atDistance:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;from:&lt;/span&gt; .minXEdge)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="日志" scheme="http://www.ghcoder.com/categories/%E6%97%A5%E5%BF%97/"/>
    
    
      <category term="Swift" scheme="http://www.ghcoder.com/tags/Swift/"/>
    
  </entry>
  
  <entry>
    <title>学习Masonry Autolayout布局实例</title>
    <link href="http://www.ghcoder.com/2017/09/07/20170907/"/>
    <id>http://www.ghcoder.com/2017/09/07/20170907/</id>
    <published>2017-09-07T03:33:12.000Z</published>
    <updated>2017-09-07T08:04:51.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="最近看到很多人都在转一篇博客，博客的链接为：-http-tutuge-me-2015-05-23-autolayout-example-with-masonry-其实文章的知识点不是很多，重点就是讲如何运用Masonry来实现一些东西，但是不得不承认这篇文章很使用，我在平时开发的时候，很多细节的地方，我也没有注意到，然后看了一下他的四篇博客，记录一下："><a href="#最近看到很多人都在转一篇博客，博客的链接为：-http-tutuge-me-2015-05-23-autolayout-example-with-masonry-其实文章的知识点不是很多，重点就是讲如何运用Masonry来实现一些东西，但是不得不承认这篇文章很使用，我在平时开发的时候，很多细节的地方，我也没有注意到，然后看了一下他的四篇博客，记录一下：" class="headerlink" title="最近看到很多人都在转一篇博客，博客的链接为：[http://tutuge.me/2015/05/23/autolayout-example-with-masonry/], 其实文章的知识点不是很多，重点就是讲如何运用Masonry来实现一些东西，但是不得不承认这篇文章很使用，我在平时开发的时候，很多细节的地方，我也没有注意到，然后看了一下他的四篇博客，记录一下："></a>最近看到很多人都在转一篇博客，博客的链接为：[<a href="http://tutuge.me/2015/05/23/autolayout-example-with-masonry/" target="_blank" rel="external">http://tutuge.me/2015/05/23/autolayout-example-with-masonry/</a>], 其实文章的知识点不是很多，重点就是讲如何运用Masonry来实现一些东西，但是不得不承认这篇文章很使用，我在平时开发的时候，很多细节的地方，我也没有注意到，然后看了一下他的四篇博客，记录一下：</h4><ul>
<li>第一部分重点讲的是两个属性: <code>Content Compression Resistance</code>、<code>Content Hugging</code>,这里我觉得作者的解释还是形象的：</li>
</ul>
<a id="more"></a>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">Content Compression Resistance = 不许挤我</div><div class="line">值越高，内容越不容易被压缩</div><div class="line">当内容放不下的时候，优先挤压那些优先级低的元素</div><div class="line"></div><div class="line">Content Hugging = 抱紧</div><div class="line">子元素设置的属性值越高，子元素越不会随着父视图的变化而变化</div><div class="line"></div><div class="line"><span class="comment">//设置label1的content hugging 为1000</span></div><div class="line">[_label1 setContentHuggingPriority:<span class="built_in">UILayoutPriorityRequired</span></div><div class="line">                               forAxis:<span class="built_in">UILayoutConstraintAxisHorizontal</span>];</div><div class="line"></div><div class="line"><span class="comment">//设置label1的content compression 为1000</span></div><div class="line">[_label1 setContentCompressionResistancePriority:<span class="built_in">UILayoutPriorityRequired</span></div><div class="line">                                             forAxis:<span class="built_in">UILayoutConstraintAxisHorizontal</span>];</div></pre></td></tr></table></figure>
<ul>
<li>居中显示四个元素:</li>
</ul>
<figure class="highlight gauss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">UIView __block *lastView = nil;</div><div class="line"> MASConstraint __block *widthConstraint = nil;</div><div class="line"> NSUInteger arrayCount = _imageViews.count;</div><div class="line"> [_imageViews enumerateObjectsUsingBlock:^(UIView *<span class="built_in">view</span>, NSUInteger idx, <span class="keyword">BOOL</span> *<span class="keyword">stop</span>) &#123;</div><div class="line">     [<span class="built_in">view</span> mas_makeConstraints:^(MASConstraintMaker *<span class="built_in">make</span>) &#123;</div><div class="line">         <span class="comment">//宽高固定</span></div><div class="line">         widthConstraint = <span class="built_in">make</span>.width.equalTo(<span class="comment">@(imageViewSize.width));</span></div><div class="line">         make.height.equalTo(@(imageViewSize.height));</div><div class="line">         <span class="comment">//左边约束</span></div><div class="line">         <span class="built_in">make</span>.left.equalTo(lastView ? lastView.mas_right : <span class="built_in">view</span>.superview.mas_left);</div><div class="line">         <span class="comment">//垂直中心对齐</span></div><div class="line">         <span class="built_in">make</span>.centerY.equalTo(<span class="built_in">view</span>.superview.mas_centerY);</div><div class="line">         <span class="comment">//设置最右边的imageView的右边与父view的最有对齐</span></div><div class="line">         <span class="keyword">if</span> (idx == arrayCount - <span class="number">1</span>) &#123;</div><div class="line">             <span class="built_in">make</span>.right.equalTo(<span class="built_in">view</span>.superview.mas_right);</div><div class="line">         &#125;</div><div class="line"></div><div class="line">         [_widthConstraints addObject:widthConstraint];</div><div class="line">         lastView = <span class="built_in">view</span>;</div><div class="line">     &#125;];</div><div class="line"> &#125;];</div><div class="line"></div><div class="line"> ...</div><div class="line"></div><div class="line"> <span class="comment">// 隐藏元素的时候，就可以直接来修改约束</span></div><div class="line"></div><div class="line">     <span class="keyword">if</span> (sender.on) &#123;</div><div class="line">     width.equalTo(<span class="comment">@(IMAGE_SIZE));</span></div><div class="line"> &#125; else &#123;</div><div class="line">     width.equalTo(@<span class="number">0</span>);</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<ul>
<li>a视图是b视图的倍数关系的：</li>
</ul>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">make</span><span class="selector-class">.width</span><span class="selector-class">.equalTo</span>(_<span class="selector-tag">containerView</span><span class="selector-class">.mas_width</span>)<span class="selector-class">.multipliedBy</span>(0<span class="selector-class">.5</span>);</div></pre></td></tr></table></figure>
<ul>
<li><p><code>UITableViewCell</code>高度的问题：</p>
</li>
<li><p>首先如果是在<code>iOS8以及以后的版本的话</code>，那就不需要考虑这个问题了，直接使用新特性</p>
</li>
</ul>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">_tableView.estimatedRowHeight = <span class="number">80.0</span>f;</div><div class="line"></div><div class="line">...</div><div class="line">- (<span class="built_in">CGFloat</span>)tableView:(<span class="built_in">UITableView</span> *)tableView heightForRowAtIndexPath:(<span class="built_in">NSIndexPath</span> *)indexPath &#123;</div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">#ifdef IOS_8_NEW_FEATURE_SELF_SIZING</span></div><div class="line">    <span class="comment">// iOS 8 的Self-sizing特性</span></div><div class="line">    <span class="keyword">return</span> <span class="built_in">UITableViewAutomaticDimension</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>如果是在旧版本<code>iOS7上的话</code>:</li>
</ul>
 <figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"> <span class="comment">// 根据当前数据，计算Cell的高度，注意+1</span></div><div class="line">dataEntity.cellHeight = [_templateCell.contentView systemLayoutSizeFittingSize:UILayoutFittingCompressedSize].<span class="built_in">height</span> + <span class="number">0.5</span>f;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">// 计算UILabel的preferredMaxLayoutWidth值，多行时必须设置这个值，否则系统无法决定Label的宽度</span></div><div class="line">    CGFloat preferredMaxWidth = [UIScreen mainScreen].bounds.<span class="built_in">size</span>.<span class="built_in">width</span> - <span class="number">44</span> - <span class="number">4</span> * <span class="number">3</span>; <span class="comment">// 44 = avatar宽度，4 * 3为padding</span></div><div class="line"></div><div class="line">    <span class="comment">// Content - 多行</span></div><div class="line">    _contentLabel.preferredMaxLayoutWidth = preferredMaxWidth; <span class="comment">// 多行时必须设置</span></div></pre></td></tr></table></figure>
<ul>
<li><p>为了避免在转屏的时候，Header、Bottom差一截的问题，这里我们头，尾视图不需要根据父视图来设定约束，而是根据<code>topLayoutGuide</code>、<code>bottomLayoutGuide</code>来设定:</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"> [<span class="name">_topView</span> mas_updateConstraints:^(<span class="name">MASConstraintMaker</span> *make) &#123;</div><div class="line">    // 直接利用其length属性，避免iOS、SDK版本升级后topLayoutGuide不再是UIView</div><div class="line">    make.top.equalTo(<span class="name">self.view.mas_top</span>).with.offset(<span class="name">self.topLayoutGuide.length</span>)<span class="comment">;</span></div><div class="line">&#125;]<span class="comment">;</span></div><div class="line"></div><div class="line">// 根据新的length值更新约束</div><div class="line">[<span class="name">_bottomView</span> mas_updateConstraints:^(<span class="name">MASConstraintMaker</span> *make) &#123;</div><div class="line">    // 直接利用其length属性，避免iOS、SDK版本升级后topLayoutGuide不再是UIView</div><div class="line">    make.bottom.equalTo(<span class="name">self.view.mas_bottom</span>).with.offset(<span class="name"><span class="builtin-name">-</span></span>(<span class="name">self.bottomLayoutGuide.length</span>))<span class="comment">;</span></div><div class="line">&#125;]<span class="comment">;</span></div></pre></td></tr></table></figure>
</li>
<li><p>自定义<code>baseline</code>的属性值：</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"> <span class="comment">// 返回自定义的baseline的view</span></div><div class="line">- (UIView *)viewForBaselineLayout &#123;</div><div class="line">    <span class="keyword">return</span> _baseView;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>可拉伸的<code>UITableView</code></p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"> _tableView.contentInset = <span class="built_in">UIEdgeInsetsMake</span>(ParallaxHeaderHeight, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</div><div class="line"></div><div class="line"> ...</div><div class="line"></div><div class="line"> - (<span class="keyword">void</span>)initView &#123;</div><div class="line">    _parallaxHeaderView = [<span class="built_in">UIImageView</span> new];</div><div class="line">    [<span class="keyword">self</span>.view insertSubview:_parallaxHeaderView belowSubview:_tableView];</div><div class="line">    _parallaxHeaderView.contentMode = <span class="built_in">UIViewContentModeScaleAspectFill</span>;</div><div class="line">    _parallaxHeaderView.image = [<span class="built_in">UIImage</span> imageNamed:<span class="string">@"parallax_header_back"</span>];</div><div class="line"></div><div class="line">    [_parallaxHeaderView mas_makeConstraints:^(MASConstraintMaker *make) &#123;</div><div class="line">        make.left.and.right.equalTo(<span class="keyword">self</span>.view);</div><div class="line">        make.top.equalTo(<span class="keyword">self</span>.mas_topLayoutGuideBottom);</div><div class="line">        _parallaxHeaderHeightConstraint = make.height.equalTo(@(ParallaxHeaderHeight));</div><div class="line">    &#125;];</div><div class="line"></div><div class="line">    <span class="comment">// Add KVO</span></div><div class="line">    [_tableView addObserver:<span class="keyword">self</span> forKeyPath:<span class="string">@"contentOffset"</span> options:<span class="built_in">NSKeyValueObservingOptionNew</span> context:<span class="literal">nil</span>];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li>KVO的回调</li>
</ul>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 方法2：利用KVO</span></div><div class="line">- (<span class="keyword">void</span>)observeValueForKeyPath:(<span class="built_in">NSString</span> *)keyPath ofObject:(<span class="keyword">id</span>)object</div><div class="line">                        change:(<span class="built_in">NSDictionary</span>&lt;<span class="built_in">NSString</span> *,<span class="keyword">id</span>&gt; *)change</div><div class="line">                       context:(<span class="keyword">void</span> *)context &#123;</div><div class="line">    <span class="keyword">if</span> ([keyPath isEqualToString:<span class="string">@"contentOffset"</span>]) &#123;</div><div class="line">        <span class="built_in">CGPoint</span> contentOffset = ((<span class="built_in">NSValue</span> *)change[<span class="built_in">NSKeyValueChangeNewKey</span>]).CGPointValue;</div><div class="line">        <span class="keyword">if</span> (contentOffset.y &lt; -ParallaxHeaderHeight) &#123;</div><div class="line">            _parallaxHeaderHeightConstraint.equalTo(@(-contentOffset.y));</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;最近看到很多人都在转一篇博客，博客的链接为：-http-tutuge-me-2015-05-23-autolayout-example-with-masonry-其实文章的知识点不是很多，重点就是讲如何运用Masonry来实现一些东西，但是不得不承认这篇文章很使用，我在平时开发的时候，很多细节的地方，我也没有注意到，然后看了一下他的四篇博客，记录一下：&quot;&gt;&lt;a href=&quot;#最近看到很多人都在转一篇博客，博客的链接为：-http-tutuge-me-2015-05-23-autolayout-example-with-masonry-其实文章的知识点不是很多，重点就是讲如何运用Masonry来实现一些东西，但是不得不承认这篇文章很使用，我在平时开发的时候，很多细节的地方，我也没有注意到，然后看了一下他的四篇博客，记录一下：&quot; class=&quot;headerlink&quot; title=&quot;最近看到很多人都在转一篇博客，博客的链接为：[http://tutuge.me/2015/05/23/autolayout-example-with-masonry/], 其实文章的知识点不是很多，重点就是讲如何运用Masonry来实现一些东西，但是不得不承认这篇文章很使用，我在平时开发的时候，很多细节的地方，我也没有注意到，然后看了一下他的四篇博客，记录一下：&quot;&gt;&lt;/a&gt;最近看到很多人都在转一篇博客，博客的链接为：[&lt;a href=&quot;http://tutuge.me/2015/05/23/autolayout-example-with-masonry/&quot;&gt;http://tutuge.me/2015/05/23/autolayout-example-with-masonry/&lt;/a&gt;], 其实文章的知识点不是很多，重点就是讲如何运用Masonry来实现一些东西，但是不得不承认这篇文章很使用，我在平时开发的时候，很多细节的地方，我也没有注意到，然后看了一下他的四篇博客，记录一下：&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;第一部分重点讲的是两个属性: &lt;code&gt;Content Compression Resistance&lt;/code&gt;、&lt;code&gt;Content Hugging&lt;/code&gt;,这里我觉得作者的解释还是形象的：&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="日志" scheme="http://www.ghcoder.com/categories/%E6%97%A5%E5%BF%97/"/>
    
    
      <category term="Object-C" scheme="http://www.ghcoder.com/tags/Object-C/"/>
    
  </entry>
  
  <entry>
    <title>学习Swift Tips</title>
    <link href="http://www.ghcoder.com/2017/09/01/20170901/"/>
    <id>http://www.ghcoder.com/2017/09/01/20170901/</id>
    <published>2017-09-01T06:11:12.000Z</published>
    <updated>2017-09-07T08:05:53.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="onvcate的《Swift开发者必备的Tips》之前刚出的时候，我就翻阅过，后来Swift的版本一直在改，我也就懒得去看了-现在Swift的ABI基本都稳定了，我在回顾复习一下这本书，记录一下要点："><a href="#onvcate的《Swift开发者必备的Tips》之前刚出的时候，我就翻阅过，后来Swift的版本一直在改，我也就懒得去看了-现在Swift的ABI基本都稳定了，我在回顾复习一下这本书，记录一下要点：" class="headerlink" title="onvcate的《Swift开发者必备的Tips》之前刚出的时候，我就翻阅过，后来Swift的版本一直在改，我也就懒得去看了,现在Swift的ABI基本都稳定了，我在回顾复习一下这本书，记录一下要点："></a>onvcate的《Swift开发者必备的Tips》之前刚出的时候，我就翻阅过，后来Swift的版本一直在改，我也就懒得去看了,现在Swift的ABI基本都稳定了，我在回顾复习一下这本书，记录一下要点：</h3><h4 id="协议中的read-only的属性值："><a href="#协议中的read-only的属性值：" class="headerlink" title="协议中的read-only的属性值："></a>协议中的read-only的属性值：</h4><ul>
<li>在protocol中给在方法前面添加<code>mutating</code>，可以修改<code>Struct</code>、<code>Enum</code>中的属性值, 在<code>Class</code>中本来就可以修改，所以可以直接忽视<code>mutating</code>。</li>
<li>首先我们来想一下，怎么在<code>protocol</code>中定义一个只读的属性值:</li>
</ul>
<a id="more"></a>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">protocol Vehicle &#123;</div><div class="line">    <span class="selector-tag">var</span> number: Int &#123; get &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">struct MyCar: Vehicle &#123;</div><div class="line">    <span class="selector-tag">var</span> number: Int</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">var</span> car = MyCar(number: <span class="number">3</span>)</div><div class="line">car<span class="selector-class">.number</span></div><div class="line"></div><div class="line">car<span class="selector-class">.number</span> = <span class="number">10</span></div><div class="line"></div><div class="line">car.number</div></pre></td></tr></table></figure>
<ul>
<li>当我写完这段代码的时候，我发现，我定义的只读属性<code>number</code>,但是这里为什么？我还可以设置呢？我google了一下：[<a href="https://stackoverflow.com/questions/31358518/read-only-properties-of-protocols-in-swift" target="_blank" rel="external">https://stackoverflow.com/questions/31358518/read-only-properties-of-protocols-in-swift</a>]</li>
</ul>
<blockquote>
<p>There’s no way to specify in a protocol that you must have a read-only property. Your protocol asks for a car.number property, and allows but does not require a setter.</p>
</blockquote>
<ul>
<li>这里我的理解就是，当你实例化一个<code>car</code>的对象，并且调用car.xxx某个属性值的时候，你并没有限制他的xxx属性值是只读的。所以我们只需要修改car的那行代码：</li>
</ul>
<figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="string">var </span><span class="string">car:</span> <span class="string">Vehicle </span>= <span class="string">MyCar(</span><span class="string">number:</span> 3)</div><div class="line"></div><div class="line"><span class="string">car.</span><span class="string">number</span></div><div class="line"></div><div class="line"><span class="string">car.</span><span class="string">number </span>= <span class="string">10 </span>// <span class="string">error:</span>  <span class="string">'number'</span> <span class="string">is </span>a <span class="built_in">get-only</span> <span class="string">property</span></div><div class="line"></div><div class="line"><span class="string">car.</span><span class="string">number</span></div></pre></td></tr></table></figure>
<hr>
<ul>
<li>那么我现在在协议中定义一个新的方法，这个方法做什么呢？就是修改协议里面的变量值，代码如下：</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">Vehicle</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> number: <span class="type">Int</span> &#123; <span class="keyword">get</span> &#125;</div><div class="line"></div><div class="line">    <span class="keyword">mutating</span> <span class="function"><span class="keyword">func</span> <span class="title">changeNumber</span><span class="params">()</span></span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">MyCar</span>: <span class="title">Vehicle</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">var</span> number: <span class="type">Int</span></div><div class="line"></div><div class="line">    <span class="keyword">mutating</span> <span class="function"><span class="keyword">func</span> <span class="title">changeNumber</span><span class="params">()</span></span> &#123;</div><div class="line">        number = <span class="number">99</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> car: <span class="type">Vehicle</span> = <span class="type">MyCar</span>(number: <span class="number">12</span>)</div><div class="line"></div><div class="line">car.number</div><div class="line"></div><div class="line">car.changeNumber()</div><div class="line"></div><div class="line">car.number</div></pre></td></tr></table></figure>
<ul>
<li>惊奇的发现，居然可以修改这个只读的属性值了？？我又懵逼了。查看了官方的<code>Demo</code>[<a href="https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/Protocols.html" target="_blank" rel="external">https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/Protocols.html</a>]</li>
<li>这里的属性值我只是简单的定义了下，没有通过computed value来定义值，按照官方的demo，我们直接修改代码如下：</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">Vehicle</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> number: <span class="type">Int</span> &#123; <span class="keyword">get</span> &#125;</div><div class="line"></div><div class="line">    <span class="keyword">mutating</span> <span class="function"><span class="keyword">func</span> <span class="title">changeNumber</span><span class="params">()</span></span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">MyCar</span>: <span class="title">Vehicle</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">var</span> customInt: <span class="type">Int</span></div><div class="line"></div><div class="line">    <span class="keyword">var</span> number: <span class="type">Int</span> &#123;</div><div class="line">        <span class="keyword">get</span> &#123;</div><div class="line">            <span class="keyword">return</span> customInt</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">mutating</span> <span class="function"><span class="keyword">func</span> <span class="title">changeNumber</span><span class="params">()</span></span> &#123;</div><div class="line"><span class="comment">//        number = 99</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> car: <span class="type">Vehicle</span> = <span class="type">MyCar</span>(customInt: <span class="number">12</span>)</div><div class="line"></div><div class="line">car.number</div><div class="line"></div><div class="line">car.changeNumber()</div><div class="line"></div><div class="line">car.number</div></pre></td></tr></table></figure>
<ul>
<li>这样一旦我调用ChangeNumber的方法的时候，你就会发现报错了。</li>
</ul>
<hr>
<ul>
<li>下面说了<code>for in</code>的使用，大家应该都知道，<code>for in</code>的循环，我们都可以使用在集合类型的上面，但是在swift中我其实是可以将<code>for in</code>用在我们自定义的类型上面。在Apple的官方文档上也给了一个说明：[<a href="https://developer.apple.com/documentation/swift/iteratorprotocol" target="_blank" rel="external">https://developer.apple.com/documentation/swift/iteratorprotocol</a>]</li>
<li>首先能使用<code>for in</code>来枚举的对象，必须遵循<code>Sequence</code>,看里面的源码会发现里面除了很多的方法就只剩两个属性值的设置：</li>
</ul>
<figure class="highlight rust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/// A type that provides the sequence's iteration interface and</span></div><div class="line"> <span class="comment">/// encapsulates its iteration state.</span></div><div class="line"> associatedtype <span class="built_in">Iterator</span> : IteratorProtocol</div><div class="line"></div><div class="line"> <span class="comment">/// A type that represents a subsequence of some of the sequence's elements.</span></div><div class="line"> associatedtype SubSequence</div><div class="line"></div><div class="line">     <span class="comment">/// Returns an iterator over the elements of this sequence.</span></div><div class="line"> public func makeIterator() -&gt; <span class="keyword">Self</span>.<span class="built_in">Iterator</span></div></pre></td></tr></table></figure>
<ul>
<li>按照官方的意思，我们这里其他不需要去实现，这里就实现了一个<code>public func makeIterator() -&gt; Self.Iterator</code>这个方法，可以看出这个方法返回的是一个迭代器，而这个迭代器必须要实现<code>IteratorProtocol</code>的协议：</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">protocol</span> <span class="title">IteratorProtocol</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/// The type of element traversed by the iterator.</span></div><div class="line">    associatedtype <span class="type">Element</span></div><div class="line"></div><div class="line">    <span class="comment">/// Advances to the next element and returns it, or `nil` if no next element</span></div><div class="line">    <span class="comment">/// exists.</span></div><div class="line">    <span class="comment">///</span></div><div class="line">    <span class="comment">/// Repeatedly calling this method returns, in order, all the elements of the</span></div><div class="line">    <span class="comment">/// underlying sequence. As soon as the sequence has run out of elements, all</span></div><div class="line">    <span class="comment">/// subsequent calls return `nil`.</span></div><div class="line">    <span class="comment">///</span></div><div class="line">    <span class="comment">/// You must not call this method if any other copy of this iterator has been</span></div><div class="line">    <span class="comment">/// advanced with a call to its `next()` method.</span></div><div class="line">    <span class="comment">///</span></div><div class="line">    <span class="comment">/// The following example shows how an iterator can be used explicitly to</span></div><div class="line">    <span class="comment">/// emulate a `for`-`in` loop. First, retrieve a sequence's iterator, and</span></div><div class="line">    <span class="comment">/// then call the iterator's `next()` method until it returns `nil`.</span></div><div class="line">    <span class="comment">///</span></div><div class="line">    <span class="comment">///     let numbers = [2, 3, 5, 7]</span></div><div class="line">    <span class="comment">///     var numbersIterator = numbers.makeIterator()</span></div><div class="line">    <span class="comment">///</span></div><div class="line">    <span class="comment">///     while let num = numbersIterator.next() &#123;</span></div><div class="line">    <span class="comment">///         print(num)</span></div><div class="line">    <span class="comment">///     &#125;</span></div><div class="line">    <span class="comment">///     // Prints "2"</span></div><div class="line">    <span class="comment">///     // Prints "3"</span></div><div class="line">    <span class="comment">///     // Prints "5"</span></div><div class="line">    <span class="comment">///     // Prints "7"</span></div><div class="line">    <span class="comment">///</span></div><div class="line">    <span class="comment">/// - Returns: The next element in the underlying sequence, if a next element</span></div><div class="line">    <span class="comment">///   exists; otherwise, `nil`.</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">mutating</span> <span class="function"><span class="keyword">func</span> <span class="title">next</span><span class="params">()</span></span> -&gt; <span class="type">Self</span>.<span class="type">Element</span>?</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>上面的注释也说明了一些，这里其实就是一个<code>迭代器模式</code>，不断的调用next()的方法，知道返回nil，官方的例子上面没有用到<code>Element</code>,就只是将返回的类型定义为<code>Int?</code>,只是用了<code>next</code>的方法：</li>
<li>并且之前我们也看到了<code>CountdownIterator</code>的实例化方法，将自己这个结构体传入了进去,所以这里就定义了一个内部变量<code>countdown</code>:</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Coundown</span>: <span class="title">Sequence</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">let</span> start: <span class="type">Int</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">makeIterator</span><span class="params">()</span></span> -&gt; <span class="type">CoundownIterator</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="type">CoundownIterator</span>(<span class="keyword">self</span>)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">CoundownIterator</span>: <span class="title">IteratorProtocol</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">let</span> countdown: <span class="type">Coundown</span></div><div class="line">    <span class="keyword">var</span> times = <span class="number">0</span></div><div class="line"></div><div class="line">    <span class="keyword">init</span>(<span class="number">_</span> countdown: <span class="type">Coundown</span>) &#123;</div><div class="line">        <span class="keyword">self</span>.countdown = countdown</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">mutating</span> <span class="function"><span class="keyword">func</span> <span class="title">next</span><span class="params">()</span></span> -&gt; <span class="type">Int</span>? &#123;</div><div class="line"></div><div class="line">        <span class="keyword">let</span> nextNumber = countdown.start - times</div><div class="line">        <span class="keyword">guard</span> nextNumber &gt; <span class="number">0</span> <span class="keyword">else</span> &#123; <span class="keyword">return</span> <span class="literal">nil</span> &#125;</div><div class="line"></div><div class="line">        times += <span class="number">1</span></div><div class="line">        <span class="keyword">return</span> nextNumber</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> threeTwoOne = <span class="type">Coundown</span>(start: <span class="number">3</span>)</div><div class="line"><span class="keyword">for</span> <span class="built_in">count</span> <span class="keyword">in</span> threeTwoOne &#123;</div><div class="line">    <span class="built_in">print</span>(<span class="string">"<span class="subst">\(<span class="built_in">count</span>)</span>..."</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>上面的例子还是通俗易懂的，但是唯一的缺点就是有些属性没用，可能他觉得没必要吧，看一下onevcate的例子：</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> UIKit</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ReverseSequence</span>&lt;<span class="title">T</span>&gt;: <span class="title">Sequence</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">var</span> array: [<span class="type">T</span>]</div><div class="line"></div><div class="line">    <span class="keyword">init</span>(array: [<span class="type">T</span>]) &#123;</div><div class="line">        <span class="keyword">self</span>.array = array</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">typealias</span> <span class="type">Iterator</span> = <span class="type">ReverseItrator</span>&lt;<span class="type">T</span>&gt;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">makeIterator</span><span class="params">()</span></span> -&gt; <span class="type">ReverseItrator</span>&lt;<span class="type">T</span>&gt; &#123;</div><div class="line">        <span class="keyword">return</span> <span class="type">ReverseItrator</span>(array: <span class="keyword">self</span>.array)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ReverseItrator</span>&lt;<span class="title">T</span>&gt;: <span class="title">IteratorProtocol</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">typealias</span> <span class="type">Element</span> = <span class="type">T</span></div><div class="line"></div><div class="line">    <span class="keyword">var</span> array: [<span class="type">Element</span>]</div><div class="line">    <span class="keyword">var</span> currentIndex = <span class="number">0</span></div><div class="line"></div><div class="line">    <span class="keyword">init</span>(array: [<span class="type">T</span>]) &#123;</div><div class="line">        <span class="keyword">self</span>.array = array</div><div class="line">        currentIndex = array.<span class="built_in">count</span> - <span class="number">1</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">mutating</span> <span class="function"><span class="keyword">func</span> <span class="title">next</span><span class="params">()</span></span> -&gt; <span class="type">T</span>? &#123;</div><div class="line">        <span class="keyword">if</span> currentIndex &lt; <span class="number">0</span> &#123;</div><div class="line">            <span class="keyword">return</span> <span class="literal">nil</span></div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">let</span> element = <span class="keyword">self</span>.array[currentIndex]</div><div class="line">            currentIndex -= <span class="number">1</span></div><div class="line">            <span class="keyword">return</span> element</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> arr = [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</div><div class="line"></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="type">ReverseSequence</span>(array: arr) &#123;</div><div class="line">    <span class="built_in">print</span>(<span class="string">"Index: <span class="subst">\(i)</span> is <span class="subst">\(arr[i])</span>"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>其实这里会发现<code>typealias Iterator = ReverseItrator&lt;T&gt;</code>, <code>typealias Element = T</code>写了这些之后，相应协议中的返回值就是自动生成，但是如果你想代码简洁，其实可以忽略这些属性值，直接设置也是可以的。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;onvcate的《Swift开发者必备的Tips》之前刚出的时候，我就翻阅过，后来Swift的版本一直在改，我也就懒得去看了-现在Swift的ABI基本都稳定了，我在回顾复习一下这本书，记录一下要点：&quot;&gt;&lt;a href=&quot;#onvcate的《Swift开发者必备的Tips》之前刚出的时候，我就翻阅过，后来Swift的版本一直在改，我也就懒得去看了-现在Swift的ABI基本都稳定了，我在回顾复习一下这本书，记录一下要点：&quot; class=&quot;headerlink&quot; title=&quot;onvcate的《Swift开发者必备的Tips》之前刚出的时候，我就翻阅过，后来Swift的版本一直在改，我也就懒得去看了,现在Swift的ABI基本都稳定了，我在回顾复习一下这本书，记录一下要点：&quot;&gt;&lt;/a&gt;onvcate的《Swift开发者必备的Tips》之前刚出的时候，我就翻阅过，后来Swift的版本一直在改，我也就懒得去看了,现在Swift的ABI基本都稳定了，我在回顾复习一下这本书，记录一下要点：&lt;/h3&gt;&lt;h4 id=&quot;协议中的read-only的属性值：&quot;&gt;&lt;a href=&quot;#协议中的read-only的属性值：&quot; class=&quot;headerlink&quot; title=&quot;协议中的read-only的属性值：&quot;&gt;&lt;/a&gt;协议中的read-only的属性值：&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;在protocol中给在方法前面添加&lt;code&gt;mutating&lt;/code&gt;，可以修改&lt;code&gt;Struct&lt;/code&gt;、&lt;code&gt;Enum&lt;/code&gt;中的属性值, 在&lt;code&gt;Class&lt;/code&gt;中本来就可以修改，所以可以直接忽视&lt;code&gt;mutating&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;首先我们来想一下，怎么在&lt;code&gt;protocol&lt;/code&gt;中定义一个只读的属性值:&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="日志" scheme="http://www.ghcoder.com/categories/%E6%97%A5%E5%BF%97/"/>
    
    
      <category term="Swift" scheme="http://www.ghcoder.com/tags/Swift/"/>
    
  </entry>
  
  <entry>
    <title>学习YYText(一)</title>
    <link href="http://www.ghcoder.com/2017/08/30/20170830/"/>
    <id>http://www.ghcoder.com/2017/08/30/20170830/</id>
    <published>2017-08-30T08:11:12.000Z</published>
    <updated>2017-09-01T10:05:33.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="YY系列的很多代码都写的很棒，最近很多地方都用到富文本，所以决定用YYText-用之前看了一下里面的代码，觉得还是有很多地方要学习的。代码量非常大，所以可能要分几篇博客分别去写，简单的逻辑就不写了。"><a href="#YY系列的很多代码都写的很棒，最近很多地方都用到富文本，所以决定用YYText-用之前看了一下里面的代码，觉得还是有很多地方要学习的。代码量非常大，所以可能要分几篇博客分别去写，简单的逻辑就不写了。" class="headerlink" title="YY系列的很多代码都写的很棒，最近很多地方都用到富文本，所以决定用YYText,用之前看了一下里面的代码，觉得还是有很多地方要学习的。代码量非常大，所以可能要分几篇博客分别去写，简单的逻辑就不写了。"></a>YY系列的很多代码都写的很棒，最近很多地方都用到富文本，所以决定用<code>YYText</code>,用之前看了一下里面的代码，觉得还是有很多地方要学习的。代码量非常大，所以可能要分几篇博客分别去写，简单的逻辑就不写了。</h4><ul>
<li>看<code>demo</code>里面，第一行的代码，关于的测试部分就写的很简单，但是深究下去，还是有很多值得学习的地方的：</li>
</ul>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 这里的self只是一个传入的ViewController的实例</span></div><div class="line">[YYTextExampleHelper <span class="string">addDebugOptionToViewController:</span>self];</div></pre></td></tr></table></figure>
<a id="more"></a>
<ul>
<li>这里传入的vc只是用来设置navigationItem的，这里是设置的一个UISwicher的UI控件，这里存在一个方法：</li>
</ul>
<figure class="highlight clojure"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[switcher addBlockForControlEvents:UIControlEventValueChanged block:^(<span class="name">UISwitch</span> *sender) &#123;</div><div class="line">      [self setDebug:sender.isOn]<span class="comment">;</span></div><div class="line">  &#125;]<span class="comment">;</span></div></pre></td></tr></table></figure>
<ul>
<li>仔细一看就会发现问题，UISwich的实例变量可以直接调用<code>addBlockForControlEvents</code>的方法，传入了<code>Event</code>和<code>block</code>:</li>
</ul>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">UIControl</span> (<span class="title">YYAdd</span>)</span></div><div class="line"></div><div class="line">...</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)addBlockForControlEvents:(<span class="built_in">UIControlEvents</span>)controlEvents</div><div class="line">                           block:(<span class="keyword">void</span> (^)(<span class="keyword">id</span> sender))block &#123;</div><div class="line">    _YYUIControlBlockTarget *target = [[_YYUIControlBlockTarget alloc]</div><div class="line">                                       initWithBlock:block events:controlEvents];</div><div class="line">    [<span class="keyword">self</span> addTarget:target action:<span class="keyword">@selector</span>(invoke:) forControlEvents:controlEvents];</div><div class="line">    <span class="built_in">NSMutableArray</span> *targets = [<span class="keyword">self</span> _yy_allUIControlBlockTargets];</div><div class="line">    [targets addObject:target];</div><div class="line">&#125;</div><div class="line"></div><div class="line">...</div><div class="line"></div><div class="line">- (<span class="built_in">NSMutableArray</span> *)_yy_allUIControlBlockTargets &#123;</div><div class="line">    <span class="built_in">NSMutableArray</span> *targets = objc_getAssociatedObject(<span class="keyword">self</span>, &amp;block_key);</div><div class="line">    <span class="keyword">if</span> (!targets) &#123;</div><div class="line">        targets = [<span class="built_in">NSMutableArray</span> array];</div><div class="line">        objc_setAssociatedObject(<span class="keyword">self</span>, &amp;block_key, targets, OBJC_ASSOCIATION_RETAIN_NONATOMIC);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> targets;</div><div class="line">&#125;</div><div class="line"></div><div class="line">...</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">_YYUIControlBlockTarget</span> : <span class="title">NSObject</span></span></div><div class="line"></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">copy</span>) <span class="keyword">void</span> (^block)(<span class="keyword">id</span> sender);</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) <span class="built_in">UIControlEvents</span> events;</div><div class="line"></div><div class="line">- (<span class="keyword">id</span>)initWithBlock:(<span class="keyword">void</span> (^)(<span class="keyword">id</span> sender))block events:(<span class="built_in">UIControlEvents</span>)events;</div><div class="line">- (<span class="keyword">void</span>)invoke:(<span class="keyword">id</span>)sender;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">_YYUIControlBlockTarget</span></span></div><div class="line"></div><div class="line">- (<span class="keyword">id</span>)initWithBlock:(<span class="keyword">void</span> (^)(<span class="keyword">id</span> sender))block events:(<span class="built_in">UIControlEvents</span>)events &#123;</div><div class="line">    <span class="keyword">self</span> = [<span class="keyword">super</span> init];</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>) &#123;</div><div class="line">        _block = [block <span class="keyword">copy</span>];</div><div class="line">        _events = events;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)invoke:(<span class="keyword">id</span>)sender &#123;</div><div class="line">    <span class="keyword">if</span> (_block) _block(sender);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line">...</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<ul>
<li>这里点到源码里面可以看到，YY作者写了一个<code>UIControl</code>的category，来作了拓展，提供了<code>addBlockForControlEvents</code>这个方法，这也就解释了上面可以调用这个方法。</li>
<li>发现作者拿到<code>UIControlEvents</code>和<code>block</code>，直接生成了一个<code>_YYUIControlBlockTarget</code>实例。发现生成的这个实例，也做什么特别的事情，就是把block copy保存下来，events也保存下来。</li>
<li>然后它还是调用了系统的<code>addTarget:action:forControlEvents</code>，直接调用<code>invoke:</code>的方法，其实就是调用了我传入进来的<code>block</code>。</li>
<li>下面可以看到作者通过<code>runtime</code>给这个category生成了一个<code>NSMutableArry</code>的属性值，并且把我的target对象保存起来。</li>
<li>其实通过看源码就可以发现作者这么写这个category，就做了两件事情，第一可以用block, 第二可以方便直接remove掉相关对象上事件。</li>
</ul>
<hr>
<ul>
<li>在事件成功触发的时候，就会调用下面的方法：</li>
</ul>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">+ (<span class="keyword">void</span>)<span class="string">setDebug:</span>(BOOL)debug &#123;</div><div class="line">    YYTextDebugOption *debugOptions = [YYTextDebugOption <span class="keyword">new</span>];</div><div class="line">    <span class="keyword">if</span> (debug) &#123;</div><div class="line">        debugOptions.baselineColor = [UIColor redColor];</div><div class="line">        debugOptions.CTFrameBorderColor = [UIColor redColor];</div><div class="line">        debugOptions.CTLineFillColor = [UIColor <span class="string">colorWithRed:</span><span class="number">0.000</span> <span class="string">green:</span><span class="number">0.463</span> <span class="string">blue:</span><span class="number">1.000</span> <span class="string">alpha:</span><span class="number">0.180</span>];</div><div class="line">        debugOptions.CGGlyphBorderColor = [UIColor <span class="string">colorWithRed:</span><span class="number">1.000</span> <span class="string">green:</span><span class="number">0.524</span> <span class="string">blue:</span><span class="number">0.000</span> <span class="string">alpha:</span><span class="number">0.200</span>];</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        [debugOptions clear];</div><div class="line">    &#125;</div><div class="line">    [YYTextDebugOption <span class="string">setSharedDebugOption:</span>debugOptions];</div><div class="line">    DebugEnabled = debug;</div><div class="line">&#125;</div><div class="line"></div><div class="line">...</div><div class="line"></div><div class="line"><span class="meta">@interface</span> <span class="string">YYTextDebugOption :</span> NSObject &lt;NSCopying&gt;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> Set a debug option as shared debug option.</div><div class="line"> This method must be called on main thread.</div><div class="line"></div><div class="line"> <span class="doctag">@discussion</span> When call this method, the new option will set to all debug target</div><div class="line"> which is added by `addDebugTarget:`.</div><div class="line"></div><div class="line"> <span class="doctag">@param</span> option  A new debug option (nil is valid).</div><div class="line"> */</div><div class="line">+ (<span class="keyword">void</span>)<span class="string">setSharedDebugOption:</span>(nullable YYTextDebugOption *)option;</div><div class="line"></div><div class="line">...</div></pre></td></tr></table></figure>
<ul>
<li>在这个类方法中主要涉及到的一个对象为<code>YYTextDebugOption</code>,这个对象只是一个继承自NSObject的对象，这里没毛病。</li>
<li><p>生成实例对象之后，我们需要设置不同的值，然后还是通过自己的类方法，将上面的生成的这个对象通过参数出入进去。</p>
</li>
<li><p>在<code>YYTextDebugOption</code>里面：</p>
</li>
</ul>
<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line">+ (void)setSharedDebugOption:(YYTextDebugOption *)option &#123;</div><div class="line">    NSAssert([NSThread isMainThread], @<span class="string">"This method must be called on the main thread"</span>)<span class="comment">;</span></div><div class="line">    _setSharedDebugOption(option)<span class="comment">;</span></div><div class="line">&#125;</div><div class="line">...</div><div class="line"></div><div class="line">static void _setSharedDebugOption(YYTextDebugOption *option) &#123;</div><div class="line">    _initSharedDebug()<span class="comment">;</span></div><div class="line">    pthread_mutex_lock(&amp;_sharedDebugLock)<span class="comment">;</span></div><div class="line">    _sharedDebugOption = option.copy<span class="comment">;</span></div><div class="line">    CFSetApplyFunction(_sharedDebugTargets, _sharedDebugSetFunction, NULL)<span class="comment">;</span></div><div class="line">    pthread_mutex_unlock(&amp;_sharedDebugLock)<span class="comment">;</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">....</div><div class="line"></div><div class="line">static void _initSharedDebug() &#123;</div><div class="line">    static <span class="keyword">dispatch_once_t </span>onceToken<span class="comment">;</span></div><div class="line">    <span class="keyword">dispatch_once(&amp;onceToken, </span>^&#123;</div><div class="line">        pthread_mutex_init(&amp;_sharedDebugLock, NULL)<span class="comment">;</span></div><div class="line">        CFSetCallBacks callbacks = kCFTypeSetCallBacks<span class="comment">;</span></div><div class="line">        callbacks.retain = _sharedDebugSetRetain<span class="comment">;</span></div><div class="line">        callbacks.release = _sharedDebugSetRelease<span class="comment">;</span></div><div class="line">        _sharedDebugTargets = CFSetCreateMutable(CFAllocatorGetDefault(), <span class="number">0</span>, &amp;callbacks)<span class="comment">;</span></div><div class="line">    &#125;)<span class="comment">;</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>这里首页确保了设置的的时候，必须是要主线程去调用，其实这里这样写，和后面通过锁来存储对象效果是一致的。</li>
<li>这里发现作者都是些的c函数，这里我不太确定，为什么不用oc呢？</li>
<li>这里作者写了一个单例，并且初始化了<code>pthread_mutex_init(&amp;_sharedDebugLock, NULL);</code>锁的值</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">//1：pthread_mutex_init(pthread_mutex_t * mutex,const pthread_mutexattr_t *attr);</span></div><div class="line">初始化锁变量mutex。attr为锁属性，<span class="literal">NULL</span>值为默认属性。</div><div class="line"><span class="comment">//2：pthread_mutex_lock(pthread_mutex_t *mutex);加锁</span></div><div class="line"><span class="comment">//3：pthread_mutex_tylock(pthread_mutex_t *mutex);加锁，但是与2不一样的是当锁已经在使用的时候，返回为EBUSY，而不是挂起等待。</span></div><div class="line"><span class="comment">//4：pthread_mutex_unlock(pthread_mutex_t *mutex);释放锁</span></div><div class="line"><span class="comment">//5：pthread_mutex_destroy(pthread_mutex_t *mutex);使用完后释放</span></div><div class="line"></div><div class="line">...</div><div class="line">__OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_2_0)</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_mutex_init</span><span class="params">(<span class="keyword">pthread_mutex_t</span> * __restrict,</span></span></div><div class="line">		<span class="keyword">const</span> <span class="keyword">pthread_mutexattr_t</span> * _Nullable __restrict);</div><div class="line">...</div></pre></td></tr></table></figure>
<ul>
<li>看代码可以发现，这里需要传入两个值，第一个值是用来表示这个锁的标记，同样第二只默认为Null</li>
</ul>
<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">CFSetCallBacks callbacks = kCFTypeSetCallBacks<span class="comment">;</span></div><div class="line">   callbacks.retain = _sharedDebugSetRetain<span class="comment">;</span></div><div class="line">   callbacks.release = _sharedDebugSetRelease<span class="comment">;</span></div><div class="line">   _sharedDebugTargets = CFSetCreateMutable(CFAllocatorGetDefault(), <span class="number">0</span>, &amp;callbacks)<span class="comment">;</span></div></pre></td></tr></table></figure>
<ul>
<li>这里的几行代码，其实是通过c的方法是，来生成一个容器属性，类似<code>NSArray,NSDictionary,NSSet</code>,通过源码就可以发现其实就是一个结构体，结构体里面定义的属性值，就是我们需要定义这个容器变量的值，可以猜出来，<code>release</code>/<code>retain</code>是设置对象的内存管理的，<code>equal</code>/<code>hash</code>是对象存储的方式，当然啦，通过c生成的函数，我们可以转化为<code>Foundation</code>的属性值,可以通过类似这样的方式来生成<code>return (NSMutableSet *)CFBridgingRelease(CFSetCreateMutable(0, 0, &amp;callbacks));</code></li>
</ul>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> &#123;</div><div class="line">    <span class="built_in">CFIndex</span>				version;</div><div class="line">    <span class="built_in">CFSetRetainCallBack</span>			<span class="keyword">retain</span>;</div><div class="line">    <span class="built_in">CFSetReleaseCallBack</span>		release;</div><div class="line">    <span class="built_in">CFSetCopyDescriptionCallBack</span>	copyDescription;</div><div class="line">    <span class="built_in">CFSetEqualCallBack</span>			equal;</div><div class="line">    <span class="built_in">CFSetHashCallBack</span>			hash;</div><div class="line">&#125; <span class="built_in">CFSetCallBacks</span>;</div></pre></td></tr></table></figure>
<ul>
<li>通过代码可以看出来，其实作者就是想保证，始终只有一个<code>YYTextDebugOption *option</code>的存在。通过获取这个<code>option</code>的值，就知道你的设置了。</li>
</ul>
<hr>
<ul>
<li>关键设置<code>Text</code>的相关代码：</li>
</ul>
<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">NSMutableAttributedString *text = [NSMutableAttributedString new]<span class="comment">;</span></div><div class="line"></div><div class="line">   &#123;</div><div class="line">       NSMutableAttributedString *one = [[NSMutableAttributedString alloc] initWithString:@<span class="string">"Shadow"</span>]<span class="comment">;</span></div><div class="line">       one.yy_font = [UIFont <span class="keyword">boldSystemFontOfSize:30];</span></div><div class="line">       one.yy_color = [UIColor whiteColor]<span class="comment">;</span></div><div class="line">       YYTextShadow *<span class="keyword">shadow </span>= [YYTextShadow new]<span class="comment">;</span></div><div class="line">       <span class="keyword">shadow.color </span>= [UIColor colorWithWhite:<span class="number">0</span>.<span class="number">000</span> alpha:<span class="number">0</span>.<span class="number">490</span>]<span class="comment">;</span></div><div class="line">       <span class="keyword">shadow.offset </span>= CGSizeMake(<span class="number">0</span>, <span class="number">1</span>)<span class="comment">;</span></div><div class="line">       <span class="keyword">shadow.radius </span>= <span class="number">5</span><span class="comment">;</span></div><div class="line">       one.yy_textShadow = <span class="keyword">shadow;</span></div><div class="line">       [text appendAttributedString:one]<span class="comment">;</span></div><div class="line">       [text appendAttributedString:[self padding]]<span class="comment">;</span></div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<ul>
<li>这里设置<code>yy_font</code>、<code>yy_color</code>的时候，用法和我们之前设置label的属性设置一模一样，这里点进去可以发现，这里是因为作者写了一个<code>NSMutableAttributedString</code>的一个<code>category</code>，和之前的做法一样,在setter值的时候，作者覆写了setter的值方法，统一都调用了一个同一个的方法：</li>
</ul>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line">- (<span class="keyword">void</span>)<span class="string">yy_setFont:</span>(UIFont *)font <span class="string">range:</span>(NSRange)range &#123;</div><div class="line">    <span class="comment">/*</span></div><div class="line">     In iOS7 and later, UIFont is toll-free bridged to CTFontRef,</div><div class="line">     although Apple does not mention it in documentation.</div><div class="line"></div><div class="line">     In iOS6, UIFont is a wrapper for CTFontRef, so CoreText can alse use UIfont,</div><div class="line">     but UILabel/UITextView cannot use CTFontRef.</div><div class="line"></div><div class="line">     We use UIFont for both CoreText and UIKit.</div><div class="line">     */</div><div class="line">    [self <span class="string">yy_setAttribute:</span>NSFontAttributeName <span class="string">value:</span>font <span class="string">range:</span>range];</div><div class="line">&#125;</div><div class="line"></div><div class="line">...</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)<span class="string">yy_setColor:</span>(UIColor *)color <span class="string">range:</span>(NSRange)range &#123;</div><div class="line">    [self <span class="string">yy_setAttribute:</span>(id)kCTForegroundColorAttributeName <span class="string">value:</span>(id)color.CGColor <span class="string">range:</span>range];</div><div class="line">    [self <span class="string">yy_setAttribute:</span>NSForegroundColorAttributeName <span class="string">value:</span>color <span class="string">range:</span>range];</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">...</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)<span class="string">yy_setAttribute:</span>(NSString *)name <span class="string">value:</span>(id)value <span class="string">range:</span>(NSRange)range &#123;</div><div class="line">    <span class="keyword">if</span> (!name || [NSNull <span class="string">isEqual:</span>name]) <span class="keyword">return</span>;</div><div class="line">    <span class="keyword">if</span> (value &amp;&amp; ![NSNull <span class="string">isEqual:</span>value]) [self <span class="string">addAttribute:</span>name <span class="string">value:</span>value <span class="string">range:</span>range];</div><div class="line">    <span class="keyword">else</span> [self <span class="string">removeAttribute:</span>name <span class="string">range:</span>range];</div><div class="line">&#125;</div><div class="line"></div><div class="line">...</div></pre></td></tr></table></figure>
<ul>
<li>这里其实已经很明显了，所有的设置属性的时候，都是调用的这个方法，如果存在这个值，就设置上去，没有，就去除掉。</li>
<li>这里在设置颜色的时候，连着设置了两个属性，我查了一下，但是网上都没有说的很清楚，应该是<code>就是为了某些版本的兼容问题的吧，看一下matt大神的解释吧：</code> [<a href="https://github.com/TTTAttributedLabel/TTTAttributedLabel/pull/416" target="_blank" rel="external">https://github.com/TTTAttributedLabel/TTTAttributedLabel/pull/416</a>]</li>
</ul>
<blockquote>
<p>Unfortunately, this patch appears to actually degrade support for iOS 8, as NS text attributes do not seem to apply in Core Text rendering for whatever reason.</p>
<p>As inconvenient as they are, everything works in iOS 4 – 8 if kCT. Am I missing something? This feels like more of a “if it ain’t broke, don’t fix it” type of situation…</p>
</blockquote>
<ul>
<li>关键这里的shadow让人看的很懵逼，因为看代码就可以知道，作者这里自定义了一个继承了<code>NSObject</code>的<code>Shadow</code>对象<code>YYTextShadow *shadow = [YYTextShadow new];</code>,同样它和设置font，color一样，都是最终调用到了<code>- (void)yy_setAttribute:(NSString *)name value:(id)value range:(NSRange)range {}</code>,<strong>前面我好理解，他都是设置的系统的设置，所以你不管设置font，color其实最终都是走到系统的设置上去了，但是这里设置的对象，key都是自定义的，这里系统是怎么认识的呢？开始看到这里的时候，我就有点不是很理解了，但是当我看到下面的时候我就明白了。</strong></li>
</ul>
<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">YYLabel *<span class="keyword">label</span><span class="bash"> = [YYLabel new];</span></div><div class="line"> <span class="keyword">label</span>.<span class="bash">attributedText = text;</span></div><div class="line"> <span class="keyword">label</span>.<span class="bash">width = self.view.width;</span></div><div class="line"> <span class="keyword">label</span>.<span class="bash">height = self.view.height - (kiOS7Later ? 64 : 44);</span></div><div class="line"> <span class="keyword">label</span>.<span class="bash">top = (kiOS7Later ? 64 : 0);</span></div><div class="line"> <span class="keyword">label</span>.<span class="bash">textAlignment = NSTextAlignmentCenter;</span></div><div class="line"> <span class="keyword">label</span>.<span class="bash">textVerticalAlignment = YYTextVerticalAlignmentCenter;</span></div><div class="line"> <span class="keyword">label</span>.<span class="bash">numberOfLines = 0;</span></div><div class="line"> <span class="keyword">label</span>.<span class="bash">backgroundColor = [UIColor colorWithWhite:0.933 alpha:1.000];</span></div><div class="line"> [self.view addSubview:<span class="keyword">label</span><span class="bash">];</span></div></pre></td></tr></table></figure>
<ul>
<li>首先这里定义一个新的属性值，叫做<code>YYLabel</code>,点进去可以发现，这个<code>YYLabel</code>的对象继承的是<code>UIView</code>的,这里作者要做的应该就是写一个变化的<code>UILabel</code>:</li>
</ul>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> The YYLabel <span class="built_in">class</span> implements a <span class="built_in">read</span>-only <span class="built_in">text</span> view.</div><div class="line"></div><div class="line"> @discussion The API <span class="keyword">and</span> behavior <span class="keyword">is</span> similar <span class="keyword">to</span> UILabel, <span class="keyword">but</span> provides more features:</div><div class="line"></div><div class="line"> * It supports asynchronous layout <span class="keyword">and</span> rendering (<span class="keyword">to</span> avoid blocking UI thread).</div><div class="line"> * It extends <span class="keyword">the</span> CoreText attributes <span class="keyword">to</span> support more <span class="built_in">text</span> effects.</div><div class="line"> * It allows <span class="keyword">to</span> add UIImage, UIView <span class="keyword">and</span> CALayer <span class="keyword">as</span> <span class="built_in">text</span> attachments.</div><div class="line"> * It allows <span class="keyword">to</span> add 'highlight' link <span class="keyword">to</span> <span class="keyword">some</span> range <span class="keyword">of</span> <span class="built_in">text</span> <span class="keyword">to</span> allow user interact <span class="keyword">with</span>.</div><div class="line"> * It allows <span class="keyword">to</span> add container path <span class="keyword">and</span> exclusion paths <span class="keyword">to</span> control <span class="built_in">text</span> container's shape.</div><div class="line"> * It supports vertical form layout <span class="keyword">to</span> display CJK <span class="built_in">text</span>.</div><div class="line"></div><div class="line"> See NSAttributedString+YYText.h <span class="keyword">for</span> more convenience methods <span class="keyword">to</span> <span class="keyword">set</span> <span class="keyword">the</span> attributes.</div><div class="line"> See YYTextAttribute.h <span class="keyword">and</span> YYTextLayout.h <span class="keyword">for</span> more information.</div><div class="line"> */</div><div class="line">@interface YYLabel : UIView &lt;NSCoding&gt;</div></pre></td></tr></table></figure>
<ul>
<li>可以看到YYLabel除了UILabel提供的那些东西外，我们还提供很多牛逼的功能，这些动能的实现，我还没有看，先来看看之前我们设置的<code>NSMutableAttributedString</code>是如何生效的？</li>
<li>在第二行代码，我们直接将我们前面设置的text属性值进行设定<code>label.attributedText = text;</code>:</li>
</ul>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)setAttributedText:(<span class="built_in">NSAttributedString</span> *)attributedText &#123;</div><div class="line">    <span class="keyword">if</span> (attributedText.length &gt; <span class="number">0</span>) &#123;</div><div class="line">        _innerText = attributedText.mutableCopy;</div><div class="line">        <span class="keyword">switch</span> (_lineBreakMode) &#123;</div><div class="line">            <span class="keyword">case</span> <span class="built_in">NSLineBreakByWordWrapping</span>:</div><div class="line">            <span class="keyword">case</span> <span class="built_in">NSLineBreakByCharWrapping</span>:</div><div class="line">            <span class="keyword">case</span> <span class="built_in">NSLineBreakByClipping</span>: &#123;</div><div class="line">                _innerText.yy_lineBreakMode = _lineBreakMode;</div><div class="line">            &#125; <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> <span class="built_in">NSLineBreakByTruncatingHead</span>:</div><div class="line">            <span class="keyword">case</span> <span class="built_in">NSLineBreakByTruncatingTail</span>:</div><div class="line">            <span class="keyword">case</span> <span class="built_in">NSLineBreakByTruncatingMiddle</span>: &#123;</div><div class="line">                _innerText.yy_lineBreakMode = <span class="built_in">NSLineBreakByWordWrapping</span>;</div><div class="line">            &#125; <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">default</span>: <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        _innerText = [<span class="built_in">NSMutableAttributedString</span> new];</div><div class="line">    &#125;</div><div class="line">    [_textParser parseText:_innerText selectedRange:<span class="literal">NULL</span>];</div><div class="line">    <span class="keyword">if</span> (!_ignoreCommonProperties) &#123;</div><div class="line">        <span class="keyword">if</span> (_displaysAsynchronously &amp;&amp; _clearContentsBeforeAsynchronouslyDisplay) &#123;</div><div class="line">            [<span class="keyword">self</span> _clearContents];</div><div class="line">        &#125;</div><div class="line">        [<span class="keyword">self</span> _updateOuterTextProperties];</div><div class="line">        [<span class="keyword">self</span> _setLayoutNeedUpdate];</div><div class="line">        [<span class="keyword">self</span> _endTouch];</div><div class="line">        [<span class="keyword">self</span> invalidateIntrinsicContentSize];</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>这里的代码应该就是解析我们之前设置的<code>NSAttributedString</code>属性。</li>
<li>按照代码，先判断_lineBreakMode，然后给<code>NSAttributedString</code>设置<code>yy_lineBreakMode</code>的值。</li>
<li><code>[_textParser parseText:_innerText selectedRange:NULL];</code>这个是一个代理方法，但是我现在我这里的<code>_textParser</code>是<code>nil</code>,那也就不会调用这个代理方法，从函数名字上可以知道，这里的函数主要做的上就是去解析某个<code>Text</code>。</li>
<li>调用<code>[self _updateOuterTextProperties];</code></li>
</ul>
<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">- (void)_updateOuterTextProperties &#123;</div><div class="line">    _text = [_innerText yy_plainTextForRange:NSMakeRange(<span class="number">0</span>, _innerText.length)]<span class="comment">;</span></div><div class="line">    _font = _innerText.yy_font<span class="comment">;</span></div><div class="line">    if (!_font) _font = [self _defaultFont]<span class="comment">;</span></div><div class="line">    _textColor = _innerText.yy_color<span class="comment">;</span></div><div class="line">    if (!_textColor) _textColor = [UIColor <span class="keyword">blackColor];</span></div><div class="line">    _textAlignment = _innerText.yy_alignment<span class="comment">;</span></div><div class="line">    _lineBreakMode = _innerText.yy_lineBreakMode<span class="comment">;</span></div><div class="line">    NSShadow *<span class="keyword">shadow </span>= _innerText.yy_shadow<span class="comment">;</span></div><div class="line">    _shadowColor = <span class="keyword">shadow.shadowColor;</span></div><div class="line"><span class="comment">#if !TARGET_INTERFACE_BUILDER</span></div><div class="line">    _shadowOffset = <span class="keyword">shadow.shadowOffset;</span></div><div class="line"><span class="comment">#else</span></div><div class="line">    _shadowOffset = CGPointMake(<span class="keyword">shadow.shadowOffset.width, </span><span class="keyword">shadow.shadowOffset.height);</span></div><div class="line"><span class="comment">#endif</span></div><div class="line"></div><div class="line">    _shadowBlurRadius = <span class="keyword">shadow.shadowBlurRadius;</span></div><div class="line">    _attributedText = _innerText<span class="comment">;</span></div><div class="line">    [self _updateOuterLineBreakMode]<span class="comment">;</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>从上面的代码的逻辑中我们可以看出，这个函数主要做的事情就是讲我们前面传入进来的<code>NSAttributedString</code>一个个取出来</li>
<li><code>- (NSString *)yy_plainTextForRange:(NSRange)range {}</code>这个函数的主要是从<code>NSAttributedString</code>中取出Text的值，复制给一个全局的text的值，看一下这里的实现：</li>
</ul>
<figure class="highlight nimrod"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">- (<span class="type">NSString</span> *)yy_plainTextForRange:(<span class="type">NSRange</span>)<span class="built_in">range</span> &#123;</div><div class="line">    <span class="keyword">if</span> (<span class="built_in">range</span>.location == <span class="type">NSNotFound</span> ||<span class="built_in">range</span>.length == <span class="type">NSNotFound</span>) <span class="keyword">return</span> <span class="keyword">nil</span>;</div><div class="line">    <span class="type">NSMutableString</span> *<span class="literal">result</span> = [<span class="type">NSMutableString</span> <span class="built_in">string</span>];</div><div class="line">    <span class="keyword">if</span> (<span class="built_in">range</span>.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">result</span>;</div><div class="line">    <span class="type">NSString</span> *<span class="built_in">string</span> = self.<span class="built_in">string</span>;</div><div class="line">    [self enumerateAttribute:<span class="type">YYTextBackedStringAttributeName</span> inRange:<span class="built_in">range</span> options:kNilOptions usingBlock:^(id value, <span class="type">NSRange</span> <span class="built_in">range</span>, <span class="type">BOOL</span> *stop) &#123;</div><div class="line">        <span class="type">YYTextBackedString</span> *backed = value;</div><div class="line">        <span class="keyword">if</span> (backed &amp;&amp; backed.<span class="built_in">string</span>) &#123;</div><div class="line">            [<span class="literal">result</span> appendString:backed.<span class="built_in">string</span>];</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            [<span class="literal">result</span> appendString:[<span class="built_in">string</span> substringWithRange:<span class="built_in">range</span>]];</div><div class="line">        &#125;</div><div class="line">    &#125;];</div><div class="line">    <span class="keyword">return</span> <span class="literal">result</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>这里他枚举了<code>NSAttributedString</code>的属性值，如果前面设置过<code>YYTextBackedStringAttributeName</code>,这里它会进行拼接，但是我们前面没有设置这个属性，所以，这个枚举出的<code>value = nil</code>。可以通过这里的枚举方法，我们就可以枚举出我们想要<code>attribute</code>值，并进行修改：</li>
</ul>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">NSMutableAttributedString</span> *res = [<span class="keyword">self</span>.richTextEditor.attributedText mutableCopy];</div><div class="line"></div><div class="line">[res beginEditing];</div><div class="line">__block <span class="built_in">BOOL</span> found = <span class="literal">NO</span>;</div><div class="line">[res enumerateAttribute:<span class="built_in">NSFontAttributeName</span> inRange:<span class="built_in">NSMakeRange</span>(<span class="number">0</span>, res.length) options:<span class="number">0</span> usingBlock:^(<span class="keyword">id</span> value, <span class="built_in">NSRange</span> range, <span class="built_in">BOOL</span> *stop) &#123;</div><div class="line">    <span class="keyword">if</span> (value) &#123;</div><div class="line">        <span class="built_in">UIFont</span> *oldFont = (<span class="built_in">UIFont</span> *)value;</div><div class="line">        <span class="built_in">UIFont</span> *newFont = [oldFont fontWithSize:oldFont.pointSize * <span class="number">2</span>];</div><div class="line">        [res removeAttribute:<span class="built_in">NSFontAttributeName</span> range:range];</div><div class="line">        [res addAttribute:<span class="built_in">NSFontAttributeName</span> value:newFont range:range];</div><div class="line">        found = <span class="literal">YES</span>;</div><div class="line">    &#125;</div><div class="line">&#125;];</div><div class="line"><span class="keyword">if</span> (!found) &#123;</div><div class="line">    <span class="comment">// No font was found - do something else?</span></div><div class="line">&#125;</div><div class="line">[res endEditing];</div><div class="line"><span class="keyword">self</span>.richTextEditor.attributedText = res;</div></pre></td></tr></table></figure>
<ul>
<li>下面就是简单的对全局的值进行赋值,看到这里，就可以稍微明白了之前的自定义设置Shadow的问题了：<code>NSShadow *shadow = _innerText.yy_shadow;</code>,然后将shadow的值进行赋值：</li>
</ul>
<figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">   _shadowColor = shadow.shadowColor;</div><div class="line"><span class="meta">#<span class="meta-keyword">if</span> !TARGET_INTERFACE_BUILDER</span></div><div class="line">    _shadowOffset = shadow.shadowOffset;</div><div class="line"><span class="meta">#<span class="meta-keyword">else</span></span></div><div class="line">    _shadowOffset = CGPointMake(shadow.shadowOffset.<span class="built_in">width</span>, shadow.shadowOffset.<span class="built_in">height</span>);</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"></div><div class="line">    _shadowBlurRadius = shadow.shadowBlurRadius;</div></pre></td></tr></table></figure>
<ul>
<li>最后又设置了一下<code>- (void)_updateOuterLineBreakMode {}</code>代码如下：</li>
</ul>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)_updateOuterLineBreakMode &#123;</div><div class="line">    <span class="keyword">if</span> (_innerContainer.truncationType) &#123;</div><div class="line">        <span class="keyword">switch</span> (_innerContainer.truncationType) &#123;</div><div class="line">            <span class="keyword">case</span> YYTextTruncationTypeStart: &#123;</div><div class="line">                _lineBreakMode = <span class="built_in">NSLineBreakByTruncatingHead</span>;</div><div class="line">            &#125; <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> YYTextTruncationTypeEnd: &#123;</div><div class="line">                _lineBreakMode = <span class="built_in">NSLineBreakByTruncatingTail</span>;</div><div class="line">            &#125; <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> YYTextTruncationTypeMiddle: &#123;</div><div class="line">                _lineBreakMode = <span class="built_in">NSLineBreakByTruncatingMiddle</span>;</div><div class="line">            &#125; <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">default</span>:<span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        _lineBreakMode = _innerText.yy_lineBreakMode;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>这里又设计到了一下新的对象<code>YYTextContainer *_innerContainer;</code>,这里我目前没用到这个值，所以暂且先忽略它。</li>
<li>下面调用了新的方法<code>- (void)_setLayoutNeedUpdate {}</code>,这个方法设置了一个属性值，然后调用<code>- (void)_clearInnerLayout {}</code>由于这里我们没有设置值，所以直接return掉了，最后调用了一下<code>[self.layer setNeedsDisplay];</code></li>
<li>在最后的最后调用了<code>[self invalidateIntrinsicContentSize];</code>,这个函数的调用我之前也没有用过，但是看解释应该可以猜出一部分：</li>
</ul>
<blockquote>
<p>call this when something changes that affects the intrinsicContentSize.  Otherwise UIKit won’t notice that it changed.<br>我的猜测是当父视图的发生变化的时候，我们需要调用这个方法来通知子视图也发生了变化。</p>
</blockquote>
<h4 id="到目前为止外面只了解完了最最基础的那个函数调用，设置shadow，textcolor，font，足以看出这个yyText的强大了。"><a href="#到目前为止外面只了解完了最最基础的那个函数调用，设置shadow，textcolor，font，足以看出这个yyText的强大了。" class="headerlink" title="到目前为止外面只了解完了最最基础的那个函数调用，设置shadow，textcolor，font，足以看出这个yyText的强大了。"></a>到目前为止外面只了解完了最最基础的那个函数调用，设置shadow，textcolor，font，足以看出这个yyText的强大了。</h4><hr>
<ul>
<li>网上找了些资料，大部分都没有说清楚，能说清楚下面两篇文章：可以看看 : [<a href="http://www.jianshu.com/p/f0c33d6c39bb" target="_blank" rel="external">http://www.jianshu.com/p/f0c33d6c39bb</a>, <a href="http://blog.csdn.net/wypblog/article/details/7264315" target="_blank" rel="external">http://blog.csdn.net/wypblog/article/details/7264315</a>]</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;YY系列的很多代码都写的很棒，最近很多地方都用到富文本，所以决定用YYText-用之前看了一下里面的代码，觉得还是有很多地方要学习的。代码量非常大，所以可能要分几篇博客分别去写，简单的逻辑就不写了。&quot;&gt;&lt;a href=&quot;#YY系列的很多代码都写的很棒，最近很多地方都用到富文本，所以决定用YYText-用之前看了一下里面的代码，觉得还是有很多地方要学习的。代码量非常大，所以可能要分几篇博客分别去写，简单的逻辑就不写了。&quot; class=&quot;headerlink&quot; title=&quot;YY系列的很多代码都写的很棒，最近很多地方都用到富文本，所以决定用YYText,用之前看了一下里面的代码，觉得还是有很多地方要学习的。代码量非常大，所以可能要分几篇博客分别去写，简单的逻辑就不写了。&quot;&gt;&lt;/a&gt;YY系列的很多代码都写的很棒，最近很多地方都用到富文本，所以决定用&lt;code&gt;YYText&lt;/code&gt;,用之前看了一下里面的代码，觉得还是有很多地方要学习的。代码量非常大，所以可能要分几篇博客分别去写，简单的逻辑就不写了。&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;看&lt;code&gt;demo&lt;/code&gt;里面，第一行的代码，关于的测试部分就写的很简单，但是深究下去，还是有很多值得学习的地方的：&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight groovy&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 这里的self只是一个传入的ViewController的实例&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[YYTextExampleHelper &lt;span class=&quot;string&quot;&gt;addDebugOptionToViewController:&lt;/span&gt;self];&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="日志" scheme="http://www.ghcoder.com/categories/%E6%97%A5%E5%BF%97/"/>
    
    
      <category term="Swift" scheme="http://www.ghcoder.com/tags/Swift/"/>
    
  </entry>
  
  <entry>
    <title>Core Data的迁移和合并(五)</title>
    <link href="http://www.ghcoder.com/2017/08/22/20170822/"/>
    <id>http://www.ghcoder.com/2017/08/22/20170822/</id>
    <published>2017-08-22T02:11:12.000Z</published>
    <updated>2017-09-01T03:06:15.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="记得在两年前我去面试的时候，面试官关于Core-data的问题，他们大都只会问你一个问题，基本上你只要能够答出来，就说明还是使用过Core-Data，这个问题就是：“如何迁移Core-Data的数据库”？因为谁都无法预料业务的发展，以及数据库的修改，所以这个问题也是必然会发生的。这里重点列举几个Core-Data数据库迁移的问题："><a href="#记得在两年前我去面试的时候，面试官关于Core-data的问题，他们大都只会问你一个问题，基本上你只要能够答出来，就说明还是使用过Core-Data，这个问题就是：“如何迁移Core-Data的数据库”？因为谁都无法预料业务的发展，以及数据库的修改，所以这个问题也是必然会发生的。这里重点列举几个Core-Data数据库迁移的问题：" class="headerlink" title="记得在两年前我去面试的时候，面试官关于Core data的问题，他们大都只会问你一个问题，基本上你只要能够答出来，就说明还是使用过Core Data，这个问题就是：“如何迁移Core Data的数据库”？因为谁都无法预料业务的发展，以及数据库的修改，所以这个问题也是必然会发生的。这里重点列举几个Core Data数据库迁移的问题："></a>记得在两年前我去面试的时候，面试官关于Core data的问题，他们大都只会问你一个问题，基本上你只要能够答出来，就说明还是使用过Core Data，这个问题就是：“如何迁移Core Data的数据库”？因为谁都无法预料业务的发展，以及数据库的修改，所以这个问题也是必然会发生的。这里重点列举几个Core Data数据库迁移的问题：</h4><ul>
<li><strong>首先要说一下，如果你的App，只是缓存一些离线数据的话，就没必要考虑什么数据库迁移了，因为你只需要在新版本中，删除之前的core data数据，新建一个就可以了</strong></li>
</ul>
<a id="more"></a>
<hr>
<ul>
<li>只是在原有的Entity中添加几个字段,步骤如下：</li>
</ul>
<ol>
<li>点击<code>Editor-&gt;Add Model Version</code>.</li>
<li>命名新版本的文字就啥：<code>xxx v2</code>.</li>
<li>如果你有多个Core Data的项目，需要勾选你想要修改的Core Data项目的名字.</li>
<li>点击创建完成.</li>
<li>点击<code>File Inspector</code>,在Model Version中勾选你刚才创建的新的Model.</li>
<li>此时我们就可以勾选进我们新建的Core Data Entity的字段创建表中去，创建你想要修改的字段.</li>
<li>此时你就可以去想要的xxx.swift的Model Template 的文件中去添加字段了，例如：<code>@NSManaged var image: UIImage?</code></li>
<li>此时你就可以像使用其他字段一样使用你新建的字段了，例如上面的image<code>xxx.image = xxx</code></li>
</ol>
<hr>
<ul>
<li>在原有的Entity中删除字段，并且创建新的RelationShip关联到新的Entity对象：</li>
</ul>
<ol>
<li>前面的1-5的操作都是一样的.</li>
<li>点击Core Data来创建新建的一个Entity,并且设置相应的字段(这里设置Module 为项目的名字).</li>
<li>然后从我们新建的Entity中建立新的联系去关联到我们之前的Entity(通过设置destination来设置关联).</li>
<li>并且回到之前的Entity中，删除或者修改我们想要的修改的字段.</li>
<li>并且在之前的Entity中，建立联系，关联到之前新建的Entity(这里需要设置destination为新建的Entity，并且设置inverse).</li>
<li>此时已经可以开始准备合并了，在此之前，需要做些修改：</li>
<li>创建一个新的类，类名和我们新建的Entity的名字一样，并且在里面创建我们新建的字段.</li>
<li>修改之前Entity对应的Swift类中，增删修改字段.</li>
<li>下面是最最重要的一步：建立model 映射：</li>
<li>在<code>New/File</code>中选择<code>Mapping Model</code>,选择你修改的基准的Entity为Source, 选择最新的Entity为Targer Model，名字类似为：<code>UnCloudNotesMappingModel_v2_to_v3</code></li>
<li>在这个新建的映射的文件中可以看出来，如果是之前就存在Entity的话，那么的它的值<code>Value Expression</code>= <code>$source.xxx</code>，可以看出来这样的数据是没有发生改变的.(<strong>这里的source就是我们开始创建这个文件的时候选择的source是同一个文件，我们可以理解为：v3里面xx字段的值，直接就是取自v2字段的同样的值</strong>).</li>
<li>刚下已经说了需要新建的一个Entity建立关联，那么必然在这个RelationShip中我们可以看到我们才新建好的Relationship的字段，但是在<code>Value Expression</code>中发现xcode并没有给我们填入什么值，这也是很好理解的，<strong>为这个值，关联的是我们新建Entity值，当然之前的Source不知道啦！！所以你现在要做的就是删除这段关联，因为既然是关联，我可以从a对象关联b对象，那我同样可以从b对象关联到a对象</strong></li>
<li>勾选新建的Entity对象，发现此时的xode没有给我们勾选Source，这里的理解为：<strong>默认这个新建的Entity的值，所有的值，都是我们自己新建，不需要从之前的Entity中获取值,但是我们这里一旦勾选了source，为某个对象的话，xocde会自动去更加字符创去匹配，获取相应的值，选择了source之后，对应的名字也从xxx改为yyyToxxx</strong>.</li>
<li>通过之前的理解我们其实可以理解为，每一个note都会关联attachment,但是这里我也可以做一下过滤，如果<code>attachment里的image != nil</code>,才将数据进行关联.</li>
<li><code>之前xcode为我们创建的Relationship，由于里面的value expression是我们新建的Entity,所以我们将之前的RelationShip删除掉，然后为新建的Entity新建一个relationship关联到之前的旧Entity,并且设置Mapping Name,这里系统就会自动将value expression值填上runtime的函数</code></li>
<li>最后设置两个属性：</li>
</ol>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">description</span>.shouldMigrateStoreAutomatically = <span class="keyword">true</span></div><div class="line"><span class="keyword">description</span>.shouldInferMappingModelAutomatically = <span class="keyword">false</span></div></pre></td></tr></table></figure>
<hr>
<ul>
<li>删除对象的字段，并且建立一个新的Entity,里面包含了其他新建的字段,是并且这个Entity是之前某个Entity的子类.</li>
</ul>
<ol>
<li>前面的1-5的操作都是一样的.</li>
<li>点击Core Data来创建新建的一个Entity,并且设置相应的字段(这里设置Module 为项目的名字).</li>
<li>设置新建Entity的Parent Entity,并且也可以设置相应的自定义字段.</li>
<li>之后新建我们新建(EntityName).swift，根据新建的字段类型，定义字段，此时可以同样表明继承关系<code>class ImageAttachment:Attachment {}</code></li>
<li>虽然这里创建了我们想要的Entity以及字段，但是之前的旧model如何作转化呢？这里就同样需要映射，因此这里创建了一个新的Mapping Model:<code>UnCloudNotesMappingModel_v3_to_v4</code>.</li>
<li>这里我们可以更加需要，如果新建的Entity的字段直接来自于之前的某个Model的话，我就可以将这个Model设置为Source，但是如果有些字段没有，或者不是直接可以获取到的话，或者需要从不同的字段中进行一定的逻辑才能够赋值的话，那么这里就需要自定义<code>NSEntityMigrationPolicy</code>,这里我们新建的子类对象，并且将Model的<code>Custom Policy</code>设置为我们新建的子类的话，系统在载入的时候，会进行比较，假如你现在的Core Data的版本确实需要更新的话，就会执行这个类.</li>
</ol>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">AttachmentToImageAttachmentMigrationPolicyV3toV4</span>: <span class="title">NSEntityMigrationPolicy</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">createDestinationInstances</span><span class="params">(forSource sInstance: NSManagedObject, <span class="keyword">in</span> mapping: NSEntityMapping, manager: NSMigrationManager)</span></span> <span class="keyword">throws</span> &#123;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">//1.这里会存在两个context，一个读入的source context，一个写入destinationContext.这里当然需要读入的最终的这个context</span></div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">let</span> description = <span class="type">NSEntityDescription</span>.entity(forEntityName: <span class="string">"ImageAttachment"</span>,</div><div class="line">                                                 <span class="keyword">in</span>: manager.destinationContext)</div><div class="line"></div><div class="line">    <span class="keyword">let</span> newAttachment = <span class="type">ImageAttachment</span>(entity: description!,</div><div class="line">                                        insertInto: manager.destinationContext)</div><div class="line"></div><div class="line">    <span class="comment">//2. 将属性进行迭代</span></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">traversePropertyMappings</span><span class="params">(block: <span class="params">(NSPropertyMapping, String)</span></span></span> -&gt; ()) <span class="keyword">throws</span> &#123;</div><div class="line">      <span class="keyword">if</span> <span class="keyword">let</span> attributeMappings = mapping.attributeMappings &#123;</div><div class="line"></div><div class="line">        <span class="keyword">for</span> propertyMapping <span class="keyword">in</span> attributeMappings &#123;</div><div class="line"></div><div class="line">          <span class="keyword">if</span> <span class="keyword">let</span> destinationName = propertyMapping.name &#123;</div><div class="line">            block(propertyMapping, destinationName)</div><div class="line">          &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="comment">//3.如果这个对象，连相应的属性值都不能反悔的话，那就代表肯定有问题的，需要抛出问题.</span></div><div class="line"></div><div class="line">            <span class="keyword">let</span> message = <span class="string">"Attribute destination not configured properly"</span></div><div class="line">            <span class="keyword">let</span> userInfo = [<span class="type">NSLocalizedFailureReasonErrorKey</span>: message]</div><div class="line">            <span class="keyword">throw</span> <span class="type">NSError</span>(domain: errorDomain,</div><div class="line">                          code: <span class="number">0</span>,</div><div class="line">                          userInfo: userInfo)</div><div class="line"></div><div class="line">          &#125;</div><div class="line"></div><div class="line">        &#125;</div><div class="line"></div><div class="line">      &#125; <span class="keyword">else</span> &#123;</div><div class="line"></div><div class="line">        <span class="keyword">let</span> message = <span class="string">"No Attribute Mappings found"</span></div><div class="line">        <span class="keyword">let</span> userInfo = [<span class="type">NSLocalizedFailureReasonErrorKey</span>: message]</div><div class="line">        <span class="keyword">throw</span> <span class="type">NSError</span>(domain: errorDomain,</div><div class="line">                      code: <span class="number">0</span>,</div><div class="line">                      userInfo: userInfo)</div><div class="line"></div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">// 4. 这一步按照映射关系，应该是一一对象进行赋值的</span></div><div class="line">    <span class="keyword">try</span>  traversePropertyMappings &#123;</div><div class="line">      propertyMapping, destinationName <span class="keyword">in</span></div><div class="line"></div><div class="line">      <span class="keyword">guard</span> <span class="keyword">let</span> valueExpression = propertyMapping.valueExpression <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</div><div class="line"></div><div class="line">        <span class="keyword">let</span> context: <span class="type">NSMutableDictionary</span> = [<span class="string">"source"</span>: sInstance]</div><div class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> desinationValue = valueExpression.expressionValue(with: sInstance, context: context) <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</div><div class="line">        newAttachment.setValue(desinationValue, forKey: destinationName)</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 5. 接下来的数据，你可以进行计算，或者从其他Entity中获取值</span></div><div class="line"></div><div class="line">    <span class="keyword">if</span> <span class="keyword">let</span> image = sInstance.value(forKey: <span class="string">"image"</span>) <span class="keyword">as</span>? <span class="type">UIImage</span> &#123;</div><div class="line">      newAttachment.setValue(image.size.width, forKey: <span class="string">"width"</span>)</div><div class="line">      newAttachment.setValue(image.size.height, forKey: <span class="string">"height"</span>)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 6.</span></div><div class="line">    <span class="keyword">let</span> body = sInstance.value(forKeyPath: <span class="string">"note.body"</span>) <span class="keyword">as</span>? <span class="type">NSString</span> ?? <span class="string">""</span></div><div class="line">    newAttachment.setValue(body.substring(to: <span class="number">80</span>), forKey: <span class="string">"caption"</span>)</div><div class="line"></div><div class="line">    <span class="comment">// 7. 下面需要将新建的Entity与source object、mapping 之间建立联系，如果在迁移数据接受的时候，此函数调用失败的话，数据会丢失.</span></div><div class="line">    manager.associate(sourceInstance: sInstance, withDestinationInstance: newAttachment, <span class="keyword">for</span>: mapping)</div><div class="line">  &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<ul>
<li><p>之前所讲的都是从v1-&gt;v2,从v2-&gt;v3,从v3-&gt;v4，但是这其实是最最简单的情况，但事实情况会比较复杂，因为你永远不知道用户此时是什么版本号？他们可以从v1-&gt;v4,也可以从v2-&gt;v4，那么这样一来就会比较复杂了.此时我们这里就需要进行自定义数据合并了.</p>
</li>
<li><p>我们要做的事情，是进行比较，要先从bundle中读取文件名，然后我们从文件名中进行判断，这个bundle是数据v2、v3还是v1.</p>
</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">NSManagedObjectModel</span> </span>&#123;</div><div class="line">  <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">func</span> <span class="title">modelURLs</span>(</span></div><div class="line">    <span class="title">in</span> <span class="title">modelFolder</span>: <span class="title">String</span>) -&gt; [<span class="title">URL</span>] &#123;</div><div class="line">    <span class="keyword">return</span> <span class="type">Bundle</span>.main</div><div class="line">      .urls(forResourcesWithExtension: <span class="string">"mom"</span>,</div><div class="line">      subdirectory: <span class="string">"<span class="subst">\(modelFolder)</span>.momd"</span>) ?? []</div><div class="line">  &#125;</div><div class="line">  <span class="class"><span class="keyword">class</span> <span class="title">func</span> <span class="title">modelVersionsFor</span>(</span></div><div class="line">    <span class="title">modelNamed</span> <span class="title">modelName</span>: <span class="title">String</span>) -&gt; [<span class="title">NSManagedObjectModel</span>] &#123;</div><div class="line">    <span class="keyword">return</span> modelURLs(<span class="keyword">in</span>: modelName)</div><div class="line">      .flatMap(<span class="type">NSManagedObjectModel</span>.<span class="keyword">init</span>)</div><div class="line">  &#125;</div><div class="line">  <span class="class"><span class="keyword">class</span> <span class="title">func</span> <span class="title">uncloudNotesModel</span>(</span></div><div class="line">    <span class="title">named</span> <span class="title">modelName</span>: <span class="title">String</span>) -&gt; <span class="title">NSManagedObjectModel</span> &#123;</div><div class="line">    <span class="keyword">let</span> model = modelURLs(<span class="keyword">in</span>: <span class="string">"UnCloudNotesDataModel"</span>)</div><div class="line">      .<span class="built_in">filter</span> &#123; $<span class="number">0</span>.lastPathComponent == <span class="string">"<span class="subst">\(modelName)</span>.mom"</span> &#125;</div><div class="line">      .first</div><div class="line">      .flatMap(<span class="type">NSManagedObjectModel</span>.<span class="keyword">init</span>)</div><div class="line">    <span class="keyword">return</span> model ?? <span class="type">NSManagedObjectModel</span>()</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>版本号之前的判断：</li>
</ul>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">var</span> <span class="title">version1</span>: <span class="type">NSManagedObjectModel &#123;</span></span></div><div class="line">   <span class="keyword">return</span> uncloudNotesModel(named: <span class="string">"UnCloudNotesDataModel"</span>)</div><div class="line"> &#125;</div><div class="line"> <span class="keyword">var</span> isVersion1: Bool &#123;</div><div class="line">   <span class="keyword">return</span> self == type(of: self).version1</div><div class="line"> &#125;</div><div class="line"> <span class="class"><span class="keyword">class</span> <span class="title">var</span> <span class="title">version2</span>: <span class="type">NSManagedObjectModel &#123;</span></span></div><div class="line">   <span class="keyword">return</span> uncloudNotesModel(named: <span class="string">"UnCloudNotesDataModel v2"</span>)</div><div class="line"> &#125;</div><div class="line"></div><div class="line"> <span class="keyword">var</span> isVersion2: Bool &#123;</div><div class="line">   <span class="keyword">return</span> self == type(of: self).version2</div><div class="line"> &#125;</div><div class="line"></div><div class="line"> <span class="class"><span class="keyword">class</span> <span class="title">var</span> <span class="title">version3</span>: <span class="type">NSManagedObjectModel &#123;</span></span></div><div class="line">   <span class="keyword">return</span> uncloudNotesModel(named: <span class="string">"UnCloudNotesDataModel v3"</span>)</div><div class="line"> &#125;</div><div class="line"></div><div class="line"> <span class="keyword">var</span> isVersion3: Bool &#123;</div><div class="line">   <span class="keyword">return</span> self == type(of: self).version3</div><div class="line"> &#125;</div><div class="line"></div><div class="line"> <span class="class"><span class="keyword">class</span> <span class="title">var</span> <span class="title">version4</span>: <span class="type">NSManagedObjectModel &#123;</span></span></div><div class="line">   <span class="keyword">return</span> uncloudNotesModel(named: <span class="string">"UnCloudNotesDataModel v4"</span>)</div><div class="line"> &#125;</div><div class="line"></div><div class="line"> <span class="keyword">var</span> isVersion4: Bool &#123;</div><div class="line">   <span class="keyword">return</span> self == type(of: self).version4</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<ul>
<li>啥时候进行数据迁移呢？</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> stack: <span class="type">CoreDataStack</span> &#123;</div><div class="line">  <span class="keyword">guard</span> enableMigrations,</div><div class="line">       !store(at: storeURL,</div><div class="line">         isCompatibleWithModel: currentModel)</div><div class="line">  <span class="keyword">else</span> &#123; <span class="keyword">return</span> <span class="type">CoreDataStack</span>(modelName: modelName) &#125;</div><div class="line">  performMigration()</div><div class="line">  <span class="keyword">return</span> <span class="type">CoreDataStack</span>(modelName: modelName)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 通过获取元数据，并且进行比较，如果需要更新的话，就会将数据返回</span></div><div class="line"></div><div class="line">  <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">store</span><span class="params">(at storeURL: URL,</span></span></div><div class="line">                     isCompatibleWithModel model: NSManagedObjectModel) -&gt; <span class="type">Bool</span> &#123;</div><div class="line">    <span class="keyword">let</span> storeMetadata = metadataForStoreAtURL(storeURL: storeURL)</div><div class="line">    <span class="keyword">return</span> model.isConfiguration(withName: <span class="literal">nil</span>, compatibleWithStoreMetadata:storeMetadata)</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">metadataForStoreAtURL</span><span class="params">(storeURL: URL)</span></span></div><div class="line">    -&gt; [<span class="type">String</span>: <span class="type">Any</span>] &#123;</div><div class="line">      <span class="keyword">let</span> metadata: [<span class="type">String</span>: <span class="type">Any</span>]</div><div class="line">      <span class="keyword">do</span> &#123;</div><div class="line">        metadata = <span class="keyword">try</span> <span class="type">NSPersistentStoreCoordinator</span></div><div class="line">          .metadataForPersistentStore(ofType: <span class="type">NSSQLiteStoreType</span>,</div><div class="line">                                      at: storeURL, options: <span class="literal">nil</span>)</div><div class="line">      &#125; <span class="keyword">catch</span> &#123;</div><div class="line">        metadata = [:]</div><div class="line">        <span class="built_in">print</span>(<span class="string">"Error retrieving metadata for store at URL:<span class="subst">\(storeURL)</span>: <span class="subst">\(error)</span>"</span>)</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">return</span> metadata</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<ul>
<li>数据如何进行合并呢？</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">migrateStoreAt</span><span class="params">(URL storeURL: URL,</span></span></div><div class="line">                             fromModel from:NSManagedObjectModel,</div><div class="line">                             toModel to:NSManagedObjectModel,</div><div class="line">                             mappingModel:NSMappingModel? = <span class="literal">nil</span>) &#123;</div><div class="line"></div><div class="line">   <span class="comment">// 1.创建migration manager的实例对象</span></div><div class="line">   <span class="keyword">let</span> migrationManager =</div><div class="line">     <span class="type">NSMigrationManager</span>(sourceModel: from, destinationModel: to)</div><div class="line"></div><div class="line">   <span class="comment">// 2.如果在方法中传递mapping model的对象的话，我们可以使用它，否则我们就创建它.</span></div><div class="line">   <span class="keyword">var</span> migrationMappingModel: <span class="type">NSMappingModel</span></div><div class="line">   <span class="keyword">if</span> <span class="keyword">let</span> mappingModel = mappingModel &#123;</div><div class="line">     migrationMappingModel = mappingModel</div><div class="line">   &#125; <span class="keyword">else</span> &#123;</div><div class="line">     migrationMappingModel = <span class="keyword">try</span>! <span class="type">NSMappingModel</span></div><div class="line">       .inferredMappingModel(</div><div class="line">         forSourceModel: from, destinationModel: to)</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="comment">// 3</span></div><div class="line">   <span class="keyword">let</span> targetURL = storeURL.deletingLastPathComponent()</div><div class="line">   <span class="keyword">let</span> destinationName = storeURL.lastPathComponent + <span class="string">"~1"</span></div><div class="line">   <span class="keyword">let</span> destinationURL = targetURL</div><div class="line">     .appendingPathComponent(destinationName)</div><div class="line"></div><div class="line">   <span class="built_in">print</span>(<span class="string">"From Model: <span class="subst">\(from.entityVersionHashesByName)</span>"</span>)</div><div class="line">   <span class="built_in">print</span>(<span class="string">"To Model: <span class="subst">\(to.entityVersionHashesByName)</span>"</span>)</div><div class="line">   <span class="built_in">print</span>(<span class="string">"Migrating store <span class="subst">\(storeURL)</span> to <span class="subst">\(destinationURL)</span>"</span>)</div><div class="line">   <span class="built_in">print</span>(<span class="string">"Mapping model: <span class="subst">\(String(describing: mappingModel)</span>)"</span>)</div><div class="line"></div><div class="line">   <span class="comment">// 4</span></div><div class="line">   <span class="keyword">let</span> success: <span class="type">Bool</span></div><div class="line">   <span class="keyword">do</span> &#123;</div><div class="line">     <span class="keyword">try</span> migrationManager.migrateStore(from: storeURL,</div><div class="line">                                       sourceType:<span class="type">NSSQLiteStoreType</span>,</div><div class="line">                                       options:<span class="literal">nil</span>,</div><div class="line">                                       with:migrationMappingModel,</div><div class="line">                                       toDestinationURL:destinationURL,</div><div class="line">                                       destinationType:<span class="type">NSSQLiteStoreType</span>,</div><div class="line">                                       destinationOptions:<span class="literal">nil</span>)</div><div class="line">     success = <span class="literal">true</span></div><div class="line">   &#125; <span class="keyword">catch</span> &#123;</div><div class="line">     success = <span class="literal">false</span></div><div class="line">     <span class="built_in">print</span>(<span class="string">"Migration failed: <span class="subst">\(error)</span>"</span>)</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="comment">// 5</span></div><div class="line">   <span class="keyword">if</span> success &#123;</div><div class="line">     <span class="built_in">print</span>(<span class="string">"Migration Completed Successfully"</span>)</div><div class="line"></div><div class="line">     <span class="keyword">let</span> fileManager = <span class="type">FileManager</span>.<span class="keyword">default</span></div><div class="line">     <span class="keyword">do</span> &#123;</div><div class="line">       <span class="keyword">try</span> fileManager.removeItem(at: storeURL)</div><div class="line">       <span class="keyword">try</span> fileManager.moveItem(at: destinationURL,</div><div class="line">                                to: storeURL)</div><div class="line">     &#125; <span class="keyword">catch</span> &#123;</div><div class="line">       <span class="built_in">print</span>(<span class="string">"Error migrating <span class="subst">\(error)</span>"</span>)</div><div class="line">     &#125;</div><div class="line">   &#125;</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<ul>
<li>如何一步步的合并数据，这里调用了一个递归函数，从而时间一步步的合并数据：</li>
</ul>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">func performMigration() &#123;</div><div class="line">    <span class="keyword">if</span> !currentModel.isVersion4 &#123;</div><div class="line">      fatalError(<span class="string">"Can only handle migrations to version 4!"</span>)</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> <span class="keyword">let</span> storeModel = self.storeModel &#123;</div><div class="line">      <span class="keyword">if</span> storeModel.isVersion1 &#123;</div><div class="line">        <span class="keyword">let</span> destinationModel = NSManagedObjectModel.version2</div><div class="line"></div><div class="line">        migrateStoreAt(URL: storeURL,</div><div class="line">                       fromMode<span class="variable">l:</span> storeModel,</div><div class="line">                       toMode<span class="variable">l:</span> destinationModel)</div><div class="line"></div><div class="line">        performMigration()</div><div class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> storeModel.isVersion2 &#123;</div><div class="line">        <span class="keyword">let</span> destinationModel = NSManagedObjectModel.version3</div><div class="line">        <span class="keyword">let</span> mappingModel = NSMappingModel(from: nil,</div><div class="line">                                          forSourceMode<span class="variable">l:</span> storeModel,</div><div class="line">                                          destinationMode<span class="variable">l:</span> destinationModel)</div><div class="line"></div><div class="line">        migrateStoreAt(URL: storeURL,</div><div class="line">                       fromMode<span class="variable">l:</span> storeModel,</div><div class="line">                       toMode<span class="variable">l:</span> destinationModel,</div><div class="line">                       mappingMode<span class="variable">l:</span> mappingModel)</div><div class="line"></div><div class="line">        performMigration()</div><div class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> storeModel.isVersion3 &#123;</div><div class="line">        <span class="keyword">let</span> destinationModel = NSManagedObjectModel.version4</div><div class="line">        <span class="keyword">let</span> mappingModel = NSMappingModel(from: nil,</div><div class="line">                                          forSourceMode<span class="variable">l:</span> storeModel,</div><div class="line">                                          destinationMode<span class="variable">l:</span> destinationModel)</div><div class="line"></div><div class="line">        migrateStoreAt(URL: storeURL,</div><div class="line">                       fromMode<span class="variable">l:</span> storeModel,</div><div class="line">                       toMode<span class="variable">l:</span> destinationModel,</div><div class="line">                       mappingMode<span class="variable">l:</span> mappingModel)</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;记得在两年前我去面试的时候，面试官关于Core-data的问题，他们大都只会问你一个问题，基本上你只要能够答出来，就说明还是使用过Core-Data，这个问题就是：“如何迁移Core-Data的数据库”？因为谁都无法预料业务的发展，以及数据库的修改，所以这个问题也是必然会发生的。这里重点列举几个Core-Data数据库迁移的问题：&quot;&gt;&lt;a href=&quot;#记得在两年前我去面试的时候，面试官关于Core-data的问题，他们大都只会问你一个问题，基本上你只要能够答出来，就说明还是使用过Core-Data，这个问题就是：“如何迁移Core-Data的数据库”？因为谁都无法预料业务的发展，以及数据库的修改，所以这个问题也是必然会发生的。这里重点列举几个Core-Data数据库迁移的问题：&quot; class=&quot;headerlink&quot; title=&quot;记得在两年前我去面试的时候，面试官关于Core data的问题，他们大都只会问你一个问题，基本上你只要能够答出来，就说明还是使用过Core Data，这个问题就是：“如何迁移Core Data的数据库”？因为谁都无法预料业务的发展，以及数据库的修改，所以这个问题也是必然会发生的。这里重点列举几个Core Data数据库迁移的问题：&quot;&gt;&lt;/a&gt;记得在两年前我去面试的时候，面试官关于Core data的问题，他们大都只会问你一个问题，基本上你只要能够答出来，就说明还是使用过Core Data，这个问题就是：“如何迁移Core Data的数据库”？因为谁都无法预料业务的发展，以及数据库的修改，所以这个问题也是必然会发生的。这里重点列举几个Core Data数据库迁移的问题：&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;首先要说一下，如果你的App，只是缓存一些离线数据的话，就没必要考虑什么数据库迁移了，因为你只需要在新版本中，删除之前的core data数据，新建一个就可以了&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="日志" scheme="http://www.ghcoder.com/categories/%E6%97%A5%E5%BF%97/"/>
    
    
      <category term="Core Data, Swift" scheme="http://www.ghcoder.com/tags/Core-Data-Swift/"/>
    
  </entry>
  
  <entry>
    <title>学习NSFetchedResultsController, 获取数据部分(五)</title>
    <link href="http://www.ghcoder.com/2017/08/21/20170821/"/>
    <id>http://www.ghcoder.com/2017/08/21/20170821/</id>
    <published>2017-08-21T03:39:12.000Z</published>
    <updated>2017-08-21T11:08:26.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="上一周一直在忙着写项目，书虽然看完了，但是还是想写写笔记，加深一下记忆，在第四章的时候，其实通过NSFetchReques一些值的修改，其实我们已经可以开始正常的使用core-data-并且可以按照我们的意愿来过滤数据，并且进行排序。这一章重点讲的是NSFetchedResultsController。"><a href="#上一周一直在忙着写项目，书虽然看完了，但是还是想写写笔记，加深一下记忆，在第四章的时候，其实通过NSFetchReques一些值的修改，其实我们已经可以开始正常的使用core-data-并且可以按照我们的意愿来过滤数据，并且进行排序。这一章重点讲的是NSFetchedResultsController。" class="headerlink" title="上一周一直在忙着写项目，书虽然看完了，但是还是想写写笔记，加深一下记忆，在第四章的时候，其实通过NSFetchReques一些值的修改，其实我们已经可以开始正常的使用core data, 并且可以按照我们的意愿来过滤数据，并且进行排序。这一章重点讲的是NSFetchedResultsController。"></a>上一周一直在忙着写项目，书虽然看完了，但是还是想写写笔记，加深一下记忆，在第四章的时候，其实通过NSFetchReques一些值的修改，其实我们已经可以开始正常的使用core data, 并且可以按照我们的意愿来过滤数据，并且进行排序。这一章重点讲的是<strong>NSFetchedResultsController</strong>。</h4><a id="more"></a>
<ul>
<li>什么是NSFetchedResultsController? 干什么用的？</li>
<li>其实操作Core Data,我们做的最多的操作其实就是，从Core Data中获取数据，然后放入到Array中，然后设置DataSource，然后刷新TableView, Apple就是为了解决这种麻烦，所以才产生了<code>NSFetchedResultsController</code>，但是<code>NSFetchedResultsController</code>不同于其他的<code>ViewController</code>,因为它是没有界面的，他主要的目的是为了异步获取的数据用的。说白了，<code>NSFetchedResultsController</code>其实就是<code>NSFetchRequest Result</code>数据的封装。从继承关系上也可以看出来：</li>
</ul>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">open</span> <span class="class"><span class="keyword">class</span> <span class="title">NSFetchedResultsController</span>&lt;<span class="type">ResultType</span>&gt; : <span class="type">NSObject where ResultType : NSFetchRequestResult &#123;&#125;</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="type">UIViewController &#123;&#125;</span></span></div></pre></td></tr></table></figure>
<ul>
<li>和<code>NSFetchRequest</code>很用法很类似的：</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 1</span></div><div class="line"><span class="keyword">let</span> fetchRequest: <span class="type">NSFetchRequest</span>&lt;<span class="type">Team</span>&gt; = <span class="type">Team</span>.fetchRequest()</div><div class="line"><span class="keyword">let</span> <span class="built_in">sort</span> = <span class="type">NSSortDescriptor</span>(key: #keyPath(<span class="type">Team</span>.teamName),</div><div class="line">  ascending: <span class="literal">true</span>)</div><div class="line">fetchRequest.sortDescriptors = [<span class="built_in">sort</span>]</div><div class="line"></div><div class="line"><span class="comment">// 2</span></div><div class="line">fetchedResultsController = <span class="type">NSFetchedResultsController</span>(</div><div class="line">  fetchRequest: fetchRequest,</div><div class="line">  managedObjectContext: coreDataStack.managedContext,</div><div class="line">  sectionNameKeyPath: <span class="literal">nil</span>,</div><div class="line">  cacheName: <span class="literal">nil</span>)</div><div class="line"><span class="comment">// 3</span></div><div class="line"><span class="keyword">do</span> &#123;</div><div class="line">  <span class="keyword">try</span> fetchedResultsController.performFetch()</div><div class="line">&#125; <span class="keyword">catch</span> <span class="keyword">let</span> error <span class="keyword">as</span> <span class="type">NSError</span> &#123;</div><div class="line">  <span class="built_in">print</span>(<span class="string">"Fetching error: <span class="subst">\(error)</span>, <span class="subst">\(error.userInfo)</span>"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>NSFetchedResultsController主要是为了协调Core Data和TableView,但是仍然需要传递NSFetchRequest, 记住NSFetchRequest是可以高度自定义的，可以传递<code>descriptiors</code>/ <code>predicate</code></li>
<li><p>实例化NSFetchedResultsController需要四个参数，第二个参数就是<code>NSManagedObjectContext</code>，需要这个<code>managedContext</code>来进行搜索 ,剩下的<code>sectionNameKeyPath</code>,<code>cacheName</code></p>
</li>
<li><p><strong>NSFetchedResultsController里面必须至少要有一个sort descriptor</strong>否则会直接crash</p>
</li>
</ul>
<h4 id="如何获取数据"><a href="#如何获取数据" class="headerlink" title="如何获取数据"></a>如何获取数据</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">numberOfSections</span><span class="params">(<span class="keyword">in</span> tableView: UITableView)</span></span> -&gt; <span class="type">Int</span> &#123;</div><div class="line">  <span class="keyword">guard</span> <span class="keyword">let</span> sections = fetchedResultsController.sections <span class="keyword">else</span> &#123;</div><div class="line"><span class="keyword">return</span> <span class="number">0</span> &#125;</div><div class="line">  <span class="keyword">return</span> sections.<span class="built_in">count</span></div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(<span class="number">_</span> tableView: UITableView,</span></span></div><div class="line">               numberOfRowsInSection section: Int)</div><div class="line">-&gt; <span class="type">Int</span> &#123;</div><div class="line">  <span class="keyword">guard</span> <span class="keyword">let</span> sectionInfo =</div><div class="line">    fetchedResultsController.sections?[section] <span class="keyword">else</span> &#123;</div><div class="line"><span class="keyword">return</span> <span class="number">0</span> &#125;</div><div class="line">  <span class="keyword">return</span> sectionInfo.numberOfObjects</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>通过调用<code>sections</code>的属性，返回的数组中，包含的Object中，都遵循了<code>NSFetchedResultsSectionInfo</code>的协议，这个轻量级的协议，能够调用<code>title</code>/<code>number</code></li>
<li>如果获取相应的对象呢？</li>
</ul>
<figure class="highlight ceylon"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> team = fetchedResultsController.<span class="keyword">object</span>(at: indexPath)</div></pre></td></tr></table></figure>
<h4 id="如何更改数据"><a href="#如何更改数据" class="headerlink" title="如何更改数据"></a>如何更改数据</h4><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">let team = fetchedResultsController.object(at: indexPath)</div><div class="line">  team<span class="selector-class">.wins</span> = team<span class="selector-class">.wins</span> + <span class="number">1</span></div><div class="line">  coreDataStack.saveContext()</div></pre></td></tr></table></figure>
<h4 id="如何将数据分组"><a href="#如何将数据分组" class="headerlink" title="如何将数据分组"></a>如何将数据分组</h4><ul>
<li>可以根据我们之前创建的Entity对象中的字段，任意进行分组，例如我们的Entity中存在一个名为<code>qualifyingZone</code>的String的字段,来进行分组，只需要如下的修改：</li>
</ul>
<figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">fetchedResultsController = NSFetchedResultsController(</div><div class="line"><span class="symbol">  fetchRequest:</span> fetchRequest,</div><div class="line"><span class="symbol">  managedObjectContext:</span> coreDataStack.managedContext,</div><div class="line"><span class="symbol">  sectionNameKeyPath:</span> <span class="meta">#keyPath(Team.qualifyingZone),</span></div><div class="line"><span class="symbol">  cacheName:</span> nil)</div></pre></td></tr></table></figure>
<ul>
<li>这里我们只是传入了一个#keyPath(),根据之前的知识，这个字段的意思会在编译的时候，去寻找Team下面的qualifyingZone。</li>
<li>这个字段又是如何分组的呢？首先它是先讲这些最为Key的字段放在一个Section中（数组中），然后在回更加每个不同的字段去生成不同的数据。</li>
<li><strong>通过#keyPath,可以深入到Core Data中的relationship来查询属性值</strong></li>
<li>虽然当时<code>sectionNameKeyPath</code>但是发现，数据的排序还是更加首字母的？这是因为我没有设置<code>NSSortDescriptor</code>，修改代码如下：</li>
</ul>
<figure class="highlight lasso"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> zoneSort = NSSortDescriptor(</div><div class="line">  key: #keyPath(Team.qualifyingZone), <span class="keyword">ascending</span>: <span class="literal">true</span>)</div><div class="line"><span class="keyword">let</span> scoreSort = NSSortDescriptor(</div><div class="line">  key: #keyPath(Team.wins), <span class="keyword">ascending</span>: <span class="literal">false</span>)</div><div class="line"><span class="keyword">let</span> nameSort = NSSortDescriptor(</div><div class="line">  key: #keyPath(Team.teamName), <span class="keyword">ascending</span>: <span class="literal">true</span>)</div><div class="line">fetchRequest.sortDescriptors = <span class="meta">[</span>zoneSort, scoreSort, nameSort<span class="meta">]</span></div></pre></td></tr></table></figure>
<ul>
<li>根据数组的排序，先根据<code>Team.qualifyingZone</code>排序，然后根据<code>Team.wins</code>排序，最后根据<code>Team.teamName</code>来排序。</li>
</ul>
<h4 id="缓存数据"><a href="#缓存数据" class="headerlink" title="缓存数据"></a>缓存数据</h4><figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">fetchedResultsController = NSFetchedResultsController(</div><div class="line"><span class="symbol">  fetchRequest:</span> fetchRequest,</div><div class="line"><span class="symbol">  managedObjectContext:</span> coreDataStack.managedContext,</div><div class="line"><span class="symbol">  sectionNameKeyPath:</span> <span class="meta">#keyPath(Team.qualifyingZone),</span></div><div class="line"><span class="symbol">  cacheName:</span> <span class="string">"worldCup"</span>)</div></pre></td></tr></table></figure>
<ul>
<li>数据分类是很耗性能，避免每次都去分类数据，可以通过缓存，如何通过缓存呢？</li>
<li>直接添加一个字符串的key，这样就可以将数据缓存到磁盘中去了。</li>
</ul>
<h4 id="监听数据变化"><a href="#监听数据变化" class="headerlink" title="监听数据变化"></a>监听数据变化</h4><ul>
<li>NSFetchedResultsController可以监听数据集的变化，并且通知他的代理，通过实现代理方法，可以做响应的操作。</li>
<li><strong>这里代理的触发还是需要通过设置NSManagedObjectContext,如果在项目中存在多个Managed Object Context的话，那么代理的方法是不会触发的，除非我们保存数据，并且合并context</strong></li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// MARK: - NSFetchedResultsControllerDelegate</span></div><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">ViewController</span>: <span class="title">NSFetchedResultsControllerDelegate</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">func</span> <span class="title">controllerWillChangeContent</span><span class="params">(<span class="number">_</span> controller: NSFetchedResultsController&lt;NSFetchRequestResult&gt;)</span></span> &#123;</div><div class="line">    tableView.beginUpdates()</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">func</span> <span class="title">controller</span><span class="params">(<span class="number">_</span> controller: NSFetchedResultsController&lt;NSFetchRequestResult&gt;,</span></span></div><div class="line">                  didChange anObject: Any,</div><div class="line">                  at indexPath: IndexPath?,</div><div class="line">                  <span class="keyword">for</span> type: NSFetchedResultsChangeType,</div><div class="line">                  newIndexPath: IndexPath?) &#123;</div><div class="line"></div><div class="line">    <span class="keyword">switch</span> type &#123;</div><div class="line">    <span class="keyword">case</span> .insert:</div><div class="line">      tableView.insertRows(at: [newIndexPath!], with: .automatic)</div><div class="line">    <span class="keyword">case</span> .delete:</div><div class="line">      tableView.deleteRows(at: [indexPath!], with: .automatic)</div><div class="line">    <span class="keyword">case</span> .update:</div><div class="line">      <span class="keyword">let</span> cell = tableView.cellForRow(at: indexPath!) <span class="keyword">as</span>! <span class="type">TeamCell</span></div><div class="line">      configure(cell: cell, <span class="keyword">for</span>: indexPath!)</div><div class="line">    <span class="keyword">case</span> .move:</div><div class="line">      tableView.deleteRows(at: [indexPath!], with: .automatic)</div><div class="line">      tableView.insertRows(at: [newIndexPath!], with: .automatic)</div><div class="line">  &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">func</span> <span class="title">controller</span><span class="params">(<span class="number">_</span> controller: NSFetchedResultsController&lt;NSFetchRequestResult&gt;,</span></span></div><div class="line">                  didChange sectionInfo: NSFetchedResultsSectionInfo,</div><div class="line">                  atSectionIndex sectionIndex: Int,</div><div class="line">                  <span class="keyword">for</span> type: NSFetchedResultsChangeType) &#123;</div><div class="line"></div><div class="line">    <span class="keyword">let</span> indexSet = <span class="type">IndexSet</span>(integer: sectionIndex)</div><div class="line"></div><div class="line">    <span class="keyword">switch</span> type &#123;</div><div class="line">    <span class="keyword">case</span> .insert:</div><div class="line">      tableView.insertSections(indexSet, with: .automatic)</div><div class="line">    <span class="keyword">case</span> .delete:</div><div class="line">      tableView.deleteSections(indexSet, with: .automatic)</div><div class="line">    <span class="keyword">default</span>:</div><div class="line">      <span class="keyword">break</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">func</span> <span class="title">controllerDidChangeContent</span><span class="params">(<span class="number">_</span> controller: NSFetchedResultsController&lt;NSFetchRequestResult&gt;)</span></span> &#123;</div><div class="line">    tableView.endUpdates()</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="添加Entity"><a href="#添加Entity" class="headerlink" title="添加Entity"></a>添加Entity</h4><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">let team = Team(</div><div class="line">    context: self<span class="selector-class">.coreDataStack</span><span class="selector-class">.managedContext</span>)</div><div class="line">  team<span class="selector-class">.teamName</span> = nameTextField<span class="selector-class">.text</span></div><div class="line">  team<span class="selector-class">.qualifyingZone</span> = zoneTextField<span class="selector-class">.text</span></div><div class="line">  team<span class="selector-class">.imageName</span> = <span class="string">"wenderland-flag"</span></div><div class="line">  self<span class="selector-class">.coreDataStack</span><span class="selector-class">.saveContext</span>()</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;上一周一直在忙着写项目，书虽然看完了，但是还是想写写笔记，加深一下记忆，在第四章的时候，其实通过NSFetchReques一些值的修改，其实我们已经可以开始正常的使用core-data-并且可以按照我们的意愿来过滤数据，并且进行排序。这一章重点讲的是NSFetchedResultsController。&quot;&gt;&lt;a href=&quot;#上一周一直在忙着写项目，书虽然看完了，但是还是想写写笔记，加深一下记忆，在第四章的时候，其实通过NSFetchReques一些值的修改，其实我们已经可以开始正常的使用core-data-并且可以按照我们的意愿来过滤数据，并且进行排序。这一章重点讲的是NSFetchedResultsController。&quot; class=&quot;headerlink&quot; title=&quot;上一周一直在忙着写项目，书虽然看完了，但是还是想写写笔记，加深一下记忆，在第四章的时候，其实通过NSFetchReques一些值的修改，其实我们已经可以开始正常的使用core data, 并且可以按照我们的意愿来过滤数据，并且进行排序。这一章重点讲的是NSFetchedResultsController。&quot;&gt;&lt;/a&gt;上一周一直在忙着写项目，书虽然看完了，但是还是想写写笔记，加深一下记忆，在第四章的时候，其实通过NSFetchReques一些值的修改，其实我们已经可以开始正常的使用core data, 并且可以按照我们的意愿来过滤数据，并且进行排序。这一章重点讲的是&lt;strong&gt;NSFetchedResultsController&lt;/strong&gt;。&lt;/h4&gt;
    
    </summary>
    
      <category term="日志" scheme="http://www.ghcoder.com/categories/%E6%97%A5%E5%BF%97/"/>
    
    
      <category term="Core Data, Swift" scheme="http://www.ghcoder.com/tags/Core-Data-Swift/"/>
    
  </entry>
  
  <entry>
    <title>学习CoreData, 获取数据部分(四)</title>
    <link href="http://www.ghcoder.com/2017/08/10/20170810/"/>
    <id>http://www.ghcoder.com/2017/08/10/20170810/</id>
    <published>2017-08-10T01:29:12.000Z</published>
    <updated>2017-08-21T11:08:55.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="前面三章都是一些很基础的操作以及概念，之前我们取数据，用的最多的也就是使用NSFetchRequest中的NSPredicate-我们通过修改相应的NSPredicate值来获取到我们想要的数据。所有这一章主要讲解的是获取数据的相关操作以及技巧。"><a href="#前面三章都是一些很基础的操作以及概念，之前我们取数据，用的最多的也就是使用NSFetchRequest中的NSPredicate-我们通过修改相应的NSPredicate值来获取到我们想要的数据。所有这一章主要讲解的是获取数据的相关操作以及技巧。" class="headerlink" title="前面三章都是一些很基础的操作以及概念，之前我们取数据，用的最多的也就是使用NSFetchRequest中的NSPredicate,我们通过修改相应的NSPredicate值来获取到我们想要的数据。所有这一章主要讲解的是获取数据的相关操作以及技巧。"></a>前面三章都是一些很基础的操作以及概念，之前我们取数据，用的最多的也就是使用NSFetchRequest中的NSPredicate,我们通过修改相应的NSPredicate值来获取到我们想要的数据。所有这一章主要讲解的是获取数据的相关操作以及技巧。</h4><ul>
<li>之前用到的操作是：创建一个<code>NSFetchRequest</code>的实例，然后通过<code>NSManagedObjectContext</code>这个对象来直接修改<code>NSFetchRequest</code>就可以实现了。</li>
<li>仅仅获取<code>NSFetchRequest</code>的方法就有5种:</li>
</ul>
<a id="more"></a>
<figure class="highlight nix"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">// <span class="number">1</span>:通过最普通的NSFetchRequest&lt;Venue&gt;()的方法来实例化NSFetchRequest的对象，紧接着必须使用NSEntityDescription来获取相应的Entity对象，然后直接通过set entity的值。</div><div class="line"></div><div class="line"><span class="keyword">let</span> <span class="attr">fetchRequest1</span> = NSFetchRequest&lt;Venue&gt;()</div><div class="line"><span class="keyword">let</span> <span class="attr">entity</span> =</div><div class="line">  NSEntityDescription.entity(forEntityName: <span class="string">"Venue"</span>,</div><div class="line">                             <span class="keyword">in</span>: managedContext)!</div><div class="line">fetchRequest1.<span class="attr">entity</span> = entity</div><div class="line"></div><div class="line"></div><div class="line">// <span class="number">2</span>:这里直接通过NSFetchRequest的实例化方法传入entityName值，直接将上面的步骤省略了，避免使用NSEntityDescription的对象。</div><div class="line"></div><div class="line"><span class="keyword">let</span> <span class="attr">fetchRequest2</span> = NSFetchRequest&lt;Venue&gt;(entityName: <span class="string">"Venue"</span>)</div><div class="line"></div><div class="line"></div><div class="line">// <span class="number">3</span>: 这个又在第二部的上面做出了相应的省略，当你生成NSManagedObject subclass 的对象，同时你这个对象也会生成一个类方法，直接返回NSFetchRequest，通过这样能够直接与相应的Entity产生联系。</div><div class="line"></div><div class="line"><span class="keyword">let</span> fetchRequest3: NSFetchRequest&lt;Venue&gt; = Venue.fetchRequest()</div><div class="line"></div><div class="line"></div><div class="line">// <span class="number">4</span>: 在三章里分析managedObjectModel就说过，这里可以直接通过managedObjectModel来获取NSFetchRequest。这里在xCode回有个可视化的操作，就是可以添加Request的操作。</div><div class="line"></div><div class="line"><span class="keyword">let</span> <span class="attr">fetchRequest4</span> =</div><div class="line">  managedObjectModel.fetchRequestTemplate(forName: <span class="string">"venueFR"</span>)</div><div class="line"></div><div class="line"></div><div class="line">// <span class="number">5</span>: 这里第五个方法其实与第四个很相近的，都是通过managedObjectModel来获取NSFetchRequest，不同的是这里多穿了一个substitutionVariables，这个值是用在predicate中的，从而进一步来获取你想要的值。</div><div class="line"></div><div class="line"><span class="keyword">let</span> <span class="attr">fetchRequest5</span> =</div><div class="line">  managedObjectModel.fetchRequestFromTemplate(</div><div class="line">    withName: <span class="string">"venueFR"</span>,</div><div class="line">    substitutionVariables: [<span class="string">"NAME"</span> : <span class="string">"Vivi Bubble Tea"</span>])</div></pre></td></tr></table></figure>
<ul>
<li>其实<code>NSFetchRequest</code>是一个很普通的类，但是如果你仔细研究一下<code>NSFetchRequest</code>的实例化，你就会发现<code>&lt;ResultType : NSFetchRequestResult&gt;</code>这个参数，这个参数的作用就是准备具体说明了你想要获取数据的格式:例如之前你获取的是<code>[Venue]</code>而不是<code>[AnyObject]</code>。</li>
<li>点击<code>xxx.xcdatamodeld</code>,并且长按<code>Add Entity</code>,选择<code>Add Fetch Request</code>，这样就创建了一个<code>NSFetchRequest</code>的对象。但是通过这样创建的<code>NSFetchRequest</code>的<strong>对象是无法修改的。这里需要注意一下</strong>，并且通过修改这里<code>Fetch all</code>选择相应的model，当然这里也可以通过添加另外的<code>predicate</code>的值，来对我们需要的数据进行操作。</li>
<li>那么如何来获取我们之前在模板中创建的<code>NSFetchRequest</code>对象呢？这里我们用到是通过<code>managedObjectModel</code>来获取相应的<code>Request</code>:</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">guard</span> <span class="keyword">let</span> model =</div><div class="line">  coreDataStack.managedContext</div><div class="line">    .persistentStoreCoordinator?.managedObjectModel,</div><div class="line">  <span class="keyword">let</span> fetchRequest = model</div><div class="line">    .fetchRequestTemplate(forName: <span class="string">"FetchRequest"</span>)</div><div class="line">    <span class="keyword">as</span>? <span class="type">NSFetchRequest</span>&lt;<span class="type">Venue</span>&gt; <span class="keyword">else</span> &#123;</div><div class="line"><span class="keyword">return</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><code>NSFetchRequest</code>有一个<code>resultType</code>的属性值，之前我们使用的都是它的默认值<code>NSManagedObjectResultType</code>,其实它是一个枚举值，一共可以获取四中不同的类型：</li>
</ul>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.managedObjectResultType</span>: 返回的响应的数据(默认的值)</div><div class="line"><span class="selector-class">.countResultType</span>: 返回的匹配数据的个数</div><div class="line"><span class="selector-class">.dictionaryResultType</span>: 以字典的形式来返回相应的数据，包括count，匹配的数据。</div><div class="line"><span class="selector-class">.managedObjectIDResultType</span>: 返回匹配数据的唯一标示符</div></pre></td></tr></table></figure>
<ul>
<li>这里创建<code>Predicate</code>的方式之前我们也已经看到了,这里的#keyPath, 这个在编译的时候，编译器就会一级级的找相应的属性值，是否存在写错的情况：</li>
</ul>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">lazy <span class="selector-tag">var</span> cheapVenuePredicate: NSPredicate = &#123;</div><div class="line">  return NSPredicate(format: <span class="string">"%K == %@"</span>,</div><div class="line">    #keyPath(Venue<span class="selector-class">.priceInfo</span><span class="selector-class">.priceCategory</span>), <span class="string">"$"</span>)</div><div class="line">&#125;()</div></pre></td></tr></table></figure>
<ul>
<li>获取count：</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"> <span class="function"><span class="keyword">func</span> <span class="title">populateCheapVenueCountLabel</span><span class="params">()</span></span> &#123;</div><div class="line">    <span class="keyword">let</span> fetchRequest =</div><div class="line">      <span class="type">NSFetchRequest</span>&lt;<span class="type">NSNumber</span>&gt;(entityName: <span class="string">"Venue"</span>)</div><div class="line">    fetchRequest.resultType = .countResultType</div><div class="line">    fetchRequest.predicate = cheapVenuePredicate</div><div class="line">    <span class="keyword">do</span> &#123;</div><div class="line">      <span class="keyword">let</span> countResult =</div><div class="line">        <span class="keyword">try</span> coreDataStack.managedContext.fetch(fetchRequest)</div><div class="line">      <span class="keyword">let</span> <span class="built_in">count</span> = countResult.first!.intValue</div><div class="line">      firstPriceCategoryLabel.text =</div><div class="line">        <span class="string">"<span class="subst">\(<span class="built_in">count</span>)</span> bubble tea places"</span></div><div class="line">    &#125; <span class="keyword">catch</span> <span class="keyword">let</span> error <span class="keyword">as</span> <span class="type">NSError</span> &#123;</div><div class="line">      <span class="built_in">print</span>(<span class="string">"Count not fetch <span class="subst">\(error)</span>, <span class="subst">\(error.userInfo)</span>"</span>)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    -----------------</div><div class="line"></div><div class="line"></div><div class="line">     <span class="keyword">let</span> fetchRequest: <span class="type">NSFetchRequest</span>&lt;<span class="type">Venue</span>&gt; = <span class="type">Venue</span>.fetchRequest()</div><div class="line">  fetchRequest.predicate = expensiveVenuePredicate</div><div class="line">  <span class="keyword">do</span> &#123;</div><div class="line">    <span class="keyword">let</span> <span class="built_in">count</span> =</div><div class="line">      <span class="keyword">try</span> coreDataStack.managedContext.<span class="built_in">count</span>(<span class="keyword">for</span>: fetchRequest)</div><div class="line">    thirdPriceCategoryLabel.text = <span class="string">"<span class="subst">\(<span class="built_in">count</span>)</span> bubble tea places"</span></div><div class="line">  &#125; <span class="keyword">catch</span> <span class="keyword">let</span> error <span class="keyword">as</span> <span class="type">NSError</span> &#123;</div><div class="line">    <span class="built_in">print</span>(<span class="string">"Count not fetch <span class="subst">\(error)</span>, <span class="subst">\(error.userInfo)</span>"</span>)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>上面所有的操作都是需要把所有的相关数据载入到内存中去，然后再去计算个数，core data 能够快速找到数据的“总和、平均值、最大、最小”：</li>
</ul>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">func populateDealsCountLabel() &#123;</div><div class="line"><span class="comment">// 1</span></div><div class="line">  let fetchRequest =</div><div class="line">    NSFetchRequest&lt;NSDictionary&gt;(entityName: <span class="string">"Venue"</span>)</div><div class="line">  fetchRequest<span class="selector-class">.resultType</span> = <span class="selector-class">.dictionaryResultType</span></div><div class="line"></div><div class="line"></div><div class="line">  <span class="comment">// 2: 这边你为了获取总和生成了一个NSExpressionDescription的对象，并且set了一个name的值，便于自己能够从字典中找到自己想要的那个值：</span></div><div class="line">  let sumExpressionDesc = NSExpressionDescription()</div><div class="line">  sumExpressionDesc<span class="selector-class">.name</span> = <span class="string">"sumDeals"</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// 3: 首先你生成了一个NSExpression的变量来确定你需要哪个字段来计算总和，其次生成了一个NSExpression来变量来确定你要运行的函数，最后定义了返回数据的类型是int32位：</span></div><div class="line">  let specialCountExp =</div><div class="line">    NSExpression(forKeyPath: #keyPath(Venue.specialCount))</div><div class="line">  sumExpressionDesc<span class="selector-class">.expression</span> =</div><div class="line">    NSExpression(forFunction: <span class="string">"sum:"</span>,</div><div class="line">                 arguments: [specialCountExp])</div><div class="line">  sumExpressionDesc<span class="selector-class">.expressionResultType</span> =</div><div class="line">    <span class="selector-class">.integer32AttributeType</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// 4：将自己设置的东西都告诉给FetchRequest</span></div><div class="line">  fetchRequest<span class="selector-class">.propertiesToFetch</span> = [sumExpressionDesc]</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// 5:根据上面的定义，我们需要调用的是sum函数，将我们Venue.specialCount所有的字段都加起来，丢在一个字典中，字典的key为sumDeals:</span></div><div class="line"></div><div class="line">  do &#123;</div><div class="line">    let results =</div><div class="line">      try coreDataStack<span class="selector-class">.managedContext</span><span class="selector-class">.fetch</span>(fetchRequest)</div><div class="line">    let resultDict = results.first!</div><div class="line">    let numDeals = resultDict[<span class="string">"sumDeals"</span>]!</div><div class="line">    numDealsLabel<span class="selector-class">.text</span> = <span class="string">"\(numDeals) total deals"</span></div><div class="line">  &#125; catch let error as NSError &#123;</div><div class="line">    print(<span class="string">"Count not fetch \(error), \(error.userInfo)"</span>)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><p>这里除了支持sum，还有其他函数支持吗？<strong>count,min,max,median,mode,absolute</strong></p>
</li>
<li><p>这里我们运用的都是些一个单独的NSPredicate，来进行过滤数据，但是我们其实还可以运用多个Predicate来实现类似<code>AND</code>,<code>OR</code>,<code>NOT</code>，可以通过<strong>NSCompoundPredicate</strong>将两个单独<code>NSPredicate</code>组合成一个。</p>
</li>
</ul>
<h4 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h4><ul>
<li>另一个很牛逼的地方，就是可以对获取的数据进行排序，这里运用的函数是<code>NSSortDescriptor</code>,其实这个函数在我们版本号比较的时候就可以运用，但是Core Data中的排序，它是发生在SQLite层面的，而不是内存层面的。</li>
</ul>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">lazy <span class="keyword">var</span> nameSortDescriptor: NSSortDescriptor = &#123;</div><div class="line">  <span class="keyword">let</span> compareSelector =</div><div class="line">    <span class="meta">#selector(NSString.localizedStandardCompare(_:))</span></div><div class="line">  <span class="keyword">return</span> NSSortDescriptor(key: <span class="meta">#keyPath(Venue.name),</span></div><div class="line">&#125;()</div><div class="line"><span class="keyword">ascending</span>: <span class="literal">true</span>,</div><div class="line">selector: compareSelector)</div><div class="line">lazy <span class="keyword">var</span> distanceSortDescriptor: NSSortDescriptor = &#123;</div><div class="line">  <span class="keyword">return</span> NSSortDescriptor(</div><div class="line">    key: <span class="meta">#keyPath(Venue.location.distance),</span></div><div class="line">    <span class="keyword">ascending</span>: <span class="literal">true</span>)</div><div class="line">&#125;()</div><div class="line">lazy <span class="keyword">var</span> priceSortDescriptor: NSSortDescriptor = &#123;</div><div class="line">  <span class="keyword">return</span> NSSortDescriptor(</div><div class="line">    key: <span class="meta">#keyPath(Venue.priceInfo.priceCategory),</span></div><div class="line">    <span class="keyword">ascending</span>: <span class="literal">true</span>)</div><div class="line">&#125;()</div></pre></td></tr></table></figure>
<ul>
<li>上面需要解释一下的是Venue.name 的排序，需要三个字段：1:属性的字段名。2：升序还是降序，3: 执行比较的函数。<strong>这里需要重点说一下，我之前比较的都是用的compare的函数，但是apple这里建议使用的是NSString.localizedStandardCompare</strong>，因为这个函数对一些特殊的字符也做了相应的操作。</li>
</ul>
<h4 id="异步操作："><a href="#异步操作：" class="headerlink" title="异步操作："></a>异步操作：</h4><ul>
<li>现在我们所有获取数据的操作其实都是在主线程操作的，所以在我们操作大量数据的时候，就会生卡顿，在iOS8的时候，CoreData可以在后台长期高效的运行。</li>
</ul>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">var</span> asyncFetchRequest: NSAsynchronousFetchRequest&lt;Venue&gt;!</div></pre></td></tr></table></figure>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">  <span class="keyword">super</span>.viewDidLoad()</div><div class="line"><span class="comment">// 1</span></div><div class="line">  fetchRequest = <span class="type">Venue</span>.fetchRequest()</div><div class="line"><span class="comment">// 2</span></div><div class="line">  asyncFetchRequest =</div><div class="line">    <span class="type">NSAsynchronousFetchRequest</span>&lt;<span class="type">Venue</span>&gt;(</div><div class="line">      fetchRequest: fetchRequest) &#123;</div><div class="line">        [<span class="keyword">unowned</span> <span class="keyword">self</span>] (result: <span class="type">NSAsynchronousFetchResult</span>) <span class="keyword">in</span></div><div class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> venues = result.finalResult <span class="keyword">else</span> &#123;</div><div class="line"><span class="keyword">return</span></div><div class="line">&#125;</div><div class="line">      <span class="keyword">self</span>.venues = venues</div><div class="line">      <span class="keyword">self</span>.tableView.reloadData()</div><div class="line">  &#125;</div><div class="line"><span class="comment">// 3</span></div><div class="line">  <span class="keyword">do</span> &#123;</div><div class="line">    <span class="keyword">try</span> coreDataStack.managedContext.execute(asyncFetchRequest)</div><div class="line">    <span class="comment">// Returns immediately, cancel here if you want</span></div><div class="line">  &#125; <span class="keyword">catch</span> <span class="keyword">let</span> error <span class="keyword">as</span> <span class="type">NSError</span> &#123;</div><div class="line">    <span class="built_in">print</span>(<span class="string">"Could not fetch <span class="subst">\(error)</span>, <span class="subst">\(error.userInfo)</span>"</span>)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>这里可以看到<code>NSAsyncchronousFetchRequest</code>并没有取代<code>NSFetchRequest</code>,这里可以把<code>异步操作</code>是<code>普通操作的一个封装</code>。</li>
<li>并且这里<code>NSManagedObjectContext</code>执行的是<code>execute(_:)</code>而不是<code>fetch(_:)</code></li>
<li>当然这里你可以可以通过调用<code>cancel()</code>来取消查询。</li>
</ul>
<h4 id="批量操作，无需获取数据。"><a href="#批量操作，无需获取数据。" class="headerlink" title="批量操作，无需获取数据。"></a>批量操作，无需获取数据。</h4><ul>
<li>在iOS8的时候，提供了一个新的接口可以批量操作，并且也不需要将数据载入到内存中去<code>NSBatchUpdateRequest</code>，</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 1. 通过传入EntityName 实例化了一个NSBatchUpdateRequest对象</span></div><div class="line"><span class="keyword">let</span> batchUpdate = <span class="type">NSBatchUpdateRequest</span>(entityName: <span class="string">"Venue"</span>)</div><div class="line"></div><div class="line"><span class="comment">// 2. 设置了需要修改的字段，以及值</span></div><div class="line">batchUpdate.propertiesToUpdate =</div><div class="line">  [#keyPath(<span class="type">Venue</span>.favorite) : <span class="literal">true</span>]</div><div class="line"></div><div class="line"><span class="comment">// 3. 这个批量操作需要影响哪些数据</span></div><div class="line">batchUpdate.affectedStores =</div><div class="line">  coreDataStack.managedContext</div><div class="line">    .persistentStoreCoordinator?.persistentStores</div><div class="line"></div><div class="line"><span class="comment">// 4. 设置了返回结果的类型，我们这里定义为返回批量更新的count值</span></div><div class="line">batchUpdate.resultType = .updatedObjectsCountResultType</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">do</span> &#123;</div><div class="line">  <span class="keyword">let</span> batchResult =</div><div class="line">    <span class="keyword">try</span> coreDataStack.managedContext.execute(batchUpdate)</div><div class="line">      <span class="keyword">as</span>! <span class="type">NSBatchUpdateResult</span></div><div class="line">  <span class="built_in">print</span>(<span class="string">"Records updated <span class="subst">\(batchResult.result!)</span>"</span>)</div><div class="line">&#125; <span class="keyword">catch</span> <span class="keyword">let</span> error <span class="keyword">as</span> <span class="type">NSError</span> &#123;</div><div class="line">  <span class="built_in">print</span>(<span class="string">"Could not update <span class="subst">\(error)</span>, <span class="subst">\(error.userInfo)</span>"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;前面三章都是一些很基础的操作以及概念，之前我们取数据，用的最多的也就是使用NSFetchRequest中的NSPredicate-我们通过修改相应的NSPredicate值来获取到我们想要的数据。所有这一章主要讲解的是获取数据的相关操作以及技巧。&quot;&gt;&lt;a href=&quot;#前面三章都是一些很基础的操作以及概念，之前我们取数据，用的最多的也就是使用NSFetchRequest中的NSPredicate-我们通过修改相应的NSPredicate值来获取到我们想要的数据。所有这一章主要讲解的是获取数据的相关操作以及技巧。&quot; class=&quot;headerlink&quot; title=&quot;前面三章都是一些很基础的操作以及概念，之前我们取数据，用的最多的也就是使用NSFetchRequest中的NSPredicate,我们通过修改相应的NSPredicate值来获取到我们想要的数据。所有这一章主要讲解的是获取数据的相关操作以及技巧。&quot;&gt;&lt;/a&gt;前面三章都是一些很基础的操作以及概念，之前我们取数据，用的最多的也就是使用NSFetchRequest中的NSPredicate,我们通过修改相应的NSPredicate值来获取到我们想要的数据。所有这一章主要讲解的是获取数据的相关操作以及技巧。&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;之前用到的操作是：创建一个&lt;code&gt;NSFetchRequest&lt;/code&gt;的实例，然后通过&lt;code&gt;NSManagedObjectContext&lt;/code&gt;这个对象来直接修改&lt;code&gt;NSFetchRequest&lt;/code&gt;就可以实现了。&lt;/li&gt;
&lt;li&gt;仅仅获取&lt;code&gt;NSFetchRequest&lt;/code&gt;的方法就有5种:&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="日志" scheme="http://www.ghcoder.com/categories/%E6%97%A5%E5%BF%97/"/>
    
    
      <category term="Core Data, Swift" scheme="http://www.ghcoder.com/tags/Core-Data-Swift/"/>
    
  </entry>
  
  <entry>
    <title>学习CoreData(三)</title>
    <link href="http://www.ghcoder.com/2017/08/09/20170809/"/>
    <id>http://www.ghcoder.com/2017/08/09/20170809/</id>
    <published>2017-08-09T01:33:12.000Z</published>
    <updated>2017-08-09T03:51:17.000Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li>这一章主要介绍的了四个组成的类</li>
</ul>
<figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">`NSManagedObjectModel`,`NSPersistentStore`,`NSPersistentStoreCoordinator`,`NSManagedObjectContext`</div></pre></td></tr></table></figure>
<a id="more"></a>
<ol>
<li><code>NSManagedObjectModel</code>: 它就相当于数据库的一个表，我的理解就是代表我们创建的一个<code>Entity</code>,里面包含很多我们创建的字段值，当然也包含与其他<code>Entity</code>之前的关系（relationship）。具体<code>NSManagedObjectModel</code>是如何与我们创建的<code>data model</code>产生联系的呢？答案就是：<code>runtime</code>,通过<code>runtime</code>的机制，能够在编译期高效的将我们所创建<code>model data</code>，也就是将<code>xcdatamodel</code>文件的内容编译进<code>momd</code>文件夹中，再将<code>momd</code>文件夹中的内容实例化<code>NSManagedObjectModel</code></li>
<li><code>NSPersistentStore</code>: 他就是负责读写数据，这里还提到了私有<code>NSPersistentStore</code>类型，三种是原子性的，一种是非原子性的（所谓的原子性和定义属性值用的原子性不是同一个概念，这里指的原子性：在你做读写的时候，需要将所有的相关数据都载入到内存中去，而非原子性可以根据数据的需求而载入）,四种Type依次为:<code>NSQLiteStoreType</code>,<code>NSXMLStoreType</code>,<code>NSBinaryStoreType</code>,<code>NSInMemoryStoreType</code>。</li>
<li><code>NSPersistentStoreCoordinator</code>: 是<code>NSManagedObjectModel</code>和<code>NSPersistentStore</code>的桥接，我的理解是，它就是<code>NSManagedObjectModel</code>和<code>NSPersistentStore</code>上层的实现，core data 主要也是通过它来实现功能，<code>NSPersistentStoreCoordinator</code>隐藏了它内部的实现，因为<code>NSManagedObjectContext</code>并不知道你要存储的是<code>sqlite xml还是其他的格式</code>，如果你有多个持久化存储，而对<code>NSManagedObjectContext</code>也是统一的接口。</li>
<li><code>NSManagedObjectContext</code>，是<code>managed object</code>的暂存器，它也是最最上层的封装，所有的操作都可以通过它来完成，如果不调用save()的方法的话，所有的<code>NSManagedObjectContext</code>变化均不会生效的。<code>NSManagedObjectContext</code>管理着所有期间创建、获取对象的生命周期，也报错错误信息，以及model的关系，每个<code>managedobjec</code>都必须持有对<code>NSManagedObjectContext</code>的引用，一旦持有了<code>NSManagedObjectContext</code>,在<code>managedobjec</code>的整个生命周期中都会持有，也一个application中，也可以存在多个<code>NSManagedObjectContext</code>，并且<code>NSManagedObjectContext</code>也不是线程安全的。</li>
</ol>
<ul>
<li><p>iOS10 出现了一个新的类<code>NSPersistentContainer</code>，你只需要实例化<code>NSPersistentContainer</code>就可以获得上面所提到的四个重要的类了。</p>
</li>
<li><p>通过懒加载的方式，直接生成<code>NSPersistentContainer</code>:</p>
</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="built_in">lazy</span> <span class="keyword">var</span> storeContainer: <span class="type">NSPersistentContainer</span> = &#123;</div><div class="line"></div><div class="line">  <span class="keyword">let</span> container = <span class="type">NSPersistentContainer</span>(name: <span class="keyword">self</span>.modelName)</div><div class="line"></div><div class="line">  container.loadPersistentStores &#123;</div><div class="line">    (storeDescription, error) <span class="keyword">in</span></div><div class="line"></div><div class="line">    <span class="keyword">if</span> <span class="keyword">let</span> error = error <span class="keyword">as</span> <span class="type">NSError</span>? &#123;</div><div class="line">      <span class="built_in">print</span>(<span class="string">"Unresolved error <span class="subst">\(error)</span>, <span class="subst">\(error.userInfo)</span>"</span>)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> container</div><div class="line"></div><div class="line">&#125;()</div></pre></td></tr></table></figure>
<ul>
<li>那么自然获取<code>NSManagedObjectContext</code>就可以直接通过<code>NSPersistentContainer</code>来获取了：</li>
<li>虽然这里的<code>NSManagedObjectContext</code>可以直接获取，但是<code>managed model</code>,<code>store coordinator</code> 以及<code>persistent store</code>就需要通过<code>NSPersistentStoreDescription</code></li>
</ul>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">lazy <span class="selector-tag">var</span> managedContext: NSManagedObjectContext = &#123;</div><div class="line">  return self<span class="selector-class">.storeContainer</span><span class="selector-class">.viewContext</span></div><div class="line">&#125;()</div></pre></td></tr></table></figure>
<ul>
<li>这里在保存数据之前可以先进行判断数据是够发生变化，这边变化的东西，<code>NSManagedObjectContext</code>是肯定知道的：</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">saveContext</span> <span class="params">()</span></span> &#123;</div><div class="line">  <span class="keyword">guard</span> managedContext.hasChanges <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</div><div class="line">  <span class="keyword">do</span> &#123;</div><div class="line">    <span class="keyword">try</span> managedContext.save()</div><div class="line">  &#125; <span class="keyword">catch</span> <span class="keyword">let</span> error <span class="keyword">as</span> <span class="type">NSError</span> &#123;</div><div class="line">    <span class="built_in">print</span>(<span class="string">"Unresolved error <span class="subst">\(error)</span>, <span class="subst">\(error.userInfo)</span>"</span>)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>创建完<code>Entity</code>之后，可以为这个<code>Entity</code>来创建关系，点击关系，可以关联其他的<code>Entity</code>,并且也可以编辑<code>RelationShip</code>的<code>Data Model</code>Inspector: <code>To Many</code>（一对多），并且也可以设置<code>Ordered</code>顺序,这里一旦生成对多有序的对象，那对象就是<code>NSOrderedSet</code>类型。</li>
</ul>
<ul>
<li>可以看到实例化model，对象很简单，只需要传入<code>context</code>就可以了：</li>
</ul>
<figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">let walk = Walk(<span class="name">context</span>: managedContext)</div></pre></td></tr></table></figure>
<ul>
<li>也可以直接通过<code>NSManagedObjectContext</code>直接删除某个对象：</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//2</span></div><div class="line">  managedContext.<span class="keyword">delete</span>(walkToRemove)</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;这一章主要介绍的了四个组成的类&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight autohotkey&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;`NSManagedObjectModel`,`NSPersistentStore`,`NSPersistentStoreCoordinator`,`NSManagedObjectContext`&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="日志" scheme="http://www.ghcoder.com/categories/%E6%97%A5%E5%BF%97/"/>
    
    
      <category term="Core Data, Swift" scheme="http://www.ghcoder.com/tags/Core-Data-Swift/"/>
    
  </entry>
  
  <entry>
    <title>学习CoreData, 子类化NSManagerObject(二)</title>
    <link href="http://www.ghcoder.com/2017/08/08/20170808/"/>
    <id>http://www.ghcoder.com/2017/08/08/20170808/</id>
    <published>2017-08-08T03:17:12.000Z</published>
    <updated>2017-08-08T02:34:32.000Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li>打开xxx.xcdatamodeld文件,添加Entity,例如这里名叫“Person”的类,并且通过类似第一部分的操作就可以编辑了Attributes了。</li>
<li>这里在给Attribute添加字段的时候需要注意的: 字段类型有<code>Boolean 布尔类型</code>, <code>Date 时间戳</code>, <code>Double 浮点类型</code>,<code>String 字符串类型</code>, <code>Integer Integer 32 Integer 64 整型</code>。</li>
</ul>
<a id="more"></a>
<ul>
<li>如果Entity中有关联的<code>image</code>或者<code>PDF</code>(任何可以被序列化为0或者任何的东西)类型的话，都可以将它定义为<code>Binary Data 二进制类型</code>, 但是这也会带来一个问题：“如果二进制文件太大,当你每次需要获取这个Entity的时候，就会消耗巨大的内存，从而影响性能”，这里你可以通过勾选<code>Allows External Storage</code>,这样“Core Data会根据你存入数据的大小，来决定是直接存储这个值还是仅仅只是存储一个URI的值，这个值指向的是一个单独的文件数据”,并且如果打开了这个属性值，你将无法通过查询的方式来获取这个值。</li>
<li>这里的UIColor,NSArray,NSDictionary任何只要遵循了NSCoding协议的都可以定义为: <code>Transformable</code>。</li>
<li>之前不管是取值还是赋值都是通过KVC的方式来实现的，例如：</li>
</ul>
<figure class="highlight ceylon"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Set the name</span></div><div class="line">person.setValue(aName, forKey: <span class="string">"name"</span>)</div><div class="line"><span class="comment">// Get the name</span></div><div class="line"><span class="keyword">let</span> name = person.<span class="keyword">value</span>(forKey: <span class="string">"name"</span>)</div></pre></td></tr></table></figure>
<ul>
<li>我们勾选<code>Codegen</code>值为：<code>Manual/None</code>,然后点击<code>Editor\Create NSManagedObject Subclass....</code>，这样<code>Xcode</code>就可以为我们创建了两个文件。如果修改了响应的<code>Entity</code>的文件的属性，可以重新点击<code>Editor\Create NSManagedObject Subclass....</code></li>
<li>生成的文件中，属性值前面都写着<code>@NSManaged</code>,这个字段的意思是告诉Swift编译器，这个属性的存储和实现都是在运行时产生的，而不是在编译的时候产生。因为这些属性的存储是需要<code>managed object context</code>,而这个东西在编译的时候，还没有生成。</li>
<li>测试插入的一个新的数据：</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"> <span class="comment">// Save test bow tie</span></div><div class="line">  <span class="keyword">let</span> bowtie = <span class="type">NSEntityDescription</span>.insertNewObject(</div><div class="line">    forEntityName: <span class="string">"Bowtie"</span>,</div><div class="line">    into: <span class="keyword">self</span>.persistentContainer.viewContext) <span class="keyword">as</span>! <span class="type">Bowtie</span></div><div class="line">  bowtie.name = <span class="string">"My bow tie"</span></div><div class="line">  bowtie.lastWorn = <span class="type">NSDate</span>()</div><div class="line">  <span class="comment">// Retrieve test bow tie</span></div><div class="line">  <span class="keyword">do</span> &#123;</div><div class="line">    <span class="keyword">let</span> request = <span class="type">NSFetchRequest</span>&lt;<span class="type">Bowtie</span>&gt;(entityName: <span class="string">"Bowtie"</span>)</div><div class="line">    <span class="keyword">let</span> ties =</div><div class="line">      <span class="keyword">try</span> <span class="keyword">self</span>.persistentContainer.viewContext.fetch(request)</div><div class="line">    <span class="keyword">let</span> sample = ties.first</div><div class="line">    <span class="built_in">print</span>(<span class="string">"Name :<span class="subst">\(sample?.name)</span>, Worn: <span class="subst">\(sample?.lastWorn)</span>"</span>)</div><div class="line">  &#125; <span class="keyword">catch</span> <span class="keyword">let</span> error <span class="keyword">as</span> <span class="type">NSError</span> &#123;</div><div class="line">    <span class="built_in">print</span>(<span class="string">"Fetching error: <span class="subst">\(error)</span>, <span class="subst">\(error.userInfo)</span>"</span>)</div><div class="line">  &#125;</div><div class="line"><span class="keyword">return</span> <span class="literal">true</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><code>image</code>和<code>UIColor</code>的存取</li>
</ul>
<figure class="highlight nix"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line">   <span class="keyword">let</span> <span class="attr">colorDict</span> = btDict[<span class="string">"tintColor"</span>] as! [String: AnyObject]</div><div class="line">    bowtie.<span class="attr">tintColor</span> = UIColor.color(dict: colorDict)</div><div class="line"></div><div class="line">    <span class="keyword">let</span> <span class="attr">image</span> = UIImage(named: imageName!)</div><div class="line">    <span class="keyword">let</span> <span class="attr">photoData</span> = UIImagePNGRepresentation(image!)!</div><div class="line">    bowtie.<span class="attr">photoData</span> = NSData(data: photoData)</div><div class="line">...</div></pre></td></tr></table></figure>
<ul>
<li>如何根据条件查询？运用<code>NSPredicate</code>:</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//2</span></div><div class="line">  <span class="keyword">let</span> request = <span class="type">NSFetchRequest</span>&lt;<span class="type">Bowtie</span>&gt;(entityName: <span class="string">"Bowtie"</span>)</div><div class="line">  <span class="keyword">let</span> firstTitle = segmentedControl.titleForSegment(at: <span class="number">0</span>)!</div><div class="line">  request.predicate = <span class="type">NSPredicate</span>(</div><div class="line">    format: <span class="string">"searchKey == %@"</span>, firstTitle)</div><div class="line"><span class="keyword">do</span> &#123; <span class="comment">//3</span></div><div class="line">    <span class="keyword">let</span> results = <span class="keyword">try</span> managedContext.fetch(request)</div><div class="line"><span class="comment">//4</span></div><div class="line">    populate(bowtie: results.first!)</div><div class="line">  &#125; <span class="keyword">catch</span> <span class="keyword">let</span> error <span class="keyword">as</span> <span class="type">NSError</span> &#123;</div><div class="line">    <span class="built_in">print</span>(<span class="string">"Could not fetch <span class="subst">\(error)</span>, <span class="subst">\(error.userInfo)</span>"</span>)</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<ul>
<li>CoreData 如何对字段值进行验证？</li>
<li>勾选需要验证字段，打开<code>data model inspector</code>,然后勾选<code>Validation</code>，可以勾选<code>默认值</code>,<code>最大值</code>,<code>最小值</code>，这样就可以在catch中捕获住Error：</li>
</ul>
<figure class="highlight gauss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">if</span> <span class="built_in">error</span>.domain == NSCocoaErrorDomain &amp;&amp;</div><div class="line">      (<span class="built_in">error</span>.<span class="built_in">code</span> == NSValidationNumberTooLargeError ||</div><div class="line">        <span class="built_in">error</span>.<span class="built_in">code</span> == NSValidationNumberTooSmallError) &#123;</div><div class="line">      rate(currentBowtie)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;打开xxx.xcdatamodeld文件,添加Entity,例如这里名叫“Person”的类,并且通过类似第一部分的操作就可以编辑了Attributes了。&lt;/li&gt;
&lt;li&gt;这里在给Attribute添加字段的时候需要注意的: 字段类型有&lt;code&gt;Boolean 布尔类型&lt;/code&gt;, &lt;code&gt;Date 时间戳&lt;/code&gt;, &lt;code&gt;Double 浮点类型&lt;/code&gt;,&lt;code&gt;String 字符串类型&lt;/code&gt;, &lt;code&gt;Integer Integer 32 Integer 64 整型&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="日志" scheme="http://www.ghcoder.com/categories/%E6%97%A5%E5%BF%97/"/>
    
    
      <category term="Core Data, Swift" scheme="http://www.ghcoder.com/tags/Core-Data-Swift/"/>
    
  </entry>
  
  <entry>
    <title>学习CoreData(一)</title>
    <link href="http://www.ghcoder.com/2017/08/07/20170807/"/>
    <id>http://www.ghcoder.com/2017/08/07/20170807/</id>
    <published>2017-08-07T03:17:12.000Z</published>
    <updated>2017-08-07T03:36:46.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="最近在看Core-Data这本书，很多人都说这个东西多难用，但是很多细节如果不进去细细看的话，也会存在很多懵逼的地方。不得不承认，这个东西还是挺牛逼的。"><a href="#最近在看Core-Data这本书，很多人都说这个东西多难用，但是很多细节如果不进去细细看的话，也会存在很多懵逼的地方。不得不承认，这个东西还是挺牛逼的。" class="headerlink" title="最近在看Core Data这本书，很多人都说这个东西多难用，但是很多细节如果不进去细细看的话，也会存在很多懵逼的地方。不得不承认，这个东西还是挺牛逼的。"></a>最近在看Core Data这本书，很多人都说这个东西多难用，但是很多细节如果不进去细细看的话，也会存在很多懵逼的地方。不得不承认，这个东西还是挺牛逼的。</h3><a id="more"></a>
<hr>
<ul>
<li>如何存入相应的<code>Entity</code>对象? 在回答这个问题之前要先知道，我们是通过什么对象来存入数据的呢？</li>
<li>答案是：<code>NSManagedObjectContext</code></li>
</ul>
<hr>
<ul>
<li>那什么是<code>NSManagedObjectContext</code>?</li>
<li>书上的给的解释我认为很贴切：<code>You can consider a managed object context as an in-memory “scratchpad” for working with managed objects</code>，我的理解是：<code>它其实就相当于内存中的暂存器</code>,那么完成插入数据就分为两步：<code>1. 将数据插入到NSManagedObjectContext</code>，<code>2. 然后将managed object context的变化保存到磁盘中</code></li>
</ul>
<hr>
<ul>
<li>那现在怎么获取这个所谓的暂存器<code>NSManagedObjectContext</code>?</li>
<li>如果你的项目创建是通过xcode，勾选创建<code>Use Core Data</code>的话，就可以直接通过下面的代码来获取：</li>
</ul>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">let managedContext =</div><div class="line">    appDelegate<span class="selector-class">.persistentContainer</span><span class="selector-class">.viewContext</span></div></pre></td></tr></table></figure>
<hr>
<ul>
<li>如何通过<code>NSManagedObjectContext</code>来获取<code>Entity</code>？</li>
<li>我们通过模板来创建的<code>Entity</code>对象，在CoreData中就好比<code>Class</code>,这些<code>Entity</code>都是继承<code>NSManagedObject</code>类或者为其子类，那这个问题就转化为如何取得我们之前早起定义的<code>Entity</code>，也就是<code>NSManagedObject</code>对象呢？</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">let</span> entity =</div><div class="line">    NSEntityDescription.entity(<span class="keyword">for</span>EntityName: <span class="string">"Person"</span>,</div><div class="line">                               <span class="keyword">in</span>: managedContext)!</div></pre></td></tr></table></figure>
<hr>
<ul>
<li>这里是通过<code>NSEntityDescription</code>对象一个类方法<code>entity</code>,传入相应的<code>Entity</code>字符串，但是这里返回并不是我们之前预料的<code>NSManagedObject</code>,而是<code>NSEntityDescription</code>自己。</li>
<li>这里是因为<code>NSEntityDescription</code>= <code>数据模型实体定义</code> 与 <code>NSManagedObject</code> 的链接部分</li>
</ul>
<hr>
<ul>
<li>拿到了<code>Entity</code>,如何来设置值呢？</li>
<li>因为<code>NSManagedObject</code>是用OC来写的，可以通过<code>KVC</code>的方式来设置，这里一定要注定字符串的书写正确，否则就会发生crash</li>
</ul>
<hr>
<ul>
<li>之前说了最后还需要<code>commit</code>,那如何<code>commit</code>的？</li>
<li>直接调用<code>managedContext.save()</code>,这里可能会提交不成功，那就需要catch住相应的错误。</li>
</ul>
<hr>
<h4 id="赋值的代码："><a href="#赋值的代码：" class="headerlink" title="赋值的代码："></a>赋值的代码：</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">save</span><span class="params">(name: String)</span></span> &#123;</div><div class="line">     <span class="keyword">guard</span> <span class="keyword">let</span> appDelegate = <span class="type">UIApplication</span>.shared.delegate <span class="keyword">as</span>? <span class="type">AppDelegate</span> <span class="keyword">else</span> &#123;</div><div class="line">         <span class="keyword">return</span></div><div class="line">     &#125;</div><div class="line"></div><div class="line">     <span class="comment">//1.</span></div><div class="line">     <span class="keyword">let</span> managedContext = appDelegate.persistentContainer.viewContext</div><div class="line"></div><div class="line">     <span class="comment">//2.</span></div><div class="line">     <span class="keyword">let</span> entity = <span class="type">NSEntityDescription</span>.entity(forEntityName: <span class="string">"Person"</span>, <span class="keyword">in</span>: managedContext)!</div><div class="line"></div><div class="line">     <span class="keyword">let</span> person = <span class="type">NSManagedObject</span>(entity: entity, insertInto: managedContext)</div><div class="line"></div><div class="line">     <span class="comment">//3.</span></div><div class="line">     person.setValue(name, forKeyPath: <span class="string">"name"</span>)</div><div class="line"></div><div class="line">     <span class="comment">//4.</span></div><div class="line">     <span class="keyword">do</span> &#123;</div><div class="line">         <span class="keyword">try</span> managedContext.save()</div><div class="line">         people.append(person)</div><div class="line">     &#125; <span class="keyword">catch</span> <span class="keyword">let</span> error <span class="keyword">as</span> <span class="type">NSError</span> &#123;</div><div class="line">         <span class="built_in">print</span>(<span class="string">"Could not save. <span class="subst">\(error)</span>, <span class="subst">\(error.userInfo)</span>"</span>)</div><div class="line">     &#125;</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<h4 id="取值的代码："><a href="#取值的代码：" class="headerlink" title="取值的代码："></a>取值的代码：</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//1</span></div><div class="line">  <span class="keyword">guard</span> <span class="keyword">let</span> appDelegate =</div><div class="line">    <span class="type">UIApplication</span>.shared.delegate <span class="keyword">as</span>? <span class="type">AppDelegate</span> <span class="keyword">else</span> &#123;</div><div class="line"><span class="keyword">return</span></div><div class="line">&#125;</div><div class="line">  <span class="keyword">let</span> managedContext =</div><div class="line">    appDelegate.persistentContainer.viewContext</div><div class="line"><span class="comment">//2</span></div><div class="line">  <span class="keyword">let</span> fetchRequest =</div><div class="line">    <span class="type">NSFetchRequest</span>&lt;<span class="type">NSManagedObject</span>&gt;(entityName: <span class="string">"Person"</span>)</div><div class="line"><span class="comment">//3</span></div><div class="line">  <span class="keyword">do</span> &#123;</div><div class="line">    people = <span class="keyword">try</span> managedContext.fetch(fetchRequest)</div><div class="line">  &#125; <span class="keyword">catch</span> <span class="keyword">let</span> error <span class="keyword">as</span> <span class="type">NSError</span> &#123;</div><div class="line">    <span class="built_in">print</span>(<span class="string">"Could not fetch. <span class="subst">\(error)</span>, <span class="subst">\(error.userInfo)</span>"</span>)</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<ul>
<li>其他都和赋值的操作是一样的，那第二部是什么意思呢？</li>
<li>就如这个<code>NSFetchRequest</code>类名字一样，<code>NSFetchRequest</code>他就是赋值从<code>Core Data中获取数据的东西</code>，这里我们通过传入<code>EntityName</code>来准确告诉<code>context</code>我们需要获取的是什么对象。这里是获取所有符合条件的对象。</li>
<li>最后调用<code>fetch</code>会直接返回所有数据，同样这里也可能会失败，记住catch住错误。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;最近在看Core-Data这本书，很多人都说这个东西多难用，但是很多细节如果不进去细细看的话，也会存在很多懵逼的地方。不得不承认，这个东西还是挺牛逼的。&quot;&gt;&lt;a href=&quot;#最近在看Core-Data这本书，很多人都说这个东西多难用，但是很多细节如果不进去细细看的话，也会存在很多懵逼的地方。不得不承认，这个东西还是挺牛逼的。&quot; class=&quot;headerlink&quot; title=&quot;最近在看Core Data这本书，很多人都说这个东西多难用，但是很多细节如果不进去细细看的话，也会存在很多懵逼的地方。不得不承认，这个东西还是挺牛逼的。&quot;&gt;&lt;/a&gt;最近在看Core Data这本书，很多人都说这个东西多难用，但是很多细节如果不进去细细看的话，也会存在很多懵逼的地方。不得不承认，这个东西还是挺牛逼的。&lt;/h3&gt;
    
    </summary>
    
      <category term="日志" scheme="http://www.ghcoder.com/categories/%E6%97%A5%E5%BF%97/"/>
    
    
      <category term="Core Data, Swift" scheme="http://www.ghcoder.com/tags/Core-Data-Swift/"/>
    
  </entry>
  
  <entry>
    <title>React-Native 0.46 最新环境配置</title>
    <link href="http://www.ghcoder.com/2017/07/31/20170731/"/>
    <id>http://www.ghcoder.com/2017/07/31/20170731/</id>
    <published>2017-07-31T09:07:12.000Z</published>
    <updated>2017-07-31T09:17:08.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="隔了好久，闲来无事，看到自己github上React-Native的项目好久没有更新了，所以想继续搞搞它，但是发现好多坑。"><a href="#隔了好久，闲来无事，看到自己github上React-Native的项目好久没有更新了，所以想继续搞搞它，但是发现好多坑。" class="headerlink" title="隔了好久，闲来无事，看到自己github上React-Native的项目好久没有更新了，所以想继续搞搞它，但是发现好多坑。"></a>隔了好久，闲来无事，看到自己github上React-Native的项目好久没有更新了，所以想继续搞搞它，但是发现好多坑。</h3><ul>
<li>打开官网 <code>https://facebook.github.io/react-native/</code>，我所用的都是最新的版本<code>0.46</code>, 点击链接到<code>https://facebook.github.io/react-native/docs/getting-started.html</code>,点击<code>Build Projects with Native Code</code>，会有一个<code>Demo</code>，按照这个<code>Demo</code>一步步操作，会遇到很多的坑，这里我记录一下：</li>
</ul>
<a id="more"></a>
<p>1.先运行Android的机器，发现会报未找到<code>SDK</code>的问题，具体如下：</p>
<figure class="highlight http"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">FAILURE</span>: Build failed with an exception.</div><div class="line"></div><div class="line"><span class="livecodeserver">* What went wrong:</span></div><div class="line">A problem occurred configuring project <span class="string">':app'</span>.</div><div class="line">&gt; SDK location <span class="keyword">not</span> found. Define location <span class="keyword">with</span> sdk.dir <span class="keyword">in</span> <span class="keyword">the</span> <span class="built_in">local</span>.properties <span class="built_in">file</span> <span class="keyword">or</span> <span class="keyword">with</span> <span class="keyword">an</span> ANDROID_HOME environment <span class="built_in">variable</span>.</div></pre></td></tr></table></figure>
<ul>
<li>解决：以mac为例子，找到<code>~/.bashrc</code>的文件，也有可能是<code>~/.zshrc</code>的文件</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">1. vim ~/.bashrc</div><div class="line"></div><div class="line"></div><div class="line">2.  <span class="built_in">export</span> ANDROID_HOME=~/Library/Android/sdk</div><div class="line">    <span class="built_in">export</span> PATH=<span class="variable">$&#123;PATH&#125;</span>:<span class="variable">$ANDROID_HOME</span>/tools:<span class="variable">$ANDROID_HOME</span>/platform-tools</div></pre></td></tr></table></figure>
<p>2.再次运行<code>react-native run-android</code> 想执行真机的话, 报这如下错误：</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Could not run adb <span class="string">reverse:</span> Command <span class="string">failed:</span> <span class="regexp">/Users/</span>gonghuan<span class="regexp">/Library/</span>Android<span class="regexp">/sdk/</span>platform-tools/adb -s K21GAMN590201150 reverse <span class="string">tcp:</span><span class="number">8081</span> <span class="string">tcp:</span><span class="number">8081</span></div></pre></td></tr></table></figure>
<ul>
<li>这里假如你的系统是<code>Android 5.0</code>以上的话，应该就不会有这个问题了，但是如果你的安卓机器和我的一样，都是低于<code>Android 5.0的话</code>：, 以我的手机为例[安卓4.4.4]，解决：</li>
</ul>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="bullet">1. </span>(Android 5.0以下)通过Wi-Fi连接你的本地开发服务器</div><div class="line">首先确保你的电脑和手机设备在同一个Wi-Fi环境下。</div><div class="line"><span class="bullet">2. </span>在设备上运行你的React Native应用。和打开其它App一样操作。</div><div class="line">你应该会看到一个“红屏”错误提示。这是正常的，下面的步骤会解决这个报错。</div><div class="line"><span class="bullet">3. </span>摇晃设备，或者运行adb shell input keyevent 82，可以打开开发者菜单。</div><div class="line"><span class="bullet">4. </span>点击进入Dev Settings。</div><div class="line"><span class="bullet">5. </span>点击Debug server host for device。</div><div class="line"><span class="bullet">6. </span>输入你电脑的IP地址和端口号（譬如10.0.1.1:8081）。在Mac上，你可以在系统设置/网络里找查询你的IP地址。在Windows上，打开命令提示符并输入ipconfig来查询你的IP地址。在Linux上你可以在终端中输入ifconfig来查询你的IP地址。</div><div class="line"><span class="bullet">7. </span>回到开发者菜单然后选择Reload JS。`</div></pre></td></tr></table></figure>
<p>3.运行<code>react-native run-android</code>的时候，启动模拟器，我这边报这个错误：</p>
<figure class="highlight subunit"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">Error: </span>No available formula with the name "android-sdk"</div></pre></td></tr></table></figure>
<ul>
<li>解决途径：1. 如果你已经按照官网 [<a href="https://facebook.github.io/react-native/docs/getting-started.html" target="_blank" rel="external">https://facebook.github.io/react-native/docs/getting-started.html</a>] 的教程，走完，但是还是报错的话就执行下面的命令：</li>
</ul>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">brew </span>tap caskroom/cask</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">brew </span>cask install <span class="keyword">android-sdk</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">brew </span>cask install <span class="keyword">android-platform-tools</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;隔了好久，闲来无事，看到自己github上React-Native的项目好久没有更新了，所以想继续搞搞它，但是发现好多坑。&quot;&gt;&lt;a href=&quot;#隔了好久，闲来无事，看到自己github上React-Native的项目好久没有更新了，所以想继续搞搞它，但是发现好多坑。&quot; class=&quot;headerlink&quot; title=&quot;隔了好久，闲来无事，看到自己github上React-Native的项目好久没有更新了，所以想继续搞搞它，但是发现好多坑。&quot;&gt;&lt;/a&gt;隔了好久，闲来无事，看到自己github上React-Native的项目好久没有更新了，所以想继续搞搞它，但是发现好多坑。&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;打开官网 &lt;code&gt;https://facebook.github.io/react-native/&lt;/code&gt;，我所用的都是最新的版本&lt;code&gt;0.46&lt;/code&gt;, 点击链接到&lt;code&gt;https://facebook.github.io/react-native/docs/getting-started.html&lt;/code&gt;,点击&lt;code&gt;Build Projects with Native Code&lt;/code&gt;，会有一个&lt;code&gt;Demo&lt;/code&gt;，按照这个&lt;code&gt;Demo&lt;/code&gt;一步步操作，会遇到很多的坑，这里我记录一下：&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="日志" scheme="http://www.ghcoder.com/categories/%E6%97%A5%E5%BF%97/"/>
    
    
      <category term="React-Native" scheme="http://www.ghcoder.com/tags/React-Native/"/>
    
  </entry>
  
  <entry>
    <title>学习设计模式-迭代器模式</title>
    <link href="http://www.ghcoder.com/2017/07/13/20170713/"/>
    <id>http://www.ghcoder.com/2017/07/13/20170713/</id>
    <published>2017-07-13T02:31:12.000Z</published>
    <updated>2017-07-13T02:31:25.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="代码写多了，就想把代码写好，将代码写好，就必然要学习设计模式，今天重点学习一下迭代器模式和组合模式。这里我参照的学习是以JAVA为参照的《Header-First》设计模式，我这里会以Object-c的格式来重写，最后以一个我项目中的实例来说明一下。"><a href="#代码写多了，就想把代码写好，将代码写好，就必然要学习设计模式，今天重点学习一下迭代器模式和组合模式。这里我参照的学习是以JAVA为参照的《Header-First》设计模式，我这里会以Object-c的格式来重写，最后以一个我项目中的实例来说明一下。" class="headerlink" title="代码写多了，就想把代码写好，将代码写好，就必然要学习设计模式，今天重点学习一下迭代器模式和组合模式。这里我参照的学习是以JAVA为参照的《Header First》设计模式，我这里会以Object-c的格式来重写，最后以一个我项目中的实例来说明一下。"></a>代码写多了，就想把代码写好，将代码写好，就必然要学习设计模式，今天重点学习一下迭代器模式和组合模式。这里我参照的学习是以JAVA为参照的《Header First》设计模式，我这里会以Object-c的格式来重写，最后以一个我项目中的实例来说明一下。</h3><h3 id="1-1-迭代器设计模式："><a href="#1-1-迭代器设计模式：" class="headerlink" title="1.1 迭代器设计模式："></a>1.1 迭代器设计模式：</h3><ol>
<li>问题：这里有两个类：一个是煎饼餐厅菜类<code>PancakeHouseMenu</code>(这里假设代码中是以数组的形式来存储),一个是普通餐厅类<code>DinerMenu</code>(这里假设是以字典的形式来存储),他们都有自己原有的代码，以及逻辑，现在如何将这两个菜单类合并成一个类更好给用户调用。</li>
</ol>
<a id="more"></a>
<ul>
<li>这个是PancakeHouseMenu的代码</li>
</ul>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">"PancakeHouseMenu.h"</span></span></div><div class="line"><span class="meta">#import <span class="meta-string">"Pancak.h"</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">PancakeHouseMenu</span> ()</span></div><div class="line"></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">NSMutableArray</span> *items;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">PancakeHouseMenu</span></span></div><div class="line"></div><div class="line">- (<span class="keyword">instancetype</span>)init &#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">self</span> = [<span class="keyword">super</span> init]) &#123;        </div><div class="line">        [<span class="keyword">self</span> addItem:<span class="string">@"cake_A"</span> isVege:<span class="literal">YES</span> price:<span class="number">0.23</span>];</div><div class="line">        [<span class="keyword">self</span> addItem:<span class="string">@"cake_B"</span> isVege:<span class="literal">NO</span> price:<span class="number">0.53</span>];</div><div class="line">        [<span class="keyword">self</span> addItem:<span class="string">@"cake_C"</span> isVege:<span class="literal">YES</span> price:<span class="number">1.2</span>];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)addItem:(<span class="built_in">NSString</span> *)itemName isVege:(<span class="built_in">BOOL</span>)isVege price:(<span class="built_in">CGFloat</span>)price &#123;</div><div class="line">    Pancak *cake  = [Pancak pancakName:itemName isVege:isVege price:price];</div><div class="line">    <span class="keyword">if</span> (cake != <span class="literal">nil</span>) [<span class="keyword">self</span>.items addObject:cake];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="built_in">NSArray</span> &lt;Pancak *&gt;*) menuItems; &#123;</div><div class="line">    <span class="keyword">return</span> [<span class="keyword">self</span>.items <span class="keyword">copy</span>];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">#pragma mark - Getter Methods</span></div><div class="line"></div><div class="line">- (<span class="built_in">NSMutableArray</span> *)items &#123;</div><div class="line">    <span class="keyword">if</span> (_items == <span class="literal">nil</span>) _items = [<span class="built_in">NSMutableArray</span> new];</div><div class="line">    <span class="keyword">return</span> _items;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<ul>
<li>这个是DinerMenu的代码</li>
</ul>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">"DinerMenu.h"</span></span></div><div class="line"><span class="meta">#import <span class="meta-string">"Diner.h"</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">DinerMenu</span> ()</span></div><div class="line"></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">NSMutableDictionary</span> *items;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) <span class="built_in">NSInteger</span>            numberOfItems;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">DinerMenu</span></span></div><div class="line"></div><div class="line">- (<span class="keyword">instancetype</span>)init &#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">self</span> = [<span class="keyword">super</span> init]) &#123;</div><div class="line">        </div><div class="line">        <span class="keyword">self</span>.numberOfItems = <span class="number">0</span>;</div><div class="line">        </div><div class="line">        [<span class="keyword">self</span> addItem:<span class="string">@"Diner_A"</span> isVege:<span class="literal">YES</span> price:<span class="number">2.32</span>];</div><div class="line">        [<span class="keyword">self</span> addItem:<span class="string">@"Diner_B"</span> isVege:<span class="literal">NO</span> price:<span class="number">5.33</span>];</div><div class="line">        [<span class="keyword">self</span> addItem:<span class="string">@"Diner_C"</span> isVege:<span class="literal">YES</span> price:<span class="number">1.27</span>];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="built_in">NSDictionary</span> *) menuItems &#123;</div><div class="line">    <span class="keyword">return</span> [<span class="keyword">self</span>.items <span class="keyword">copy</span>];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)addItem:(<span class="built_in">NSString</span> *)itemName isVege:(<span class="built_in">BOOL</span>)isVege price:(<span class="built_in">CGFloat</span>)price &#123;</div><div class="line">    Diner *diner = [Diner DinerName:itemName isVege:isVege price:price];</div><div class="line">    <span class="keyword">if</span> (diner != <span class="literal">nil</span> &amp;&amp; itemName != <span class="literal">nil</span>) &#123;</div><div class="line">        [<span class="keyword">self</span>.items setObject:diner forKey:@(<span class="keyword">self</span>.numberOfItems)];</div><div class="line">        <span class="keyword">self</span>.numberOfItems ++;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="built_in">NSMutableDictionary</span> *)items &#123;</div><div class="line">    <span class="keyword">if</span> (_items == <span class="literal">nil</span>) _items = [<span class="built_in">NSMutableDictionary</span> new];</div><div class="line">    <span class="keyword">return</span> _items;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<ul>
<li>通过比较就可以看出这两个的区别。存储数据分别用的是<code>NSMutableArray</code>和<code>NSMutableDictionary</code></li>
<li>如果此时我需要分别打印响应的数据的时候的，就需要这样：</li>
</ul>
<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">- (void)printMenu &#123;</div><div class="line">    </div><div class="line">    self.pancakeMenu = [PancakeHouseMenu new]<span class="comment">;</span></div><div class="line">    NSArray *pancakeItems = self.pancakeMenu.menuItems<span class="comment">;</span></div><div class="line">    </div><div class="line">    self.<span class="keyword">dinerMenu </span>= [<span class="keyword">DinerMenu </span>new]<span class="comment">;</span></div><div class="line">    NSDictionary *<span class="keyword">dinerItems </span>= self.<span class="keyword">dinerMenu.menuItems;</span></div><div class="line">    </div><div class="line">    for (int i = <span class="number">0</span> <span class="comment">; i &lt; pancakeItems.count ; i++) &#123;</span></div><div class="line">        Pancak *pancake = pancakeItems[i]<span class="comment">;</span></div><div class="line">        NSLog(@<span class="string">"%@"</span>, pancake)<span class="comment">;</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    NSLog(@<span class="string">"--------------------"</span>)<span class="comment">;</span></div><div class="line">    </div><div class="line">    for (int i = <span class="number">0</span> <span class="comment">; i &lt; dinerItems.count; i ++ ) &#123;</span></div><div class="line">        <span class="keyword">Diner </span>*<span class="keyword">diner </span>= <span class="keyword">dinerItems[@(i)];</span></div><div class="line">        NSLog(@<span class="string">"%@"</span>, <span class="keyword">diner);</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>结果如下：</li>
</ul>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">2017<span class="selector-tag">-07-12</span> 16<span class="selector-pseudo">:54</span><span class="selector-pseudo">:00.992</span> <span class="selector-tag">Learn_Iterator_Composite_Pattern</span><span class="selector-attr">[6245:186657]</span> <span class="selector-tag">pancake</span>:<span class="selector-attr">[name:cake_A--isvege:1--price:0.23]</span></div><div class="line">2017<span class="selector-tag">-07-12</span> 16<span class="selector-pseudo">:54</span><span class="selector-pseudo">:00.992</span> <span class="selector-tag">Learn_Iterator_Composite_Pattern</span><span class="selector-attr">[6245:186657]</span> <span class="selector-tag">pancake</span>:<span class="selector-attr">[name:cake_B--isvege:0--price:0.53]</span></div><div class="line">2017<span class="selector-tag">-07-12</span> 16<span class="selector-pseudo">:54</span><span class="selector-pseudo">:00.992</span> <span class="selector-tag">Learn_Iterator_Composite_Pattern</span><span class="selector-attr">[6245:186657]</span> <span class="selector-tag">pancake</span>:<span class="selector-attr">[name:cake_C--isvege:1--price:1.20]</span></div><div class="line">2017<span class="selector-tag">-07-12</span> 16<span class="selector-pseudo">:54</span><span class="selector-pseudo">:00.992</span> <span class="selector-tag">Learn_Iterator_Composite_Pattern</span><span class="selector-attr">[6245:186657]</span> <span class="selector-tag">--------------------</span></div><div class="line">2017<span class="selector-tag">-07-12</span> 16<span class="selector-pseudo">:54</span><span class="selector-pseudo">:00.993</span> <span class="selector-tag">Learn_Iterator_Composite_Pattern</span><span class="selector-attr">[6245:186657]</span> <span class="selector-tag">diner</span>:<span class="selector-attr">[name:Diner_A--isvege:1--price:2.32]</span></div><div class="line">2017<span class="selector-tag">-07-12</span> 16<span class="selector-pseudo">:54</span><span class="selector-pseudo">:00.993</span> <span class="selector-tag">Learn_Iterator_Composite_Pattern</span><span class="selector-attr">[6245:186657]</span> <span class="selector-tag">diner</span>:<span class="selector-attr">[name:Diner_B--isvege:0--price:5.33]</span></div><div class="line">2017<span class="selector-tag">-07-12</span> 16<span class="selector-pseudo">:54</span><span class="selector-pseudo">:00.993</span> <span class="selector-tag">Learn_Iterator_Composite_Pattern</span><span class="selector-attr">[6245:186657]</span> <span class="selector-tag">diner</span>:<span class="selector-attr">[name:Diner_C--isvege:1--price:1.27]</span></div></pre></td></tr></table></figure>
<ul>
<li>这样第一个问题就出现了，<code>这里两家餐厅的菜单存储的数据结构没法控制，这里需要打印菜单的时候，就需要分别遍历两个数据</code></li>
<li>解决版本：<code>封装变化的部分</code>（这里变化的部分就是循环遍历的地方）</li>
<li>这里创建一个<code>protocol</code>,代码如下：</li>
</ul>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@protocol</span> <span class="title">Iterator</span> &lt;<span class="title">NSObject</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> 是否这个聚合中存在更多的元素</div><div class="line"> </div><div class="line"> @return 返回bool值</div><div class="line"> */</div><div class="line">- (<span class="built_in">BOOL</span>)hasNext;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> 返回下一个对象</div><div class="line"> </div><div class="line"> @return 下一个对象</div><div class="line"> */</div><div class="line">- (<span class="keyword">id</span>)next;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<ul>
<li>创建一个新的类<code>DinerMenuIterator</code>,这个类是<code>Iterator</code>具体实现的类，具体实现：</li>
</ul>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">"DinerMenuIterator.h"</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">DinerMenuIterator</span> ()</span></div><div class="line"></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">NSDictionary</span> *items;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) <span class="built_in">NSInteger</span>    position;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">DinerMenuIterator</span></span></div><div class="line"></div><div class="line">- (<span class="keyword">instancetype</span>)initWithItems:(<span class="built_in">NSDictionary</span> *)items &#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">self</span> = [<span class="keyword">super</span> init]) &#123;</div><div class="line">        <span class="keyword">self</span>.position   = <span class="number">0</span>;</div><div class="line">        <span class="keyword">self</span>.items      = items;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="built_in">BOOL</span>)hasNext &#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>.position &gt;= <span class="keyword">self</span>.items.count) <span class="keyword">return</span> <span class="literal">NO</span>;</div><div class="line">    <span class="keyword">return</span> <span class="literal">YES</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">id</span>)next &#123;</div><div class="line">    <span class="keyword">if</span> ([<span class="keyword">self</span> hasNext]) &#123;</div><div class="line">        <span class="keyword">id</span> item = <span class="keyword">self</span>.items[@(<span class="keyword">self</span>.position)];</div><div class="line">        <span class="keyword">self</span>.position ++;</div><div class="line">        <span class="keyword">return</span> item;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="literal">nil</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<ul>
<li>修改<code>DinerMenu</code>的类：</li>
</ul>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> 返回菜单项</div><div class="line"> </div><div class="line"> <span class="doctag">@return</span> 菜单总数据</div><div class="line"> */</div><div class="line"><span class="comment">//- (NSDictionary *) menuItems;</span></div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> 迭代器的接口</div><div class="line"> </div><div class="line"> <span class="doctag">@return</span> 迭代器对象</div><div class="line"> */</div><div class="line">- (id&lt;Iterator&gt;)iterator;</div></pre></td></tr></table></figure>
<ul>
<li>.m 文件的具体实现：</li>
</ul>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">- (id&lt;Iterator&gt;)iterator &#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">[[DinerMenuIterator alloc] initWithItems:[self.items copy]]</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">//- (NSDictionary *) menuItems &#123;</div><div class="line">//    <span class="keyword">return</span> [self.items copy];</div><div class="line">//&#125;</div></pre></td></tr></table></figure>
<ul>
<li>这样打印代码如下：</li>
</ul>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)printMenu &#123;</div><div class="line">    </div><div class="line">    <span class="keyword">self</span>.pancakeMenu = [PancakeHouseMenu new];</div><div class="line">    <span class="keyword">id</span> &lt;Iterator&gt;pancakIterator = [<span class="keyword">self</span>.pancakeMenu iterator];</div><div class="line">    </div><div class="line">    <span class="keyword">self</span>.dinerMenu = [DinerMenu new];</div><div class="line">    <span class="keyword">id</span> &lt;Iterator&gt;dinerIterator = [<span class="keyword">self</span>.dinerMenu iterator];</div><div class="line">    </div><div class="line">    </div><div class="line">    [<span class="keyword">self</span> iterate_print_menu:pancakIterator];</div><div class="line">    </div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"--------------------"</span>);</div><div class="line">    </div><div class="line">    [<span class="keyword">self</span> iterate_print_menu:dinerIterator];</div><div class="line">    </div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)iterate_print_menu:(<span class="keyword">id</span>&lt;Iterator&gt;)it &#123;</div><div class="line">    <span class="keyword">while</span> (it.hasNext) &#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, it.next);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>这样就解决了游走于每一个元素内部之间，而不需要暴露内部的实现。</li>
<li>迭代器模式：提供一种方法顺序访问聚合对象中各个元素，而又不暴露其内部的实现。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;代码写多了，就想把代码写好，将代码写好，就必然要学习设计模式，今天重点学习一下迭代器模式和组合模式。这里我参照的学习是以JAVA为参照的《Header-First》设计模式，我这里会以Object-c的格式来重写，最后以一个我项目中的实例来说明一下。&quot;&gt;&lt;a href=&quot;#代码写多了，就想把代码写好，将代码写好，就必然要学习设计模式，今天重点学习一下迭代器模式和组合模式。这里我参照的学习是以JAVA为参照的《Header-First》设计模式，我这里会以Object-c的格式来重写，最后以一个我项目中的实例来说明一下。&quot; class=&quot;headerlink&quot; title=&quot;代码写多了，就想把代码写好，将代码写好，就必然要学习设计模式，今天重点学习一下迭代器模式和组合模式。这里我参照的学习是以JAVA为参照的《Header First》设计模式，我这里会以Object-c的格式来重写，最后以一个我项目中的实例来说明一下。&quot;&gt;&lt;/a&gt;代码写多了，就想把代码写好，将代码写好，就必然要学习设计模式，今天重点学习一下迭代器模式和组合模式。这里我参照的学习是以JAVA为参照的《Header First》设计模式，我这里会以Object-c的格式来重写，最后以一个我项目中的实例来说明一下。&lt;/h3&gt;&lt;h3 id=&quot;1-1-迭代器设计模式：&quot;&gt;&lt;a href=&quot;#1-1-迭代器设计模式：&quot; class=&quot;headerlink&quot; title=&quot;1.1 迭代器设计模式：&quot;&gt;&lt;/a&gt;1.1 迭代器设计模式：&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;问题：这里有两个类：一个是煎饼餐厅菜类&lt;code&gt;PancakeHouseMenu&lt;/code&gt;(这里假设代码中是以数组的形式来存储),一个是普通餐厅类&lt;code&gt;DinerMenu&lt;/code&gt;(这里假设是以字典的形式来存储),他们都有自己原有的代码，以及逻辑，现在如何将这两个菜单类合并成一个类更好给用户调用。&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="日志" scheme="http://www.ghcoder.com/categories/%E6%97%A5%E5%BF%97/"/>
    
    
      <category term="OC" scheme="http://www.ghcoder.com/tags/OC/"/>
    
  </entry>
  
  <entry>
    <title>学习《iOS Animations》</title>
    <link href="http://www.ghcoder.com/2017/07/04/20170704/"/>
    <id>http://www.ghcoder.com/2017/07/04/20170704/</id>
    <published>2017-07-04T09:55:12.000Z</published>
    <updated>2017-07-04T02:33:34.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="最近一直在学习《iOS-Animations》这本书，记录一下学习到知识点："><a href="#最近一直在学习《iOS-Animations》这本书，记录一下学习到知识点：" class="headerlink" title="最近一直在学习《iOS Animations》这本书，记录一下学习到知识点："></a>最近一直在学习《iOS Animations》这本书，记录一下学习到知识点：</h2><ul>
<li>这本都快看完了，一直觉得没啥可做笔记的，以为UI动画的一些用法，你知道就是知道，不知道就是不知道，知道了 就觉得很容易，所以觉得这是一个熟能生巧的技能，但是想想，这本书都快看完了，还是要留下一些什么，所以觉得记些东西。</li>
</ul>
<h3 id="Animating-Constraints-如何在动画中修改约束"><a href="#Animating-Constraints-如何在动画中修改约束" class="headerlink" title="Animating Constraints 如何在动画中修改约束"></a>Animating Constraints 如何在动画中修改约束</h3><ul>
<li>最简单的就是获取<code>NSLayoutConstraint!</code>的属性值，直接修改对象的<code>constant</code>可以直接实现约束值的改变。官方的api解释如下：</li>
</ul>
<blockquote>
<p> Unlike the other properties, the constant may be modified after constraint creation.  Setting the constant on an existing constraint performs much better than removing the constraint and adding a new one that’s just like the old but for having a new constant.</p>
</blockquote>
<a id="more"></a>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@IBOutlet</span> weak var <span class="string">menuHeightConstraint:</span> NSLayoutConstraint!</div><div class="line">menuHeightConstraint.constant = isMenuOpen ? 200.0 : <span class="number">60.0</span></div></pre></td></tr></table></figure>
<h4 id="1-1-添加动画"><a href="#1-1-添加动画" class="headerlink" title="1.1 添加动画"></a>1.1 添加动画</h4><ul>
<li>运用类似这些api<code>animate(withDuration:animations:)</code>就可以实现动画。</li>
<li>可以在animations的closure里面添加动画的代码，也可以在外面修改完响应的约束代码，然后直接在closure中调用<code>self.view.layoutIfNeeded()</code></li>
</ul>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">UIView.animate(<span class="string">withDuration:</span> <span class="number">1.0</span>, <span class="string">delay:</span> <span class="number">0.0</span>, <span class="string">usingSpringWithDamping:</span> <span class="number">0.4</span>, <span class="string">initialSpringVelocity:</span> <span class="number">10.0</span>, <span class="string">options:</span> .curveEaseIn, <span class="string">animations:</span> &#123;</div><div class="line">    self.view.layoutIfNeeded()        </div><div class="line">&#125;, <span class="string">completion:</span> nil)</div></pre></td></tr></table></figure>
<h4 id="1-2-遍历修改约束"><a href="#1-2-遍历修改约束" class="headerlink" title="1.2 遍历修改约束"></a>1.2 遍历修改约束</h4><figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">titleLabel.superview?.constraints.<span class="keyword">forEach</span> &#123; <span class="keyword">constraint</span> <span class="keyword">in</span></div><div class="line">	 <span class="keyword">if</span> <span class="keyword">constraint</span>.firstItem === titleLabel &amp;&amp;</div><div class="line">     <span class="keyword">constraint</span>.firstAttribute == .centerX &#123;</div><div class="line">    <span class="keyword">constraint</span>.constant = isMenuOpen ? -100.0 : 0.0</div><div class="line">    <span class="built_in">return</span></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>这里的作用就是遍历<code>titleLabel</code>的父视图的约束.</li>
<li>表达式<code>firstItem.firstAttribute = secondItem.secondAttribute + constant</code></li>
<li>删除某个约束，是通过 <code>isActive</code>的属性来设置的，<code>isActive</code>的属性为<code>false</code>的时候，就代表去除约束, 当设置<code>isActive</code>的属性值为<code>false</code>,视图的层级会删除约束，并且如果没有对象引用它，它就会从内存中去除掉。</li>
</ul>
<h4 id="1-3-添加新的约束"><a href="#1-3-添加新的约束" class="headerlink" title="1.3 添加新的约束"></a>1.3 添加新的约束</h4><ul>
<li>1.在刚才枚举中，可以通过循环，并且创建一个新的约束，并且替换掉：</li>
</ul>
<figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">let newConstraint = NSLayoutConstraint(</div><div class="line"><span class="symbol">  item:</span> titleLabel,</div><div class="line"><span class="symbol">  attribute:</span> .centerY,</div><div class="line"><span class="symbol">  relatedBy:</span> .equal,</div><div class="line"><span class="symbol">  toItem:</span> titleLabel.superview!,</div><div class="line"><span class="symbol">  attribute:</span> .centerY,</div><div class="line"><span class="symbol">  multiplier:</span> isMenuOpen ? <span class="number">0.67</span> : <span class="number">1.0</span>,</div><div class="line"><span class="symbol">  constant:</span> <span class="number">5.0</span>)</div><div class="line">newConstraint.identifier = <span class="string">"TitleCenterY"</span></div><div class="line">newConstraint.isActive = true</div></pre></td></tr></table></figure>
<ul>
<li>通过设置<code>identifier</code>的属性值，来找到视图层级的元素，通过设置<code>isActive</code>来告诉<code>Autolayout</code>将其应用到当前的布局中去。</li>
<li>如果是手动编写<code>autolayout</code>的代码，创建完新的约束后，需要通过<code>addConstraint</code>,将新的约束添加到视图上去。</li>
<li>但是系统更偏向于使用<code>NSLayoutConstraint.activate(_:)</code>的类方法,接受一个 constraint的数组，性能更优，官方api的解释如下:</li>
</ul>
<blockquote>
<p>Convenience method that activates each constraint in the contained array, in the same manner as setting active=YES. This is often more efficient than activating each constraint individually.</p>
</blockquote>
<ul>
<li>2.</li>
</ul>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">let conX = imageView<span class="selector-class">.centerXAnchor</span><span class="selector-class">.constraint</span>(equalTo: view.centerXAnchor)</div><div class="line">let conBottom = imageView<span class="selector-class">.bottomAnchor</span><span class="selector-class">.constraint</span>(equalTo: view<span class="selector-class">.bottomAnchor</span>, constant: imageView<span class="selector-class">.frame</span><span class="selector-class">.height</span>)</div><div class="line">let conWidth  = imageView<span class="selector-class">.widthAnchor</span><span class="selector-class">.constraint</span>(equalTo: view<span class="selector-class">.widthAnchor</span>, multiplier: <span class="number">0.33</span>, constant: -<span class="number">50</span>)</div><div class="line">let conHeight = imageView<span class="selector-class">.heightAnchor</span><span class="selector-class">.constraint</span>(equalTo: imageView.widthAnchor)</div><div class="line">NSLayoutConstraint.activate([conX, conBottom, conWidth, conHeight])</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;最近一直在学习《iOS-Animations》这本书，记录一下学习到知识点：&quot;&gt;&lt;a href=&quot;#最近一直在学习《iOS-Animations》这本书，记录一下学习到知识点：&quot; class=&quot;headerlink&quot; title=&quot;最近一直在学习《iOS Animations》这本书，记录一下学习到知识点：&quot;&gt;&lt;/a&gt;最近一直在学习《iOS Animations》这本书，记录一下学习到知识点：&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;这本都快看完了，一直觉得没啥可做笔记的，以为UI动画的一些用法，你知道就是知道，不知道就是不知道，知道了 就觉得很容易，所以觉得这是一个熟能生巧的技能，但是想想，这本书都快看完了，还是要留下一些什么，所以觉得记些东西。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Animating-Constraints-如何在动画中修改约束&quot;&gt;&lt;a href=&quot;#Animating-Constraints-如何在动画中修改约束&quot; class=&quot;headerlink&quot; title=&quot;Animating Constraints 如何在动画中修改约束&quot;&gt;&lt;/a&gt;Animating Constraints 如何在动画中修改约束&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;最简单的就是获取&lt;code&gt;NSLayoutConstraint!&lt;/code&gt;的属性值，直接修改对象的&lt;code&gt;constant&lt;/code&gt;可以直接实现约束值的改变。官方的api解释如下：&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt; Unlike the other properties, the constant may be modified after constraint creation.  Setting the constant on an existing constraint performs much better than removing the constraint and adding a new one that’s just like the old but for having a new constant.&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="日志" scheme="http://www.ghcoder.com/categories/%E6%97%A5%E5%BF%97/"/>
    
    
      <category term="Swift" scheme="http://www.ghcoder.com/tags/Swift/"/>
    
  </entry>
  
  <entry>
    <title>学习算法</title>
    <link href="http://www.ghcoder.com/2017/06/20/20170620/"/>
    <id>http://www.ghcoder.com/2017/06/20/20170620/</id>
    <published>2017-06-20T09:55:12.000Z</published>
    <updated>2017-07-04T02:33:28.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前两天闲来无事有重新温习了一下算法，用Swift3重写了一下算法：今天先写一下O-n-2-的两种算法：选择排序、插入排序，以及算法复杂度为O-nlogn-的：递归排序"><a href="#前两天闲来无事有重新温习了一下算法，用Swift3重写了一下算法：今天先写一下O-n-2-的两种算法：选择排序、插入排序，以及算法复杂度为O-nlogn-的：递归排序" class="headerlink" title="前两天闲来无事有重新温习了一下算法，用Swift3重写了一下算法：今天先写一下O(n^2)的两种算法：选择排序、插入排序，以及算法复杂度为O(nlogn)的：递归排序"></a>前两天闲来无事有重新温习了一下算法，用<code>Swift3</code>重写了一下算法：今天先写一下<code>O(n^2)</code>的两种算法：<code>选择排序</code>、<code>插入排序</code>，以及算法复杂度为<code>O(nlogn)</code>的：<code>递归排序</code></h3><ul>
<li>项目我已经丢到github上了，可以自己去下载： [<a href="https://github.com/Ghstart/play_with_algorithm" target="_blank" rel="external">https://github.com/Ghstart/play_with_algorithm</a>]</li>
</ul>
<h4 id="1-1-准备工作"><a href="#1-1-准备工作" class="headerlink" title="1.1 准备工作"></a>1.1 准备工作</h4><ul>
<li>首先写算法，我需要有准备为我产生测试用例的方法，因此我定义了了一个类<code>Helper</code>,并且写静态方法：</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">generateSources</span><span class="params">(<span class="built_in">count</span>: Int)</span></span> -&gt; [<span class="type">Int</span>] &#123;</div><div class="line">      <span class="keyword">var</span> sources: [<span class="type">Int</span>] = [<span class="type">Int</span>]()</div><div class="line">      <span class="keyword">for</span> <span class="number">_</span> <span class="keyword">in</span> <span class="number">1</span>...<span class="built_in">count</span> &#123;</div><div class="line">          <span class="keyword">let</span> randomNum: <span class="type">UInt32</span> = arc4random_uniform(<span class="number">1_000_000</span>)</div><div class="line">          sources.append(<span class="type">Int</span>(randomNum))</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">return</span> sources</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<a id="more"></a>
<ul>
<li>学习算法必不可少的，就是需要去验证我的算法，是否正确，这里我写了一个静态方法去验证我的算法是否排序正确：</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">isSorted</span><span class="params">(testSources: [Int])</span></span> -&gt; <span class="type">Bool</span> &#123;</div><div class="line">       </div><div class="line">       <span class="keyword">if</span> testSources.<span class="built_in">count</span> &lt; <span class="number">3</span> &#123;</div><div class="line">           <span class="built_in">assert</span>(<span class="literal">true</span>, <span class="string">"你逗我呢？？就几个自己数"</span>)</div><div class="line">           <span class="keyword">return</span> <span class="literal">false</span></div><div class="line">       &#125;</div><div class="line">       </div><div class="line">       </div><div class="line">       <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>...testSources.<span class="built_in">count</span> - <span class="number">2</span> &#123;</div><div class="line">           <span class="keyword">if</span> testSources[i] &gt; testSources[i + <span class="number">1</span>] &#123;</div><div class="line">               <span class="keyword">return</span> <span class="literal">false</span></div><div class="line">           &#125;</div><div class="line">       &#125;</div><div class="line">       </div><div class="line">       <span class="keyword">return</span> <span class="literal">true</span></div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<ul>
<li>写算法，我必须要去计算每个算法所执行的时间，通过<code>Unit Test</code>的<code>measure</code>可以来看出每个方法执行的时间，这里我也写了一个静态方法：</li>
</ul>
<figure class="highlight livescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">static func executeTime<span class="function"><span class="params">(whichFunctionName: String, testSources: [Int], operation: ([Int]) -&gt; ([Int]))</span> &#123;</span></div><div class="line">      <span class="title">let</span> <span class="title">methodStart</span> = <span class="title">Date</span><span class="params">()</span></div><div class="line">      <span class="title">let</span> <span class="title">tt</span> = <span class="title">operation</span><span class="params">(testSources)</span></div><div class="line">      <span class="title">let</span> <span class="title">methodFinished</span> = <span class="title">Date</span><span class="params">()</span></div><div class="line">      <span class="title">let</span> <span class="title">executionTime</span> = <span class="title">methodFinished</span>.<span class="title">timeIntervalSince</span><span class="params">(methodStart)</span></div><div class="line">      <span class="title">print</span><span class="params">(String(format:<span class="string">"执行%@花费%.9fs"</span>, whichFunctionName, executionTime))</span></div><div class="line">      <span class="title">assert</span><span class="params">(Helper.isSorted(testSources: tt), <span class="string">"排序后还是存在问题！！"</span>)</span></div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<h4 id="1-2-开始coding"><a href="#1-2-开始coding" class="headerlink" title="1.2 开始coding"></a>1.2 开始coding</h4><ul>
<li>选择排序，其实说白了，就找<code>索引</code>, 从当前位置一直往后找，并且判断，如果小，就找出他的索引，再继续往后找，直到到最后一位, <code>这里注意，它是不能提前结束的，所以这就是为什么说他会比插入排序慢了</code>：</li>
</ul>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">     * 选择排序</div><div class="line">     */</div><div class="line">    func selectionSort(sources: [Int]) -&gt; [Int] &#123;</div><div class="line">        </div><div class="line">        <span class="selector-tag">var</span> sources = sources</div><div class="line">        </div><div class="line">        <span class="keyword">for</span> <span class="selector-tag">i</span> <span class="keyword">in</span> <span class="number">0</span>..&lt;sources<span class="selector-class">.count</span> &#123;</div><div class="line">            </div><div class="line">            <span class="selector-tag">var</span> minIndex = <span class="selector-tag">i</span></div><div class="line">            </div><div class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> i+<span class="number">1</span>..&lt;sources<span class="selector-class">.count</span>  &#123;</div><div class="line">                </div><div class="line">                <span class="keyword">if</span> sources[j] &lt; sources[minIndex] &#123;</div><div class="line">                    </div><div class="line">                    minIndex = j</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            </div><div class="line">            <span class="keyword">if</span> minIndex != <span class="selector-tag">i</span> &#123;</div><div class="line">                swap(&amp;sources[minIndex], &amp;sources[i])</div><div class="line">            &#125;</div><div class="line">           </div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        return sources</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<ul>
<li>插入排序，是从第二个位置开始往前找，判断前面的是否比他大，比他大的话，就将前面的数字往后挪，因此类推：</li>
</ul>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">   * 插入排序</div><div class="line">   */</div><div class="line">  func insertionSort(sources: [Int]) -&gt; [Int] &#123;</div><div class="line">      </div><div class="line">      <span class="selector-tag">var</span> sources = sources</div><div class="line">      </div><div class="line">      <span class="keyword">for</span> <span class="selector-tag">i</span> <span class="keyword">in</span> <span class="number">1</span>..&lt;sources<span class="selector-class">.count</span> &#123;</div><div class="line"></div><div class="line">          let e = sources[i]</div><div class="line">          <span class="selector-tag">var</span> j = <span class="selector-tag">i</span> - <span class="number">1</span></div><div class="line">          </div><div class="line">          while ( j &gt;= <span class="number">0</span> &amp;&amp; sources[j] &gt; e) &#123;</div><div class="line">              </div><div class="line">              sources[j + <span class="number">1</span>] = sources[j]</div><div class="line">              </div><div class="line">              j = j - <span class="number">1</span></div><div class="line">          &#125;</div><div class="line">          </div><div class="line">          sources[j+<span class="number">1</span>] = e</div><div class="line">      </div><div class="line">      &#125;</div><div class="line">      </div><div class="line">      return sources</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<ul>
<li>递归排序</li>
</ul>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">   * 归并排序</div><div class="line">   */</div><div class="line">  func mergeSort(sources: [Int]) -&gt; [Int] &#123;</div><div class="line">      </div><div class="line">      <span class="selector-tag">var</span> sources = sources</div><div class="line">      </div><div class="line">      __mergeSort(sources: &amp;sources, l: <span class="number">0</span>, r: sources<span class="selector-class">.count</span> - <span class="number">1</span>)</div><div class="line">      </div><div class="line">      return sources</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  func __mergeSort( sources: inout [Int], l: Int, r: Int) &#123;</div><div class="line">      </div><div class="line">      <span class="keyword">if</span> l &gt;= r &#123;</div><div class="line">          return</div><div class="line">      &#125;</div><div class="line">      </div><div class="line">      let mid: Int = (l + r) / <span class="number">2</span></div><div class="line">      __mergeSort(sources: &amp;sources, l: l, r: mid)</div><div class="line">      __mergeSort(sources: &amp;sources, l: mid+<span class="number">1</span>, r: r)</div><div class="line">      __merge(sources: &amp;sources, l: l, mid: mid, r: r)</div><div class="line">      </div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="comment">// [l...mid]  [mid+1...r]</span></div><div class="line">  func __merge(sources: inout [Int], l: Int, mid: Int, r: Int) &#123;</div><div class="line">      </div><div class="line">      <span class="selector-tag">var</span> aux = [Int]()</div><div class="line">      <span class="keyword">for</span> <span class="selector-tag">i</span> <span class="keyword">in</span> l..<span class="selector-class">.r</span> &#123;</div><div class="line">          aux.insert(sources[i], at: i-l)</div><div class="line">      &#125;</div><div class="line">      </div><div class="line">      <span class="selector-tag">var</span> <span class="selector-tag">i</span>: Int = l</div><div class="line">      <span class="selector-tag">var</span> j: Int = mid + <span class="number">1</span></div><div class="line">      <span class="keyword">for</span> k <span class="keyword">in</span> l..<span class="selector-class">.r</span> &#123;</div><div class="line">          </div><div class="line">          <span class="keyword">if</span> <span class="selector-tag">i</span> &gt; mid &#123;</div><div class="line">              </div><div class="line">              sources[k] = aux[j-l]</div><div class="line">              j = j + <span class="number">1</span></div><div class="line">              </div><div class="line">          &#125; <span class="keyword">else</span> <span class="keyword">if</span> j &gt; r &#123;</div><div class="line">              </div><div class="line">              sources[k] = aux[i-l]</div><div class="line">              <span class="selector-tag">i</span> = <span class="selector-tag">i</span> + <span class="number">1</span></div><div class="line">              </div><div class="line">          &#125; <span class="keyword">else</span> <span class="keyword">if</span> aux[i-l] &lt; aux[j-l] &#123;</div><div class="line">              </div><div class="line">              sources[k] = aux[i-l]</div><div class="line">              <span class="selector-tag">i</span> = <span class="selector-tag">i</span> + <span class="number">1</span></div><div class="line">              </div><div class="line">          &#125; <span class="keyword">else</span> &#123;</div><div class="line">              </div><div class="line">              sources[k] = aux[j-l]</div><div class="line">              j = j + <span class="number">1</span></div><div class="line">          &#125;</div><div class="line">          </div><div class="line">      &#125;</div><div class="line">      </div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<h4 id="1-3-测试："><a href="#1-3-测试：" class="headerlink" title="1.3 测试："></a>1.3 测试：</h4><ul>
<li>如何调用：</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">    <span class="keyword">super</span>.viewDidLoad()</div><div class="line">    </div><div class="line">    <span class="keyword">let</span> arr = <span class="type">Helper</span>.generateSources(<span class="built_in">count</span>: <span class="number">1_000</span>)</div><div class="line">    <span class="keyword">let</span> arr1 = arr</div><div class="line">    </div><div class="line">    <span class="type">Helper</span>.executeTime(whichFunctionName: <span class="string">"插入排序"</span>, testSources: arr, operation: <span class="built_in">insertionSort</span>)</div><div class="line">    <span class="type">Helper</span>.executeTime(whichFunctionName: <span class="string">"选择排序"</span>, testSources: arr1, operation: selectionSort)</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>控制台的打印：</li>
</ul>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">执行插入排序花费0<span class="selector-class">.016882956s</span></div><div class="line">执行选择排序花费0<span class="selector-class">.023320019s</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前两天闲来无事有重新温习了一下算法，用Swift3重写了一下算法：今天先写一下O-n-2-的两种算法：选择排序、插入排序，以及算法复杂度为O-nlogn-的：递归排序&quot;&gt;&lt;a href=&quot;#前两天闲来无事有重新温习了一下算法，用Swift3重写了一下算法：今天先写一下O-n-2-的两种算法：选择排序、插入排序，以及算法复杂度为O-nlogn-的：递归排序&quot; class=&quot;headerlink&quot; title=&quot;前两天闲来无事有重新温习了一下算法，用Swift3重写了一下算法：今天先写一下O(n^2)的两种算法：选择排序、插入排序，以及算法复杂度为O(nlogn)的：递归排序&quot;&gt;&lt;/a&gt;前两天闲来无事有重新温习了一下算法，用&lt;code&gt;Swift3&lt;/code&gt;重写了一下算法：今天先写一下&lt;code&gt;O(n^2)&lt;/code&gt;的两种算法：&lt;code&gt;选择排序&lt;/code&gt;、&lt;code&gt;插入排序&lt;/code&gt;，以及算法复杂度为&lt;code&gt;O(nlogn)&lt;/code&gt;的：&lt;code&gt;递归排序&lt;/code&gt;&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;项目我已经丢到github上了，可以自己去下载： [&lt;a href=&quot;https://github.com/Ghstart/play_with_algorithm&quot;&gt;https://github.com/Ghstart/play_with_algorithm&lt;/a&gt;]&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;1-1-准备工作&quot;&gt;&lt;a href=&quot;#1-1-准备工作&quot; class=&quot;headerlink&quot; title=&quot;1.1 准备工作&quot;&gt;&lt;/a&gt;1.1 准备工作&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;首先写算法，我需要有准备为我产生测试用例的方法，因此我定义了了一个类&lt;code&gt;Helper&lt;/code&gt;,并且写静态方法：&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;generateSources&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;built_in&quot;&gt;count&lt;/span&gt;: Int)&lt;/span&gt;&lt;/span&gt; -&amp;gt; [&lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt;] &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; sources: [&lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt;] = [&lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt;]()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;...&lt;span class=&quot;built_in&quot;&gt;count&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; randomNum: &lt;span class=&quot;type&quot;&gt;UInt32&lt;/span&gt; = arc4random_uniform(&lt;span class=&quot;number&quot;&gt;1_000_000&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          sources.append(&lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt;(randomNum))&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; sources&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="日志" scheme="http://www.ghcoder.com/categories/%E6%97%A5%E5%BF%97/"/>
    
    
      <category term="算法" scheme="http://www.ghcoder.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>学习Android开发基础笔记Tips</title>
    <link href="http://www.ghcoder.com/2017/05/31/20170531/"/>
    <id>http://www.ghcoder.com/2017/05/31/20170531/</id>
    <published>2017-05-31T09:55:12.000Z</published>
    <updated>2017-05-31T09:59:51.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="学习Android-最近正好有时间，可以系统的看看Android的系统开发，记录下学习的笔记，供今后参考。"><a href="#学习Android-最近正好有时间，可以系统的看看Android的系统开发，记录下学习的笔记，供今后参考。" class="headerlink" title="学习Android, 最近正好有时间，可以系统的看看Android的系统开发，记录下学习的笔记，供今后参考。"></a>学习Android, 最近正好有时间，可以系统的看看Android的系统开发，记录下学习的笔记，供今后参考。</h3><h4 id="1-1-基础环境："><a href="#1-1-基础环境：" class="headerlink" title="1.1 基础环境："></a>1.1 基础环境：</h4><ol>
<li>使用的IDE为：Android Studio.</li>
<li>SDK 最低的版本为：Android 4.1.</li>
</ol>
<ul>
<li><code>LinearLayout</code>是布局组件，可以从继承关系上看出关系, 继承自View的子类<code>ViewGroup</code>，并且<code>FrameLayout</code>,<code>TableLayout</code>,<code>RelativeLayout</code>他们都是继承自<code>ViewGroup</code></li>
</ul>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 继承关系</span></div><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">LinearLayout</span> <span class="keyword">extends</span> <span class="title">ViewGroup</span></span></div><div class="line"></div><div class="line">public <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">ViewGroup</span> <span class="keyword">extends</span> <span class="title">View</span> <span class="title">implements</span> <span class="title">ViewParent</span>, <span class="title">ViewManager</span></span></div></pre></td></tr></table></figure>
<a id="more"></a>
<h4 id="1-2-UI属性"><a href="#1-2-UI属性" class="headerlink" title="1.2 UI属性:"></a>1.2 UI属性:</h4><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="string">match_parent:</span> 视图与其父视图大小相同</div><div class="line"><span class="string">wrap_content:</span> 视图将根据展示的内容自动调整大小</div><div class="line"><span class="string">android:</span><span class="string">orientation:</span> LinearLayout 具有的属性，决定子组件是“水平”还是“垂直”排列</div></pre></td></tr></table></figure>
<ul>
<li>字符串，对某个组件setString的时候，你会发现是这样写的：<code>@string/xxxx</code>, 这里需要注意一下：<code>android:text属性值不是字符串值，而是对字符串资源的应用</code>，其实这时候你setString的时候，实际上是去<code>app/res/values</code>的文件夹中查找<code>strings.xml</code>。</li>
</ul>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;<span class="built_in">string</span> <span class="built_in">name</span>=<span class="string">"xxxx"</span>&gt;YYYYYY&lt;/<span class="built_in">string</span>&gt;</div></pre></td></tr></table></figure>
<ul>
<li>随意创建一个文件，系统会默认给我们创建一些代码：</li>
<li>这里的<code>R.java</code>文件是在代码编译的时候创建的:</li>
</ul>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">QuizActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line">		</div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="keyword">protected</span> void onCreate(<span class="type">Bundle</span> savedInstanceState) &#123;</div><div class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">    setContentView(<span class="type">R</span>.layout.activity_quiz);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><code>AppCompatActivity</code>是<code>Activity</code>的子类</li>
<li><code>activity</code>创建完后，需要获取自己的界面：</li>
</ul>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">public</span> <span class="selector-tag">void</span> <span class="selector-tag">setContentView</span>(<span class="variable">@LayoutRes</span> int layoutResID) &#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>这里的<code>layoutResID</code>就是要在资源中来寻找相应的资源。资源文件需要从<code>app/res</code>目录下寻找，和<code>TextView</code>中获取字符串的方法是一样的，需要去<code>app/res/values</code>中的<code>strings.xml</code>中去寻找：</li>
</ul>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">public</span> <span class="selector-tag">final</span> <span class="selector-tag">void</span> <span class="selector-tag">setText</span>(<span class="variable">@StringRes</span> int resid) &#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="1-3-按钮的点击："><a href="#1-3-按钮的点击：" class="headerlink" title="1.3 按钮的点击："></a>1.3 按钮的点击：</h4><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">mNextButton = (Button) findViewById(R.id.next_button);</div><div class="line">     mNextButton.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</div><div class="line">         <span class="meta">@Override</span></div><div class="line">         <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">          </div><div class="line">         &#125;</div><div class="line">     &#125;);</div></pre></td></tr></table></figure>
<h4 id="1-4-Toast的提示信息："><a href="#1-4-Toast的提示信息：" class="headerlink" title="1.4 Toast的提示信息："></a>1.4 Toast的提示信息：</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">Toast</span><span class="selector-class">.makeText</span>(<span class="selector-tag">CurrentActivity</span><span class="selector-class">.this</span>, <span class="selector-tag">R</span><span class="selector-class">.string</span><span class="selector-class">.xxx</span>, <span class="selector-tag">Toast</span><span class="selector-class">.LENGTH_SHORT</span>)<span class="selector-class">.show</span>();</div></pre></td></tr></table></figure>
<h4 id="1-5-生命周期"><a href="#1-5-生命周期" class="headerlink" title="1.5 生命周期"></a>1.5 生命周期</h4><ol>
<li>不存在 -&gt;(onCreate)-&gt; 停止（不可见）-&gt;(onStart)-&gt;暂停（可见）-&gt; (onResume) 运行（可见 &amp; 在前台）</li>
<li>运行（可见 &amp; 在前台）-&gt;(onPause)-&gt; 暂停（可见 -&gt;(onStop)-&gt; 停止（不可见 -&gt;(onDestory)-&gt; 不存在</li>
</ol>
<ul>
<li><p>在创建了Activity之后，并且此实例出现在屏幕之前会调用<code>onCreate</code>的方法</p>
</li>
<li><p>转屏幕的时候，生命周期的改变：</p>
</li>
</ul>
<ol>
<li>当屏幕发生转动的时候，Activity的生命周期会从新再走一遍，也就是 上面的会先按照 2 -&gt; 1,每次转屏都会这样。</li>
</ol>
<ul>
<li>想要在转屏的时候，保存数据，可以调用下面<code>onSaveInstanceState</code>的方法来保存数据，下次在需要的时候，可以获取数据：</li>
</ul>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">void</span> <span class="title">onSaveInstanceState</span><span class="params">(Bundle outState)</span> </span>&#123;</div><div class="line">     <span class="keyword">super</span>.onSaveInstanceState(outState);</div><div class="line">     outState.putInt(KEY_INDEX, mCurrentIndex);</div><div class="line">&#125;</div><div class="line">   </div><div class="line">   </div><div class="line">  <span class="meta">@Override</span></div><div class="line">   <span class="keyword">protected</span> <span class="function"><span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">       <span class="keyword">super</span>.onCreate(savedInstanceState); </div><div class="line">   	   <span class="keyword">if</span> (savedInstanceState != <span class="keyword">null</span>) &#123;</div><div class="line">           mCurrentIndex = savedInstanceState.getInt(KEY_INDEX);</div><div class="line">       &#125;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<ul>
<li>但是转屏并且保存数据的生命周期方法的调用顺序为：</li>
</ul>
<ol>
<li><code>onPause()</code> -&gt; <code>onSaveInstanceState()</code> -&gt; <code>onStop()</code> -&gt; <code>onDestory()</code></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;学习Android-最近正好有时间，可以系统的看看Android的系统开发，记录下学习的笔记，供今后参考。&quot;&gt;&lt;a href=&quot;#学习Android-最近正好有时间，可以系统的看看Android的系统开发，记录下学习的笔记，供今后参考。&quot; class=&quot;headerlink&quot; title=&quot;学习Android, 最近正好有时间，可以系统的看看Android的系统开发，记录下学习的笔记，供今后参考。&quot;&gt;&lt;/a&gt;学习Android, 最近正好有时间，可以系统的看看Android的系统开发，记录下学习的笔记，供今后参考。&lt;/h3&gt;&lt;h4 id=&quot;1-1-基础环境：&quot;&gt;&lt;a href=&quot;#1-1-基础环境：&quot; class=&quot;headerlink&quot; title=&quot;1.1 基础环境：&quot;&gt;&lt;/a&gt;1.1 基础环境：&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;使用的IDE为：Android Studio.&lt;/li&gt;
&lt;li&gt;SDK 最低的版本为：Android 4.1.&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;LinearLayout&lt;/code&gt;是布局组件，可以从继承关系上看出关系, 继承自View的子类&lt;code&gt;ViewGroup&lt;/code&gt;，并且&lt;code&gt;FrameLayout&lt;/code&gt;,&lt;code&gt;TableLayout&lt;/code&gt;,&lt;code&gt;RelativeLayout&lt;/code&gt;他们都是继承自&lt;code&gt;ViewGroup&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight scala&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 继承关系&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;public &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;LinearLayout&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ViewGroup&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;public &lt;span class=&quot;keyword&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ViewGroup&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ViewParent&lt;/span&gt;, &lt;span class=&quot;title&quot;&gt;ViewManager&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="日志" scheme="http://www.ghcoder.com/categories/%E6%97%A5%E5%BF%97/"/>
    
    
      <category term="Android" scheme="http://www.ghcoder.com/tags/Android/"/>
    
  </entry>
  
</feed>
